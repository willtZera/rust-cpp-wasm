// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: txn.proto

#include "txn.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AuthorizedCurrencyEquiv_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BaseTXN_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BurnSBTTXN_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ByteMultiplier_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CoinDenomination_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CoinTXN_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Compliance_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ComplianceAssign_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ComplianceTXN_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractFees_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ContractUpdateTXN_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CurrencyEquiv_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DelegateContract_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DelegateFees_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DelegateVote_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DelegatedVotingTXN_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExpenseRatio_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExpenseRatioResult_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExpenseRatioTXN_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FastQuorumTXN_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FoundationTXN_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Governance_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GovernanceAuth_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GovernanceProposal_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GovernanceTXN_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GovernanceVote_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputTransfers_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_InstrumentContract_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ItemContractFees_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ItemizedMintTXN_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyValuePair_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MintTXN_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiKey_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MultiPatterns_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NFTTXN_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_NewCoinTXN_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OutputTransfers_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PreMintWallet_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProposalResult_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PublicKey_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QuashResult_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QuashTXN_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RestrictedKey_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RevokeTXN_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SelfCurrencyEquiv_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SmartContractExecuteTXN_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SmartContractParameter_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SmartContractTXN_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Stage_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TXNStatusFees_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Token_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TokenCompliance_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TokenFees_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transfer_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransferAuthentication_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Validator_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ValidatorHeartbeat_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ValidatorRegistration_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VotePair_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Votes_txn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_txn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Wallets_txn_2eproto;
namespace zera_txn {
class DelegateContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DelegateContract> _instance;
} _DelegateContract_default_instance_;
class DelegatedVotingTXNDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DelegatedVotingTXN> _instance;
} _DelegatedVotingTXN_default_instance_;
class DelegateVoteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DelegateVote> _instance;
} _DelegateVote_default_instance_;
class DelegateFeesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DelegateFees> _instance;
} _DelegateFees_default_instance_;
class ComplianceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Compliance> _instance;
} _Compliance_default_instance_;
class TokenComplianceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TokenCompliance> _instance;
} _TokenCompliance_default_instance_;
class ExpenseRatioDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExpenseRatio> _instance;
} _ExpenseRatio_default_instance_;
class KeyValuePairDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyValuePair> _instance;
} _KeyValuePair_default_instance_;
class ByteMultiplierDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ByteMultiplier> _instance;
} _ByteMultiplier_default_instance_;
class FoundationTXNDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FoundationTXN> _instance;
} _FoundationTXN_default_instance_;
class RevokeTXNDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RevokeTXN> _instance;
} _RevokeTXN_default_instance_;
class FastQuorumTXNDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FastQuorumTXN> _instance;
} _FastQuorumTXN_default_instance_;
class GovernanceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Governance> _instance;
} _Governance_default_instance_;
class StageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Stage> _instance;
} _Stage_default_instance_;
class CoinDenominationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CoinDenomination> _instance;
} _CoinDenomination_default_instance_;
class ContractFeesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractFees> _instance;
} _ContractFees_default_instance_;
class ItemContractFeesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ItemContractFees> _instance;
} _ItemContractFees_default_instance_;
class RestrictedKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RestrictedKey> _instance;
} _RestrictedKey_default_instance_;
class ExpenseRatioTXNDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExpenseRatioTXN> _instance;
} _ExpenseRatioTXN_default_instance_;
class PreMintWalletDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PreMintWallet> _instance;
} _PreMintWallet_default_instance_;
class TransferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transfer> _instance;
} _Transfer_default_instance_;
class BurnSBTTXNDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BurnSBTTXN> _instance;
} _BurnSBTTXN_default_instance_;
class BaseTXNDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BaseTXN> _instance;
} _BaseTXN_default_instance_;
class PublicKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublicKey> _instance;
} _PublicKey_default_instance_;
class GovernanceAuthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GovernanceAuth> _instance;
} _GovernanceAuth_default_instance_;
class MultiKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiKey> _instance;
} _MultiKey_default_instance_;
class MultiPatternsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiPatterns> _instance;
} _MultiPatterns_default_instance_;
class SelfCurrencyEquivDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SelfCurrencyEquiv> _instance;
} _SelfCurrencyEquiv_default_instance_;
class AuthorizedCurrencyEquivDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthorizedCurrencyEquiv> _instance;
} _AuthorizedCurrencyEquiv_default_instance_;
class CurrencyEquivDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CurrencyEquiv> _instance;
} _CurrencyEquiv_default_instance_;
class ExpenseRatioResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExpenseRatioResult> _instance;
} _ExpenseRatioResult_default_instance_;
class ComplianceAssignDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ComplianceAssign> _instance;
} _ComplianceAssign_default_instance_;
class ComplianceTXNDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ComplianceTXN> _instance;
} _ComplianceTXN_default_instance_;
class WalletsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Wallets> _instance;
} _Wallets_default_instance_;
class QuashTXNDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuashTXN> _instance;
} _QuashTXN_default_instance_;
class QuashResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuashResult> _instance;
} _QuashResult_default_instance_;
class CoinTXNDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CoinTXN> _instance;
} _CoinTXN_default_instance_;
class NewCoinTXNDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewCoinTXN> _instance;
} _NewCoinTXN_default_instance_;
class TransferAuthenticationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferAuthentication> _instance;
} _TransferAuthentication_default_instance_;
class InputTransfersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputTransfers> _instance;
} _InputTransfers_default_instance_;
class OutputTransfersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OutputTransfers> _instance;
} _OutputTransfers_default_instance_;
class MintTXNDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MintTXN> _instance;
} _MintTXN_default_instance_;
class NFTTXNDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NFTTXN> _instance;
} _NFTTXN_default_instance_;
class ItemizedMintTXNDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ItemizedMintTXN> _instance;
} _ItemizedMintTXN_default_instance_;
class ContractUpdateTXNDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractUpdateTXN> _instance;
} _ContractUpdateTXN_default_instance_;
class InstrumentContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstrumentContract> _instance;
} _InstrumentContract_default_instance_;
class GovernanceVoteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GovernanceVote> _instance;
} _GovernanceVote_default_instance_;
class GovernanceProposalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GovernanceProposal> _instance;
} _GovernanceProposal_default_instance_;
class GovernanceTXNDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GovernanceTXN> _instance;
} _GovernanceTXN_default_instance_;
class SmartContractTXNDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SmartContractTXN> _instance;
} _SmartContractTXN_default_instance_;
class SmartContractExecuteTXNDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SmartContractExecuteTXN> _instance;
} _SmartContractExecuteTXN_default_instance_;
class ValidatorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Validator> _instance;
} _Validator_default_instance_;
class ValidatorRegistrationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidatorRegistration> _instance;
} _ValidatorRegistration_default_instance_;
class ValidatorHeartbeatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidatorHeartbeat> _instance;
} _ValidatorHeartbeat_default_instance_;
class SmartContractParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SmartContractParameter> _instance;
} _SmartContractParameter_default_instance_;
class VotesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Votes> _instance;
} _Votes_default_instance_;
class VotePairDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VotePair> _instance;
} _VotePair_default_instance_;
class ProposalResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProposalResult> _instance;
} _ProposalResult_default_instance_;
class TXNSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TXNS> _instance;
} _TXNS_default_instance_;
class TokenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Token> _instance;
} _Token_default_instance_;
class TokenFeesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TokenFees> _instance;
} _TokenFees_default_instance_;
class TXNStatusFeesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TXNStatusFees> _instance;
} _TXNStatusFees_default_instance_;
class TXNWrapperDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TXNWrapper> _instance;
  const ::zera_txn::CoinTXN* coin_txn_;
  const ::zera_txn::MintTXN* mint_txn_;
  const ::zera_txn::ItemizedMintTXN* item_mint_txn_;
  const ::zera_txn::InstrumentContract* contract_txn_;
  const ::zera_txn::GovernanceVote* governance_vote_;
  const ::zera_txn::GovernanceProposal* governance_proposal_;
  const ::zera_txn::SmartContractTXN* smart_contract_;
  const ::zera_txn::SmartContractExecuteTXN* smart_contract_execute_;
  const ::zera_txn::SelfCurrencyEquiv* self_cur_equivs_;
  const ::zera_txn::AuthorizedCurrencyEquiv* auth_cur_equivs_;
  const ::zera_txn::ExpenseRatioTXN* expense_ratios_;
  const ::zera_txn::NFTTXN* nft_txn_;
  const ::zera_txn::ContractUpdateTXN* contract_update_txn_;
  const ::zera_txn::ValidatorRegistration* validator_registration_txn_;
  const ::zera_txn::ValidatorHeartbeat* validator_heartbeat_txn_;
  const ::zera_txn::FoundationTXN* foundation_txn_;
  const ::zera_txn::DelegatedVotingTXN* delegated_voting_txn_;
  const ::zera_txn::QuashTXN* quash_txn_;
  const ::zera_txn::FastQuorumTXN* fast_quorum_txn_;
  const ::zera_txn::RevokeTXN* revoke_txn_;
  const ::zera_txn::ComplianceTXN* compliance_txn_;
  bool proposal_result_txn_;
  const ::zera_txn::BurnSBTTXN* burn_sbt_txn_;
  const ::zera_txn::NewCoinTXN* new_coin_txn_;
} _TXNWrapper_default_instance_;
}  // namespace zera_txn
static void InitDefaultsscc_info_AuthorizedCurrencyEquiv_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_AuthorizedCurrencyEquiv_default_instance_;
    new (ptr) ::zera_txn::AuthorizedCurrencyEquiv();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::AuthorizedCurrencyEquiv::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AuthorizedCurrencyEquiv_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AuthorizedCurrencyEquiv_txn_2eproto}, {
      &scc_info_BaseTXN_txn_2eproto.base,
      &scc_info_CurrencyEquiv_txn_2eproto.base,}};

static void InitDefaultsscc_info_BaseTXN_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_BaseTXN_default_instance_;
    new (ptr) ::zera_txn::BaseTXN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::BaseTXN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BaseTXN_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BaseTXN_txn_2eproto}, {
      &scc_info_PublicKey_txn_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_BurnSBTTXN_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_BurnSBTTXN_default_instance_;
    new (ptr) ::zera_txn::BurnSBTTXN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::BurnSBTTXN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BurnSBTTXN_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BurnSBTTXN_txn_2eproto}, {
      &scc_info_BaseTXN_txn_2eproto.base,}};

static void InitDefaultsscc_info_ByteMultiplier_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_ByteMultiplier_default_instance_;
    new (ptr) ::zera_txn::ByteMultiplier();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::ByteMultiplier::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ByteMultiplier_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ByteMultiplier_txn_2eproto}, {}};

static void InitDefaultsscc_info_CoinDenomination_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_CoinDenomination_default_instance_;
    new (ptr) ::zera_txn::CoinDenomination();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::CoinDenomination::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CoinDenomination_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CoinDenomination_txn_2eproto}, {}};

static void InitDefaultsscc_info_CoinTXN_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_CoinTXN_default_instance_;
    new (ptr) ::zera_txn::CoinTXN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::CoinTXN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CoinTXN_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CoinTXN_txn_2eproto}, {
      &scc_info_BaseTXN_txn_2eproto.base,
      &scc_info_Transfer_txn_2eproto.base,}};

static void InitDefaultsscc_info_Compliance_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_Compliance_default_instance_;
    new (ptr) ::zera_txn::Compliance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::Compliance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Compliance_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Compliance_txn_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_ComplianceAssign_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_ComplianceAssign_default_instance_;
    new (ptr) ::zera_txn::ComplianceAssign();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::ComplianceAssign::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ComplianceAssign_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ComplianceAssign_txn_2eproto}, {}};

static void InitDefaultsscc_info_ComplianceTXN_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_ComplianceTXN_default_instance_;
    new (ptr) ::zera_txn::ComplianceTXN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::ComplianceTXN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ComplianceTXN_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ComplianceTXN_txn_2eproto}, {
      &scc_info_BaseTXN_txn_2eproto.base,
      &scc_info_ComplianceAssign_txn_2eproto.base,}};

static void InitDefaultsscc_info_ContractFees_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_ContractFees_default_instance_;
    new (ptr) ::zera_txn::ContractFees();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::ContractFees::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractFees_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContractFees_txn_2eproto}, {}};

static void InitDefaultsscc_info_ContractUpdateTXN_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_ContractUpdateTXN_default_instance_;
    new (ptr) ::zera_txn::ContractUpdateTXN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::ContractUpdateTXN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ContractUpdateTXN_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_ContractUpdateTXN_txn_2eproto}, {
      &scc_info_BaseTXN_txn_2eproto.base,
      &scc_info_Governance_txn_2eproto.base,
      &scc_info_RestrictedKey_txn_2eproto.base,
      &scc_info_ContractFees_txn_2eproto.base,
      &scc_info_KeyValuePair_txn_2eproto.base,
      &scc_info_ExpenseRatio_txn_2eproto.base,}};

static void InitDefaultsscc_info_CurrencyEquiv_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_CurrencyEquiv_default_instance_;
    new (ptr) ::zera_txn::CurrencyEquiv();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::CurrencyEquiv::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CurrencyEquiv_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CurrencyEquiv_txn_2eproto}, {}};

static void InitDefaultsscc_info_DelegateContract_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_DelegateContract_default_instance_;
    new (ptr) ::zera_txn::DelegateContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::DelegateContract::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DelegateContract_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DelegateContract_txn_2eproto}, {}};

static void InitDefaultsscc_info_DelegateFees_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_DelegateFees_default_instance_;
    new (ptr) ::zera_txn::DelegateFees();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::DelegateFees::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DelegateFees_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DelegateFees_txn_2eproto}, {}};

static void InitDefaultsscc_info_DelegateVote_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_DelegateVote_default_instance_;
    new (ptr) ::zera_txn::DelegateVote();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::DelegateVote::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DelegateVote_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DelegateVote_txn_2eproto}, {
      &scc_info_DelegateContract_txn_2eproto.base,}};

static void InitDefaultsscc_info_DelegatedVotingTXN_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_DelegatedVotingTXN_default_instance_;
    new (ptr) ::zera_txn::DelegatedVotingTXN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::DelegatedVotingTXN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DelegatedVotingTXN_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_DelegatedVotingTXN_txn_2eproto}, {
      &scc_info_BaseTXN_txn_2eproto.base,
      &scc_info_DelegateVote_txn_2eproto.base,
      &scc_info_DelegateFees_txn_2eproto.base,}};

static void InitDefaultsscc_info_ExpenseRatio_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_ExpenseRatio_default_instance_;
    new (ptr) ::zera_txn::ExpenseRatio();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::ExpenseRatio::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExpenseRatio_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExpenseRatio_txn_2eproto}, {}};

static void InitDefaultsscc_info_ExpenseRatioResult_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_ExpenseRatioResult_default_instance_;
    new (ptr) ::zera_txn::ExpenseRatioResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::ExpenseRatioResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExpenseRatioResult_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ExpenseRatioResult_txn_2eproto}, {
      &scc_info_Wallets_txn_2eproto.base,}};

static void InitDefaultsscc_info_ExpenseRatioTXN_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_ExpenseRatioTXN_default_instance_;
    new (ptr) ::zera_txn::ExpenseRatioTXN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::ExpenseRatioTXN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExpenseRatioTXN_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ExpenseRatioTXN_txn_2eproto}, {
      &scc_info_BaseTXN_txn_2eproto.base,}};

static void InitDefaultsscc_info_FastQuorumTXN_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_FastQuorumTXN_default_instance_;
    new (ptr) ::zera_txn::FastQuorumTXN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::FastQuorumTXN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FastQuorumTXN_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FastQuorumTXN_txn_2eproto}, {
      &scc_info_BaseTXN_txn_2eproto.base,}};

static void InitDefaultsscc_info_FoundationTXN_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_FoundationTXN_default_instance_;
    new (ptr) ::zera_txn::FoundationTXN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::FoundationTXN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FoundationTXN_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FoundationTXN_txn_2eproto}, {
      &scc_info_BaseTXN_txn_2eproto.base,
      &scc_info_ByteMultiplier_txn_2eproto.base,}};

static void InitDefaultsscc_info_Governance_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_Governance_default_instance_;
    new (ptr) ::zera_txn::Governance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::Governance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Governance_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Governance_txn_2eproto}, {
      &scc_info_Stage_txn_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_GovernanceAuth_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_GovernanceAuth_default_instance_;
    new (ptr) ::zera_txn::GovernanceAuth();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::GovernanceAuth::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GovernanceAuth_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GovernanceAuth_txn_2eproto}, {}};

static void InitDefaultsscc_info_GovernanceProposal_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_GovernanceProposal_default_instance_;
    new (ptr) ::zera_txn::GovernanceProposal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::GovernanceProposal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GovernanceProposal_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GovernanceProposal_txn_2eproto}, {
      &scc_info_BaseTXN_txn_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_GovernanceTXN_txn_2eproto.base,}};

static void InitDefaultsscc_info_GovernanceTXN_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_GovernanceTXN_default_instance_;
    new (ptr) ::zera_txn::GovernanceTXN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::GovernanceTXN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GovernanceTXN_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GovernanceTXN_txn_2eproto}, {}};

static void InitDefaultsscc_info_GovernanceVote_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_GovernanceVote_default_instance_;
    new (ptr) ::zera_txn::GovernanceVote();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::GovernanceVote::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GovernanceVote_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GovernanceVote_txn_2eproto}, {
      &scc_info_BaseTXN_txn_2eproto.base,}};

static void InitDefaultsscc_info_InputTransfers_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_InputTransfers_default_instance_;
    new (ptr) ::zera_txn::InputTransfers();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::InputTransfers::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputTransfers_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InputTransfers_txn_2eproto}, {}};

static void InitDefaultsscc_info_InstrumentContract_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_InstrumentContract_default_instance_;
    new (ptr) ::zera_txn::InstrumentContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::InstrumentContract::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_InstrumentContract_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_InstrumentContract_txn_2eproto}, {
      &scc_info_BaseTXN_txn_2eproto.base,
      &scc_info_Governance_txn_2eproto.base,
      &scc_info_RestrictedKey_txn_2eproto.base,
      &scc_info_ContractFees_txn_2eproto.base,
      &scc_info_PreMintWallet_txn_2eproto.base,
      &scc_info_CoinDenomination_txn_2eproto.base,
      &scc_info_KeyValuePair_txn_2eproto.base,
      &scc_info_ExpenseRatio_txn_2eproto.base,
      &scc_info_TokenCompliance_txn_2eproto.base,}};

static void InitDefaultsscc_info_ItemContractFees_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_ItemContractFees_default_instance_;
    new (ptr) ::zera_txn::ItemContractFees();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::ItemContractFees::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ItemContractFees_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ItemContractFees_txn_2eproto}, {}};

static void InitDefaultsscc_info_ItemizedMintTXN_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_ItemizedMintTXN_default_instance_;
    new (ptr) ::zera_txn::ItemizedMintTXN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::ItemizedMintTXN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ItemizedMintTXN_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ItemizedMintTXN_txn_2eproto}, {
      &scc_info_BaseTXN_txn_2eproto.base,
      &scc_info_KeyValuePair_txn_2eproto.base,
      &scc_info_ItemContractFees_txn_2eproto.base,}};

static void InitDefaultsscc_info_KeyValuePair_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_KeyValuePair_default_instance_;
    new (ptr) ::zera_txn::KeyValuePair();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::KeyValuePair::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyValuePair_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KeyValuePair_txn_2eproto}, {}};

static void InitDefaultsscc_info_MintTXN_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_MintTXN_default_instance_;
    new (ptr) ::zera_txn::MintTXN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::MintTXN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MintTXN_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MintTXN_txn_2eproto}, {
      &scc_info_BaseTXN_txn_2eproto.base,}};

static void InitDefaultsscc_info_MultiKey_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_MultiKey_default_instance_;
    new (ptr) ::zera_txn::MultiKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::MultiKey::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiKey_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MultiKey_txn_2eproto}, {
      &scc_info_MultiPatterns_txn_2eproto.base,}};

static void InitDefaultsscc_info_MultiPatterns_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_MultiPatterns_default_instance_;
    new (ptr) ::zera_txn::MultiPatterns();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::MultiPatterns::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MultiPatterns_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MultiPatterns_txn_2eproto}, {}};

static void InitDefaultsscc_info_NFTTXN_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_NFTTXN_default_instance_;
    new (ptr) ::zera_txn::NFTTXN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::NFTTXN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NFTTXN_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NFTTXN_txn_2eproto}, {
      &scc_info_BaseTXN_txn_2eproto.base,}};

static void InitDefaultsscc_info_NewCoinTXN_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_NewCoinTXN_default_instance_;
    new (ptr) ::zera_txn::NewCoinTXN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::NewCoinTXN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_NewCoinTXN_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_NewCoinTXN_txn_2eproto}, {
      &scc_info_BaseTXN_txn_2eproto.base,
      &scc_info_TransferAuthentication_txn_2eproto.base,
      &scc_info_InputTransfers_txn_2eproto.base,
      &scc_info_OutputTransfers_txn_2eproto.base,}};

static void InitDefaultsscc_info_OutputTransfers_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_OutputTransfers_default_instance_;
    new (ptr) ::zera_txn::OutputTransfers();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::OutputTransfers::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OutputTransfers_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OutputTransfers_txn_2eproto}, {}};

static void InitDefaultsscc_info_PreMintWallet_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_PreMintWallet_default_instance_;
    new (ptr) ::zera_txn::PreMintWallet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::PreMintWallet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PreMintWallet_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PreMintWallet_txn_2eproto}, {}};

static void InitDefaultsscc_info_ProposalResult_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_ProposalResult_default_instance_;
    new (ptr) ::zera_txn::ProposalResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::ProposalResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProposalResult_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ProposalResult_txn_2eproto}, {
      &scc_info_BaseTXN_txn_2eproto.base,
      &scc_info_Votes_txn_2eproto.base,}};

static void InitDefaultsscc_info_PublicKey_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_PublicKey_default_instance_;
    new (ptr) ::zera_txn::PublicKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::PublicKey::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PublicKey_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PublicKey_txn_2eproto}, {
      &scc_info_MultiKey_txn_2eproto.base,
      &scc_info_GovernanceAuth_txn_2eproto.base,}};

static void InitDefaultsscc_info_QuashResult_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_QuashResult_default_instance_;
    new (ptr) ::zera_txn::QuashResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::QuashResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QuashResult_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QuashResult_txn_2eproto}, {
      &scc_info_PublicKey_txn_2eproto.base,}};

static void InitDefaultsscc_info_QuashTXN_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_QuashTXN_default_instance_;
    new (ptr) ::zera_txn::QuashTXN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::QuashTXN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QuashTXN_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QuashTXN_txn_2eproto}, {
      &scc_info_BaseTXN_txn_2eproto.base,}};

static void InitDefaultsscc_info_RestrictedKey_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_RestrictedKey_default_instance_;
    new (ptr) ::zera_txn::RestrictedKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::RestrictedKey::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RestrictedKey_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RestrictedKey_txn_2eproto}, {
      &scc_info_PublicKey_txn_2eproto.base,}};

static void InitDefaultsscc_info_RevokeTXN_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_RevokeTXN_default_instance_;
    new (ptr) ::zera_txn::RevokeTXN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::RevokeTXN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RevokeTXN_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RevokeTXN_txn_2eproto}, {
      &scc_info_BaseTXN_txn_2eproto.base,}};

static void InitDefaultsscc_info_SelfCurrencyEquiv_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_SelfCurrencyEquiv_default_instance_;
    new (ptr) ::zera_txn::SelfCurrencyEquiv();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::SelfCurrencyEquiv::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SelfCurrencyEquiv_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SelfCurrencyEquiv_txn_2eproto}, {
      &scc_info_BaseTXN_txn_2eproto.base,
      &scc_info_CurrencyEquiv_txn_2eproto.base,}};

static void InitDefaultsscc_info_SmartContractExecuteTXN_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_SmartContractExecuteTXN_default_instance_;
    new (ptr) ::zera_txn::SmartContractExecuteTXN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::SmartContractExecuteTXN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SmartContractExecuteTXN_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SmartContractExecuteTXN_txn_2eproto}, {
      &scc_info_BaseTXN_txn_2eproto.base,
      &scc_info_SmartContractParameter_txn_2eproto.base,}};

static void InitDefaultsscc_info_SmartContractParameter_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_SmartContractParameter_default_instance_;
    new (ptr) ::zera_txn::SmartContractParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::SmartContractParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SmartContractParameter_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SmartContractParameter_txn_2eproto}, {}};

static void InitDefaultsscc_info_SmartContractTXN_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_SmartContractTXN_default_instance_;
    new (ptr) ::zera_txn::SmartContractTXN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::SmartContractTXN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SmartContractTXN_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SmartContractTXN_txn_2eproto}, {
      &scc_info_BaseTXN_txn_2eproto.base,
      &scc_info_SmartContractParameter_txn_2eproto.base,}};

static void InitDefaultsscc_info_Stage_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_Stage_default_instance_;
    new (ptr) ::zera_txn::Stage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::Stage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Stage_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Stage_txn_2eproto}, {}};

static void InitDefaultsscc_info_TXNS_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_TXNS_default_instance_;
    new (ptr) ::zera_txn::TXNS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::TXNS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<28> scc_info_TXNS_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 28, 0, InitDefaultsscc_info_TXNS_txn_2eproto}, {
      &scc_info_CoinTXN_txn_2eproto.base,
      &scc_info_MintTXN_txn_2eproto.base,
      &scc_info_ItemizedMintTXN_txn_2eproto.base,
      &scc_info_InstrumentContract_txn_2eproto.base,
      &scc_info_GovernanceVote_txn_2eproto.base,
      &scc_info_GovernanceProposal_txn_2eproto.base,
      &scc_info_SmartContractTXN_txn_2eproto.base,
      &scc_info_SmartContractExecuteTXN_txn_2eproto.base,
      &scc_info_SelfCurrencyEquiv_txn_2eproto.base,
      &scc_info_AuthorizedCurrencyEquiv_txn_2eproto.base,
      &scc_info_ExpenseRatioTXN_txn_2eproto.base,
      &scc_info_TXNStatusFees_txn_2eproto.base,
      &scc_info_TokenFees_txn_2eproto.base,
      &scc_info_NFTTXN_txn_2eproto.base,
      &scc_info_ContractUpdateTXN_txn_2eproto.base,
      &scc_info_ValidatorRegistration_txn_2eproto.base,
      &scc_info_ValidatorHeartbeat_txn_2eproto.base,
      &scc_info_ProposalResult_txn_2eproto.base,
      &scc_info_ExpenseRatioResult_txn_2eproto.base,
      &scc_info_FoundationTXN_txn_2eproto.base,
      &scc_info_DelegatedVotingTXN_txn_2eproto.base,
      &scc_info_QuashTXN_txn_2eproto.base,
      &scc_info_FastQuorumTXN_txn_2eproto.base,
      &scc_info_QuashResult_txn_2eproto.base,
      &scc_info_RevokeTXN_txn_2eproto.base,
      &scc_info_ComplianceTXN_txn_2eproto.base,
      &scc_info_BurnSBTTXN_txn_2eproto.base,
      &scc_info_NewCoinTXN_txn_2eproto.base,}};

static void InitDefaultsscc_info_TXNStatusFees_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_TXNStatusFees_default_instance_;
    new (ptr) ::zera_txn::TXNStatusFees();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::TXNStatusFees::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TXNStatusFees_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TXNStatusFees_txn_2eproto}, {}};

static void InitDefaultsscc_info_TXNWrapper_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_TXNWrapper_default_instance_;
    new (ptr) ::zera_txn::TXNWrapper();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::TXNWrapper::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<23> scc_info_TXNWrapper_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 23, 0, InitDefaultsscc_info_TXNWrapper_txn_2eproto}, {
      &scc_info_CoinTXN_txn_2eproto.base,
      &scc_info_MintTXN_txn_2eproto.base,
      &scc_info_ItemizedMintTXN_txn_2eproto.base,
      &scc_info_InstrumentContract_txn_2eproto.base,
      &scc_info_GovernanceVote_txn_2eproto.base,
      &scc_info_GovernanceProposal_txn_2eproto.base,
      &scc_info_SmartContractTXN_txn_2eproto.base,
      &scc_info_SmartContractExecuteTXN_txn_2eproto.base,
      &scc_info_SelfCurrencyEquiv_txn_2eproto.base,
      &scc_info_AuthorizedCurrencyEquiv_txn_2eproto.base,
      &scc_info_ExpenseRatioTXN_txn_2eproto.base,
      &scc_info_NFTTXN_txn_2eproto.base,
      &scc_info_ContractUpdateTXN_txn_2eproto.base,
      &scc_info_ValidatorRegistration_txn_2eproto.base,
      &scc_info_ValidatorHeartbeat_txn_2eproto.base,
      &scc_info_FoundationTXN_txn_2eproto.base,
      &scc_info_DelegatedVotingTXN_txn_2eproto.base,
      &scc_info_QuashTXN_txn_2eproto.base,
      &scc_info_FastQuorumTXN_txn_2eproto.base,
      &scc_info_RevokeTXN_txn_2eproto.base,
      &scc_info_ComplianceTXN_txn_2eproto.base,
      &scc_info_BurnSBTTXN_txn_2eproto.base,
      &scc_info_NewCoinTXN_txn_2eproto.base,}};

static void InitDefaultsscc_info_Token_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_Token_default_instance_;
    new (ptr) ::zera_txn::Token();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::Token::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Token_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Token_txn_2eproto}, {}};

static void InitDefaultsscc_info_TokenCompliance_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_TokenCompliance_default_instance_;
    new (ptr) ::zera_txn::TokenCompliance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::TokenCompliance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TokenCompliance_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TokenCompliance_txn_2eproto}, {
      &scc_info_Compliance_txn_2eproto.base,}};

static void InitDefaultsscc_info_TokenFees_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_TokenFees_default_instance_;
    new (ptr) ::zera_txn::TokenFees();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::TokenFees::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TokenFees_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TokenFees_txn_2eproto}, {
      &scc_info_Token_txn_2eproto.base,}};

static void InitDefaultsscc_info_Transfer_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_Transfer_default_instance_;
    new (ptr) ::zera_txn::Transfer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::Transfer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transfer_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Transfer_txn_2eproto}, {}};

static void InitDefaultsscc_info_TransferAuthentication_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_TransferAuthentication_default_instance_;
    new (ptr) ::zera_txn::TransferAuthentication();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::TransferAuthentication::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransferAuthentication_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransferAuthentication_txn_2eproto}, {
      &scc_info_PublicKey_txn_2eproto.base,}};

static void InitDefaultsscc_info_Validator_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_Validator_default_instance_;
    new (ptr) ::zera_txn::Validator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::Validator::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Validator_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Validator_txn_2eproto}, {
      &scc_info_PublicKey_txn_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_ValidatorHeartbeat_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_ValidatorHeartbeat_default_instance_;
    new (ptr) ::zera_txn::ValidatorHeartbeat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::ValidatorHeartbeat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ValidatorHeartbeat_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ValidatorHeartbeat_txn_2eproto}, {
      &scc_info_BaseTXN_txn_2eproto.base,}};

static void InitDefaultsscc_info_ValidatorRegistration_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_ValidatorRegistration_default_instance_;
    new (ptr) ::zera_txn::ValidatorRegistration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::ValidatorRegistration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ValidatorRegistration_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ValidatorRegistration_txn_2eproto}, {
      &scc_info_BaseTXN_txn_2eproto.base,
      &scc_info_Validator_txn_2eproto.base,}};

static void InitDefaultsscc_info_VotePair_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_VotePair_default_instance_;
    new (ptr) ::zera_txn::VotePair();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::VotePair::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VotePair_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VotePair_txn_2eproto}, {}};

static void InitDefaultsscc_info_Votes_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_Votes_default_instance_;
    new (ptr) ::zera_txn::Votes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::Votes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Votes_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Votes_txn_2eproto}, {
      &scc_info_VotePair_txn_2eproto.base,}};

static void InitDefaultsscc_info_Wallets_txn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zera_txn::_Wallets_default_instance_;
    new (ptr) ::zera_txn::Wallets();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zera_txn::Wallets::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Wallets_txn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Wallets_txn_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_txn_2eproto[63];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_txn_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_txn_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_txn_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::DelegateContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::DelegateContract, priority_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::DelegateContract, contract_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::DelegatedVotingTXN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::DelegatedVotingTXN, base_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::DelegatedVotingTXN, delegate_votes_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::DelegatedVotingTXN, delegate_fees_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::DelegateVote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::DelegateVote, address_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::DelegateVote, contracts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::DelegateFees, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::DelegateFees, contract_id_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::DelegateFees, auth_amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::Compliance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::Compliance, contract_id_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::Compliance, compliance_level_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::Compliance, expiry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::TokenCompliance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::TokenCompliance, compliance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::ExpenseRatio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::ExpenseRatio, day_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ExpenseRatio, month_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ExpenseRatio, percent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::KeyValuePair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::KeyValuePair, key_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::KeyValuePair, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::ByteMultiplier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::ByteMultiplier, txn_type_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ByteMultiplier, multiplier_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::FoundationTXN, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::FoundationTXN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::FoundationTXN, base_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::FoundationTXN, restricted_symbols_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::FoundationTXN, byte_multiplier_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::FoundationTXN, fee_iso4217_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::RevokeTXN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::RevokeTXN, base_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::RevokeTXN, contract_id_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::RevokeTXN, recipient_address_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::RevokeTXN, item_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::FastQuorumTXN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::FastQuorumTXN, base_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::FastQuorumTXN, proposal_id_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::Governance, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::Governance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::Governance, type_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::Governance, regular_quorum_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::Governance, fast_quorum_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::Governance, voting_instrument_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::Governance, threshold_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::Governance, chicken_dinner_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::Governance, allow_multi_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::Governance, voting_period_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::Governance, allowed_proposal_instrument_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::Governance, proposal_period_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::Governance, stage_length_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::Governance, start_timestamp_),
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  1,
  ~0u,
  2,
  ~0u,
  3,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::Stage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::Stage, length_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::Stage, period_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::Stage, break__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::CoinDenomination, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::CoinDenomination, denomination_name_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::CoinDenomination, amount_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ContractFees, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ContractFees, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::ContractFees, fee_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ContractFees, fee_address_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ContractFees, burn_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ContractFees, validator_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ContractFees, allowed_fee_instrument_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ContractFees, contract_fee_type_),
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zera_txn::ItemContractFees, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ItemContractFees, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::ItemContractFees, fee_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ItemContractFees, fee_address_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ItemContractFees, burn_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ItemContractFees, validator_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ItemContractFees, allowed_fee_instrument_),
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::RestrictedKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::RestrictedKey, public_key_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::RestrictedKey, time_delay_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::RestrictedKey, global_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::RestrictedKey, update_contract_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::RestrictedKey, transfer_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::RestrictedKey, quash_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::RestrictedKey, mint_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::RestrictedKey, vote_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::RestrictedKey, propose_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::RestrictedKey, compliance_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::RestrictedKey, expense_ratio_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::RestrictedKey, cur_equiv_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::RestrictedKey, revoke_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::RestrictedKey, key_weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::ExpenseRatioTXN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::ExpenseRatioTXN, base_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ExpenseRatioTXN, contract_id_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ExpenseRatioTXN, addresses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::PreMintWallet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::PreMintWallet, address_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::PreMintWallet, amount_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::Transfer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::Transfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::Transfer, recipient_address_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::Transfer, amount_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::Transfer, contract_id_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::Transfer, contract_fee_amount_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::Transfer, contract_fee_id_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::Transfer, base_fee_amount_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::Transfer, base_fee_id_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::Transfer, memo_),
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  ~0u,
  ~0u,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::BurnSBTTXN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::BurnSBTTXN, base_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::BurnSBTTXN, contract_id_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::BurnSBTTXN, item_id_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::BaseTXN, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::BaseTXN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::BaseTXN, public_key_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::BaseTXN, timestamp_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::BaseTXN, fee_amount_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::BaseTXN, fee_id_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::BaseTXN, signature_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::BaseTXN, hash_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::BaseTXN, memo_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::BaseTXN, safe_send_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::BaseTXN, nonce_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zera_txn::PublicKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::PublicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::PublicKey, single_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::PublicKey, multi_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::PublicKey, sc_wallet_adr_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::PublicKey, governance_auth_),
  ~0u,
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::GovernanceAuth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::GovernanceAuth, auth_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::GovernanceAuth, proposal_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::MultiKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::MultiKey, public_keys_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::MultiKey, signatures_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::MultiKey, multi_patterns_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::MultiKey, hash_tokens_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::MultiPatterns, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::MultiPatterns, class__),
  PROTOBUF_FIELD_OFFSET(::zera_txn::MultiPatterns, required_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::SelfCurrencyEquiv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::SelfCurrencyEquiv, base_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::SelfCurrencyEquiv, cur_equiv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::AuthorizedCurrencyEquiv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::AuthorizedCurrencyEquiv, base_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::AuthorizedCurrencyEquiv, cur_equiv_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::CurrencyEquiv, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::CurrencyEquiv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::CurrencyEquiv, contract_id_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::CurrencyEquiv, rate_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::CurrencyEquiv, authorized_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::CurrencyEquiv, max_stake_),
  ~0u,
  ~0u,
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::ExpenseRatioResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::ExpenseRatioResult, contract_id_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ExpenseRatioResult, wallets_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ExpenseRatioResult, hash_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ExpenseRatioResult, recipient_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::ComplianceAssign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::ComplianceAssign, recipient_address_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ComplianceAssign, compliance_level_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ComplianceAssign, assign_revoke_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::ComplianceTXN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::ComplianceTXN, base_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ComplianceTXN, contract_id_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ComplianceTXN, compliance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::Wallets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::Wallets, address_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::Wallets, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::QuashTXN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::QuashTXN, base_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::QuashTXN, contract_id_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::QuashTXN, txn_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::QuashResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::QuashResult, txn_hash_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::QuashResult, public_keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::CoinTXN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::CoinTXN, base_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::CoinTXN, transfers_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::NewCoinTXN, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::NewCoinTXN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::NewCoinTXN, base_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::NewCoinTXN, contract_id_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::NewCoinTXN, auth_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::NewCoinTXN, input_transfers_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::NewCoinTXN, output_transfers_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::NewCoinTXN, contract_fee_id_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::NewCoinTXN, contract_fee_amount_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::TransferAuthentication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::TransferAuthentication, public_key_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TransferAuthentication, signature_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TransferAuthentication, nonce_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::InputTransfers, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::InputTransfers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::InputTransfers, index_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::InputTransfers, amount_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::InputTransfers, fee_percent_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::InputTransfers, contract_fee_percent_),
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::zera_txn::OutputTransfers, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::OutputTransfers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::OutputTransfers, wallet_address_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::OutputTransfers, amount_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::OutputTransfers, memo_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::MintTXN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::MintTXN, base_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::MintTXN, contract_id_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::MintTXN, amount_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::MintTXN, recipient_address_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::NFTTXN, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::NFTTXN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::NFTTXN, base_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::NFTTXN, contract_id_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::NFTTXN, item_id_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::NFTTXN, recipient_address_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::NFTTXN, contract_fee_amount_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::NFTTXN, contract_fee_id_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zera_txn::ItemizedMintTXN, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ItemizedMintTXN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::ItemizedMintTXN, base_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ItemizedMintTXN, contract_id_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ItemizedMintTXN, item_id_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ItemizedMintTXN, recipient_address_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ItemizedMintTXN, voting_weight_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ItemizedMintTXN, parameters_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ItemizedMintTXN, expiry_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ItemizedMintTXN, contract_fees_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ItemizedMintTXN, valid_from_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::zera_txn::ContractUpdateTXN, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ContractUpdateTXN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::ContractUpdateTXN, base_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ContractUpdateTXN, contract_id_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ContractUpdateTXN, contract_version_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ContractUpdateTXN, name_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ContractUpdateTXN, governance_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ContractUpdateTXN, restricted_keys_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ContractUpdateTXN, contract_fees_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ContractUpdateTXN, custom_parameters_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ContractUpdateTXN, expense_ratio_),
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  ~0u,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zera_txn::InstrumentContract, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::InstrumentContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::InstrumentContract, base_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::InstrumentContract, contract_version_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::InstrumentContract, symbol_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::InstrumentContract, name_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::InstrumentContract, governance_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::InstrumentContract, restricted_keys_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::InstrumentContract, max_supply_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::InstrumentContract, contract_fees_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::InstrumentContract, premint_wallets_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::InstrumentContract, coin_denomination_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::InstrumentContract, custom_parameters_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::InstrumentContract, contract_id_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::InstrumentContract, expense_ratio_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::InstrumentContract, type_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::InstrumentContract, update_contract_fees_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::InstrumentContract, update_expense_ratio_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::InstrumentContract, quash_threshold_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::InstrumentContract, token_compliance_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::InstrumentContract, kyc_status_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::InstrumentContract, immutable_kyc_status_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::InstrumentContract, cur_equiv_start_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  2,
  ~0u,
  0,
  3,
  ~0u,
  4,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  5,
  ~0u,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::zera_txn::GovernanceVote, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::GovernanceVote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::GovernanceVote, base_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::GovernanceVote, contract_id_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::GovernanceVote, proposal_id_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::GovernanceVote, support_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::GovernanceVote, support_option_),
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zera_txn::GovernanceProposal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::GovernanceProposal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::GovernanceProposal, base_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::GovernanceProposal, contract_id_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::GovernanceProposal, title_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::GovernanceProposal, synopsis_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::GovernanceProposal, body_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::GovernanceProposal, options_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::GovernanceProposal, start_timestamp_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::GovernanceProposal, end_timestamp_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::GovernanceProposal, governance_txn_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::GovernanceTXN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::GovernanceTXN, txn_type_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::GovernanceTXN, serialized_txn_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::GovernanceTXN, txn_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::SmartContractTXN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::SmartContractTXN, base_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::SmartContractTXN, raw_code_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::SmartContractTXN, language_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::SmartContractTXN, variable_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::SmartContractExecuteTXN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::SmartContractExecuteTXN, base_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::SmartContractExecuteTXN, smart_contract_id_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::SmartContractExecuteTXN, parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::Validator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::Validator, public_key_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::Validator, host_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::Validator, client_port_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::Validator, validator_port_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::Validator, staked_contract_ids_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::Validator, benchmark_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::Validator, timestamp_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::Validator, lite_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::Validator, online_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::ValidatorRegistration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::ValidatorRegistration, base_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ValidatorRegistration, validator_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ValidatorRegistration, register__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::ValidatorHeartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::ValidatorHeartbeat, base_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ValidatorHeartbeat, online_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::SmartContractParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::SmartContractParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::SmartContractParameter, index_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::SmartContractParameter, type_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::SmartContractParameter, value_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::Votes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::Votes, votes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::VotePair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::VotePair, contract_id_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::VotePair, amount_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ProposalResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ProposalResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::ProposalResult, base_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ProposalResult, contract_id_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ProposalResult, proposal_id_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ProposalResult, support_cur_equiv_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ProposalResult, against_cur_equiv_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ProposalResult, option_cur_equiv_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ProposalResult, support_votes_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ProposalResult, against_votes_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ProposalResult, option_votes_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ProposalResult, passed_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ProposalResult, final_stage_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ProposalResult, stage_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::ProposalResult, fast_quorum_),
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  ~0u,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNS, coin_txns_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNS, mint_txns_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNS, item_mint_txns_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNS, contract_txns_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNS, governance_votes_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNS, governance_proposals_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNS, smart_contracts_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNS, smart_contract_executes_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNS, self_cur_equivs_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNS, auth_cur_equivs_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNS, expense_ratios_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNS, txn_fees_and_status_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNS, token_fees_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNS, nft_txns_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNS, contract_update_txns_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNS, validator_registration_txns_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNS, validator_heartbeat_txns_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNS, proposal_result_txns_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNS, expense_ratio_result_txns_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNS, foundation_txns_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNS, delegated_voting_txns_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNS, quash_txns_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNS, fast_quorum_txns_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNS, quash_results_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNS, revoke_txns_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNS, compliance_txns_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNS, burn_sbt_txns_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNS, new_coin_txns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::Token, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::Token, contract_id_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::Token, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::TokenFees, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::TokenFees, address_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TokenFees, tokens_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNStatusFees, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNStatusFees, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNStatusFees, txn_hash_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNStatusFees, status_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNStatusFees, base_fees_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNStatusFees, base_contract_id_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNStatusFees, contract_fees_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNStatusFees, contract_contract_id_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNStatusFees, smar_contract_result_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNStatusFees, approved_votes_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNStatusFees, against_votes_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNStatusFees, smart_contract_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNWrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNWrapper, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::zera_txn::TXNWrapperDefaultTypeInternal, coin_txn_),
  offsetof(::zera_txn::TXNWrapperDefaultTypeInternal, mint_txn_),
  offsetof(::zera_txn::TXNWrapperDefaultTypeInternal, item_mint_txn_),
  offsetof(::zera_txn::TXNWrapperDefaultTypeInternal, contract_txn_),
  offsetof(::zera_txn::TXNWrapperDefaultTypeInternal, governance_vote_),
  offsetof(::zera_txn::TXNWrapperDefaultTypeInternal, governance_proposal_),
  offsetof(::zera_txn::TXNWrapperDefaultTypeInternal, smart_contract_),
  offsetof(::zera_txn::TXNWrapperDefaultTypeInternal, smart_contract_execute_),
  offsetof(::zera_txn::TXNWrapperDefaultTypeInternal, self_cur_equivs_),
  offsetof(::zera_txn::TXNWrapperDefaultTypeInternal, auth_cur_equivs_),
  offsetof(::zera_txn::TXNWrapperDefaultTypeInternal, expense_ratios_),
  offsetof(::zera_txn::TXNWrapperDefaultTypeInternal, nft_txn_),
  offsetof(::zera_txn::TXNWrapperDefaultTypeInternal, contract_update_txn_),
  offsetof(::zera_txn::TXNWrapperDefaultTypeInternal, validator_registration_txn_),
  offsetof(::zera_txn::TXNWrapperDefaultTypeInternal, validator_heartbeat_txn_),
  offsetof(::zera_txn::TXNWrapperDefaultTypeInternal, foundation_txn_),
  offsetof(::zera_txn::TXNWrapperDefaultTypeInternal, delegated_voting_txn_),
  offsetof(::zera_txn::TXNWrapperDefaultTypeInternal, quash_txn_),
  offsetof(::zera_txn::TXNWrapperDefaultTypeInternal, fast_quorum_txn_),
  offsetof(::zera_txn::TXNWrapperDefaultTypeInternal, revoke_txn_),
  offsetof(::zera_txn::TXNWrapperDefaultTypeInternal, compliance_txn_),
  offsetof(::zera_txn::TXNWrapperDefaultTypeInternal, proposal_result_txn_),
  offsetof(::zera_txn::TXNWrapperDefaultTypeInternal, burn_sbt_txn_),
  offsetof(::zera_txn::TXNWrapperDefaultTypeInternal, new_coin_txn_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNWrapper, txn_type_),
  PROTOBUF_FIELD_OFFSET(::zera_txn::TXNWrapper, payload_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zera_txn::DelegateContract)},
  { 7, -1, sizeof(::zera_txn::DelegatedVotingTXN)},
  { 15, -1, sizeof(::zera_txn::DelegateVote)},
  { 22, -1, sizeof(::zera_txn::DelegateFees)},
  { 29, -1, sizeof(::zera_txn::Compliance)},
  { 37, -1, sizeof(::zera_txn::TokenCompliance)},
  { 43, -1, sizeof(::zera_txn::ExpenseRatio)},
  { 51, -1, sizeof(::zera_txn::KeyValuePair)},
  { 58, -1, sizeof(::zera_txn::ByteMultiplier)},
  { 65, 74, sizeof(::zera_txn::FoundationTXN)},
  { 78, -1, sizeof(::zera_txn::RevokeTXN)},
  { 87, -1, sizeof(::zera_txn::FastQuorumTXN)},
  { 94, 111, sizeof(::zera_txn::Governance)},
  { 123, -1, sizeof(::zera_txn::Stage)},
  { 131, -1, sizeof(::zera_txn::CoinDenomination)},
  { 138, 149, sizeof(::zera_txn::ContractFees)},
  { 155, 165, sizeof(::zera_txn::ItemContractFees)},
  { 170, -1, sizeof(::zera_txn::RestrictedKey)},
  { 189, -1, sizeof(::zera_txn::ExpenseRatioTXN)},
  { 197, -1, sizeof(::zera_txn::PreMintWallet)},
  { 204, 217, sizeof(::zera_txn::Transfer)},
  { 225, -1, sizeof(::zera_txn::BurnSBTTXN)},
  { 233, 247, sizeof(::zera_txn::BaseTXN)},
  { 256, 265, sizeof(::zera_txn::PublicKey)},
  { 269, -1, sizeof(::zera_txn::GovernanceAuth)},
  { 276, -1, sizeof(::zera_txn::MultiKey)},
  { 285, -1, sizeof(::zera_txn::MultiPatterns)},
  { 292, -1, sizeof(::zera_txn::SelfCurrencyEquiv)},
  { 299, -1, sizeof(::zera_txn::AuthorizedCurrencyEquiv)},
  { 306, 315, sizeof(::zera_txn::CurrencyEquiv)},
  { 319, -1, sizeof(::zera_txn::ExpenseRatioResult)},
  { 328, -1, sizeof(::zera_txn::ComplianceAssign)},
  { 336, -1, sizeof(::zera_txn::ComplianceTXN)},
  { 344, -1, sizeof(::zera_txn::Wallets)},
  { 351, -1, sizeof(::zera_txn::QuashTXN)},
  { 359, -1, sizeof(::zera_txn::QuashResult)},
  { 366, -1, sizeof(::zera_txn::CoinTXN)},
  { 373, 385, sizeof(::zera_txn::NewCoinTXN)},
  { 392, -1, sizeof(::zera_txn::TransferAuthentication)},
  { 400, 409, sizeof(::zera_txn::InputTransfers)},
  { 413, 421, sizeof(::zera_txn::OutputTransfers)},
  { 424, -1, sizeof(::zera_txn::MintTXN)},
  { 433, 444, sizeof(::zera_txn::NFTTXN)},
  { 450, 464, sizeof(::zera_txn::ItemizedMintTXN)},
  { 473, 487, sizeof(::zera_txn::ContractUpdateTXN)},
  { 496, 522, sizeof(::zera_txn::InstrumentContract)},
  { 543, 553, sizeof(::zera_txn::GovernanceVote)},
  { 558, 572, sizeof(::zera_txn::GovernanceProposal)},
  { 581, -1, sizeof(::zera_txn::GovernanceTXN)},
  { 589, -1, sizeof(::zera_txn::SmartContractTXN)},
  { 598, -1, sizeof(::zera_txn::SmartContractExecuteTXN)},
  { 606, -1, sizeof(::zera_txn::Validator)},
  { 620, -1, sizeof(::zera_txn::ValidatorRegistration)},
  { 628, -1, sizeof(::zera_txn::ValidatorHeartbeat)},
  { 635, 643, sizeof(::zera_txn::SmartContractParameter)},
  { 646, -1, sizeof(::zera_txn::Votes)},
  { 652, -1, sizeof(::zera_txn::VotePair)},
  { 659, 677, sizeof(::zera_txn::ProposalResult)},
  { 690, -1, sizeof(::zera_txn::TXNS)},
  { 723, -1, sizeof(::zera_txn::Token)},
  { 730, -1, sizeof(::zera_txn::TokenFees)},
  { 737, 752, sizeof(::zera_txn::TXNStatusFees)},
  { 762, -1, sizeof(::zera_txn::TXNWrapper)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_DelegateContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_DelegatedVotingTXN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_DelegateVote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_DelegateFees_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_Compliance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_TokenCompliance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_ExpenseRatio_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_KeyValuePair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_ByteMultiplier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_FoundationTXN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_RevokeTXN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_FastQuorumTXN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_Governance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_Stage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_CoinDenomination_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_ContractFees_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_ItemContractFees_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_RestrictedKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_ExpenseRatioTXN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_PreMintWallet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_Transfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_BurnSBTTXN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_BaseTXN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_PublicKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_GovernanceAuth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_MultiKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_MultiPatterns_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_SelfCurrencyEquiv_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_AuthorizedCurrencyEquiv_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_CurrencyEquiv_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_ExpenseRatioResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_ComplianceAssign_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_ComplianceTXN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_Wallets_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_QuashTXN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_QuashResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_CoinTXN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_NewCoinTXN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_TransferAuthentication_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_InputTransfers_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_OutputTransfers_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_MintTXN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_NFTTXN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_ItemizedMintTXN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_ContractUpdateTXN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_InstrumentContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_GovernanceVote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_GovernanceProposal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_GovernanceTXN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_SmartContractTXN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_SmartContractExecuteTXN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_Validator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_ValidatorRegistration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_ValidatorHeartbeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_SmartContractParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_Votes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_VotePair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_ProposalResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_TXNS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_Token_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_TokenFees_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_TXNStatusFees_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zera_txn::_TXNWrapper_default_instance_),
};

const char descriptor_table_protodef_txn_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ttxn.proto\022\010zera_txn\032\037google/protobuf/t"
  "imestamp.proto\032\033google/protobuf/empty.pr"
  "oto\"9\n\020DelegateContract\022\020\n\010priority\030\001 \001("
  "\005\022\023\n\013contract_id\030\002 \001(\t\"\224\001\n\022DelegatedVoti"
  "ngTXN\022\037\n\004base\030\001 \001(\0132\021.zera_txn.BaseTXN\022."
  "\n\016delegate_votes\030\002 \003(\0132\026.zera_txn.Delega"
  "teVote\022-\n\rdelegate_fees\030\003 \003(\0132\026.zera_txn"
  ".DelegateFees\"N\n\014DelegateVote\022\017\n\007address"
  "\030\001 \001(\014\022-\n\tcontracts\030\002 \003(\0132\032.zera_txn.Del"
  "egateContract\"8\n\014DelegateFees\022\023\n\013contrac"
  "t_id\030\001 \001(\t\022\023\n\013auth_amount\030\002 \001(\t\"g\n\nCompl"
  "iance\022\023\n\013contract_id\030\001 \001(\t\022\030\n\020compliance"
  "_level\030\002 \001(\r\022*\n\006expiry\030\003 \001(\0132\032.google.pr"
  "otobuf.Timestamp\";\n\017TokenCompliance\022(\n\nc"
  "ompliance\030\001 \003(\0132\024.zera_txn.Compliance\";\n"
  "\014ExpenseRatio\022\013\n\003day\030\001 \001(\r\022\r\n\005month\030\002 \001("
  "\r\022\017\n\007percent\030\003 \001(\r\"*\n\014KeyValuePair\022\013\n\003ke"
  "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"R\n\016ByteMultiplier"
  "\022,\n\010txn_type\030\001 \001(\0162\032.zera_txn.TRANSACTIO"
  "N_TYPE\022\022\n\nmultiplier\030\002 \001(\t\"\251\001\n\rFoundatio"
  "nTXN\022\037\n\004base\030\001 \001(\0132\021.zera_txn.BaseTXN\022\032\n"
  "\022restricted_symbols\030\002 \003(\t\0221\n\017byte_multip"
  "lier\030\003 \003(\0132\030.zera_txn.ByteMultiplier\022\030\n\013"
  "fee_ISO4217\030\004 \001(\tH\000\210\001\001B\016\n\014_fee_ISO4217\"m"
  "\n\tRevokeTXN\022\037\n\004base\030\001 \001(\0132\021.zera_txn.Bas"
  "eTXN\022\023\n\013contract_id\030\002 \001(\t\022\031\n\021recipient_a"
  "ddress\030\003 \001(\014\022\017\n\007item_id\030\004 \001(\t\"E\n\rFastQuo"
  "rumTXN\022\037\n\004base\030\001 \001(\0132\021.zera_txn.BaseTXN\022"
  "\023\n\013proposal_id\030\002 \001(\014\"\346\003\n\nGovernance\022\'\n\004t"
  "ype\030\001 \001(\0162\031.zera_txn.GOVERNANCE_TYPE\022\026\n\016"
  "regular_quorum\030\002 \001(\r\022\030\n\013fast_quorum\030\003 \001("
  "\rH\000\210\001\001\022\031\n\021voting_instrument\030\004 \003(\t\022\021\n\tthr"
  "eshold\030\005 \001(\r\022\033\n\016chicken_dinner\030\006 \001(\010H\001\210\001"
  "\001\022\023\n\013allow_multi\030\007 \001(\010\022\032\n\rvoting_period\030"
  "\010 \001(\rH\002\210\001\001\022#\n\033allowed_proposal_instrumen"
  "t\030\t \003(\t\0227\n\017proposal_period\030\n \001(\0162\031.zera_"
  "txn.PROPOSAL_PERIODH\003\210\001\001\022%\n\014stage_length"
  "\030\013 \003(\0132\017.zera_txn.Stage\0223\n\017start_timesta"
  "mp\030\014 \001(\0132\032.google.protobuf.TimestampB\016\n\014"
  "_fast_quorumB\021\n\017_chicken_dinnerB\020\n\016_voti"
  "ng_periodB\022\n\020_proposal_period\"Q\n\005Stage\022\016"
  "\n\006length\030\001 \001(\r\022)\n\006period\030\002 \001(\0162\031.zera_tx"
  "n.PROPOSAL_PERIOD\022\r\n\005break\030\003 \001(\010\"=\n\020Coin"
  "Denomination\022\031\n\021denomination_name\030\005 \001(\t\022"
  "\016\n\006amount\030\006 \001(\t\"\276\001\n\014ContractFees\022\013\n\003fee\030"
  "\001 \001(\t\022\030\n\013fee_address\030\002 \001(\014H\000\210\001\001\022\014\n\004burn\030"
  "\003 \001(\t\022\021\n\tvalidator\030\004 \001(\t\022\036\n\026allowed_fee_"
  "instrument\030\005 \003(\t\0226\n\021contract_fee_type\030\006 "
  "\001(\0162\033.zera_txn.CONTRACT_FEE_TYPEB\016\n\014_fee"
  "_address\"\212\001\n\020ItemContractFees\022\013\n\003fee\030\001 \001"
  "(\t\022\030\n\013fee_address\030\002 \001(\014H\000\210\001\001\022\014\n\004burn\030\003 \001"
  "(\t\022\021\n\tvalidator\030\004 \001(\t\022\036\n\026allowed_fee_ins"
  "trument\030\005 \003(\tB\016\n\014_fee_address\"\245\002\n\rRestri"
  "ctedKey\022\'\n\npublic_key\030\001 \001(\0132\023.zera_txn.P"
  "ublicKey\022\022\n\ntime_delay\030\002 \001(\003\022\016\n\006global\030\003"
  " \001(\010\022\027\n\017update_contract\030\004 \001(\010\022\020\n\010transfe"
  "r\030\005 \001(\010\022\r\n\005quash\030\006 \001(\010\022\014\n\004mint\030\007 \001(\010\022\014\n\004"
  "vote\030\010 \001(\010\022\017\n\007propose\030\t \001(\010\022\022\n\ncomplianc"
  "e\030\n \001(\010\022\025\n\rexpense_ratio\030\013 \001(\010\022\021\n\tcur_eq"
  "uiv\030\014 \001(\010\022\016\n\006revoke\030\r \001(\010\022\022\n\nkey_weight\030"
  "\016 \001(\r\"Z\n\017ExpenseRatioTXN\022\037\n\004base\030\001 \001(\0132\021"
  ".zera_txn.BaseTXN\022\023\n\013contract_id\030\002 \001(\t\022\021"
  "\n\taddresses\030\003 \003(\014\"0\n\rPreMintWallet\022\017\n\007ad"
  "dress\030\001 \001(\014\022\016\n\006amount\030\002 \001(\t\"\200\002\n\010Transfer"
  "\022\031\n\021recipient_address\030\001 \001(\014\022\016\n\006amount\030\002 "
  "\001(\t\022\023\n\013contract_id\030\003 \001(\t\022 \n\023contract_fee"
  "_amount\030\004 \001(\tH\000\210\001\001\022\034\n\017contract_fee_id\030\005 "
  "\001(\tH\001\210\001\001\022\027\n\017base_fee_amount\030\006 \001(\t\022\023\n\013bas"
  "e_fee_id\030\007 \001(\t\022\021\n\004memo\030\010 \001(\tH\002\210\001\001B\026\n\024_co"
  "ntract_fee_amountB\022\n\020_contract_fee_idB\007\n"
  "\005_memo\"S\n\nBurnSBTTXN\022\037\n\004base\030\001 \001(\0132\021.zer"
  "a_txn.BaseTXN\022\023\n\013contract_id\030\002 \001(\t\022\017\n\007it"
  "em_id\030\003 \001(\t\"\230\002\n\007BaseTXN\022\'\n\npublic_key\030\001 "
  "\001(\0132\023.zera_txn.PublicKey\022-\n\ttimestamp\030\003 "
  "\001(\0132\032.google.protobuf.Timestamp\022\022\n\nfee_a"
  "mount\030\004 \001(\t\022\016\n\006fee_id\030\005 \001(\t\022\026\n\tsignature"
  "\030\006 \001(\014H\000\210\001\001\022\021\n\004hash\030\007 \001(\014H\001\210\001\001\022\021\n\004memo\030\010"
  " \001(\tH\002\210\001\001\022\026\n\tsafe_send\030\t \001(\010H\003\210\001\001\022\r\n\005non"
  "ce\030\n \001(\004B\014\n\n_signatureB\007\n\005_hashB\007\n\005_memo"
  "B\014\n\n_safe_send\"\270\001\n\tPublicKey\022\016\n\006single\030\001"
  " \001(\014\022!\n\005multi\030\002 \001(\0132\022.zera_txn.MultiKey\022"
  "\032\n\rsc_wallet_adr\030\003 \001(\014H\000\210\001\001\0226\n\017governanc"
  "e_auth\030\004 \001(\0132\030.zera_txn.GovernanceAuthH\001"
  "\210\001\001B\020\n\016_sc_wallet_adrB\022\n\020_governance_aut"
  "h\"3\n\016GovernanceAuth\022\014\n\004auth\030\001 \001(\014\022\023\n\013pro"
  "posal_id\030\002 \001(\014\"y\n\010MultiKey\022\023\n\013public_key"
  "s\030\001 \003(\014\022\022\n\nsignatures\030\002 \003(\014\022/\n\016multi_pat"
  "terns\030\003 \003(\0132\027.zera_txn.MultiPatterns\022\023\n\013"
  "hash_tokens\030\004 \003(\t\"0\n\rMultiPatterns\022\r\n\005cl"
  "ass\030\001 \003(\005\022\020\n\010required\030\002 \003(\005\"`\n\021SelfCurre"
  "ncyEquiv\022\037\n\004base\030\001 \001(\0132\021.zera_txn.BaseTX"
  "N\022*\n\tcur_equiv\030\002 \003(\0132\027.zera_txn.Currency"
  "Equiv\"f\n\027AuthorizedCurrencyEquiv\022\037\n\004base"
  "\030\001 \001(\0132\021.zera_txn.BaseTXN\022*\n\tcur_equiv\030\002"
  " \003(\0132\027.zera_txn.CurrencyEquiv\"\200\001\n\rCurren"
  "cyEquiv\022\023\n\013contract_id\030\001 \001(\t\022\014\n\004rate\030\002 \001"
  "(\t\022\027\n\nauthorized\030\003 \001(\010H\000\210\001\001\022\026\n\tmax_stake"
  "\030\004 \001(\tH\001\210\001\001B\r\n\013_authorizedB\014\n\n_max_stake"
  "\"v\n\022ExpenseRatioResult\022\023\n\013contract_id\030\001 "
  "\001(\t\022\"\n\007wallets\030\002 \003(\0132\021.zera_txn.Wallets\022"
  "\014\n\004hash\030\003 \001(\014\022\031\n\021recipient_address\030\004 \001(\014"
  "\"^\n\020ComplianceAssign\022\031\n\021recipient_addres"
  "s\030\001 \001(\014\022\030\n\020compliance_level\030\002 \001(\r\022\025\n\rass"
  "ign_revoke\030\003 \001(\010\"u\n\rComplianceTXN\022\037\n\004bas"
  "e\030\001 \001(\0132\021.zera_txn.BaseTXN\022\023\n\013contract_i"
  "d\030\002 \001(\t\022.\n\ncompliance\030\003 \003(\0132\032.zera_txn.C"
  "omplianceAssign\"*\n\007Wallets\022\017\n\007address\030\001 "
  "\001(\014\022\016\n\006amount\030\002 \001(\t\"R\n\010QuashTXN\022\037\n\004base\030"
  "\001 \001(\0132\021.zera_txn.BaseTXN\022\023\n\013contract_id\030"
  "\002 \001(\t\022\020\n\010txn_hash\030\003 \001(\014\"I\n\013QuashResult\022\020"
  "\n\010txn_hash\030\001 \001(\014\022(\n\013public_keys\030\002 \003(\0132\023."
  "zera_txn.PublicKey\"Q\n\007CoinTXN\022\037\n\004base\030\001 "
  "\001(\0132\021.zera_txn.BaseTXN\022%\n\ttransfers\030\002 \003("
  "\0132\022.zera_txn.Transfer\"\306\002\n\nNewCoinTXN\022\037\n\004"
  "base\030\001 \001(\0132\021.zera_txn.BaseTXN\022\023\n\013contrac"
  "t_id\030\002 \001(\t\022.\n\004auth\030\003 \001(\0132 .zera_txn.Tran"
  "sferAuthentication\0221\n\017input_transfers\030\004 "
  "\003(\0132\030.zera_txn.InputTransfers\0223\n\020output_"
  "transfers\030\005 \003(\0132\031.zera_txn.OutputTransfe"
  "rs\022\034\n\017contract_fee_id\030\006 \001(\tH\000\210\001\001\022 \n\023cont"
  "ract_fee_amount\030\007 \001(\tH\001\210\001\001B\022\n\020_contract_"
  "fee_idB\026\n\024_contract_fee_amount\"c\n\026Transf"
  "erAuthentication\022\'\n\npublic_key\030\001 \003(\0132\023.z"
  "era_txn.PublicKey\022\021\n\tsignature\030\002 \003(\014\022\r\n\005"
  "nonce\030\003 \003(\004\"\200\001\n\016InputTransfers\022\r\n\005index\030"
  "\001 \001(\004\022\016\n\006amount\030\002 \001(\t\022\023\n\013fee_percent\030\003 \001"
  "(\r\022!\n\024contract_fee_percent\030\004 \001(\rH\000\210\001\001B\027\n"
  "\025_contract_fee_percent\"U\n\017OutputTransfer"
  "s\022\026\n\016wallet_address\030\001 \001(\014\022\016\n\006amount\030\002 \001("
  "\t\022\021\n\004memo\030\003 \001(\tH\000\210\001\001B\007\n\005_memo\"j\n\007MintTXN"
  "\022\037\n\004base\030\001 \001(\0132\021.zera_txn.BaseTXN\022\023\n\013con"
  "tract_id\030\002 \001(\t\022\016\n\006amount\030\003 \001(\t\022\031\n\021recipi"
  "ent_address\030\004 \001(\014\"\326\001\n\006NFTTXN\022\037\n\004base\030\001 \001"
  "(\0132\021.zera_txn.BaseTXN\022\023\n\013contract_id\030\002 \001"
  "(\t\022\017\n\007item_id\030\003 \001(\t\022\031\n\021recipient_address"
  "\030\004 \001(\014\022 \n\023contract_fee_amount\030\005 \001(\tH\000\210\001\001"
  "\022\034\n\017contract_fee_id\030\006 \001(\tH\001\210\001\001B\026\n\024_contr"
  "act_fee_amountB\022\n\020_contract_fee_id\"\337\002\n\017I"
  "temizedMintTXN\022\037\n\004base\030\001 \001(\0132\021.zera_txn."
  "BaseTXN\022\023\n\013contract_id\030\002 \001(\t\022\017\n\007item_id\030"
  "\003 \001(\t\022\031\n\021recipient_address\030\004 \001(\014\022\032\n\rvoti"
  "ng_weight\030\005 \001(\tH\000\210\001\001\022*\n\nparameters\030\006 \003(\013"
  "2\026.zera_txn.KeyValuePair\022\023\n\006expiry\030\007 \001(\004"
  "H\001\210\001\001\0226\n\rcontract_fees\030\010 \001(\0132\032.zera_txn."
  "ItemContractFeesH\002\210\001\001\022\027\n\nvalid_from\030\t \001("
  "\004H\003\210\001\001B\020\n\016_voting_weightB\t\n\007_expiryB\020\n\016_"
  "contract_feesB\r\n\013_valid_from\"\227\003\n\021Contrac"
  "tUpdateTXN\022\037\n\004base\030\001 \001(\0132\021.zera_txn.Base"
  "TXN\022\023\n\013contract_id\030\002 \001(\t\022\030\n\020contract_ver"
  "sion\030\003 \001(\004\022\021\n\004name\030\004 \001(\tH\000\210\001\001\022-\n\ngoverna"
  "nce\030\005 \001(\0132\024.zera_txn.GovernanceH\001\210\001\001\0220\n\017"
  "restricted_keys\030\006 \003(\0132\027.zera_txn.Restric"
  "tedKey\0222\n\rcontract_fees\030\007 \001(\0132\026.zera_txn"
  ".ContractFeesH\002\210\001\001\0221\n\021custom_parameters\030"
  "\010 \003(\0132\026.zera_txn.KeyValuePair\022-\n\rexpense"
  "_ratio\030\t \003(\0132\026.zera_txn.ExpenseRatioB\007\n\005"
  "_nameB\r\n\013_governanceB\020\n\016_contract_fees\"\364"
  "\006\n\022InstrumentContract\022\037\n\004base\030\001 \001(\0132\021.ze"
  "ra_txn.BaseTXN\022\030\n\020contract_version\030\002 \001(\004"
  "\022\016\n\006symbol\030\003 \001(\t\022\014\n\004name\030\004 \001(\t\022-\n\ngovern"
  "ance\030\005 \001(\0132\024.zera_txn.GovernanceH\000\210\001\001\0220\n"
  "\017restricted_keys\030\006 \003(\0132\027.zera_txn.Restri"
  "ctedKey\022\027\n\nmax_supply\030\007 \001(\tH\001\210\001\001\0222\n\rcont"
  "ract_fees\030\010 \001(\0132\026.zera_txn.ContractFeesH"
  "\002\210\001\001\0220\n\017premint_wallets\030\t \003(\0132\027.zera_txn"
  ".PreMintWallet\022:\n\021coin_denomination\030\n \001("
  "\0132\032.zera_txn.CoinDenominationH\003\210\001\001\0221\n\021cu"
  "stom_parameters\030\013 \003(\0132\026.zera_txn.KeyValu"
  "ePair\022\023\n\013contract_id\030\014 \001(\t\022-\n\rexpense_ra"
  "tio\030\r \003(\0132\026.zera_txn.ExpenseRatio\022%\n\004typ"
  "e\030\016 \001(\0162\027.zera_txn.CONTRACT_TYPE\022\034\n\024upda"
  "te_contract_fees\030\017 \001(\010\022\034\n\024update_expense"
  "_ratio\030\020 \001(\010\022\034\n\017quash_threshold\030\021 \001(\rH\004\210"
  "\001\001\0223\n\020token_compliance\030\022 \003(\0132\031.zera_txn."
  "TokenCompliance\022\022\n\nkyc_status\030\023 \001(\010\022\034\n\024i"
  "mmutable_kyc_status\030\024 \001(\010\022\034\n\017cur_equiv_s"
  "tart\030\025 \001(\tH\005\210\001\001B\r\n\013_governanceB\r\n\013_max_s"
  "upplyB\020\n\016_contract_feesB\024\n\022_coin_denomin"
  "ationB\022\n\020_quash_thresholdB\022\n\020_cur_equiv_"
  "start\"\255\001\n\016GovernanceVote\022\037\n\004base\030\001 \001(\0132\021"
  ".zera_txn.BaseTXN\022\023\n\013contract_id\030\002 \001(\t\022\023"
  "\n\013proposal_id\030\003 \001(\014\022\024\n\007support\030\004 \001(\010H\000\210\001"
  "\001\022\033\n\016support_option\030\005 \001(\rH\001\210\001\001B\n\n\010_suppo"
  "rtB\021\n\017_support_option\"\323\002\n\022GovernanceProp"
  "osal\022\037\n\004base\030\001 \001(\0132\021.zera_txn.BaseTXN\022\023\n"
  "\013contract_id\030\002 \001(\t\022\r\n\005title\030\003 \001(\t\022\020\n\010syn"
  "opsis\030\004 \001(\t\022\014\n\004body\030\005 \001(\t\022\017\n\007options\030\006 \003"
  "(\t\0228\n\017start_timestamp\030\007 \001(\0132\032.google.pro"
  "tobuf.TimestampH\000\210\001\001\0226\n\rend_timestamp\030\010 "
  "\001(\0132\032.google.protobuf.TimestampH\001\210\001\001\022/\n\016"
  "governance_txn\030\t \003(\0132\027.zera_txn.Governan"
  "ceTXNB\022\n\020_start_timestampB\020\n\016_end_timest"
  "amp\"g\n\rGovernanceTXN\022,\n\010txn_type\030\001 \001(\0162\032"
  ".zera_txn.TRANSACTION_TYPE\022\026\n\016serialized"
  "_txn\030\002 \001(\014\022\020\n\010txn_hash\030\003 \001(\014\"\244\001\n\020SmartCo"
  "ntractTXN\022\037\n\004base\030\001 \001(\0132\021.zera_txn.BaseT"
  "XN\022\020\n\010raw_code\030\002 \001(\t\022$\n\010language\030\003 \001(\0162\022"
  ".zera_txn.LANGUAGE\0227\n\rvariable_type\030\004 \003("
  "\0132 .zera_txn.SmartContractParameter\"\213\001\n\027"
  "SmartContractExecuteTXN\022\037\n\004base\030\001 \001(\0132\021."
  "zera_txn.BaseTXN\022\031\n\021smart_contract_id\030\002 "
  "\001(\014\0224\n\nparameters\030\003 \003(\0132 .zera_txn.Smart"
  "ContractParameter\"\354\001\n\tValidator\022\'\n\npubli"
  "c_key\030\001 \001(\0132\023.zera_txn.PublicKey\022\014\n\004host"
  "\030\002 \001(\t\022\023\n\013client_port\030\003 \001(\t\022\026\n\016validator"
  "_port\030\004 \001(\t\022\033\n\023staked_contract_ids\030\005 \003(\t"
  "\022\021\n\tbenchmark\030\006 \001(\004\022-\n\ttimestamp\030\007 \001(\0132\032"
  ".google.protobuf.Timestamp\022\014\n\004lite\030\010 \001(\010"
  "\022\016\n\006online\030\t \001(\010\"r\n\025ValidatorRegistratio"
  "n\022\037\n\004base\030\001 \001(\0132\021.zera_txn.BaseTXN\022&\n\tva"
  "lidator\030\002 \001(\0132\023.zera_txn.Validator\022\020\n\010re"
  "gister\030\003 \001(\010\"E\n\022ValidatorHeartbeat\022\037\n\004ba"
  "se\030\001 \001(\0132\021.zera_txn.BaseTXN\022\016\n\006online\030\002 "
  "\001(\010\"l\n\026SmartContractParameter\022\r\n\005index\030K"
  " \001(\r\022%\n\004type\030L \001(\0162\027.zera_txn.VARIABLE_T"
  "YPE\022\022\n\005value\030M \001(\tH\000\210\001\001B\010\n\006_value\"*\n\005Vot"
  "es\022!\n\005votes\030\001 \003(\0132\022.zera_txn.VotePair\"/\n"
  "\010VotePair\022\023\n\013contract_id\030\001 \001(\t\022\016\n\006amount"
  "\030\002 \001(\t\"\317\003\n\016ProposalResult\022\037\n\004base\030\001 \001(\0132"
  "\021.zera_txn.BaseTXN\022\023\n\013contract_id\030\002 \001(\t\022"
  "\023\n\013proposal_id\030\003 \001(\014\022\036\n\021support_cur_equi"
  "v\030\004 \001(\tH\000\210\001\001\022\036\n\021against_cur_equiv\030\005 \001(\tH"
  "\001\210\001\001\022\030\n\020option_cur_equiv\030\006 \003(\t\022+\n\rsuppor"
  "t_votes\030\007 \001(\0132\017.zera_txn.VotesH\002\210\001\001\022+\n\ra"
  "gainst_votes\030\010 \001(\0132\017.zera_txn.VotesH\003\210\001\001"
  "\022%\n\014option_votes\030\t \003(\0132\017.zera_txn.Votes\022"
  "\016\n\006passed\030\n \001(\010\022\023\n\013final_stage\030\013 \001(\010\022\r\n\005"
  "stage\030\014 \001(\r\022\023\n\013fast_quorum\030\r \001(\010B\024\n\022_sup"
  "port_cur_equivB\024\n\022_against_cur_equivB\020\n\016"
  "_support_votesB\020\n\016_against_votes\"\263\013\n\004TXN"
  "S\022$\n\tcoin_txns\030\001 \003(\0132\021.zera_txn.CoinTXN\022"
  "$\n\tmint_txns\030\002 \003(\0132\021.zera_txn.MintTXN\0221\n"
  "\016item_mint_txns\030\003 \003(\0132\031.zera_txn.Itemize"
  "dMintTXN\0223\n\rcontract_txns\030\004 \003(\0132\034.zera_t"
  "xn.InstrumentContract\0222\n\020governance_vote"
  "s\030\005 \003(\0132\030.zera_txn.GovernanceVote\022:\n\024gov"
  "ernance_proposals\030\006 \003(\0132\034.zera_txn.Gover"
  "nanceProposal\0223\n\017smart_contracts\030\007 \003(\0132\032"
  ".zera_txn.SmartContractTXN\022B\n\027smart_cont"
  "ract_executes\030\010 \003(\0132!.zera_txn.SmartCont"
  "ractExecuteTXN\0224\n\017self_cur_equivs\030\t \003(\0132"
  "\033.zera_txn.SelfCurrencyEquiv\022:\n\017auth_cur"
  "_equivs\030\n \003(\0132!.zera_txn.AuthorizedCurre"
  "ncyEquiv\0221\n\016expense_ratios\030\013 \003(\0132\031.zera_"
  "txn.ExpenseRatioTXN\0224\n\023txn_fees_and_stat"
  "us\030\014 \003(\0132\027.zera_txn.TXNStatusFees\022\'\n\ntok"
  "en_fees\030\r \003(\0132\023.zera_txn.TokenFees\022\"\n\010nf"
  "t_txns\030\016 \003(\0132\020.zera_txn.NFTTXN\0229\n\024contra"
  "ct_update_txns\030\017 \003(\0132\033.zera_txn.Contract"
  "UpdateTXN\022D\n\033validator_registration_txns"
  "\030\020 \003(\0132\037.zera_txn.ValidatorRegistration\022"
  ">\n\030validator_heartbeat_txns\030\021 \003(\0132\034.zera"
  "_txn.ValidatorHeartbeat\0226\n\024proposal_resu"
  "lt_txns\030\022 \003(\0132\030.zera_txn.ProposalResult\022"
  "\?\n\031expense_ratio_result_txns\030\023 \003(\0132\034.zer"
  "a_txn.ExpenseRatioResult\0220\n\017foundation_t"
  "xns\030\024 \003(\0132\027.zera_txn.FoundationTXN\022;\n\025de"
  "legated_voting_txns\030\025 \003(\0132\034.zera_txn.Del"
  "egatedVotingTXN\022&\n\nquash_txns\030\026 \003(\0132\022.ze"
  "ra_txn.QuashTXN\0221\n\020fast_quorum_txns\030\027 \003("
  "\0132\027.zera_txn.FastQuorumTXN\022,\n\rquash_resu"
  "lts\030\030 \003(\0132\025.zera_txn.QuashResult\022(\n\013revo"
  "ke_txns\030\031 \003(\0132\023.zera_txn.RevokeTXN\0220\n\017co"
  "mpliance_txns\030\032 \003(\0132\027.zera_txn.Complianc"
  "eTXN\022+\n\rburn_sbt_txns\030\033 \003(\0132\024.zera_txn.B"
  "urnSBTTXN\022+\n\rnew_coin_txns\030\034 \003(\0132\024.zera_"
  "txn.NewCoinTXN\",\n\005Token\022\023\n\013contract_id\030\001"
  " \001(\t\022\016\n\006amount\030\002 \001(\t\"=\n\tTokenFees\022\017\n\007add"
  "ress\030\001 \001(\014\022\037\n\006tokens\030\002 \003(\0132\017.zera_txn.To"
  "ken\"\275\002\n\rTXNStatusFees\022\020\n\010txn_hash\030\001 \001(\014\022"
  "$\n\006status\030\002 \001(\0162\024.zera_txn.TXN_STATUS\022\021\n"
  "\tbase_fees\030\003 \003(\t\022\030\n\020base_contract_id\030\004 \003"
  "(\t\022\025\n\rcontract_fees\030\005 \001(\t\022\034\n\024contract_co"
  "ntract_id\030\006 \001(\t\022\034\n\024smar_contract_result\030"
  "\n \003(\014\022\033\n\016approved_votes\030\007 \001(\tH\000\210\001\001\022\032\n\rag"
  "ainst_votes\030\010 \001(\tH\001\210\001\001\022\026\n\016smart_contract"
  "\030\t \001(\010B\021\n\017_approved_votesB\020\n\016_against_vo"
  "tes\"\245\n\n\nTXNWrapper\022%\n\010coin_txn\030\001 \001(\0132\021.z"
  "era_txn.CoinTXNH\000\022%\n\010mint_txn\030\002 \001(\0132\021.ze"
  "ra_txn.MintTXNH\000\0222\n\ritem_mint_txn\030\003 \001(\0132"
  "\031.zera_txn.ItemizedMintTXNH\000\0224\n\014contract"
  "_txn\030\004 \001(\0132\034.zera_txn.InstrumentContract"
  "H\000\0223\n\017governance_vote\030\005 \001(\0132\030.zera_txn.G"
  "overnanceVoteH\000\022;\n\023governance_proposal\030\006"
  " \001(\0132\034.zera_txn.GovernanceProposalH\000\0224\n\016"
  "smart_contract\030\007 \001(\0132\032.zera_txn.SmartCon"
  "tractTXNH\000\022C\n\026smart_contract_execute\030\010 \001"
  "(\0132!.zera_txn.SmartContractExecuteTXNH\000\022"
  "6\n\017self_cur_equivs\030\t \001(\0132\033.zera_txn.Self"
  "CurrencyEquivH\000\022<\n\017auth_cur_equivs\030\n \001(\013"
  "2!.zera_txn.AuthorizedCurrencyEquivH\000\0223\n"
  "\016expense_ratios\030\013 \001(\0132\031.zera_txn.Expense"
  "RatioTXNH\000\022#\n\007nft_txn\030\014 \001(\0132\020.zera_txn.N"
  "FTTXNH\000\022:\n\023contract_update_txn\030\r \001(\0132\033.z"
  "era_txn.ContractUpdateTXNH\000\022E\n\032validator"
  "_registration_txn\030\016 \001(\0132\037.zera_txn.Valid"
  "atorRegistrationH\000\022\?\n\027validator_heartbea"
  "t_txn\030\017 \001(\0132\034.zera_txn.ValidatorHeartbea"
  "tH\000\0221\n\016foundation_txn\030\020 \001(\0132\027.zera_txn.F"
  "oundationTXNH\000\022<\n\024delegated_voting_txn\030\021"
  " \001(\0132\034.zera_txn.DelegatedVotingTXNH\000\022\'\n\t"
  "quash_txn\030\022 \001(\0132\022.zera_txn.QuashTXNH\000\0222\n"
  "\017fast_quorum_txn\030\023 \001(\0132\027.zera_txn.FastQu"
  "orumTXNH\000\022)\n\nrevoke_txn\030\024 \001(\0132\023.zera_txn"
  ".RevokeTXNH\000\0221\n\016compliance_txn\030\025 \001(\0132\027.z"
  "era_txn.ComplianceTXNH\000\022\035\n\023proposal_resu"
  "lt_txn\030\026 \001(\010H\000\022,\n\014burn_sbt_txn\030\027 \001(\0132\024.z"
  "era_txn.BurnSBTTXNH\000\022,\n\014new_coin_txn\030\030 \001"
  "(\0132\024.zera_txn.NewCoinTXNH\000\022,\n\010txn_type\030\031"
  " \001(\0162\032.zera_txn.TRANSACTION_TYPEB\t\n\007payl"
  "oad*\305\007\n\nTXN_STATUS\022\006\n\002OK\020\000\022\026\n\022INVALID_PA"
  "RAMETERS\020\001\022\027\n\023INSUFFICIENT_AMOUNT\020\002\022\036\n\032I"
  "NSUFFICIENT_CONTRACT_FEES\020\003\022 \n\034AUTHORIZE"
  "D_INSUFFICIENT_FEES\020\004\022)\n%AUTHORIZED_INSU"
  "FFICIENT_CONTRACT_FEES\020\005\022\024\n\020INVALID_CONT"
  "RACT\020\006\022\024\n\020INVALID_AUTH_KEY\020\007\022\032\n\026INVALID_"
  "WALLET_ADDRESS\020\010\022\035\n\031INVALID_MULTI_TRANSA"
  "CTION\020\t\022\037\n\033INVALID_CONTRACT_PARAMETERS\020\n"
  "\022\033\n\027INVALID_CONTRACT_FEE_ID\020\013\022\023\n\017INVALID"
  "_UINT256\020\014\022\027\n\023EXCEEDED_MAX_SUPPLY\020\r\022\017\n\013I"
  "NVALID_NFT\020\016\022\021\n\rNFT_OWNERSHIP\020\017\022\025\n\021VALID"
  "ATOR_ADDRESS\020\020\022\036\n\032CONTRACT_HAS_NO_GOVERN"
  "ANCE\020\021\022\027\n\023INVALID_BASE_FEE_ID\020\022\022\033\n\027EXPEN"
  "SE_RATIO_DUPLICATE\020\023\022\025\n\021RESTRICTED_SYMBO"
  "L\020\024\022\027\n\023INVALID_PROPOSAL_ID\020\025\022!\n\035PROPOSAL"
  "_NOT_IN_VOTING_PERIOD\020\026\022\032\n\026TIME_DELAY_IN"
  "ITIALIZED\020\027\022\024\n\020INVALID_TXN_HASH\020\030\022\024\n\020INV"
  "ALID_TXN_TYPE\020\031\022\026\n\022TIME_DELAY_EXPIRED\020\032\022"
  "\026\n\022DUPLICATE_AUTH_KEY\020\033\022\026\n\022KEY_WEIGHT_TO"
  "O_LOW\020\034\022\020\n\014INVALID_ITEM\020\035\022\024\n\020INVALID_PRO"
  "POSAL\020\036\022&\n\"PROPOSAL_DOES_NOT_BELONG_TO_S"
  "ENDER\020\037\022\023\n\017INVALID_ADDRESS\020 \022\033\n\027NO_CHANG"
  "E_TO_COMPLIANCE\020!\022\033\n\027COMPLIANCE_CHECK_FA"
  "ILED\020\"\022\025\n\021INVALID_SAFE_SEND\020#\022\024\n\020INVALID"
  "_TXN_DATA\020$*\305\004\n\020TRANSACTION_TYPE\022\r\n\tCOIN"
  "_TYPE\020\000\022\023\n\017FOUNDATION_TYPE\020\002\022\r\n\tMINT_TYP"
  "E\020\001\022\022\n\016ITEM_MINT_TYPE\020\003\022\025\n\021CONTRACT_TXN_"
  "TYPE\020\004\022\r\n\tVOTE_TYPE\020\005\022\021\n\rPROPOSAL_TYPE\020\006"
  "\022\027\n\023SMART_CONTRACT_TYPE\020\007\022\037\n\033SMART_CONTR"
  "ACT_EXECUTE_TYPE\020\010\022\034\n\030SELF_CURRENCY_EQUI"
  "V_TYPE\020\t\022\"\n\036AUTHORIZED_CURRENCY_EQUIV_TY"
  "PE\020\n\022\026\n\022EXPENSE_RATIO_TYPE\020\013\022\014\n\010NFT_TYPE"
  "\020\014\022\030\n\024UPDATE_CONTRACT_TYPE\020\r\022\037\n\033VALIDATO"
  "R_REGISTRATION_TYPE\020\016\022\034\n\030VALIDATOR_HEART"
  "BEAT_TYPE\020\017\022\030\n\024PROPOSAL_RESULT_TYPE\020\020\022\031\n"
  "\025DELEGATED_VOTING_TYPE\020\021\022\017\n\013REVOKE_TYPE\020"
  "\022\022\016\n\nQUASH_TYPE\020\023\022\024\n\020FAST_QUORUM_TYPE\020\024\022"
  "\023\n\017COMPLIANCE_TYPE\020\025\022\021\n\rSBT_BURN_TYPE\020\026\022"
  "\021\n\rNEW_COIN_TYPE\020\027\022\017\n\013UKNOWN_TYPE\020\030*\?\n\010L"
  "ANGUAGE\022\r\n\tCPLUSPLUS\020\000\022\010\n\004RUST\020\001\022\n\n\006PYTH"
  "ON\020\002\022\016\n\nJAVASCRIPT\020\003*\'\n\017PROPOSAL_PERIOD\022"
  "\010\n\004DAYS\020\000\022\n\n\006MONTHS\020\001*R\n\rVARIABLE_TYPE\022\007"
  "\n\003INT\020\000\022\t\n\005SHORT\020\001\022\010\n\004LONG\020\002\022\r\n\tLONG_LON"
  "G\020\003\022\010\n\004BOOL\020\004\022\n\n\006STRING\020\005*B\n\021CONTRACT_FE"
  "E_TYPE\022\t\n\005FIXED\020\000\022\022\n\016CUR_EQUIVALENT\020\001\022\016\n"
  "\nPERCENTAGE\020\002*E\n\017GOVERNANCE_TYPE\022\n\n\006STAG"
  "ED\020\000\022\t\n\005CYCLE\020\001\022\r\n\tSTAGGERED\020\002\022\014\n\010ADAPTI"
  "VE\020\003*,\n\rCONTRACT_TYPE\022\t\n\005TOKEN\020\000\022\007\n\003NFT\020"
  "\001\022\007\n\003SBT\020\0022\310\n\n\nTXNService\0221\n\004Coin\022\021.zera"
  "_txn.CoinTXN\032\026.google.protobuf.Empty\0227\n\007"
  "NewCoin\022\024.zera_txn.NewCoinTXN\032\026.google.p"
  "rotobuf.Empty\0221\n\004Mint\022\021.zera_txn.MintTXN"
  "\032\026.google.protobuf.Empty\022=\n\010ItemMint\022\031.z"
  "era_txn.ItemizedMintTXN\032\026.google.protobu"
  "f.Empty\022@\n\010Contract\022\034.zera_txn.Instrumen"
  "tContract\032\026.google.protobuf.Empty\022F\n\016Gov"
  "ernProposal\022\034.zera_txn.GovernanceProposa"
  "l\032\026.google.protobuf.Empty\022>\n\nGovernVote\022"
  "\030.zera_txn.GovernanceVote\032\026.google.proto"
  "buf.Empty\022C\n\rSmartContract\022\032.zera_txn.Sm"
  "artContractTXN\032\026.google.protobuf.Empty\022Q"
  "\n\024SmartContractExecute\022!.zera_txn.SmartC"
  "ontractExecuteTXN\032\026.google.protobuf.Empt"
  "y\022D\n\rCurrencyEquiv\022\033.zera_txn.SelfCurren"
  "cyEquiv\032\026.google.protobuf.Empty\022N\n\021AuthC"
  "urrencyEquiv\022!.zera_txn.AuthorizedCurren"
  "cyEquiv\032\026.google.protobuf.Empty\022A\n\014Expen"
  "seRatio\022\031.zera_txn.ExpenseRatioTXN\032\026.goo"
  "gle.protobuf.Empty\022/\n\003NFT\022\020.zera_txn.NFT"
  "TXN\032\026.google.protobuf.Empty\022E\n\016ContractU"
  "pdate\022\033.zera_txn.ContractUpdateTXN\032\026.goo"
  "gle.protobuf.Empty\022=\n\nFoundation\022\027.zera_"
  "txn.FoundationTXN\032\026.google.protobuf.Empt"
  "y\022G\n\017DelegatedVoting\022\034.zera_txn.Delegate"
  "dVotingTXN\032\026.google.protobuf.Empty\0223\n\005Qu"
  "ash\022\022.zera_txn.QuashTXN\032\026.google.protobu"
  "f.Empty\022=\n\nFastQuorum\022\027.zera_txn.FastQuo"
  "rumTXN\032\026.google.protobuf.Empty\0225\n\006Revoke"
  "\022\023.zera_txn.RevokeTXN\032\026.google.protobuf."
  "Empty\022=\n\nCompliance\022\027.zera_txn.Complianc"
  "eTXN\032\026.google.protobuf.Empty\0227\n\007BurnSBT\022"
  "\024.zera_txn.BurnSBTTXN\032\026.google.protobuf."
  "EmptyB\002H\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_txn_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_txn_2eproto_sccs[63] = {
  &scc_info_AuthorizedCurrencyEquiv_txn_2eproto.base,
  &scc_info_BaseTXN_txn_2eproto.base,
  &scc_info_BurnSBTTXN_txn_2eproto.base,
  &scc_info_ByteMultiplier_txn_2eproto.base,
  &scc_info_CoinDenomination_txn_2eproto.base,
  &scc_info_CoinTXN_txn_2eproto.base,
  &scc_info_Compliance_txn_2eproto.base,
  &scc_info_ComplianceAssign_txn_2eproto.base,
  &scc_info_ComplianceTXN_txn_2eproto.base,
  &scc_info_ContractFees_txn_2eproto.base,
  &scc_info_ContractUpdateTXN_txn_2eproto.base,
  &scc_info_CurrencyEquiv_txn_2eproto.base,
  &scc_info_DelegateContract_txn_2eproto.base,
  &scc_info_DelegateFees_txn_2eproto.base,
  &scc_info_DelegateVote_txn_2eproto.base,
  &scc_info_DelegatedVotingTXN_txn_2eproto.base,
  &scc_info_ExpenseRatio_txn_2eproto.base,
  &scc_info_ExpenseRatioResult_txn_2eproto.base,
  &scc_info_ExpenseRatioTXN_txn_2eproto.base,
  &scc_info_FastQuorumTXN_txn_2eproto.base,
  &scc_info_FoundationTXN_txn_2eproto.base,
  &scc_info_Governance_txn_2eproto.base,
  &scc_info_GovernanceAuth_txn_2eproto.base,
  &scc_info_GovernanceProposal_txn_2eproto.base,
  &scc_info_GovernanceTXN_txn_2eproto.base,
  &scc_info_GovernanceVote_txn_2eproto.base,
  &scc_info_InputTransfers_txn_2eproto.base,
  &scc_info_InstrumentContract_txn_2eproto.base,
  &scc_info_ItemContractFees_txn_2eproto.base,
  &scc_info_ItemizedMintTXN_txn_2eproto.base,
  &scc_info_KeyValuePair_txn_2eproto.base,
  &scc_info_MintTXN_txn_2eproto.base,
  &scc_info_MultiKey_txn_2eproto.base,
  &scc_info_MultiPatterns_txn_2eproto.base,
  &scc_info_NFTTXN_txn_2eproto.base,
  &scc_info_NewCoinTXN_txn_2eproto.base,
  &scc_info_OutputTransfers_txn_2eproto.base,
  &scc_info_PreMintWallet_txn_2eproto.base,
  &scc_info_ProposalResult_txn_2eproto.base,
  &scc_info_PublicKey_txn_2eproto.base,
  &scc_info_QuashResult_txn_2eproto.base,
  &scc_info_QuashTXN_txn_2eproto.base,
  &scc_info_RestrictedKey_txn_2eproto.base,
  &scc_info_RevokeTXN_txn_2eproto.base,
  &scc_info_SelfCurrencyEquiv_txn_2eproto.base,
  &scc_info_SmartContractExecuteTXN_txn_2eproto.base,
  &scc_info_SmartContractParameter_txn_2eproto.base,
  &scc_info_SmartContractTXN_txn_2eproto.base,
  &scc_info_Stage_txn_2eproto.base,
  &scc_info_TXNS_txn_2eproto.base,
  &scc_info_TXNStatusFees_txn_2eproto.base,
  &scc_info_TXNWrapper_txn_2eproto.base,
  &scc_info_Token_txn_2eproto.base,
  &scc_info_TokenCompliance_txn_2eproto.base,
  &scc_info_TokenFees_txn_2eproto.base,
  &scc_info_Transfer_txn_2eproto.base,
  &scc_info_TransferAuthentication_txn_2eproto.base,
  &scc_info_Validator_txn_2eproto.base,
  &scc_info_ValidatorHeartbeat_txn_2eproto.base,
  &scc_info_ValidatorRegistration_txn_2eproto.base,
  &scc_info_VotePair_txn_2eproto.base,
  &scc_info_Votes_txn_2eproto.base,
  &scc_info_Wallets_txn_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_txn_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_txn_2eproto = {
  false, false, descriptor_table_protodef_txn_2eproto, "txn.proto", 15697,
  &descriptor_table_txn_2eproto_once, descriptor_table_txn_2eproto_sccs, descriptor_table_txn_2eproto_deps, 63, 2,
  schemas, file_default_instances, TableStruct_txn_2eproto::offsets,
  file_level_metadata_txn_2eproto, 63, file_level_enum_descriptors_txn_2eproto, file_level_service_descriptors_txn_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_txn_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_txn_2eproto)), true);
namespace zera_txn {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TXN_STATUS_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_txn_2eproto);
  return file_level_enum_descriptors_txn_2eproto[0];
}
bool TXN_STATUS_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TRANSACTION_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_txn_2eproto);
  return file_level_enum_descriptors_txn_2eproto[1];
}
bool TRANSACTION_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LANGUAGE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_txn_2eproto);
  return file_level_enum_descriptors_txn_2eproto[2];
}
bool LANGUAGE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PROPOSAL_PERIOD_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_txn_2eproto);
  return file_level_enum_descriptors_txn_2eproto[3];
}
bool PROPOSAL_PERIOD_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VARIABLE_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_txn_2eproto);
  return file_level_enum_descriptors_txn_2eproto[4];
}
bool VARIABLE_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CONTRACT_FEE_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_txn_2eproto);
  return file_level_enum_descriptors_txn_2eproto[5];
}
bool CONTRACT_FEE_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GOVERNANCE_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_txn_2eproto);
  return file_level_enum_descriptors_txn_2eproto[6];
}
bool GOVERNANCE_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CONTRACT_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_txn_2eproto);
  return file_level_enum_descriptors_txn_2eproto[7];
}
bool CONTRACT_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void DelegateContract::InitAsDefaultInstance() {
}
class DelegateContract::_Internal {
 public:
};

DelegateContract::DelegateContract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.DelegateContract)
}
DelegateContract::DelegateContract(const DelegateContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_id().empty()) {
    contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_id(),
      GetArena());
  }
  priority_ = from.priority_;
  // @@protoc_insertion_point(copy_constructor:zera_txn.DelegateContract)
}

void DelegateContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DelegateContract_txn_2eproto.base);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  priority_ = 0;
}

DelegateContract::~DelegateContract() {
  // @@protoc_insertion_point(destructor:zera_txn.DelegateContract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DelegateContract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DelegateContract::ArenaDtor(void* object) {
  DelegateContract* _this = reinterpret_cast< DelegateContract* >(object);
  (void)_this;
}
void DelegateContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DelegateContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DelegateContract& DelegateContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DelegateContract_txn_2eproto.base);
  return *internal_default_instance();
}


void DelegateContract::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.DelegateContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  priority_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelegateContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 priority = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string contract_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.DelegateContract.contract_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DelegateContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.DelegateContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 priority = 1;
  if (this->priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_priority(), target);
  }

  // string contract_id = 2;
  if (this->contract_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_id().data(), static_cast<int>(this->_internal_contract_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.DelegateContract.contract_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_contract_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.DelegateContract)
  return target;
}

size_t DelegateContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.DelegateContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string contract_id = 2;
  if (this->contract_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract_id());
  }

  // int32 priority = 1;
  if (this->priority() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_priority());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelegateContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.DelegateContract)
  GOOGLE_DCHECK_NE(&from, this);
  const DelegateContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DelegateContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.DelegateContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.DelegateContract)
    MergeFrom(*source);
  }
}

void DelegateContract::MergeFrom(const DelegateContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.DelegateContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.contract_id().size() > 0) {
    _internal_set_contract_id(from._internal_contract_id());
  }
  if (from.priority() != 0) {
    _internal_set_priority(from._internal_priority());
  }
}

void DelegateContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.DelegateContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelegateContract::CopyFrom(const DelegateContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.DelegateContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelegateContract::IsInitialized() const {
  return true;
}

void DelegateContract::InternalSwap(DelegateContract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  contract_id_.Swap(&other->contract_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(priority_, other->priority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DelegateContract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DelegatedVotingTXN::InitAsDefaultInstance() {
  ::zera_txn::_DelegatedVotingTXN_default_instance_._instance.get_mutable()->base_ = const_cast< ::zera_txn::BaseTXN*>(
      ::zera_txn::BaseTXN::internal_default_instance());
}
class DelegatedVotingTXN::_Internal {
 public:
  static const ::zera_txn::BaseTXN& base(const DelegatedVotingTXN* msg);
};

const ::zera_txn::BaseTXN&
DelegatedVotingTXN::_Internal::base(const DelegatedVotingTXN* msg) {
  return *msg->base_;
}
DelegatedVotingTXN::DelegatedVotingTXN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  delegate_votes_(arena),
  delegate_fees_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.DelegatedVotingTXN)
}
DelegatedVotingTXN::DelegatedVotingTXN(const DelegatedVotingTXN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      delegate_votes_(from.delegate_votes_),
      delegate_fees_(from.delegate_fees_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::zera_txn::BaseTXN(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zera_txn.DelegatedVotingTXN)
}

void DelegatedVotingTXN::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DelegatedVotingTXN_txn_2eproto.base);
  base_ = nullptr;
}

DelegatedVotingTXN::~DelegatedVotingTXN() {
  // @@protoc_insertion_point(destructor:zera_txn.DelegatedVotingTXN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DelegatedVotingTXN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
}

void DelegatedVotingTXN::ArenaDtor(void* object) {
  DelegatedVotingTXN* _this = reinterpret_cast< DelegatedVotingTXN* >(object);
  (void)_this;
}
void DelegatedVotingTXN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DelegatedVotingTXN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DelegatedVotingTXN& DelegatedVotingTXN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DelegatedVotingTXN_txn_2eproto.base);
  return *internal_default_instance();
}


void DelegatedVotingTXN::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.DelegatedVotingTXN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delegate_votes_.Clear();
  delegate_fees_.Clear();
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelegatedVotingTXN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zera_txn.BaseTXN base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.DelegateVote delegate_votes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delegate_votes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.DelegateFees delegate_fees = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delegate_fees(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DelegatedVotingTXN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.DelegatedVotingTXN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // repeated .zera_txn.DelegateVote delegate_votes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_delegate_votes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_delegate_votes(i), target, stream);
  }

  // repeated .zera_txn.DelegateFees delegate_fees = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_delegate_fees_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_delegate_fees(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.DelegatedVotingTXN)
  return target;
}

size_t DelegatedVotingTXN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.DelegatedVotingTXN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zera_txn.DelegateVote delegate_votes = 2;
  total_size += 1UL * this->_internal_delegate_votes_size();
  for (const auto& msg : this->delegate_votes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zera_txn.DelegateFees delegate_fees = 3;
  total_size += 1UL * this->_internal_delegate_fees_size();
  for (const auto& msg : this->delegate_fees_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelegatedVotingTXN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.DelegatedVotingTXN)
  GOOGLE_DCHECK_NE(&from, this);
  const DelegatedVotingTXN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DelegatedVotingTXN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.DelegatedVotingTXN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.DelegatedVotingTXN)
    MergeFrom(*source);
  }
}

void DelegatedVotingTXN::MergeFrom(const DelegatedVotingTXN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.DelegatedVotingTXN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  delegate_votes_.MergeFrom(from.delegate_votes_);
  delegate_fees_.MergeFrom(from.delegate_fees_);
  if (from.has_base()) {
    _internal_mutable_base()->::zera_txn::BaseTXN::MergeFrom(from._internal_base());
  }
}

void DelegatedVotingTXN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.DelegatedVotingTXN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelegatedVotingTXN::CopyFrom(const DelegatedVotingTXN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.DelegatedVotingTXN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelegatedVotingTXN::IsInitialized() const {
  return true;
}

void DelegatedVotingTXN::InternalSwap(DelegatedVotingTXN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  delegate_votes_.InternalSwap(&other->delegate_votes_);
  delegate_fees_.InternalSwap(&other->delegate_fees_);
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DelegatedVotingTXN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DelegateVote::InitAsDefaultInstance() {
}
class DelegateVote::_Internal {
 public:
};

DelegateVote::DelegateVote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  contracts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.DelegateVote)
}
DelegateVote::DelegateVote(const DelegateVote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      contracts_(from.contracts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:zera_txn.DelegateVote)
}

void DelegateVote::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DelegateVote_txn_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DelegateVote::~DelegateVote() {
  // @@protoc_insertion_point(destructor:zera_txn.DelegateVote)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DelegateVote::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DelegateVote::ArenaDtor(void* object) {
  DelegateVote* _this = reinterpret_cast< DelegateVote* >(object);
  (void)_this;
}
void DelegateVote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DelegateVote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DelegateVote& DelegateVote::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DelegateVote_txn_2eproto.base);
  return *internal_default_instance();
}


void DelegateVote::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.DelegateVote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contracts_.Clear();
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelegateVote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.DelegateContract contracts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contracts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DelegateVote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.DelegateVote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (this->address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  // repeated .zera_txn.DelegateContract contracts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contracts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_contracts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.DelegateVote)
  return target;
}

size_t DelegateVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.DelegateVote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zera_txn.DelegateContract contracts = 2;
  total_size += 1UL * this->_internal_contracts_size();
  for (const auto& msg : this->contracts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelegateVote::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.DelegateVote)
  GOOGLE_DCHECK_NE(&from, this);
  const DelegateVote* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DelegateVote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.DelegateVote)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.DelegateVote)
    MergeFrom(*source);
  }
}

void DelegateVote::MergeFrom(const DelegateVote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.DelegateVote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contracts_.MergeFrom(from.contracts_);
  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
}

void DelegateVote::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.DelegateVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelegateVote::CopyFrom(const DelegateVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.DelegateVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelegateVote::IsInitialized() const {
  return true;
}

void DelegateVote::InternalSwap(DelegateVote* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  contracts_.InternalSwap(&other->contracts_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DelegateVote::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DelegateFees::InitAsDefaultInstance() {
}
class DelegateFees::_Internal {
 public:
};

DelegateFees::DelegateFees(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.DelegateFees)
}
DelegateFees::DelegateFees(const DelegateFees& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_id().empty()) {
    contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_id(),
      GetArena());
  }
  auth_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auth_amount().empty()) {
    auth_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_auth_amount(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:zera_txn.DelegateFees)
}

void DelegateFees::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DelegateFees_txn_2eproto.base);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DelegateFees::~DelegateFees() {
  // @@protoc_insertion_point(destructor:zera_txn.DelegateFees)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DelegateFees::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DelegateFees::ArenaDtor(void* object) {
  DelegateFees* _this = reinterpret_cast< DelegateFees* >(object);
  (void)_this;
}
void DelegateFees::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DelegateFees::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DelegateFees& DelegateFees::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DelegateFees_txn_2eproto.base);
  return *internal_default_instance();
}


void DelegateFees::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.DelegateFees)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  auth_amount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelegateFees::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string contract_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.DelegateFees.contract_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string auth_amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_auth_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.DelegateFees.auth_amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DelegateFees::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.DelegateFees)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string contract_id = 1;
  if (this->contract_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_id().data(), static_cast<int>(this->_internal_contract_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.DelegateFees.contract_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contract_id(), target);
  }

  // string auth_amount = 2;
  if (this->auth_amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_amount().data(), static_cast<int>(this->_internal_auth_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.DelegateFees.auth_amount");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_auth_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.DelegateFees)
  return target;
}

size_t DelegateFees::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.DelegateFees)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string contract_id = 1;
  if (this->contract_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract_id());
  }

  // string auth_amount = 2;
  if (this->auth_amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelegateFees::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.DelegateFees)
  GOOGLE_DCHECK_NE(&from, this);
  const DelegateFees* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DelegateFees>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.DelegateFees)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.DelegateFees)
    MergeFrom(*source);
  }
}

void DelegateFees::MergeFrom(const DelegateFees& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.DelegateFees)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.contract_id().size() > 0) {
    _internal_set_contract_id(from._internal_contract_id());
  }
  if (from.auth_amount().size() > 0) {
    _internal_set_auth_amount(from._internal_auth_amount());
  }
}

void DelegateFees::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.DelegateFees)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelegateFees::CopyFrom(const DelegateFees& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.DelegateFees)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelegateFees::IsInitialized() const {
  return true;
}

void DelegateFees::InternalSwap(DelegateFees* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  contract_id_.Swap(&other->contract_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  auth_amount_.Swap(&other->auth_amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DelegateFees::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Compliance::InitAsDefaultInstance() {
  ::zera_txn::_Compliance_default_instance_._instance.get_mutable()->expiry_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class Compliance::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& expiry(const Compliance* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Compliance::_Internal::expiry(const Compliance* msg) {
  return *msg->expiry_;
}
void Compliance::clear_expiry() {
  if (GetArena() == nullptr && expiry_ != nullptr) {
    delete expiry_;
  }
  expiry_ = nullptr;
}
Compliance::Compliance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.Compliance)
}
Compliance::Compliance(const Compliance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_id().empty()) {
    contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_id(),
      GetArena());
  }
  if (from._internal_has_expiry()) {
    expiry_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.expiry_);
  } else {
    expiry_ = nullptr;
  }
  compliance_level_ = from.compliance_level_;
  // @@protoc_insertion_point(copy_constructor:zera_txn.Compliance)
}

void Compliance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Compliance_txn_2eproto.base);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&expiry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compliance_level_) -
      reinterpret_cast<char*>(&expiry_)) + sizeof(compliance_level_));
}

Compliance::~Compliance() {
  // @@protoc_insertion_point(destructor:zera_txn.Compliance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Compliance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete expiry_;
}

void Compliance::ArenaDtor(void* object) {
  Compliance* _this = reinterpret_cast< Compliance* >(object);
  (void)_this;
}
void Compliance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Compliance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Compliance& Compliance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Compliance_txn_2eproto.base);
  return *internal_default_instance();
}


void Compliance::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.Compliance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && expiry_ != nullptr) {
    delete expiry_;
  }
  expiry_ = nullptr;
  compliance_level_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Compliance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string contract_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.Compliance.contract_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 compliance_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          compliance_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp expiry = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Compliance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.Compliance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string contract_id = 1;
  if (this->contract_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_id().data(), static_cast<int>(this->_internal_contract_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.Compliance.contract_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contract_id(), target);
  }

  // uint32 compliance_level = 2;
  if (this->compliance_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_compliance_level(), target);
  }

  // .google.protobuf.Timestamp expiry = 3;
  if (this->has_expiry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::expiry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.Compliance)
  return target;
}

size_t Compliance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.Compliance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string contract_id = 1;
  if (this->contract_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract_id());
  }

  // .google.protobuf.Timestamp expiry = 3;
  if (this->has_expiry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expiry_);
  }

  // uint32 compliance_level = 2;
  if (this->compliance_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_compliance_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Compliance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.Compliance)
  GOOGLE_DCHECK_NE(&from, this);
  const Compliance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Compliance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.Compliance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.Compliance)
    MergeFrom(*source);
  }
}

void Compliance::MergeFrom(const Compliance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.Compliance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.contract_id().size() > 0) {
    _internal_set_contract_id(from._internal_contract_id());
  }
  if (from.has_expiry()) {
    _internal_mutable_expiry()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_expiry());
  }
  if (from.compliance_level() != 0) {
    _internal_set_compliance_level(from._internal_compliance_level());
  }
}

void Compliance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.Compliance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Compliance::CopyFrom(const Compliance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.Compliance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Compliance::IsInitialized() const {
  return true;
}

void Compliance::InternalSwap(Compliance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  contract_id_.Swap(&other->contract_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Compliance, compliance_level_)
      + sizeof(Compliance::compliance_level_)
      - PROTOBUF_FIELD_OFFSET(Compliance, expiry_)>(
          reinterpret_cast<char*>(&expiry_),
          reinterpret_cast<char*>(&other->expiry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Compliance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TokenCompliance::InitAsDefaultInstance() {
}
class TokenCompliance::_Internal {
 public:
};

TokenCompliance::TokenCompliance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  compliance_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.TokenCompliance)
}
TokenCompliance::TokenCompliance(const TokenCompliance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      compliance_(from.compliance_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zera_txn.TokenCompliance)
}

void TokenCompliance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TokenCompliance_txn_2eproto.base);
}

TokenCompliance::~TokenCompliance() {
  // @@protoc_insertion_point(destructor:zera_txn.TokenCompliance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TokenCompliance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TokenCompliance::ArenaDtor(void* object) {
  TokenCompliance* _this = reinterpret_cast< TokenCompliance* >(object);
  (void)_this;
}
void TokenCompliance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TokenCompliance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TokenCompliance& TokenCompliance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TokenCompliance_txn_2eproto.base);
  return *internal_default_instance();
}


void TokenCompliance::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.TokenCompliance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  compliance_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenCompliance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .zera_txn.Compliance compliance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_compliance(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TokenCompliance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.TokenCompliance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zera_txn.Compliance compliance = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_compliance_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_compliance(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.TokenCompliance)
  return target;
}

size_t TokenCompliance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.TokenCompliance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zera_txn.Compliance compliance = 1;
  total_size += 1UL * this->_internal_compliance_size();
  for (const auto& msg : this->compliance_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TokenCompliance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.TokenCompliance)
  GOOGLE_DCHECK_NE(&from, this);
  const TokenCompliance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TokenCompliance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.TokenCompliance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.TokenCompliance)
    MergeFrom(*source);
  }
}

void TokenCompliance::MergeFrom(const TokenCompliance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.TokenCompliance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  compliance_.MergeFrom(from.compliance_);
}

void TokenCompliance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.TokenCompliance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TokenCompliance::CopyFrom(const TokenCompliance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.TokenCompliance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenCompliance::IsInitialized() const {
  return true;
}

void TokenCompliance::InternalSwap(TokenCompliance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  compliance_.InternalSwap(&other->compliance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenCompliance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExpenseRatio::InitAsDefaultInstance() {
}
class ExpenseRatio::_Internal {
 public:
};

ExpenseRatio::ExpenseRatio(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.ExpenseRatio)
}
ExpenseRatio::ExpenseRatio(const ExpenseRatio& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&day_, &from.day_,
    static_cast<size_t>(reinterpret_cast<char*>(&percent_) -
    reinterpret_cast<char*>(&day_)) + sizeof(percent_));
  // @@protoc_insertion_point(copy_constructor:zera_txn.ExpenseRatio)
}

void ExpenseRatio::SharedCtor() {
  ::memset(&day_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&percent_) -
      reinterpret_cast<char*>(&day_)) + sizeof(percent_));
}

ExpenseRatio::~ExpenseRatio() {
  // @@protoc_insertion_point(destructor:zera_txn.ExpenseRatio)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExpenseRatio::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ExpenseRatio::ArenaDtor(void* object) {
  ExpenseRatio* _this = reinterpret_cast< ExpenseRatio* >(object);
  (void)_this;
}
void ExpenseRatio::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExpenseRatio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExpenseRatio& ExpenseRatio::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExpenseRatio_txn_2eproto.base);
  return *internal_default_instance();
}


void ExpenseRatio::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.ExpenseRatio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&day_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&percent_) -
      reinterpret_cast<char*>(&day_)) + sizeof(percent_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExpenseRatio::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 day = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 month = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 percent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExpenseRatio::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.ExpenseRatio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 day = 1;
  if (this->day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_day(), target);
  }

  // uint32 month = 2;
  if (this->month() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_month(), target);
  }

  // uint32 percent = 3;
  if (this->percent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_percent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.ExpenseRatio)
  return target;
}

size_t ExpenseRatio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.ExpenseRatio)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 day = 1;
  if (this->day() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_day());
  }

  // uint32 month = 2;
  if (this->month() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_month());
  }

  // uint32 percent = 3;
  if (this->percent() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_percent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExpenseRatio::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.ExpenseRatio)
  GOOGLE_DCHECK_NE(&from, this);
  const ExpenseRatio* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExpenseRatio>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.ExpenseRatio)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.ExpenseRatio)
    MergeFrom(*source);
  }
}

void ExpenseRatio::MergeFrom(const ExpenseRatio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.ExpenseRatio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.day() != 0) {
    _internal_set_day(from._internal_day());
  }
  if (from.month() != 0) {
    _internal_set_month(from._internal_month());
  }
  if (from.percent() != 0) {
    _internal_set_percent(from._internal_percent());
  }
}

void ExpenseRatio::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.ExpenseRatio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpenseRatio::CopyFrom(const ExpenseRatio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.ExpenseRatio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpenseRatio::IsInitialized() const {
  return true;
}

void ExpenseRatio::InternalSwap(ExpenseRatio* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExpenseRatio, percent_)
      + sizeof(ExpenseRatio::percent_)
      - PROTOBUF_FIELD_OFFSET(ExpenseRatio, day_)>(
          reinterpret_cast<char*>(&day_),
          reinterpret_cast<char*>(&other->day_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpenseRatio::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KeyValuePair::InitAsDefaultInstance() {
}
class KeyValuePair::_Internal {
 public:
};

KeyValuePair::KeyValuePair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.KeyValuePair)
}
KeyValuePair::KeyValuePair(const KeyValuePair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:zera_txn.KeyValuePair)
}

void KeyValuePair::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeyValuePair_txn_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

KeyValuePair::~KeyValuePair() {
  // @@protoc_insertion_point(destructor:zera_txn.KeyValuePair)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeyValuePair::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KeyValuePair::ArenaDtor(void* object) {
  KeyValuePair* _this = reinterpret_cast< KeyValuePair* >(object);
  (void)_this;
}
void KeyValuePair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyValuePair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyValuePair& KeyValuePair::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyValuePair_txn_2eproto.base);
  return *internal_default_instance();
}


void KeyValuePair::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.KeyValuePair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyValuePair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.KeyValuePair.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.KeyValuePair.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyValuePair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.KeyValuePair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.KeyValuePair.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.KeyValuePair.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.KeyValuePair)
  return target;
}

size_t KeyValuePair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.KeyValuePair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyValuePair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.KeyValuePair)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyValuePair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyValuePair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.KeyValuePair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.KeyValuePair)
    MergeFrom(*source);
  }
}

void KeyValuePair::MergeFrom(const KeyValuePair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.KeyValuePair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void KeyValuePair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.KeyValuePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValuePair::CopyFrom(const KeyValuePair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.KeyValuePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValuePair::IsInitialized() const {
  return true;
}

void KeyValuePair::InternalSwap(KeyValuePair* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyValuePair::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ByteMultiplier::InitAsDefaultInstance() {
}
class ByteMultiplier::_Internal {
 public:
};

ByteMultiplier::ByteMultiplier(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.ByteMultiplier)
}
ByteMultiplier::ByteMultiplier(const ByteMultiplier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  multiplier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_multiplier().empty()) {
    multiplier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_multiplier(),
      GetArena());
  }
  txn_type_ = from.txn_type_;
  // @@protoc_insertion_point(copy_constructor:zera_txn.ByteMultiplier)
}

void ByteMultiplier::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ByteMultiplier_txn_2eproto.base);
  multiplier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txn_type_ = 0;
}

ByteMultiplier::~ByteMultiplier() {
  // @@protoc_insertion_point(destructor:zera_txn.ByteMultiplier)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ByteMultiplier::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  multiplier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ByteMultiplier::ArenaDtor(void* object) {
  ByteMultiplier* _this = reinterpret_cast< ByteMultiplier* >(object);
  (void)_this;
}
void ByteMultiplier::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ByteMultiplier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ByteMultiplier& ByteMultiplier::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ByteMultiplier_txn_2eproto.base);
  return *internal_default_instance();
}


void ByteMultiplier::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.ByteMultiplier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  multiplier_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  txn_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ByteMultiplier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zera_txn.TRANSACTION_TYPE txn_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_txn_type(static_cast<::zera_txn::TRANSACTION_TYPE>(val));
        } else goto handle_unusual;
        continue;
      // string multiplier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_multiplier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.ByteMultiplier.multiplier"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ByteMultiplier::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.ByteMultiplier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zera_txn.TRANSACTION_TYPE txn_type = 1;
  if (this->txn_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_txn_type(), target);
  }

  // string multiplier = 2;
  if (this->multiplier().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_multiplier().data(), static_cast<int>(this->_internal_multiplier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.ByteMultiplier.multiplier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_multiplier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.ByteMultiplier)
  return target;
}

size_t ByteMultiplier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.ByteMultiplier)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string multiplier = 2;
  if (this->multiplier().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_multiplier());
  }

  // .zera_txn.TRANSACTION_TYPE txn_type = 1;
  if (this->txn_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_txn_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ByteMultiplier::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.ByteMultiplier)
  GOOGLE_DCHECK_NE(&from, this);
  const ByteMultiplier* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ByteMultiplier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.ByteMultiplier)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.ByteMultiplier)
    MergeFrom(*source);
  }
}

void ByteMultiplier::MergeFrom(const ByteMultiplier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.ByteMultiplier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.multiplier().size() > 0) {
    _internal_set_multiplier(from._internal_multiplier());
  }
  if (from.txn_type() != 0) {
    _internal_set_txn_type(from._internal_txn_type());
  }
}

void ByteMultiplier::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.ByteMultiplier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ByteMultiplier::CopyFrom(const ByteMultiplier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.ByteMultiplier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ByteMultiplier::IsInitialized() const {
  return true;
}

void ByteMultiplier::InternalSwap(ByteMultiplier* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  multiplier_.Swap(&other->multiplier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(txn_type_, other->txn_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ByteMultiplier::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FoundationTXN::InitAsDefaultInstance() {
  ::zera_txn::_FoundationTXN_default_instance_._instance.get_mutable()->base_ = const_cast< ::zera_txn::BaseTXN*>(
      ::zera_txn::BaseTXN::internal_default_instance());
}
class FoundationTXN::_Internal {
 public:
  using HasBits = decltype(std::declval<FoundationTXN>()._has_bits_);
  static const ::zera_txn::BaseTXN& base(const FoundationTXN* msg);
  static void set_has_fee_iso4217(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zera_txn::BaseTXN&
FoundationTXN::_Internal::base(const FoundationTXN* msg) {
  return *msg->base_;
}
FoundationTXN::FoundationTXN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  restricted_symbols_(arena),
  byte_multiplier_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.FoundationTXN)
}
FoundationTXN::FoundationTXN(const FoundationTXN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      restricted_symbols_(from.restricted_symbols_),
      byte_multiplier_(from.byte_multiplier_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fee_iso4217_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fee_iso4217()) {
    fee_iso4217_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fee_iso4217(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::zera_txn::BaseTXN(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zera_txn.FoundationTXN)
}

void FoundationTXN::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FoundationTXN_txn_2eproto.base);
  fee_iso4217_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

FoundationTXN::~FoundationTXN() {
  // @@protoc_insertion_point(destructor:zera_txn.FoundationTXN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FoundationTXN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  fee_iso4217_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void FoundationTXN::ArenaDtor(void* object) {
  FoundationTXN* _this = reinterpret_cast< FoundationTXN* >(object);
  (void)_this;
}
void FoundationTXN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FoundationTXN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FoundationTXN& FoundationTXN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FoundationTXN_txn_2eproto.base);
  return *internal_default_instance();
}


void FoundationTXN::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.FoundationTXN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  restricted_symbols_.Clear();
  byte_multiplier_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    fee_iso4217_.ClearNonDefaultToEmpty();
  }
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FoundationTXN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zera_txn.BaseTXN base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string restricted_symbols = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_restricted_symbols();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.FoundationTXN.restricted_symbols"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.ByteMultiplier byte_multiplier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_byte_multiplier(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string fee_ISO4217 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_fee_iso4217();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.FoundationTXN.fee_ISO4217"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FoundationTXN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.FoundationTXN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // repeated string restricted_symbols = 2;
  for (int i = 0, n = this->_internal_restricted_symbols_size(); i < n; i++) {
    const auto& s = this->_internal_restricted_symbols(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.FoundationTXN.restricted_symbols");
    target = stream->WriteString(2, s, target);
  }

  // repeated .zera_txn.ByteMultiplier byte_multiplier = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_byte_multiplier_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_byte_multiplier(i), target, stream);
  }

  // string fee_ISO4217 = 4;
  if (_internal_has_fee_iso4217()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fee_iso4217().data(), static_cast<int>(this->_internal_fee_iso4217().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.FoundationTXN.fee_ISO4217");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_fee_iso4217(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.FoundationTXN)
  return target;
}

size_t FoundationTXN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.FoundationTXN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string restricted_symbols = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(restricted_symbols_.size());
  for (int i = 0, n = restricted_symbols_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      restricted_symbols_.Get(i));
  }

  // repeated .zera_txn.ByteMultiplier byte_multiplier = 3;
  total_size += 1UL * this->_internal_byte_multiplier_size();
  for (const auto& msg : this->byte_multiplier_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string fee_ISO4217 = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fee_iso4217());
  }

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FoundationTXN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.FoundationTXN)
  GOOGLE_DCHECK_NE(&from, this);
  const FoundationTXN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FoundationTXN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.FoundationTXN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.FoundationTXN)
    MergeFrom(*source);
  }
}

void FoundationTXN::MergeFrom(const FoundationTXN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.FoundationTXN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  restricted_symbols_.MergeFrom(from.restricted_symbols_);
  byte_multiplier_.MergeFrom(from.byte_multiplier_);
  if (from._internal_has_fee_iso4217()) {
    _internal_set_fee_iso4217(from._internal_fee_iso4217());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::zera_txn::BaseTXN::MergeFrom(from._internal_base());
  }
}

void FoundationTXN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.FoundationTXN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FoundationTXN::CopyFrom(const FoundationTXN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.FoundationTXN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FoundationTXN::IsInitialized() const {
  return true;
}

void FoundationTXN::InternalSwap(FoundationTXN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  restricted_symbols_.InternalSwap(&other->restricted_symbols_);
  byte_multiplier_.InternalSwap(&other->byte_multiplier_);
  fee_iso4217_.Swap(&other->fee_iso4217_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FoundationTXN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RevokeTXN::InitAsDefaultInstance() {
  ::zera_txn::_RevokeTXN_default_instance_._instance.get_mutable()->base_ = const_cast< ::zera_txn::BaseTXN*>(
      ::zera_txn::BaseTXN::internal_default_instance());
}
class RevokeTXN::_Internal {
 public:
  static const ::zera_txn::BaseTXN& base(const RevokeTXN* msg);
};

const ::zera_txn::BaseTXN&
RevokeTXN::_Internal::base(const RevokeTXN* msg) {
  return *msg->base_;
}
RevokeTXN::RevokeTXN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.RevokeTXN)
}
RevokeTXN::RevokeTXN(const RevokeTXN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_id().empty()) {
    contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_id(),
      GetArena());
  }
  recipient_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recipient_address().empty()) {
    recipient_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_recipient_address(),
      GetArena());
  }
  item_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_item_id().empty()) {
    item_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_item_id(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::zera_txn::BaseTXN(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zera_txn.RevokeTXN)
}

void RevokeTXN::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RevokeTXN_txn_2eproto.base);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

RevokeTXN::~RevokeTXN() {
  // @@protoc_insertion_point(destructor:zera_txn.RevokeTXN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RevokeTXN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void RevokeTXN::ArenaDtor(void* object) {
  RevokeTXN* _this = reinterpret_cast< RevokeTXN* >(object);
  (void)_this;
}
void RevokeTXN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RevokeTXN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RevokeTXN& RevokeTXN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RevokeTXN_txn_2eproto.base);
  return *internal_default_instance();
}


void RevokeTXN::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.RevokeTXN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  recipient_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  item_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RevokeTXN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zera_txn.BaseTXN base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string contract_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.RevokeTXN.contract_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes recipient_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_recipient_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string item_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_item_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.RevokeTXN.item_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RevokeTXN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.RevokeTXN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string contract_id = 2;
  if (this->contract_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_id().data(), static_cast<int>(this->_internal_contract_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.RevokeTXN.contract_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_contract_id(), target);
  }

  // bytes recipient_address = 3;
  if (this->recipient_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_recipient_address(), target);
  }

  // string item_id = 4;
  if (this->item_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_item_id().data(), static_cast<int>(this->_internal_item_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.RevokeTXN.item_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.RevokeTXN)
  return target;
}

size_t RevokeTXN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.RevokeTXN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string contract_id = 2;
  if (this->contract_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract_id());
  }

  // bytes recipient_address = 3;
  if (this->recipient_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_recipient_address());
  }

  // string item_id = 4;
  if (this->item_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_item_id());
  }

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RevokeTXN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.RevokeTXN)
  GOOGLE_DCHECK_NE(&from, this);
  const RevokeTXN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RevokeTXN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.RevokeTXN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.RevokeTXN)
    MergeFrom(*source);
  }
}

void RevokeTXN::MergeFrom(const RevokeTXN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.RevokeTXN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.contract_id().size() > 0) {
    _internal_set_contract_id(from._internal_contract_id());
  }
  if (from.recipient_address().size() > 0) {
    _internal_set_recipient_address(from._internal_recipient_address());
  }
  if (from.item_id().size() > 0) {
    _internal_set_item_id(from._internal_item_id());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::zera_txn::BaseTXN::MergeFrom(from._internal_base());
  }
}

void RevokeTXN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.RevokeTXN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RevokeTXN::CopyFrom(const RevokeTXN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.RevokeTXN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevokeTXN::IsInitialized() const {
  return true;
}

void RevokeTXN::InternalSwap(RevokeTXN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  contract_id_.Swap(&other->contract_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  recipient_address_.Swap(&other->recipient_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  item_id_.Swap(&other->item_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RevokeTXN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FastQuorumTXN::InitAsDefaultInstance() {
  ::zera_txn::_FastQuorumTXN_default_instance_._instance.get_mutable()->base_ = const_cast< ::zera_txn::BaseTXN*>(
      ::zera_txn::BaseTXN::internal_default_instance());
}
class FastQuorumTXN::_Internal {
 public:
  static const ::zera_txn::BaseTXN& base(const FastQuorumTXN* msg);
};

const ::zera_txn::BaseTXN&
FastQuorumTXN::_Internal::base(const FastQuorumTXN* msg) {
  return *msg->base_;
}
FastQuorumTXN::FastQuorumTXN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.FastQuorumTXN)
}
FastQuorumTXN::FastQuorumTXN(const FastQuorumTXN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  proposal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_proposal_id().empty()) {
    proposal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_proposal_id(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::zera_txn::BaseTXN(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zera_txn.FastQuorumTXN)
}

void FastQuorumTXN::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FastQuorumTXN_txn_2eproto.base);
  proposal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

FastQuorumTXN::~FastQuorumTXN() {
  // @@protoc_insertion_point(destructor:zera_txn.FastQuorumTXN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FastQuorumTXN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  proposal_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void FastQuorumTXN::ArenaDtor(void* object) {
  FastQuorumTXN* _this = reinterpret_cast< FastQuorumTXN* >(object);
  (void)_this;
}
void FastQuorumTXN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FastQuorumTXN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FastQuorumTXN& FastQuorumTXN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FastQuorumTXN_txn_2eproto.base);
  return *internal_default_instance();
}


void FastQuorumTXN::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.FastQuorumTXN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proposal_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FastQuorumTXN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zera_txn.BaseTXN base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes proposal_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_proposal_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FastQuorumTXN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.FastQuorumTXN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // bytes proposal_id = 2;
  if (this->proposal_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_proposal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.FastQuorumTXN)
  return target;
}

size_t FastQuorumTXN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.FastQuorumTXN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes proposal_id = 2;
  if (this->proposal_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_proposal_id());
  }

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FastQuorumTXN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.FastQuorumTXN)
  GOOGLE_DCHECK_NE(&from, this);
  const FastQuorumTXN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FastQuorumTXN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.FastQuorumTXN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.FastQuorumTXN)
    MergeFrom(*source);
  }
}

void FastQuorumTXN::MergeFrom(const FastQuorumTXN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.FastQuorumTXN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.proposal_id().size() > 0) {
    _internal_set_proposal_id(from._internal_proposal_id());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::zera_txn::BaseTXN::MergeFrom(from._internal_base());
  }
}

void FastQuorumTXN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.FastQuorumTXN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastQuorumTXN::CopyFrom(const FastQuorumTXN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.FastQuorumTXN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastQuorumTXN::IsInitialized() const {
  return true;
}

void FastQuorumTXN::InternalSwap(FastQuorumTXN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  proposal_id_.Swap(&other->proposal_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FastQuorumTXN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Governance::InitAsDefaultInstance() {
  ::zera_txn::_Governance_default_instance_._instance.get_mutable()->start_timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class Governance::_Internal {
 public:
  using HasBits = decltype(std::declval<Governance>()._has_bits_);
  static void set_has_fast_quorum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chicken_dinner(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_voting_period(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_proposal_period(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const PROTOBUF_NAMESPACE_ID::Timestamp& start_timestamp(const Governance* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Governance::_Internal::start_timestamp(const Governance* msg) {
  return *msg->start_timestamp_;
}
void Governance::clear_start_timestamp() {
  if (GetArena() == nullptr && start_timestamp_ != nullptr) {
    delete start_timestamp_;
  }
  start_timestamp_ = nullptr;
}
Governance::Governance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  voting_instrument_(arena),
  allowed_proposal_instrument_(arena),
  stage_length_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.Governance)
}
Governance::Governance(const Governance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      voting_instrument_(from.voting_instrument_),
      allowed_proposal_instrument_(from.allowed_proposal_instrument_),
      stage_length_(from.stage_length_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start_timestamp()) {
    start_timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_timestamp_);
  } else {
    start_timestamp_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&proposal_period_) -
    reinterpret_cast<char*>(&type_)) + sizeof(proposal_period_));
  // @@protoc_insertion_point(copy_constructor:zera_txn.Governance)
}

void Governance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Governance_txn_2eproto.base);
  ::memset(&start_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&proposal_period_) -
      reinterpret_cast<char*>(&start_timestamp_)) + sizeof(proposal_period_));
}

Governance::~Governance() {
  // @@protoc_insertion_point(destructor:zera_txn.Governance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Governance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete start_timestamp_;
}

void Governance::ArenaDtor(void* object) {
  Governance* _this = reinterpret_cast< Governance* >(object);
  (void)_this;
}
void Governance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Governance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Governance& Governance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Governance_txn_2eproto.base);
  return *internal_default_instance();
}


void Governance::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.Governance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  voting_instrument_.Clear();
  allowed_proposal_instrument_.Clear();
  stage_length_.Clear();
  if (GetArena() == nullptr && start_timestamp_ != nullptr) {
    delete start_timestamp_;
  }
  start_timestamp_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&regular_quorum_) -
      reinterpret_cast<char*>(&type_)) + sizeof(regular_quorum_));
  fast_quorum_ = 0u;
  threshold_ = 0u;
  chicken_dinner_ = false;
  allow_multi_ = false;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&voting_period_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&proposal_period_) -
        reinterpret_cast<char*>(&voting_period_)) + sizeof(proposal_period_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Governance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zera_txn.GOVERNANCE_TYPE type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::zera_txn::GOVERNANCE_TYPE>(val));
        } else goto handle_unusual;
        continue;
      // uint32 regular_quorum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          regular_quorum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 fast_quorum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_fast_quorum(&has_bits);
          fast_quorum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string voting_instrument = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_voting_instrument();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.Governance.voting_instrument"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 threshold = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool chicken_dinner = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_chicken_dinner(&has_bits);
          chicken_dinner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool allow_multi = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          allow_multi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 voting_period = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_voting_period(&has_bits);
          voting_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string allowed_proposal_instrument = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_allowed_proposal_instrument();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.Governance.allowed_proposal_instrument"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // .zera_txn.PROPOSAL_PERIOD proposal_period = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_proposal_period(static_cast<::zera_txn::PROPOSAL_PERIOD>(val));
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.Stage stage_length = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stage_length(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_timestamp = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Governance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.Governance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zera_txn.GOVERNANCE_TYPE type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // uint32 regular_quorum = 2;
  if (this->regular_quorum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_regular_quorum(), target);
  }

  // uint32 fast_quorum = 3;
  if (_internal_has_fast_quorum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_fast_quorum(), target);
  }

  // repeated string voting_instrument = 4;
  for (int i = 0, n = this->_internal_voting_instrument_size(); i < n; i++) {
    const auto& s = this->_internal_voting_instrument(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.Governance.voting_instrument");
    target = stream->WriteString(4, s, target);
  }

  // uint32 threshold = 5;
  if (this->threshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_threshold(), target);
  }

  // bool chicken_dinner = 6;
  if (_internal_has_chicken_dinner()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_chicken_dinner(), target);
  }

  // bool allow_multi = 7;
  if (this->allow_multi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_allow_multi(), target);
  }

  // uint32 voting_period = 8;
  if (_internal_has_voting_period()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_voting_period(), target);
  }

  // repeated string allowed_proposal_instrument = 9;
  for (int i = 0, n = this->_internal_allowed_proposal_instrument_size(); i < n; i++) {
    const auto& s = this->_internal_allowed_proposal_instrument(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.Governance.allowed_proposal_instrument");
    target = stream->WriteString(9, s, target);
  }

  // .zera_txn.PROPOSAL_PERIOD proposal_period = 10;
  if (_internal_has_proposal_period()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_proposal_period(), target);
  }

  // repeated .zera_txn.Stage stage_length = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stage_length_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_stage_length(i), target, stream);
  }

  // .google.protobuf.Timestamp start_timestamp = 12;
  if (this->has_start_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::start_timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.Governance)
  return target;
}

size_t Governance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.Governance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string voting_instrument = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(voting_instrument_.size());
  for (int i = 0, n = voting_instrument_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      voting_instrument_.Get(i));
  }

  // repeated string allowed_proposal_instrument = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(allowed_proposal_instrument_.size());
  for (int i = 0, n = allowed_proposal_instrument_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      allowed_proposal_instrument_.Get(i));
  }

  // repeated .zera_txn.Stage stage_length = 11;
  total_size += 1UL * this->_internal_stage_length_size();
  for (const auto& msg : this->stage_length_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp start_timestamp = 12;
  if (this->has_start_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_timestamp_);
  }

  // .zera_txn.GOVERNANCE_TYPE type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 regular_quorum = 2;
  if (this->regular_quorum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_regular_quorum());
  }

  // uint32 fast_quorum = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fast_quorum());
  }

  // uint32 threshold = 5;
  if (this->threshold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_threshold());
  }

  // bool chicken_dinner = 6;
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  // bool allow_multi = 7;
  if (this->allow_multi() != 0) {
    total_size += 1 + 1;
  }

  if (cached_has_bits & 0x0000000cu) {
    // uint32 voting_period = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_voting_period());
    }

    // .zera_txn.PROPOSAL_PERIOD proposal_period = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_proposal_period());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Governance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.Governance)
  GOOGLE_DCHECK_NE(&from, this);
  const Governance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Governance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.Governance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.Governance)
    MergeFrom(*source);
  }
}

void Governance::MergeFrom(const Governance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.Governance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  voting_instrument_.MergeFrom(from.voting_instrument_);
  allowed_proposal_instrument_.MergeFrom(from.allowed_proposal_instrument_);
  stage_length_.MergeFrom(from.stage_length_);
  if (from.has_start_timestamp()) {
    _internal_mutable_start_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_timestamp());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.regular_quorum() != 0) {
    _internal_set_regular_quorum(from._internal_regular_quorum());
  }
  if (from._internal_has_fast_quorum()) {
    _internal_set_fast_quorum(from._internal_fast_quorum());
  }
  if (from.threshold() != 0) {
    _internal_set_threshold(from._internal_threshold());
  }
  if (from._internal_has_chicken_dinner()) {
    _internal_set_chicken_dinner(from._internal_chicken_dinner());
  }
  if (from.allow_multi() != 0) {
    _internal_set_allow_multi(from._internal_allow_multi());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    if (cached_has_bits & 0x00000004u) {
      voting_period_ = from.voting_period_;
    }
    if (cached_has_bits & 0x00000008u) {
      proposal_period_ = from.proposal_period_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Governance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.Governance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Governance::CopyFrom(const Governance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.Governance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Governance::IsInitialized() const {
  return true;
}

void Governance::InternalSwap(Governance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  voting_instrument_.InternalSwap(&other->voting_instrument_);
  allowed_proposal_instrument_.InternalSwap(&other->allowed_proposal_instrument_);
  stage_length_.InternalSwap(&other->stage_length_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Governance, proposal_period_)
      + sizeof(Governance::proposal_period_)
      - PROTOBUF_FIELD_OFFSET(Governance, start_timestamp_)>(
          reinterpret_cast<char*>(&start_timestamp_),
          reinterpret_cast<char*>(&other->start_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Governance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Stage::InitAsDefaultInstance() {
}
class Stage::_Internal {
 public:
};

Stage::Stage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.Stage)
}
Stage::Stage(const Stage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&break__) -
    reinterpret_cast<char*>(&length_)) + sizeof(break__));
  // @@protoc_insertion_point(copy_constructor:zera_txn.Stage)
}

void Stage::SharedCtor() {
  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&break__) -
      reinterpret_cast<char*>(&length_)) + sizeof(break__));
}

Stage::~Stage() {
  // @@protoc_insertion_point(destructor:zera_txn.Stage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Stage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Stage::ArenaDtor(void* object) {
  Stage* _this = reinterpret_cast< Stage* >(object);
  (void)_this;
}
void Stage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Stage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Stage& Stage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Stage_txn_2eproto.base);
  return *internal_default_instance();
}


void Stage::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.Stage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&break__) -
      reinterpret_cast<char*>(&length_)) + sizeof(break__));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zera_txn.PROPOSAL_PERIOD period = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_period(static_cast<::zera_txn::PROPOSAL_PERIOD>(val));
        } else goto handle_unusual;
        continue;
      // bool break = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          break__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Stage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.Stage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 length = 1;
  if (this->length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_length(), target);
  }

  // .zera_txn.PROPOSAL_PERIOD period = 2;
  if (this->period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_period(), target);
  }

  // bool break = 3;
  if (this->break_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_break_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.Stage)
  return target;
}

size_t Stage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.Stage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 length = 1;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_length());
  }

  // .zera_txn.PROPOSAL_PERIOD period = 2;
  if (this->period() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_period());
  }

  // bool break = 3;
  if (this->break_() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.Stage)
  GOOGLE_DCHECK_NE(&from, this);
  const Stage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Stage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.Stage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.Stage)
    MergeFrom(*source);
  }
}

void Stage::MergeFrom(const Stage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.Stage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.length() != 0) {
    _internal_set_length(from._internal_length());
  }
  if (from.period() != 0) {
    _internal_set_period(from._internal_period());
  }
  if (from.break_() != 0) {
    _internal_set_break_(from._internal_break_());
  }
}

void Stage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.Stage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stage::CopyFrom(const Stage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.Stage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stage::IsInitialized() const {
  return true;
}

void Stage::InternalSwap(Stage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Stage, break__)
      + sizeof(Stage::break__)
      - PROTOBUF_FIELD_OFFSET(Stage, length_)>(
          reinterpret_cast<char*>(&length_),
          reinterpret_cast<char*>(&other->length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Stage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CoinDenomination::InitAsDefaultInstance() {
}
class CoinDenomination::_Internal {
 public:
};

CoinDenomination::CoinDenomination(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.CoinDenomination)
}
CoinDenomination::CoinDenomination(const CoinDenomination& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  denomination_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_denomination_name().empty()) {
    denomination_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_denomination_name(),
      GetArena());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_amount(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:zera_txn.CoinDenomination)
}

void CoinDenomination::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CoinDenomination_txn_2eproto.base);
  denomination_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CoinDenomination::~CoinDenomination() {
  // @@protoc_insertion_point(destructor:zera_txn.CoinDenomination)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CoinDenomination::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  denomination_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CoinDenomination::ArenaDtor(void* object) {
  CoinDenomination* _this = reinterpret_cast< CoinDenomination* >(object);
  (void)_this;
}
void CoinDenomination::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CoinDenomination::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CoinDenomination& CoinDenomination::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CoinDenomination_txn_2eproto.base);
  return *internal_default_instance();
}


void CoinDenomination::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.CoinDenomination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  denomination_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CoinDenomination::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string denomination_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_denomination_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.CoinDenomination.denomination_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.CoinDenomination.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CoinDenomination::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.CoinDenomination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string denomination_name = 5;
  if (this->denomination_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_denomination_name().data(), static_cast<int>(this->_internal_denomination_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.CoinDenomination.denomination_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_denomination_name(), target);
  }

  // string amount = 6;
  if (this->amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.CoinDenomination.amount");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.CoinDenomination)
  return target;
}

size_t CoinDenomination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.CoinDenomination)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string denomination_name = 5;
  if (this->denomination_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_denomination_name());
  }

  // string amount = 6;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CoinDenomination::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.CoinDenomination)
  GOOGLE_DCHECK_NE(&from, this);
  const CoinDenomination* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CoinDenomination>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.CoinDenomination)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.CoinDenomination)
    MergeFrom(*source);
  }
}

void CoinDenomination::MergeFrom(const CoinDenomination& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.CoinDenomination)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.denomination_name().size() > 0) {
    _internal_set_denomination_name(from._internal_denomination_name());
  }
  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void CoinDenomination::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.CoinDenomination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoinDenomination::CopyFrom(const CoinDenomination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.CoinDenomination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoinDenomination::IsInitialized() const {
  return true;
}

void CoinDenomination::InternalSwap(CoinDenomination* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  denomination_name_.Swap(&other->denomination_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CoinDenomination::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractFees::InitAsDefaultInstance() {
}
class ContractFees::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractFees>()._has_bits_);
  static void set_has_fee_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ContractFees::ContractFees(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  allowed_fee_instrument_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.ContractFees)
}
ContractFees::ContractFees(const ContractFees& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      allowed_fee_instrument_(from.allowed_fee_instrument_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fee().empty()) {
    fee_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fee(),
      GetArena());
  }
  fee_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fee_address()) {
    fee_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fee_address(),
      GetArena());
  }
  burn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_burn().empty()) {
    burn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_burn(),
      GetArena());
  }
  validator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_validator().empty()) {
    validator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_validator(),
      GetArena());
  }
  contract_fee_type_ = from.contract_fee_type_;
  // @@protoc_insertion_point(copy_constructor:zera_txn.ContractFees)
}

void ContractFees::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractFees_txn_2eproto.base);
  fee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fee_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  burn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_fee_type_ = 0;
}

ContractFees::~ContractFees() {
  // @@protoc_insertion_point(destructor:zera_txn.ContractFees)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContractFees::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  fee_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fee_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  burn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validator_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContractFees::ArenaDtor(void* object) {
  ContractFees* _this = reinterpret_cast< ContractFees* >(object);
  (void)_this;
}
void ContractFees::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContractFees::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractFees& ContractFees::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractFees_txn_2eproto.base);
  return *internal_default_instance();
}


void ContractFees::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.ContractFees)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allowed_fee_instrument_.Clear();
  fee_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    fee_address_.ClearNonDefaultToEmpty();
  }
  burn_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  validator_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contract_fee_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractFees::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string fee = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_fee();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.ContractFees.fee"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes fee_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_fee_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string burn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_burn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.ContractFees.burn"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string validator = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_validator();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.ContractFees.validator"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string allowed_fee_instrument = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_allowed_fee_instrument();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.ContractFees.allowed_fee_instrument"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .zera_txn.CONTRACT_FEE_TYPE contract_fee_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_contract_fee_type(static_cast<::zera_txn::CONTRACT_FEE_TYPE>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractFees::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.ContractFees)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fee = 1;
  if (this->fee().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fee().data(), static_cast<int>(this->_internal_fee().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.ContractFees.fee");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_fee(), target);
  }

  // bytes fee_address = 2;
  if (_internal_has_fee_address()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_fee_address(), target);
  }

  // string burn = 3;
  if (this->burn().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_burn().data(), static_cast<int>(this->_internal_burn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.ContractFees.burn");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_burn(), target);
  }

  // string validator = 4;
  if (this->validator().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_validator().data(), static_cast<int>(this->_internal_validator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.ContractFees.validator");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_validator(), target);
  }

  // repeated string allowed_fee_instrument = 5;
  for (int i = 0, n = this->_internal_allowed_fee_instrument_size(); i < n; i++) {
    const auto& s = this->_internal_allowed_fee_instrument(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.ContractFees.allowed_fee_instrument");
    target = stream->WriteString(5, s, target);
  }

  // .zera_txn.CONTRACT_FEE_TYPE contract_fee_type = 6;
  if (this->contract_fee_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_contract_fee_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.ContractFees)
  return target;
}

size_t ContractFees::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.ContractFees)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string allowed_fee_instrument = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(allowed_fee_instrument_.size());
  for (int i = 0, n = allowed_fee_instrument_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      allowed_fee_instrument_.Get(i));
  }

  // string fee = 1;
  if (this->fee().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fee());
  }

  // bytes fee_address = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_fee_address());
  }

  // string burn = 3;
  if (this->burn().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_burn());
  }

  // string validator = 4;
  if (this->validator().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_validator());
  }

  // .zera_txn.CONTRACT_FEE_TYPE contract_fee_type = 6;
  if (this->contract_fee_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_contract_fee_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractFees::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.ContractFees)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractFees* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractFees>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.ContractFees)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.ContractFees)
    MergeFrom(*source);
  }
}

void ContractFees::MergeFrom(const ContractFees& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.ContractFees)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allowed_fee_instrument_.MergeFrom(from.allowed_fee_instrument_);
  if (from.fee().size() > 0) {
    _internal_set_fee(from._internal_fee());
  }
  if (from._internal_has_fee_address()) {
    _internal_set_fee_address(from._internal_fee_address());
  }
  if (from.burn().size() > 0) {
    _internal_set_burn(from._internal_burn());
  }
  if (from.validator().size() > 0) {
    _internal_set_validator(from._internal_validator());
  }
  if (from.contract_fee_type() != 0) {
    _internal_set_contract_fee_type(from._internal_contract_fee_type());
  }
}

void ContractFees::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.ContractFees)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractFees::CopyFrom(const ContractFees& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.ContractFees)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractFees::IsInitialized() const {
  return true;
}

void ContractFees::InternalSwap(ContractFees* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  allowed_fee_instrument_.InternalSwap(&other->allowed_fee_instrument_);
  fee_.Swap(&other->fee_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fee_address_.Swap(&other->fee_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  burn_.Swap(&other->burn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  validator_.Swap(&other->validator_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(contract_fee_type_, other->contract_fee_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractFees::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ItemContractFees::InitAsDefaultInstance() {
}
class ItemContractFees::_Internal {
 public:
  using HasBits = decltype(std::declval<ItemContractFees>()._has_bits_);
  static void set_has_fee_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ItemContractFees::ItemContractFees(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  allowed_fee_instrument_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.ItemContractFees)
}
ItemContractFees::ItemContractFees(const ItemContractFees& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      allowed_fee_instrument_(from.allowed_fee_instrument_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fee().empty()) {
    fee_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fee(),
      GetArena());
  }
  fee_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fee_address()) {
    fee_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fee_address(),
      GetArena());
  }
  burn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_burn().empty()) {
    burn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_burn(),
      GetArena());
  }
  validator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_validator().empty()) {
    validator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_validator(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:zera_txn.ItemContractFees)
}

void ItemContractFees::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ItemContractFees_txn_2eproto.base);
  fee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fee_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  burn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ItemContractFees::~ItemContractFees() {
  // @@protoc_insertion_point(destructor:zera_txn.ItemContractFees)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ItemContractFees::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  fee_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fee_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  burn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validator_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ItemContractFees::ArenaDtor(void* object) {
  ItemContractFees* _this = reinterpret_cast< ItemContractFees* >(object);
  (void)_this;
}
void ItemContractFees::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ItemContractFees::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ItemContractFees& ItemContractFees::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ItemContractFees_txn_2eproto.base);
  return *internal_default_instance();
}


void ItemContractFees::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.ItemContractFees)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allowed_fee_instrument_.Clear();
  fee_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    fee_address_.ClearNonDefaultToEmpty();
  }
  burn_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  validator_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemContractFees::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string fee = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_fee();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.ItemContractFees.fee"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes fee_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_fee_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string burn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_burn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.ItemContractFees.burn"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string validator = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_validator();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.ItemContractFees.validator"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string allowed_fee_instrument = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_allowed_fee_instrument();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.ItemContractFees.allowed_fee_instrument"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ItemContractFees::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.ItemContractFees)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fee = 1;
  if (this->fee().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fee().data(), static_cast<int>(this->_internal_fee().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.ItemContractFees.fee");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_fee(), target);
  }

  // bytes fee_address = 2;
  if (_internal_has_fee_address()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_fee_address(), target);
  }

  // string burn = 3;
  if (this->burn().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_burn().data(), static_cast<int>(this->_internal_burn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.ItemContractFees.burn");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_burn(), target);
  }

  // string validator = 4;
  if (this->validator().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_validator().data(), static_cast<int>(this->_internal_validator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.ItemContractFees.validator");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_validator(), target);
  }

  // repeated string allowed_fee_instrument = 5;
  for (int i = 0, n = this->_internal_allowed_fee_instrument_size(); i < n; i++) {
    const auto& s = this->_internal_allowed_fee_instrument(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.ItemContractFees.allowed_fee_instrument");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.ItemContractFees)
  return target;
}

size_t ItemContractFees::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.ItemContractFees)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string allowed_fee_instrument = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(allowed_fee_instrument_.size());
  for (int i = 0, n = allowed_fee_instrument_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      allowed_fee_instrument_.Get(i));
  }

  // string fee = 1;
  if (this->fee().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fee());
  }

  // bytes fee_address = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_fee_address());
  }

  // string burn = 3;
  if (this->burn().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_burn());
  }

  // string validator = 4;
  if (this->validator().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_validator());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ItemContractFees::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.ItemContractFees)
  GOOGLE_DCHECK_NE(&from, this);
  const ItemContractFees* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ItemContractFees>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.ItemContractFees)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.ItemContractFees)
    MergeFrom(*source);
  }
}

void ItemContractFees::MergeFrom(const ItemContractFees& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.ItemContractFees)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allowed_fee_instrument_.MergeFrom(from.allowed_fee_instrument_);
  if (from.fee().size() > 0) {
    _internal_set_fee(from._internal_fee());
  }
  if (from._internal_has_fee_address()) {
    _internal_set_fee_address(from._internal_fee_address());
  }
  if (from.burn().size() > 0) {
    _internal_set_burn(from._internal_burn());
  }
  if (from.validator().size() > 0) {
    _internal_set_validator(from._internal_validator());
  }
}

void ItemContractFees::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.ItemContractFees)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemContractFees::CopyFrom(const ItemContractFees& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.ItemContractFees)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemContractFees::IsInitialized() const {
  return true;
}

void ItemContractFees::InternalSwap(ItemContractFees* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  allowed_fee_instrument_.InternalSwap(&other->allowed_fee_instrument_);
  fee_.Swap(&other->fee_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fee_address_.Swap(&other->fee_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  burn_.Swap(&other->burn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  validator_.Swap(&other->validator_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemContractFees::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RestrictedKey::InitAsDefaultInstance() {
  ::zera_txn::_RestrictedKey_default_instance_._instance.get_mutable()->public_key_ = const_cast< ::zera_txn::PublicKey*>(
      ::zera_txn::PublicKey::internal_default_instance());
}
class RestrictedKey::_Internal {
 public:
  static const ::zera_txn::PublicKey& public_key(const RestrictedKey* msg);
};

const ::zera_txn::PublicKey&
RestrictedKey::_Internal::public_key(const RestrictedKey* msg) {
  return *msg->public_key_;
}
RestrictedKey::RestrictedKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.RestrictedKey)
}
RestrictedKey::RestrictedKey(const RestrictedKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_public_key()) {
    public_key_ = new ::zera_txn::PublicKey(*from.public_key_);
  } else {
    public_key_ = nullptr;
  }
  ::memcpy(&time_delay_, &from.time_delay_,
    static_cast<size_t>(reinterpret_cast<char*>(&key_weight_) -
    reinterpret_cast<char*>(&time_delay_)) + sizeof(key_weight_));
  // @@protoc_insertion_point(copy_constructor:zera_txn.RestrictedKey)
}

void RestrictedKey::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RestrictedKey_txn_2eproto.base);
  ::memset(&public_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_weight_) -
      reinterpret_cast<char*>(&public_key_)) + sizeof(key_weight_));
}

RestrictedKey::~RestrictedKey() {
  // @@protoc_insertion_point(destructor:zera_txn.RestrictedKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RestrictedKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete public_key_;
}

void RestrictedKey::ArenaDtor(void* object) {
  RestrictedKey* _this = reinterpret_cast< RestrictedKey* >(object);
  (void)_this;
}
void RestrictedKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RestrictedKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RestrictedKey& RestrictedKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RestrictedKey_txn_2eproto.base);
  return *internal_default_instance();
}


void RestrictedKey::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.RestrictedKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && public_key_ != nullptr) {
    delete public_key_;
  }
  public_key_ = nullptr;
  ::memset(&time_delay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_weight_) -
      reinterpret_cast<char*>(&time_delay_)) + sizeof(key_weight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RestrictedKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zera_txn.PublicKey public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_public_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time_delay = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool global = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          global_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool update_contract = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          update_contract_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool transfer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          transfer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool quash = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          quash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mint = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          mint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool vote = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          vote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool propose = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          propose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool compliance = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          compliance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool expense_ratio = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          expense_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool cur_equiv = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          cur_equiv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool revoke = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          revoke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 key_weight = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          key_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RestrictedKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.RestrictedKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zera_txn.PublicKey public_key = 1;
  if (this->has_public_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::public_key(this), target, stream);
  }

  // int64 time_delay = 2;
  if (this->time_delay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_time_delay(), target);
  }

  // bool global = 3;
  if (this->global() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_global(), target);
  }

  // bool update_contract = 4;
  if (this->update_contract() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_update_contract(), target);
  }

  // bool transfer = 5;
  if (this->transfer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_transfer(), target);
  }

  // bool quash = 6;
  if (this->quash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_quash(), target);
  }

  // bool mint = 7;
  if (this->mint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_mint(), target);
  }

  // bool vote = 8;
  if (this->vote() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_vote(), target);
  }

  // bool propose = 9;
  if (this->propose() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_propose(), target);
  }

  // bool compliance = 10;
  if (this->compliance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_compliance(), target);
  }

  // bool expense_ratio = 11;
  if (this->expense_ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_expense_ratio(), target);
  }

  // bool cur_equiv = 12;
  if (this->cur_equiv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_cur_equiv(), target);
  }

  // bool revoke = 13;
  if (this->revoke() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_revoke(), target);
  }

  // uint32 key_weight = 14;
  if (this->key_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_key_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.RestrictedKey)
  return target;
}

size_t RestrictedKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.RestrictedKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zera_txn.PublicKey public_key = 1;
  if (this->has_public_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *public_key_);
  }

  // int64 time_delay = 2;
  if (this->time_delay() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_delay());
  }

  // bool global = 3;
  if (this->global() != 0) {
    total_size += 1 + 1;
  }

  // bool update_contract = 4;
  if (this->update_contract() != 0) {
    total_size += 1 + 1;
  }

  // bool transfer = 5;
  if (this->transfer() != 0) {
    total_size += 1 + 1;
  }

  // bool quash = 6;
  if (this->quash() != 0) {
    total_size += 1 + 1;
  }

  // bool mint = 7;
  if (this->mint() != 0) {
    total_size += 1 + 1;
  }

  // bool vote = 8;
  if (this->vote() != 0) {
    total_size += 1 + 1;
  }

  // bool propose = 9;
  if (this->propose() != 0) {
    total_size += 1 + 1;
  }

  // bool compliance = 10;
  if (this->compliance() != 0) {
    total_size += 1 + 1;
  }

  // bool expense_ratio = 11;
  if (this->expense_ratio() != 0) {
    total_size += 1 + 1;
  }

  // bool cur_equiv = 12;
  if (this->cur_equiv() != 0) {
    total_size += 1 + 1;
  }

  // bool revoke = 13;
  if (this->revoke() != 0) {
    total_size += 1 + 1;
  }

  // uint32 key_weight = 14;
  if (this->key_weight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_key_weight());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RestrictedKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.RestrictedKey)
  GOOGLE_DCHECK_NE(&from, this);
  const RestrictedKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RestrictedKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.RestrictedKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.RestrictedKey)
    MergeFrom(*source);
  }
}

void RestrictedKey::MergeFrom(const RestrictedKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.RestrictedKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_public_key()) {
    _internal_mutable_public_key()->::zera_txn::PublicKey::MergeFrom(from._internal_public_key());
  }
  if (from.time_delay() != 0) {
    _internal_set_time_delay(from._internal_time_delay());
  }
  if (from.global() != 0) {
    _internal_set_global(from._internal_global());
  }
  if (from.update_contract() != 0) {
    _internal_set_update_contract(from._internal_update_contract());
  }
  if (from.transfer() != 0) {
    _internal_set_transfer(from._internal_transfer());
  }
  if (from.quash() != 0) {
    _internal_set_quash(from._internal_quash());
  }
  if (from.mint() != 0) {
    _internal_set_mint(from._internal_mint());
  }
  if (from.vote() != 0) {
    _internal_set_vote(from._internal_vote());
  }
  if (from.propose() != 0) {
    _internal_set_propose(from._internal_propose());
  }
  if (from.compliance() != 0) {
    _internal_set_compliance(from._internal_compliance());
  }
  if (from.expense_ratio() != 0) {
    _internal_set_expense_ratio(from._internal_expense_ratio());
  }
  if (from.cur_equiv() != 0) {
    _internal_set_cur_equiv(from._internal_cur_equiv());
  }
  if (from.revoke() != 0) {
    _internal_set_revoke(from._internal_revoke());
  }
  if (from.key_weight() != 0) {
    _internal_set_key_weight(from._internal_key_weight());
  }
}

void RestrictedKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.RestrictedKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestrictedKey::CopyFrom(const RestrictedKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.RestrictedKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestrictedKey::IsInitialized() const {
  return true;
}

void RestrictedKey::InternalSwap(RestrictedKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RestrictedKey, key_weight_)
      + sizeof(RestrictedKey::key_weight_)
      - PROTOBUF_FIELD_OFFSET(RestrictedKey, public_key_)>(
          reinterpret_cast<char*>(&public_key_),
          reinterpret_cast<char*>(&other->public_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RestrictedKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExpenseRatioTXN::InitAsDefaultInstance() {
  ::zera_txn::_ExpenseRatioTXN_default_instance_._instance.get_mutable()->base_ = const_cast< ::zera_txn::BaseTXN*>(
      ::zera_txn::BaseTXN::internal_default_instance());
}
class ExpenseRatioTXN::_Internal {
 public:
  static const ::zera_txn::BaseTXN& base(const ExpenseRatioTXN* msg);
};

const ::zera_txn::BaseTXN&
ExpenseRatioTXN::_Internal::base(const ExpenseRatioTXN* msg) {
  return *msg->base_;
}
ExpenseRatioTXN::ExpenseRatioTXN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  addresses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.ExpenseRatioTXN)
}
ExpenseRatioTXN::ExpenseRatioTXN(const ExpenseRatioTXN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      addresses_(from.addresses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_id().empty()) {
    contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_id(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::zera_txn::BaseTXN(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zera_txn.ExpenseRatioTXN)
}

void ExpenseRatioTXN::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExpenseRatioTXN_txn_2eproto.base);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

ExpenseRatioTXN::~ExpenseRatioTXN() {
  // @@protoc_insertion_point(destructor:zera_txn.ExpenseRatioTXN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExpenseRatioTXN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void ExpenseRatioTXN::ArenaDtor(void* object) {
  ExpenseRatioTXN* _this = reinterpret_cast< ExpenseRatioTXN* >(object);
  (void)_this;
}
void ExpenseRatioTXN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExpenseRatioTXN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExpenseRatioTXN& ExpenseRatioTXN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExpenseRatioTXN_txn_2eproto.base);
  return *internal_default_instance();
}


void ExpenseRatioTXN::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.ExpenseRatioTXN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addresses_.Clear();
  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExpenseRatioTXN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zera_txn.BaseTXN base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string contract_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.ExpenseRatioTXN.contract_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes addresses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_addresses();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExpenseRatioTXN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.ExpenseRatioTXN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string contract_id = 2;
  if (this->contract_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_id().data(), static_cast<int>(this->_internal_contract_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.ExpenseRatioTXN.contract_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_contract_id(), target);
  }

  // repeated bytes addresses = 3;
  for (int i = 0, n = this->_internal_addresses_size(); i < n; i++) {
    const auto& s = this->_internal_addresses(i);
    target = stream->WriteBytes(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.ExpenseRatioTXN)
  return target;
}

size_t ExpenseRatioTXN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.ExpenseRatioTXN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes addresses = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(addresses_.size());
  for (int i = 0, n = addresses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      addresses_.Get(i));
  }

  // string contract_id = 2;
  if (this->contract_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract_id());
  }

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExpenseRatioTXN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.ExpenseRatioTXN)
  GOOGLE_DCHECK_NE(&from, this);
  const ExpenseRatioTXN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExpenseRatioTXN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.ExpenseRatioTXN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.ExpenseRatioTXN)
    MergeFrom(*source);
  }
}

void ExpenseRatioTXN::MergeFrom(const ExpenseRatioTXN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.ExpenseRatioTXN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addresses_.MergeFrom(from.addresses_);
  if (from.contract_id().size() > 0) {
    _internal_set_contract_id(from._internal_contract_id());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::zera_txn::BaseTXN::MergeFrom(from._internal_base());
  }
}

void ExpenseRatioTXN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.ExpenseRatioTXN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpenseRatioTXN::CopyFrom(const ExpenseRatioTXN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.ExpenseRatioTXN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpenseRatioTXN::IsInitialized() const {
  return true;
}

void ExpenseRatioTXN::InternalSwap(ExpenseRatioTXN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  addresses_.InternalSwap(&other->addresses_);
  contract_id_.Swap(&other->contract_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpenseRatioTXN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PreMintWallet::InitAsDefaultInstance() {
}
class PreMintWallet::_Internal {
 public:
};

PreMintWallet::PreMintWallet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.PreMintWallet)
}
PreMintWallet::PreMintWallet(const PreMintWallet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_amount(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:zera_txn.PreMintWallet)
}

void PreMintWallet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PreMintWallet_txn_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PreMintWallet::~PreMintWallet() {
  // @@protoc_insertion_point(destructor:zera_txn.PreMintWallet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PreMintWallet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PreMintWallet::ArenaDtor(void* object) {
  PreMintWallet* _this = reinterpret_cast< PreMintWallet* >(object);
  (void)_this;
}
void PreMintWallet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PreMintWallet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PreMintWallet& PreMintWallet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PreMintWallet_txn_2eproto.base);
  return *internal_default_instance();
}


void PreMintWallet::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.PreMintWallet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PreMintWallet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.PreMintWallet.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PreMintWallet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.PreMintWallet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (this->address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  // string amount = 2;
  if (this->amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.PreMintWallet.amount");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.PreMintWallet)
  return target;
}

size_t PreMintWallet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.PreMintWallet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  // string amount = 2;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PreMintWallet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.PreMintWallet)
  GOOGLE_DCHECK_NE(&from, this);
  const PreMintWallet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PreMintWallet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.PreMintWallet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.PreMintWallet)
    MergeFrom(*source);
  }
}

void PreMintWallet::MergeFrom(const PreMintWallet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.PreMintWallet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void PreMintWallet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.PreMintWallet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreMintWallet::CopyFrom(const PreMintWallet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.PreMintWallet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreMintWallet::IsInitialized() const {
  return true;
}

void PreMintWallet::InternalSwap(PreMintWallet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PreMintWallet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Transfer::InitAsDefaultInstance() {
}
class Transfer::_Internal {
 public:
  using HasBits = decltype(std::declval<Transfer>()._has_bits_);
  static void set_has_contract_fee_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_contract_fee_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_memo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Transfer::Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.Transfer)
}
Transfer::Transfer(const Transfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recipient_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recipient_address().empty()) {
    recipient_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_recipient_address(),
      GetArena());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_amount(),
      GetArena());
  }
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_id().empty()) {
    contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_id(),
      GetArena());
  }
  contract_fee_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_contract_fee_amount()) {
    contract_fee_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_fee_amount(),
      GetArena());
  }
  contract_fee_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_contract_fee_id()) {
    contract_fee_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_fee_id(),
      GetArena());
  }
  base_fee_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_base_fee_amount().empty()) {
    base_fee_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_base_fee_amount(),
      GetArena());
  }
  base_fee_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_base_fee_id().empty()) {
    base_fee_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_base_fee_id(),
      GetArena());
  }
  memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_memo()) {
    memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_memo(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:zera_txn.Transfer)
}

void Transfer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transfer_txn_2eproto.base);
  recipient_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_fee_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_fee_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_fee_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_fee_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Transfer::~Transfer() {
  // @@protoc_insertion_point(destructor:zera_txn.Transfer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transfer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recipient_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_fee_amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_fee_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_fee_amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_fee_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transfer::ArenaDtor(void* object) {
  Transfer* _this = reinterpret_cast< Transfer* >(object);
  (void)_this;
}
void Transfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transfer& Transfer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transfer_txn_2eproto.base);
  return *internal_default_instance();
}


void Transfer::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.Transfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recipient_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      contract_fee_amount_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      contract_fee_id_.ClearNonDefaultToEmpty();
    }
  }
  base_fee_amount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  base_fee_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (cached_has_bits & 0x00000004u) {
    memo_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes recipient_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_recipient_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.Transfer.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string contract_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.Transfer.contract_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string contract_fee_amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_contract_fee_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.Transfer.contract_fee_amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string contract_fee_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_contract_fee_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.Transfer.contract_fee_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string base_fee_amount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_base_fee_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.Transfer.base_fee_amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string base_fee_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_base_fee_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.Transfer.base_fee_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string memo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_memo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.Transfer.memo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transfer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.Transfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes recipient_address = 1;
  if (this->recipient_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_recipient_address(), target);
  }

  // string amount = 2;
  if (this->amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.Transfer.amount");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_amount(), target);
  }

  // string contract_id = 3;
  if (this->contract_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_id().data(), static_cast<int>(this->_internal_contract_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.Transfer.contract_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_contract_id(), target);
  }

  // string contract_fee_amount = 4;
  if (_internal_has_contract_fee_amount()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_fee_amount().data(), static_cast<int>(this->_internal_contract_fee_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.Transfer.contract_fee_amount");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_contract_fee_amount(), target);
  }

  // string contract_fee_id = 5;
  if (_internal_has_contract_fee_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_fee_id().data(), static_cast<int>(this->_internal_contract_fee_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.Transfer.contract_fee_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_contract_fee_id(), target);
  }

  // string base_fee_amount = 6;
  if (this->base_fee_amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_base_fee_amount().data(), static_cast<int>(this->_internal_base_fee_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.Transfer.base_fee_amount");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_base_fee_amount(), target);
  }

  // string base_fee_id = 7;
  if (this->base_fee_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_base_fee_id().data(), static_cast<int>(this->_internal_base_fee_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.Transfer.base_fee_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_base_fee_id(), target);
  }

  // string memo = 8;
  if (_internal_has_memo()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memo().data(), static_cast<int>(this->_internal_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.Transfer.memo");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_memo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.Transfer)
  return target;
}

size_t Transfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.Transfer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes recipient_address = 1;
  if (this->recipient_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_recipient_address());
  }

  // string amount = 2;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // string contract_id = 3;
  if (this->contract_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract_id());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // string contract_fee_amount = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contract_fee_amount());
    }

    // string contract_fee_id = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contract_fee_id());
    }

  }
  // string base_fee_amount = 6;
  if (this->base_fee_amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_base_fee_amount());
  }

  // string base_fee_id = 7;
  if (this->base_fee_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_base_fee_id());
  }

  // string memo = 8;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memo());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transfer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  const Transfer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transfer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.Transfer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.Transfer)
    MergeFrom(*source);
  }
}

void Transfer::MergeFrom(const Transfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.recipient_address().size() > 0) {
    _internal_set_recipient_address(from._internal_recipient_address());
  }
  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.contract_id().size() > 0) {
    _internal_set_contract_id(from._internal_contract_id());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_contract_fee_amount(from._internal_contract_fee_amount());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_contract_fee_id(from._internal_contract_fee_id());
    }
  }
  if (from.base_fee_amount().size() > 0) {
    _internal_set_base_fee_amount(from._internal_base_fee_amount());
  }
  if (from.base_fee_id().size() > 0) {
    _internal_set_base_fee_id(from._internal_base_fee_id());
  }
  if (cached_has_bits & 0x00000004u) {
    _internal_set_memo(from._internal_memo());
  }
}

void Transfer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transfer::CopyFrom(const Transfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transfer::IsInitialized() const {
  return true;
}

void Transfer::InternalSwap(Transfer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  recipient_address_.Swap(&other->recipient_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contract_id_.Swap(&other->contract_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contract_fee_amount_.Swap(&other->contract_fee_amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contract_fee_id_.Swap(&other->contract_fee_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  base_fee_amount_.Swap(&other->base_fee_amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  base_fee_id_.Swap(&other->base_fee_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  memo_.Swap(&other->memo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Transfer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BurnSBTTXN::InitAsDefaultInstance() {
  ::zera_txn::_BurnSBTTXN_default_instance_._instance.get_mutable()->base_ = const_cast< ::zera_txn::BaseTXN*>(
      ::zera_txn::BaseTXN::internal_default_instance());
}
class BurnSBTTXN::_Internal {
 public:
  static const ::zera_txn::BaseTXN& base(const BurnSBTTXN* msg);
};

const ::zera_txn::BaseTXN&
BurnSBTTXN::_Internal::base(const BurnSBTTXN* msg) {
  return *msg->base_;
}
BurnSBTTXN::BurnSBTTXN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.BurnSBTTXN)
}
BurnSBTTXN::BurnSBTTXN(const BurnSBTTXN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_id().empty()) {
    contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_id(),
      GetArena());
  }
  item_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_item_id().empty()) {
    item_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_item_id(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::zera_txn::BaseTXN(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zera_txn.BurnSBTTXN)
}

void BurnSBTTXN::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BurnSBTTXN_txn_2eproto.base);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

BurnSBTTXN::~BurnSBTTXN() {
  // @@protoc_insertion_point(destructor:zera_txn.BurnSBTTXN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BurnSBTTXN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void BurnSBTTXN::ArenaDtor(void* object) {
  BurnSBTTXN* _this = reinterpret_cast< BurnSBTTXN* >(object);
  (void)_this;
}
void BurnSBTTXN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BurnSBTTXN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BurnSBTTXN& BurnSBTTXN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BurnSBTTXN_txn_2eproto.base);
  return *internal_default_instance();
}


void BurnSBTTXN::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.BurnSBTTXN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  item_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BurnSBTTXN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zera_txn.BaseTXN base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string contract_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.BurnSBTTXN.contract_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string item_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_item_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.BurnSBTTXN.item_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BurnSBTTXN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.BurnSBTTXN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string contract_id = 2;
  if (this->contract_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_id().data(), static_cast<int>(this->_internal_contract_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.BurnSBTTXN.contract_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_contract_id(), target);
  }

  // string item_id = 3;
  if (this->item_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_item_id().data(), static_cast<int>(this->_internal_item_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.BurnSBTTXN.item_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.BurnSBTTXN)
  return target;
}

size_t BurnSBTTXN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.BurnSBTTXN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string contract_id = 2;
  if (this->contract_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract_id());
  }

  // string item_id = 3;
  if (this->item_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_item_id());
  }

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BurnSBTTXN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.BurnSBTTXN)
  GOOGLE_DCHECK_NE(&from, this);
  const BurnSBTTXN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BurnSBTTXN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.BurnSBTTXN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.BurnSBTTXN)
    MergeFrom(*source);
  }
}

void BurnSBTTXN::MergeFrom(const BurnSBTTXN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.BurnSBTTXN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.contract_id().size() > 0) {
    _internal_set_contract_id(from._internal_contract_id());
  }
  if (from.item_id().size() > 0) {
    _internal_set_item_id(from._internal_item_id());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::zera_txn::BaseTXN::MergeFrom(from._internal_base());
  }
}

void BurnSBTTXN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.BurnSBTTXN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BurnSBTTXN::CopyFrom(const BurnSBTTXN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.BurnSBTTXN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BurnSBTTXN::IsInitialized() const {
  return true;
}

void BurnSBTTXN::InternalSwap(BurnSBTTXN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  contract_id_.Swap(&other->contract_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  item_id_.Swap(&other->item_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BurnSBTTXN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BaseTXN::InitAsDefaultInstance() {
  ::zera_txn::_BaseTXN_default_instance_._instance.get_mutable()->public_key_ = const_cast< ::zera_txn::PublicKey*>(
      ::zera_txn::PublicKey::internal_default_instance());
  ::zera_txn::_BaseTXN_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class BaseTXN::_Internal {
 public:
  using HasBits = decltype(std::declval<BaseTXN>()._has_bits_);
  static const ::zera_txn::PublicKey& public_key(const BaseTXN* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const BaseTXN* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_memo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_safe_send(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zera_txn::PublicKey&
BaseTXN::_Internal::public_key(const BaseTXN* msg) {
  return *msg->public_key_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
BaseTXN::_Internal::timestamp(const BaseTXN* msg) {
  return *msg->timestamp_;
}
void BaseTXN::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
BaseTXN::BaseTXN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.BaseTXN)
}
BaseTXN::BaseTXN(const BaseTXN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fee_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fee_amount().empty()) {
    fee_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fee_amount(),
      GetArena());
  }
  fee_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fee_id().empty()) {
    fee_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fee_id(),
      GetArena());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_signature()) {
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_signature(),
      GetArena());
  }
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hash()) {
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hash(),
      GetArena());
  }
  memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_memo()) {
    memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_memo(),
      GetArena());
  }
  if (from._internal_has_public_key()) {
    public_key_ = new ::zera_txn::PublicKey(*from.public_key_);
  } else {
    public_key_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ::memcpy(&nonce_, &from.nonce_,
    static_cast<size_t>(reinterpret_cast<char*>(&safe_send_) -
    reinterpret_cast<char*>(&nonce_)) + sizeof(safe_send_));
  // @@protoc_insertion_point(copy_constructor:zera_txn.BaseTXN)
}

void BaseTXN::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BaseTXN_txn_2eproto.base);
  fee_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fee_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&public_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&safe_send_) -
      reinterpret_cast<char*>(&public_key_)) + sizeof(safe_send_));
}

BaseTXN::~BaseTXN() {
  // @@protoc_insertion_point(destructor:zera_txn.BaseTXN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BaseTXN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  fee_amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fee_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete public_key_;
  if (this != internal_default_instance()) delete timestamp_;
}

void BaseTXN::ArenaDtor(void* object) {
  BaseTXN* _this = reinterpret_cast< BaseTXN* >(object);
  (void)_this;
}
void BaseTXN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BaseTXN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BaseTXN& BaseTXN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BaseTXN_txn_2eproto.base);
  return *internal_default_instance();
}


void BaseTXN::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.BaseTXN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fee_amount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fee_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      signature_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      hash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      memo_.ClearNonDefaultToEmpty();
    }
  }
  if (GetArena() == nullptr && public_key_ != nullptr) {
    delete public_key_;
  }
  public_key_ = nullptr;
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  nonce_ = PROTOBUF_ULONGLONG(0);
  safe_send_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaseTXN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zera_txn.PublicKey public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_public_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fee_amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_fee_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.BaseTXN.fee_amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fee_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_fee_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.BaseTXN.fee_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes hash = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string memo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_memo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.BaseTXN.memo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool safe_send = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_safe_send(&has_bits);
          safe_send_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 nonce = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BaseTXN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.BaseTXN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zera_txn.PublicKey public_key = 1;
  if (this->has_public_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::public_key(this), target, stream);
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::timestamp(this), target, stream);
  }

  // string fee_amount = 4;
  if (this->fee_amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fee_amount().data(), static_cast<int>(this->_internal_fee_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.BaseTXN.fee_amount");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_fee_amount(), target);
  }

  // string fee_id = 5;
  if (this->fee_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fee_id().data(), static_cast<int>(this->_internal_fee_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.BaseTXN.fee_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_fee_id(), target);
  }

  // bytes signature = 6;
  if (_internal_has_signature()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_signature(), target);
  }

  // bytes hash = 7;
  if (_internal_has_hash()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_hash(), target);
  }

  // string memo = 8;
  if (_internal_has_memo()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memo().data(), static_cast<int>(this->_internal_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.BaseTXN.memo");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_memo(), target);
  }

  // bool safe_send = 9;
  if (_internal_has_safe_send()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_safe_send(), target);
  }

  // uint64 nonce = 10;
  if (this->nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_nonce(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.BaseTXN)
  return target;
}

size_t BaseTXN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.BaseTXN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fee_amount = 4;
  if (this->fee_amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fee_amount());
  }

  // string fee_id = 5;
  if (this->fee_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fee_id());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // bytes signature = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_signature());
    }

    // bytes hash = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_hash());
    }

    // string memo = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_memo());
    }

  }
  // .zera_txn.PublicKey public_key = 1;
  if (this->has_public_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *public_key_);
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // uint64 nonce = 10;
  if (this->nonce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_nonce());
  }

  // bool safe_send = 9;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BaseTXN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.BaseTXN)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseTXN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BaseTXN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.BaseTXN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.BaseTXN)
    MergeFrom(*source);
  }
}

void BaseTXN::MergeFrom(const BaseTXN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.BaseTXN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fee_amount().size() > 0) {
    _internal_set_fee_amount(from._internal_fee_amount());
  }
  if (from.fee_id().size() > 0) {
    _internal_set_fee_id(from._internal_fee_id());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_signature(from._internal_signature());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_hash(from._internal_hash());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_memo(from._internal_memo());
    }
  }
  if (from.has_public_key()) {
    _internal_mutable_public_key()->::zera_txn::PublicKey::MergeFrom(from._internal_public_key());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  if (cached_has_bits & 0x00000008u) {
    _internal_set_safe_send(from._internal_safe_send());
  }
}

void BaseTXN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.BaseTXN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseTXN::CopyFrom(const BaseTXN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.BaseTXN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseTXN::IsInitialized() const {
  return true;
}

void BaseTXN::InternalSwap(BaseTXN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fee_amount_.Swap(&other->fee_amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fee_id_.Swap(&other->fee_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  memo_.Swap(&other->memo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseTXN, safe_send_)
      + sizeof(BaseTXN::safe_send_)
      - PROTOBUF_FIELD_OFFSET(BaseTXN, public_key_)>(
          reinterpret_cast<char*>(&public_key_),
          reinterpret_cast<char*>(&other->public_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseTXN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublicKey::InitAsDefaultInstance() {
  ::zera_txn::_PublicKey_default_instance_._instance.get_mutable()->multi_ = const_cast< ::zera_txn::MultiKey*>(
      ::zera_txn::MultiKey::internal_default_instance());
  ::zera_txn::_PublicKey_default_instance_._instance.get_mutable()->governance_auth_ = const_cast< ::zera_txn::GovernanceAuth*>(
      ::zera_txn::GovernanceAuth::internal_default_instance());
}
class PublicKey::_Internal {
 public:
  using HasBits = decltype(std::declval<PublicKey>()._has_bits_);
  static const ::zera_txn::MultiKey& multi(const PublicKey* msg);
  static void set_has_sc_wallet_adr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zera_txn::GovernanceAuth& governance_auth(const PublicKey* msg);
  static void set_has_governance_auth(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zera_txn::MultiKey&
PublicKey::_Internal::multi(const PublicKey* msg) {
  return *msg->multi_;
}
const ::zera_txn::GovernanceAuth&
PublicKey::_Internal::governance_auth(const PublicKey* msg) {
  return *msg->governance_auth_;
}
PublicKey::PublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.PublicKey)
}
PublicKey::PublicKey(const PublicKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  single_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_single().empty()) {
    single_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_single(),
      GetArena());
  }
  sc_wallet_adr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sc_wallet_adr()) {
    sc_wallet_adr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sc_wallet_adr(),
      GetArena());
  }
  if (from._internal_has_multi()) {
    multi_ = new ::zera_txn::MultiKey(*from.multi_);
  } else {
    multi_ = nullptr;
  }
  if (from._internal_has_governance_auth()) {
    governance_auth_ = new ::zera_txn::GovernanceAuth(*from.governance_auth_);
  } else {
    governance_auth_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zera_txn.PublicKey)
}

void PublicKey::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublicKey_txn_2eproto.base);
  single_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sc_wallet_adr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&multi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&governance_auth_) -
      reinterpret_cast<char*>(&multi_)) + sizeof(governance_auth_));
}

PublicKey::~PublicKey() {
  // @@protoc_insertion_point(destructor:zera_txn.PublicKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublicKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  single_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sc_wallet_adr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete multi_;
  if (this != internal_default_instance()) delete governance_auth_;
}

void PublicKey::ArenaDtor(void* object) {
  PublicKey* _this = reinterpret_cast< PublicKey* >(object);
  (void)_this;
}
void PublicKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublicKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublicKey& PublicKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublicKey_txn_2eproto.base);
  return *internal_default_instance();
}


void PublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.PublicKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  single_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sc_wallet_adr_.ClearNonDefaultToEmpty();
  }
  if (GetArena() == nullptr && multi_ != nullptr) {
    delete multi_;
  }
  multi_ = nullptr;
  if (cached_has_bits & 0x00000002u) {
    if (GetArena() == nullptr && governance_auth_ != nullptr) {
      delete governance_auth_;
    }
    governance_auth_ = nullptr;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublicKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes single = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_single();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zera_txn.MultiKey multi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_multi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sc_wallet_adr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sc_wallet_adr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zera_txn.GovernanceAuth governance_auth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_governance_auth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublicKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.PublicKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes single = 1;
  if (this->single().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_single(), target);
  }

  // .zera_txn.MultiKey multi = 2;
  if (this->has_multi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::multi(this), target, stream);
  }

  // bytes sc_wallet_adr = 3;
  if (_internal_has_sc_wallet_adr()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_sc_wallet_adr(), target);
  }

  // .zera_txn.GovernanceAuth governance_auth = 4;
  if (_internal_has_governance_auth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::governance_auth(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.PublicKey)
  return target;
}

size_t PublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.PublicKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes single = 1;
  if (this->single().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_single());
  }

  // bytes sc_wallet_adr = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sc_wallet_adr());
  }

  // .zera_txn.MultiKey multi = 2;
  if (this->has_multi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *multi_);
  }

  // .zera_txn.GovernanceAuth governance_auth = 4;
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *governance_auth_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublicKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.PublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  const PublicKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublicKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.PublicKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.PublicKey)
    MergeFrom(*source);
  }
}

void PublicKey::MergeFrom(const PublicKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.PublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.single().size() > 0) {
    _internal_set_single(from._internal_single());
  }
  if (from._internal_has_sc_wallet_adr()) {
    _internal_set_sc_wallet_adr(from._internal_sc_wallet_adr());
  }
  if (from.has_multi()) {
    _internal_mutable_multi()->::zera_txn::MultiKey::MergeFrom(from._internal_multi());
  }
  if (from._internal_has_governance_auth()) {
    _internal_mutable_governance_auth()->::zera_txn::GovernanceAuth::MergeFrom(from._internal_governance_auth());
  }
}

void PublicKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.PublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublicKey::CopyFrom(const PublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.PublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicKey::IsInitialized() const {
  return true;
}

void PublicKey::InternalSwap(PublicKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  single_.Swap(&other->single_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sc_wallet_adr_.Swap(&other->sc_wallet_adr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublicKey, governance_auth_)
      + sizeof(PublicKey::governance_auth_)
      - PROTOBUF_FIELD_OFFSET(PublicKey, multi_)>(
          reinterpret_cast<char*>(&multi_),
          reinterpret_cast<char*>(&other->multi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublicKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GovernanceAuth::InitAsDefaultInstance() {
}
class GovernanceAuth::_Internal {
 public:
};

GovernanceAuth::GovernanceAuth(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.GovernanceAuth)
}
GovernanceAuth::GovernanceAuth(const GovernanceAuth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  auth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auth().empty()) {
    auth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_auth(),
      GetArena());
  }
  proposal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_proposal_id().empty()) {
    proposal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_proposal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:zera_txn.GovernanceAuth)
}

void GovernanceAuth::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GovernanceAuth_txn_2eproto.base);
  auth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proposal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GovernanceAuth::~GovernanceAuth() {
  // @@protoc_insertion_point(destructor:zera_txn.GovernanceAuth)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GovernanceAuth::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  auth_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proposal_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GovernanceAuth::ArenaDtor(void* object) {
  GovernanceAuth* _this = reinterpret_cast< GovernanceAuth* >(object);
  (void)_this;
}
void GovernanceAuth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GovernanceAuth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GovernanceAuth& GovernanceAuth::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GovernanceAuth_txn_2eproto.base);
  return *internal_default_instance();
}


void GovernanceAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.GovernanceAuth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auth_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  proposal_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GovernanceAuth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes auth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_auth();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes proposal_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_proposal_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GovernanceAuth::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.GovernanceAuth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes auth = 1;
  if (this->auth().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_auth(), target);
  }

  // bytes proposal_id = 2;
  if (this->proposal_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_proposal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.GovernanceAuth)
  return target;
}

size_t GovernanceAuth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.GovernanceAuth)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes auth = 1;
  if (this->auth().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_auth());
  }

  // bytes proposal_id = 2;
  if (this->proposal_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_proposal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GovernanceAuth::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.GovernanceAuth)
  GOOGLE_DCHECK_NE(&from, this);
  const GovernanceAuth* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GovernanceAuth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.GovernanceAuth)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.GovernanceAuth)
    MergeFrom(*source);
  }
}

void GovernanceAuth::MergeFrom(const GovernanceAuth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.GovernanceAuth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.auth().size() > 0) {
    _internal_set_auth(from._internal_auth());
  }
  if (from.proposal_id().size() > 0) {
    _internal_set_proposal_id(from._internal_proposal_id());
  }
}

void GovernanceAuth::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.GovernanceAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GovernanceAuth::CopyFrom(const GovernanceAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.GovernanceAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GovernanceAuth::IsInitialized() const {
  return true;
}

void GovernanceAuth::InternalSwap(GovernanceAuth* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  auth_.Swap(&other->auth_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  proposal_id_.Swap(&other->proposal_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GovernanceAuth::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiKey::InitAsDefaultInstance() {
}
class MultiKey::_Internal {
 public:
};

MultiKey::MultiKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  public_keys_(arena),
  signatures_(arena),
  multi_patterns_(arena),
  hash_tokens_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.MultiKey)
}
MultiKey::MultiKey(const MultiKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      public_keys_(from.public_keys_),
      signatures_(from.signatures_),
      multi_patterns_(from.multi_patterns_),
      hash_tokens_(from.hash_tokens_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zera_txn.MultiKey)
}

void MultiKey::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiKey_txn_2eproto.base);
}

MultiKey::~MultiKey() {
  // @@protoc_insertion_point(destructor:zera_txn.MultiKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultiKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MultiKey::ArenaDtor(void* object) {
  MultiKey* _this = reinterpret_cast< MultiKey* >(object);
  (void)_this;
}
void MultiKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiKey& MultiKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiKey_txn_2eproto.base);
  return *internal_default_instance();
}


void MultiKey::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.MultiKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_keys_.Clear();
  signatures_.Clear();
  multi_patterns_.Clear();
  hash_tokens_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes public_keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_public_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes signatures = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_signatures();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.MultiPatterns multi_patterns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_multi_patterns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string hash_tokens = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_hash_tokens();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.MultiKey.hash_tokens"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.MultiKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes public_keys = 1;
  for (int i = 0, n = this->_internal_public_keys_size(); i < n; i++) {
    const auto& s = this->_internal_public_keys(i);
    target = stream->WriteBytes(1, s, target);
  }

  // repeated bytes signatures = 2;
  for (int i = 0, n = this->_internal_signatures_size(); i < n; i++) {
    const auto& s = this->_internal_signatures(i);
    target = stream->WriteBytes(2, s, target);
  }

  // repeated .zera_txn.MultiPatterns multi_patterns = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_multi_patterns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_multi_patterns(i), target, stream);
  }

  // repeated string hash_tokens = 4;
  for (int i = 0, n = this->_internal_hash_tokens_size(); i < n; i++) {
    const auto& s = this->_internal_hash_tokens(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.MultiKey.hash_tokens");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.MultiKey)
  return target;
}

size_t MultiKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.MultiKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes public_keys = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(public_keys_.size());
  for (int i = 0, n = public_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      public_keys_.Get(i));
  }

  // repeated bytes signatures = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(signatures_.size());
  for (int i = 0, n = signatures_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      signatures_.Get(i));
  }

  // repeated .zera_txn.MultiPatterns multi_patterns = 3;
  total_size += 1UL * this->_internal_multi_patterns_size();
  for (const auto& msg : this->multi_patterns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string hash_tokens = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(hash_tokens_.size());
  for (int i = 0, n = hash_tokens_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      hash_tokens_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.MultiKey)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.MultiKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.MultiKey)
    MergeFrom(*source);
  }
}

void MultiKey::MergeFrom(const MultiKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.MultiKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  public_keys_.MergeFrom(from.public_keys_);
  signatures_.MergeFrom(from.signatures_);
  multi_patterns_.MergeFrom(from.multi_patterns_);
  hash_tokens_.MergeFrom(from.hash_tokens_);
}

void MultiKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.MultiKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiKey::CopyFrom(const MultiKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.MultiKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiKey::IsInitialized() const {
  return true;
}

void MultiKey::InternalSwap(MultiKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  public_keys_.InternalSwap(&other->public_keys_);
  signatures_.InternalSwap(&other->signatures_);
  multi_patterns_.InternalSwap(&other->multi_patterns_);
  hash_tokens_.InternalSwap(&other->hash_tokens_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiPatterns::InitAsDefaultInstance() {
}
class MultiPatterns::_Internal {
 public:
};

MultiPatterns::MultiPatterns(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  class__(arena),
  required_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.MultiPatterns)
}
MultiPatterns::MultiPatterns(const MultiPatterns& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      class__(from.class__),
      required_(from.required_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zera_txn.MultiPatterns)
}

void MultiPatterns::SharedCtor() {
}

MultiPatterns::~MultiPatterns() {
  // @@protoc_insertion_point(destructor:zera_txn.MultiPatterns)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultiPatterns::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MultiPatterns::ArenaDtor(void* object) {
  MultiPatterns* _this = reinterpret_cast< MultiPatterns* >(object);
  (void)_this;
}
void MultiPatterns::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiPatterns::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiPatterns& MultiPatterns::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiPatterns_txn_2eproto.base);
  return *internal_default_instance();
}


void MultiPatterns::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.MultiPatterns)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  class__.Clear();
  required_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiPatterns::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 class = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_class_(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_class_(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 required = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_required(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_required(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiPatterns::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.MultiPatterns)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 class = 1;
  {
    int byte_size = _class__cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_class_(), byte_size, target);
    }
  }

  // repeated int32 required = 2;
  {
    int byte_size = _required_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_required(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.MultiPatterns)
  return target;
}

size_t MultiPatterns::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.MultiPatterns)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 class = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->class__);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _class__cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 required = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->required_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _required_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiPatterns::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.MultiPatterns)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiPatterns* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiPatterns>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.MultiPatterns)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.MultiPatterns)
    MergeFrom(*source);
  }
}

void MultiPatterns::MergeFrom(const MultiPatterns& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.MultiPatterns)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  class__.MergeFrom(from.class__);
  required_.MergeFrom(from.required_);
}

void MultiPatterns::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.MultiPatterns)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiPatterns::CopyFrom(const MultiPatterns& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.MultiPatterns)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiPatterns::IsInitialized() const {
  return true;
}

void MultiPatterns::InternalSwap(MultiPatterns* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  class__.InternalSwap(&other->class__);
  required_.InternalSwap(&other->required_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiPatterns::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SelfCurrencyEquiv::InitAsDefaultInstance() {
  ::zera_txn::_SelfCurrencyEquiv_default_instance_._instance.get_mutable()->base_ = const_cast< ::zera_txn::BaseTXN*>(
      ::zera_txn::BaseTXN::internal_default_instance());
}
class SelfCurrencyEquiv::_Internal {
 public:
  static const ::zera_txn::BaseTXN& base(const SelfCurrencyEquiv* msg);
};

const ::zera_txn::BaseTXN&
SelfCurrencyEquiv::_Internal::base(const SelfCurrencyEquiv* msg) {
  return *msg->base_;
}
SelfCurrencyEquiv::SelfCurrencyEquiv(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cur_equiv_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.SelfCurrencyEquiv)
}
SelfCurrencyEquiv::SelfCurrencyEquiv(const SelfCurrencyEquiv& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cur_equiv_(from.cur_equiv_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::zera_txn::BaseTXN(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zera_txn.SelfCurrencyEquiv)
}

void SelfCurrencyEquiv::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SelfCurrencyEquiv_txn_2eproto.base);
  base_ = nullptr;
}

SelfCurrencyEquiv::~SelfCurrencyEquiv() {
  // @@protoc_insertion_point(destructor:zera_txn.SelfCurrencyEquiv)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SelfCurrencyEquiv::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
}

void SelfCurrencyEquiv::ArenaDtor(void* object) {
  SelfCurrencyEquiv* _this = reinterpret_cast< SelfCurrencyEquiv* >(object);
  (void)_this;
}
void SelfCurrencyEquiv::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelfCurrencyEquiv::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SelfCurrencyEquiv& SelfCurrencyEquiv::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SelfCurrencyEquiv_txn_2eproto.base);
  return *internal_default_instance();
}


void SelfCurrencyEquiv::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.SelfCurrencyEquiv)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cur_equiv_.Clear();
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelfCurrencyEquiv::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zera_txn.BaseTXN base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.CurrencyEquiv cur_equiv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cur_equiv(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelfCurrencyEquiv::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.SelfCurrencyEquiv)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // repeated .zera_txn.CurrencyEquiv cur_equiv = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cur_equiv_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_cur_equiv(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.SelfCurrencyEquiv)
  return target;
}

size_t SelfCurrencyEquiv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.SelfCurrencyEquiv)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zera_txn.CurrencyEquiv cur_equiv = 2;
  total_size += 1UL * this->_internal_cur_equiv_size();
  for (const auto& msg : this->cur_equiv_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelfCurrencyEquiv::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.SelfCurrencyEquiv)
  GOOGLE_DCHECK_NE(&from, this);
  const SelfCurrencyEquiv* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SelfCurrencyEquiv>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.SelfCurrencyEquiv)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.SelfCurrencyEquiv)
    MergeFrom(*source);
  }
}

void SelfCurrencyEquiv::MergeFrom(const SelfCurrencyEquiv& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.SelfCurrencyEquiv)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cur_equiv_.MergeFrom(from.cur_equiv_);
  if (from.has_base()) {
    _internal_mutable_base()->::zera_txn::BaseTXN::MergeFrom(from._internal_base());
  }
}

void SelfCurrencyEquiv::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.SelfCurrencyEquiv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelfCurrencyEquiv::CopyFrom(const SelfCurrencyEquiv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.SelfCurrencyEquiv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelfCurrencyEquiv::IsInitialized() const {
  return true;
}

void SelfCurrencyEquiv::InternalSwap(SelfCurrencyEquiv* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cur_equiv_.InternalSwap(&other->cur_equiv_);
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelfCurrencyEquiv::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthorizedCurrencyEquiv::InitAsDefaultInstance() {
  ::zera_txn::_AuthorizedCurrencyEquiv_default_instance_._instance.get_mutable()->base_ = const_cast< ::zera_txn::BaseTXN*>(
      ::zera_txn::BaseTXN::internal_default_instance());
}
class AuthorizedCurrencyEquiv::_Internal {
 public:
  static const ::zera_txn::BaseTXN& base(const AuthorizedCurrencyEquiv* msg);
};

const ::zera_txn::BaseTXN&
AuthorizedCurrencyEquiv::_Internal::base(const AuthorizedCurrencyEquiv* msg) {
  return *msg->base_;
}
AuthorizedCurrencyEquiv::AuthorizedCurrencyEquiv(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cur_equiv_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.AuthorizedCurrencyEquiv)
}
AuthorizedCurrencyEquiv::AuthorizedCurrencyEquiv(const AuthorizedCurrencyEquiv& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cur_equiv_(from.cur_equiv_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::zera_txn::BaseTXN(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zera_txn.AuthorizedCurrencyEquiv)
}

void AuthorizedCurrencyEquiv::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthorizedCurrencyEquiv_txn_2eproto.base);
  base_ = nullptr;
}

AuthorizedCurrencyEquiv::~AuthorizedCurrencyEquiv() {
  // @@protoc_insertion_point(destructor:zera_txn.AuthorizedCurrencyEquiv)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuthorizedCurrencyEquiv::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
}

void AuthorizedCurrencyEquiv::ArenaDtor(void* object) {
  AuthorizedCurrencyEquiv* _this = reinterpret_cast< AuthorizedCurrencyEquiv* >(object);
  (void)_this;
}
void AuthorizedCurrencyEquiv::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthorizedCurrencyEquiv::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthorizedCurrencyEquiv& AuthorizedCurrencyEquiv::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthorizedCurrencyEquiv_txn_2eproto.base);
  return *internal_default_instance();
}


void AuthorizedCurrencyEquiv::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.AuthorizedCurrencyEquiv)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cur_equiv_.Clear();
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthorizedCurrencyEquiv::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zera_txn.BaseTXN base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.CurrencyEquiv cur_equiv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cur_equiv(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthorizedCurrencyEquiv::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.AuthorizedCurrencyEquiv)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // repeated .zera_txn.CurrencyEquiv cur_equiv = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cur_equiv_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_cur_equiv(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.AuthorizedCurrencyEquiv)
  return target;
}

size_t AuthorizedCurrencyEquiv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.AuthorizedCurrencyEquiv)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zera_txn.CurrencyEquiv cur_equiv = 2;
  total_size += 1UL * this->_internal_cur_equiv_size();
  for (const auto& msg : this->cur_equiv_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthorizedCurrencyEquiv::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.AuthorizedCurrencyEquiv)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthorizedCurrencyEquiv* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthorizedCurrencyEquiv>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.AuthorizedCurrencyEquiv)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.AuthorizedCurrencyEquiv)
    MergeFrom(*source);
  }
}

void AuthorizedCurrencyEquiv::MergeFrom(const AuthorizedCurrencyEquiv& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.AuthorizedCurrencyEquiv)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cur_equiv_.MergeFrom(from.cur_equiv_);
  if (from.has_base()) {
    _internal_mutable_base()->::zera_txn::BaseTXN::MergeFrom(from._internal_base());
  }
}

void AuthorizedCurrencyEquiv::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.AuthorizedCurrencyEquiv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthorizedCurrencyEquiv::CopyFrom(const AuthorizedCurrencyEquiv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.AuthorizedCurrencyEquiv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthorizedCurrencyEquiv::IsInitialized() const {
  return true;
}

void AuthorizedCurrencyEquiv::InternalSwap(AuthorizedCurrencyEquiv* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cur_equiv_.InternalSwap(&other->cur_equiv_);
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthorizedCurrencyEquiv::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CurrencyEquiv::InitAsDefaultInstance() {
}
class CurrencyEquiv::_Internal {
 public:
  using HasBits = decltype(std::declval<CurrencyEquiv>()._has_bits_);
  static void set_has_authorized(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_stake(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CurrencyEquiv::CurrencyEquiv(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.CurrencyEquiv)
}
CurrencyEquiv::CurrencyEquiv(const CurrencyEquiv& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_id().empty()) {
    contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_id(),
      GetArena());
  }
  rate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rate().empty()) {
    rate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_rate(),
      GetArena());
  }
  max_stake_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_max_stake()) {
    max_stake_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_max_stake(),
      GetArena());
  }
  authorized_ = from.authorized_;
  // @@protoc_insertion_point(copy_constructor:zera_txn.CurrencyEquiv)
}

void CurrencyEquiv::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CurrencyEquiv_txn_2eproto.base);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_stake_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  authorized_ = false;
}

CurrencyEquiv::~CurrencyEquiv() {
  // @@protoc_insertion_point(destructor:zera_txn.CurrencyEquiv)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CurrencyEquiv::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_stake_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CurrencyEquiv::ArenaDtor(void* object) {
  CurrencyEquiv* _this = reinterpret_cast< CurrencyEquiv* >(object);
  (void)_this;
}
void CurrencyEquiv::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CurrencyEquiv::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CurrencyEquiv& CurrencyEquiv::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CurrencyEquiv_txn_2eproto.base);
  return *internal_default_instance();
}


void CurrencyEquiv::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.CurrencyEquiv)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    max_stake_.ClearNonDefaultToEmpty();
  }
  authorized_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CurrencyEquiv::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string contract_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.CurrencyEquiv.contract_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_rate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.CurrencyEquiv.rate"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool authorized = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_authorized(&has_bits);
          authorized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string max_stake = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_max_stake();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.CurrencyEquiv.max_stake"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CurrencyEquiv::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.CurrencyEquiv)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string contract_id = 1;
  if (this->contract_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_id().data(), static_cast<int>(this->_internal_contract_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.CurrencyEquiv.contract_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contract_id(), target);
  }

  // string rate = 2;
  if (this->rate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rate().data(), static_cast<int>(this->_internal_rate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.CurrencyEquiv.rate");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_rate(), target);
  }

  // bool authorized = 3;
  if (_internal_has_authorized()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_authorized(), target);
  }

  // string max_stake = 4;
  if (_internal_has_max_stake()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_max_stake().data(), static_cast<int>(this->_internal_max_stake().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.CurrencyEquiv.max_stake");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_max_stake(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.CurrencyEquiv)
  return target;
}

size_t CurrencyEquiv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.CurrencyEquiv)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string contract_id = 1;
  if (this->contract_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract_id());
  }

  // string rate = 2;
  if (this->rate().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rate());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // string max_stake = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_max_stake());
    }

    // bool authorized = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CurrencyEquiv::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.CurrencyEquiv)
  GOOGLE_DCHECK_NE(&from, this);
  const CurrencyEquiv* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CurrencyEquiv>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.CurrencyEquiv)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.CurrencyEquiv)
    MergeFrom(*source);
  }
}

void CurrencyEquiv::MergeFrom(const CurrencyEquiv& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.CurrencyEquiv)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.contract_id().size() > 0) {
    _internal_set_contract_id(from._internal_contract_id());
  }
  if (from.rate().size() > 0) {
    _internal_set_rate(from._internal_rate());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_max_stake(from._internal_max_stake());
    }
    if (cached_has_bits & 0x00000002u) {
      authorized_ = from.authorized_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CurrencyEquiv::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.CurrencyEquiv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrencyEquiv::CopyFrom(const CurrencyEquiv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.CurrencyEquiv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrencyEquiv::IsInitialized() const {
  return true;
}

void CurrencyEquiv::InternalSwap(CurrencyEquiv* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  contract_id_.Swap(&other->contract_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rate_.Swap(&other->rate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  max_stake_.Swap(&other->max_stake_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(authorized_, other->authorized_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CurrencyEquiv::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExpenseRatioResult::InitAsDefaultInstance() {
}
class ExpenseRatioResult::_Internal {
 public:
};

ExpenseRatioResult::ExpenseRatioResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  wallets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.ExpenseRatioResult)
}
ExpenseRatioResult::ExpenseRatioResult(const ExpenseRatioResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      wallets_(from.wallets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_id().empty()) {
    contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_id(),
      GetArena());
  }
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hash(),
      GetArena());
  }
  recipient_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recipient_address().empty()) {
    recipient_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_recipient_address(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:zera_txn.ExpenseRatioResult)
}

void ExpenseRatioResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExpenseRatioResult_txn_2eproto.base);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ExpenseRatioResult::~ExpenseRatioResult() {
  // @@protoc_insertion_point(destructor:zera_txn.ExpenseRatioResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExpenseRatioResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExpenseRatioResult::ArenaDtor(void* object) {
  ExpenseRatioResult* _this = reinterpret_cast< ExpenseRatioResult* >(object);
  (void)_this;
}
void ExpenseRatioResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExpenseRatioResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExpenseRatioResult& ExpenseRatioResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExpenseRatioResult_txn_2eproto.base);
  return *internal_default_instance();
}


void ExpenseRatioResult::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.ExpenseRatioResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wallets_.Clear();
  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  recipient_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExpenseRatioResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string contract_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.ExpenseRatioResult.contract_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.Wallets wallets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_wallets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes recipient_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_recipient_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExpenseRatioResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.ExpenseRatioResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string contract_id = 1;
  if (this->contract_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_id().data(), static_cast<int>(this->_internal_contract_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.ExpenseRatioResult.contract_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contract_id(), target);
  }

  // repeated .zera_txn.Wallets wallets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_wallets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_wallets(i), target, stream);
  }

  // bytes hash = 3;
  if (this->hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_hash(), target);
  }

  // bytes recipient_address = 4;
  if (this->recipient_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_recipient_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.ExpenseRatioResult)
  return target;
}

size_t ExpenseRatioResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.ExpenseRatioResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zera_txn.Wallets wallets = 2;
  total_size += 1UL * this->_internal_wallets_size();
  for (const auto& msg : this->wallets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string contract_id = 1;
  if (this->contract_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract_id());
  }

  // bytes hash = 3;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // bytes recipient_address = 4;
  if (this->recipient_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_recipient_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExpenseRatioResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.ExpenseRatioResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ExpenseRatioResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExpenseRatioResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.ExpenseRatioResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.ExpenseRatioResult)
    MergeFrom(*source);
  }
}

void ExpenseRatioResult::MergeFrom(const ExpenseRatioResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.ExpenseRatioResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wallets_.MergeFrom(from.wallets_);
  if (from.contract_id().size() > 0) {
    _internal_set_contract_id(from._internal_contract_id());
  }
  if (from.hash().size() > 0) {
    _internal_set_hash(from._internal_hash());
  }
  if (from.recipient_address().size() > 0) {
    _internal_set_recipient_address(from._internal_recipient_address());
  }
}

void ExpenseRatioResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.ExpenseRatioResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpenseRatioResult::CopyFrom(const ExpenseRatioResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.ExpenseRatioResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpenseRatioResult::IsInitialized() const {
  return true;
}

void ExpenseRatioResult::InternalSwap(ExpenseRatioResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  wallets_.InternalSwap(&other->wallets_);
  contract_id_.Swap(&other->contract_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  recipient_address_.Swap(&other->recipient_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpenseRatioResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ComplianceAssign::InitAsDefaultInstance() {
}
class ComplianceAssign::_Internal {
 public:
};

ComplianceAssign::ComplianceAssign(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.ComplianceAssign)
}
ComplianceAssign::ComplianceAssign(const ComplianceAssign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recipient_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recipient_address().empty()) {
    recipient_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_recipient_address(),
      GetArena());
  }
  ::memcpy(&compliance_level_, &from.compliance_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&assign_revoke_) -
    reinterpret_cast<char*>(&compliance_level_)) + sizeof(assign_revoke_));
  // @@protoc_insertion_point(copy_constructor:zera_txn.ComplianceAssign)
}

void ComplianceAssign::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ComplianceAssign_txn_2eproto.base);
  recipient_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&compliance_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&assign_revoke_) -
      reinterpret_cast<char*>(&compliance_level_)) + sizeof(assign_revoke_));
}

ComplianceAssign::~ComplianceAssign() {
  // @@protoc_insertion_point(destructor:zera_txn.ComplianceAssign)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ComplianceAssign::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recipient_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ComplianceAssign::ArenaDtor(void* object) {
  ComplianceAssign* _this = reinterpret_cast< ComplianceAssign* >(object);
  (void)_this;
}
void ComplianceAssign::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ComplianceAssign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ComplianceAssign& ComplianceAssign::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ComplianceAssign_txn_2eproto.base);
  return *internal_default_instance();
}


void ComplianceAssign::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.ComplianceAssign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recipient_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&compliance_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&assign_revoke_) -
      reinterpret_cast<char*>(&compliance_level_)) + sizeof(assign_revoke_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComplianceAssign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes recipient_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_recipient_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 compliance_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          compliance_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool assign_revoke = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          assign_revoke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ComplianceAssign::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.ComplianceAssign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes recipient_address = 1;
  if (this->recipient_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_recipient_address(), target);
  }

  // uint32 compliance_level = 2;
  if (this->compliance_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_compliance_level(), target);
  }

  // bool assign_revoke = 3;
  if (this->assign_revoke() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_assign_revoke(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.ComplianceAssign)
  return target;
}

size_t ComplianceAssign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.ComplianceAssign)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes recipient_address = 1;
  if (this->recipient_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_recipient_address());
  }

  // uint32 compliance_level = 2;
  if (this->compliance_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_compliance_level());
  }

  // bool assign_revoke = 3;
  if (this->assign_revoke() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComplianceAssign::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.ComplianceAssign)
  GOOGLE_DCHECK_NE(&from, this);
  const ComplianceAssign* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ComplianceAssign>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.ComplianceAssign)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.ComplianceAssign)
    MergeFrom(*source);
  }
}

void ComplianceAssign::MergeFrom(const ComplianceAssign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.ComplianceAssign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.recipient_address().size() > 0) {
    _internal_set_recipient_address(from._internal_recipient_address());
  }
  if (from.compliance_level() != 0) {
    _internal_set_compliance_level(from._internal_compliance_level());
  }
  if (from.assign_revoke() != 0) {
    _internal_set_assign_revoke(from._internal_assign_revoke());
  }
}

void ComplianceAssign::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.ComplianceAssign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComplianceAssign::CopyFrom(const ComplianceAssign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.ComplianceAssign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplianceAssign::IsInitialized() const {
  return true;
}

void ComplianceAssign::InternalSwap(ComplianceAssign* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  recipient_address_.Swap(&other->recipient_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComplianceAssign, assign_revoke_)
      + sizeof(ComplianceAssign::assign_revoke_)
      - PROTOBUF_FIELD_OFFSET(ComplianceAssign, compliance_level_)>(
          reinterpret_cast<char*>(&compliance_level_),
          reinterpret_cast<char*>(&other->compliance_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComplianceAssign::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ComplianceTXN::InitAsDefaultInstance() {
  ::zera_txn::_ComplianceTXN_default_instance_._instance.get_mutable()->base_ = const_cast< ::zera_txn::BaseTXN*>(
      ::zera_txn::BaseTXN::internal_default_instance());
}
class ComplianceTXN::_Internal {
 public:
  static const ::zera_txn::BaseTXN& base(const ComplianceTXN* msg);
};

const ::zera_txn::BaseTXN&
ComplianceTXN::_Internal::base(const ComplianceTXN* msg) {
  return *msg->base_;
}
ComplianceTXN::ComplianceTXN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  compliance_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.ComplianceTXN)
}
ComplianceTXN::ComplianceTXN(const ComplianceTXN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      compliance_(from.compliance_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_id().empty()) {
    contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_id(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::zera_txn::BaseTXN(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zera_txn.ComplianceTXN)
}

void ComplianceTXN::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ComplianceTXN_txn_2eproto.base);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

ComplianceTXN::~ComplianceTXN() {
  // @@protoc_insertion_point(destructor:zera_txn.ComplianceTXN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ComplianceTXN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void ComplianceTXN::ArenaDtor(void* object) {
  ComplianceTXN* _this = reinterpret_cast< ComplianceTXN* >(object);
  (void)_this;
}
void ComplianceTXN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ComplianceTXN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ComplianceTXN& ComplianceTXN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ComplianceTXN_txn_2eproto.base);
  return *internal_default_instance();
}


void ComplianceTXN::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.ComplianceTXN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  compliance_.Clear();
  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComplianceTXN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zera_txn.BaseTXN base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string contract_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.ComplianceTXN.contract_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.ComplianceAssign compliance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_compliance(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ComplianceTXN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.ComplianceTXN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string contract_id = 2;
  if (this->contract_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_id().data(), static_cast<int>(this->_internal_contract_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.ComplianceTXN.contract_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_contract_id(), target);
  }

  // repeated .zera_txn.ComplianceAssign compliance = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_compliance_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_compliance(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.ComplianceTXN)
  return target;
}

size_t ComplianceTXN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.ComplianceTXN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zera_txn.ComplianceAssign compliance = 3;
  total_size += 1UL * this->_internal_compliance_size();
  for (const auto& msg : this->compliance_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string contract_id = 2;
  if (this->contract_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract_id());
  }

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComplianceTXN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.ComplianceTXN)
  GOOGLE_DCHECK_NE(&from, this);
  const ComplianceTXN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ComplianceTXN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.ComplianceTXN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.ComplianceTXN)
    MergeFrom(*source);
  }
}

void ComplianceTXN::MergeFrom(const ComplianceTXN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.ComplianceTXN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  compliance_.MergeFrom(from.compliance_);
  if (from.contract_id().size() > 0) {
    _internal_set_contract_id(from._internal_contract_id());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::zera_txn::BaseTXN::MergeFrom(from._internal_base());
  }
}

void ComplianceTXN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.ComplianceTXN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComplianceTXN::CopyFrom(const ComplianceTXN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.ComplianceTXN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplianceTXN::IsInitialized() const {
  return true;
}

void ComplianceTXN::InternalSwap(ComplianceTXN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  compliance_.InternalSwap(&other->compliance_);
  contract_id_.Swap(&other->contract_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ComplianceTXN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Wallets::InitAsDefaultInstance() {
}
class Wallets::_Internal {
 public:
};

Wallets::Wallets(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.Wallets)
}
Wallets::Wallets(const Wallets& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_amount(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:zera_txn.Wallets)
}

void Wallets::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Wallets_txn_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Wallets::~Wallets() {
  // @@protoc_insertion_point(destructor:zera_txn.Wallets)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Wallets::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Wallets::ArenaDtor(void* object) {
  Wallets* _this = reinterpret_cast< Wallets* >(object);
  (void)_this;
}
void Wallets::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Wallets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Wallets& Wallets::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Wallets_txn_2eproto.base);
  return *internal_default_instance();
}


void Wallets::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.Wallets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Wallets::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.Wallets.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Wallets::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.Wallets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (this->address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  // string amount = 2;
  if (this->amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.Wallets.amount");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.Wallets)
  return target;
}

size_t Wallets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.Wallets)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  // string amount = 2;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Wallets::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.Wallets)
  GOOGLE_DCHECK_NE(&from, this);
  const Wallets* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Wallets>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.Wallets)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.Wallets)
    MergeFrom(*source);
  }
}

void Wallets::MergeFrom(const Wallets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.Wallets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void Wallets::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.Wallets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wallets::CopyFrom(const Wallets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.Wallets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wallets::IsInitialized() const {
  return true;
}

void Wallets::InternalSwap(Wallets* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Wallets::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QuashTXN::InitAsDefaultInstance() {
  ::zera_txn::_QuashTXN_default_instance_._instance.get_mutable()->base_ = const_cast< ::zera_txn::BaseTXN*>(
      ::zera_txn::BaseTXN::internal_default_instance());
}
class QuashTXN::_Internal {
 public:
  static const ::zera_txn::BaseTXN& base(const QuashTXN* msg);
};

const ::zera_txn::BaseTXN&
QuashTXN::_Internal::base(const QuashTXN* msg) {
  return *msg->base_;
}
QuashTXN::QuashTXN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.QuashTXN)
}
QuashTXN::QuashTXN(const QuashTXN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_id().empty()) {
    contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_id(),
      GetArena());
  }
  txn_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_txn_hash().empty()) {
    txn_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_txn_hash(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::zera_txn::BaseTXN(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zera_txn.QuashTXN)
}

void QuashTXN::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QuashTXN_txn_2eproto.base);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txn_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

QuashTXN::~QuashTXN() {
  // @@protoc_insertion_point(destructor:zera_txn.QuashTXN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QuashTXN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txn_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void QuashTXN::ArenaDtor(void* object) {
  QuashTXN* _this = reinterpret_cast< QuashTXN* >(object);
  (void)_this;
}
void QuashTXN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QuashTXN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuashTXN& QuashTXN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuashTXN_txn_2eproto.base);
  return *internal_default_instance();
}


void QuashTXN::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.QuashTXN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  txn_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuashTXN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zera_txn.BaseTXN base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string contract_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.QuashTXN.contract_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes txn_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_txn_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QuashTXN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.QuashTXN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string contract_id = 2;
  if (this->contract_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_id().data(), static_cast<int>(this->_internal_contract_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.QuashTXN.contract_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_contract_id(), target);
  }

  // bytes txn_hash = 3;
  if (this->txn_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_txn_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.QuashTXN)
  return target;
}

size_t QuashTXN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.QuashTXN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string contract_id = 2;
  if (this->contract_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract_id());
  }

  // bytes txn_hash = 3;
  if (this->txn_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_txn_hash());
  }

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuashTXN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.QuashTXN)
  GOOGLE_DCHECK_NE(&from, this);
  const QuashTXN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QuashTXN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.QuashTXN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.QuashTXN)
    MergeFrom(*source);
  }
}

void QuashTXN::MergeFrom(const QuashTXN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.QuashTXN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.contract_id().size() > 0) {
    _internal_set_contract_id(from._internal_contract_id());
  }
  if (from.txn_hash().size() > 0) {
    _internal_set_txn_hash(from._internal_txn_hash());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::zera_txn::BaseTXN::MergeFrom(from._internal_base());
  }
}

void QuashTXN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.QuashTXN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuashTXN::CopyFrom(const QuashTXN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.QuashTXN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuashTXN::IsInitialized() const {
  return true;
}

void QuashTXN::InternalSwap(QuashTXN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  contract_id_.Swap(&other->contract_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  txn_hash_.Swap(&other->txn_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuashTXN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QuashResult::InitAsDefaultInstance() {
}
class QuashResult::_Internal {
 public:
};

QuashResult::QuashResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  public_keys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.QuashResult)
}
QuashResult::QuashResult(const QuashResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      public_keys_(from.public_keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  txn_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_txn_hash().empty()) {
    txn_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_txn_hash(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:zera_txn.QuashResult)
}

void QuashResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QuashResult_txn_2eproto.base);
  txn_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

QuashResult::~QuashResult() {
  // @@protoc_insertion_point(destructor:zera_txn.QuashResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QuashResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  txn_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QuashResult::ArenaDtor(void* object) {
  QuashResult* _this = reinterpret_cast< QuashResult* >(object);
  (void)_this;
}
void QuashResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QuashResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuashResult& QuashResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuashResult_txn_2eproto.base);
  return *internal_default_instance();
}


void QuashResult::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.QuashResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_keys_.Clear();
  txn_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuashResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes txn_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_txn_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.PublicKey public_keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_public_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QuashResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.QuashResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes txn_hash = 1;
  if (this->txn_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_txn_hash(), target);
  }

  // repeated .zera_txn.PublicKey public_keys = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_public_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_public_keys(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.QuashResult)
  return target;
}

size_t QuashResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.QuashResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zera_txn.PublicKey public_keys = 2;
  total_size += 1UL * this->_internal_public_keys_size();
  for (const auto& msg : this->public_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes txn_hash = 1;
  if (this->txn_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_txn_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuashResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.QuashResult)
  GOOGLE_DCHECK_NE(&from, this);
  const QuashResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QuashResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.QuashResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.QuashResult)
    MergeFrom(*source);
  }
}

void QuashResult::MergeFrom(const QuashResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.QuashResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  public_keys_.MergeFrom(from.public_keys_);
  if (from.txn_hash().size() > 0) {
    _internal_set_txn_hash(from._internal_txn_hash());
  }
}

void QuashResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.QuashResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuashResult::CopyFrom(const QuashResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.QuashResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuashResult::IsInitialized() const {
  return true;
}

void QuashResult::InternalSwap(QuashResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  public_keys_.InternalSwap(&other->public_keys_);
  txn_hash_.Swap(&other->txn_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata QuashResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CoinTXN::InitAsDefaultInstance() {
  ::zera_txn::_CoinTXN_default_instance_._instance.get_mutable()->base_ = const_cast< ::zera_txn::BaseTXN*>(
      ::zera_txn::BaseTXN::internal_default_instance());
}
class CoinTXN::_Internal {
 public:
  static const ::zera_txn::BaseTXN& base(const CoinTXN* msg);
};

const ::zera_txn::BaseTXN&
CoinTXN::_Internal::base(const CoinTXN* msg) {
  return *msg->base_;
}
CoinTXN::CoinTXN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  transfers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.CoinTXN)
}
CoinTXN::CoinTXN(const CoinTXN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transfers_(from.transfers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::zera_txn::BaseTXN(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zera_txn.CoinTXN)
}

void CoinTXN::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CoinTXN_txn_2eproto.base);
  base_ = nullptr;
}

CoinTXN::~CoinTXN() {
  // @@protoc_insertion_point(destructor:zera_txn.CoinTXN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CoinTXN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
}

void CoinTXN::ArenaDtor(void* object) {
  CoinTXN* _this = reinterpret_cast< CoinTXN* >(object);
  (void)_this;
}
void CoinTXN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CoinTXN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CoinTXN& CoinTXN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CoinTXN_txn_2eproto.base);
  return *internal_default_instance();
}


void CoinTXN::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.CoinTXN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transfers_.Clear();
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CoinTXN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zera_txn.BaseTXN base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.Transfer transfers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transfers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CoinTXN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.CoinTXN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // repeated .zera_txn.Transfer transfers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transfers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_transfers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.CoinTXN)
  return target;
}

size_t CoinTXN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.CoinTXN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zera_txn.Transfer transfers = 2;
  total_size += 1UL * this->_internal_transfers_size();
  for (const auto& msg : this->transfers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CoinTXN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.CoinTXN)
  GOOGLE_DCHECK_NE(&from, this);
  const CoinTXN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CoinTXN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.CoinTXN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.CoinTXN)
    MergeFrom(*source);
  }
}

void CoinTXN::MergeFrom(const CoinTXN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.CoinTXN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transfers_.MergeFrom(from.transfers_);
  if (from.has_base()) {
    _internal_mutable_base()->::zera_txn::BaseTXN::MergeFrom(from._internal_base());
  }
}

void CoinTXN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.CoinTXN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoinTXN::CopyFrom(const CoinTXN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.CoinTXN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoinTXN::IsInitialized() const {
  return true;
}

void CoinTXN::InternalSwap(CoinTXN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  transfers_.InternalSwap(&other->transfers_);
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CoinTXN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NewCoinTXN::InitAsDefaultInstance() {
  ::zera_txn::_NewCoinTXN_default_instance_._instance.get_mutable()->base_ = const_cast< ::zera_txn::BaseTXN*>(
      ::zera_txn::BaseTXN::internal_default_instance());
  ::zera_txn::_NewCoinTXN_default_instance_._instance.get_mutable()->auth_ = const_cast< ::zera_txn::TransferAuthentication*>(
      ::zera_txn::TransferAuthentication::internal_default_instance());
}
class NewCoinTXN::_Internal {
 public:
  using HasBits = decltype(std::declval<NewCoinTXN>()._has_bits_);
  static const ::zera_txn::BaseTXN& base(const NewCoinTXN* msg);
  static const ::zera_txn::TransferAuthentication& auth(const NewCoinTXN* msg);
  static void set_has_contract_fee_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_contract_fee_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zera_txn::BaseTXN&
NewCoinTXN::_Internal::base(const NewCoinTXN* msg) {
  return *msg->base_;
}
const ::zera_txn::TransferAuthentication&
NewCoinTXN::_Internal::auth(const NewCoinTXN* msg) {
  return *msg->auth_;
}
NewCoinTXN::NewCoinTXN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  input_transfers_(arena),
  output_transfers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.NewCoinTXN)
}
NewCoinTXN::NewCoinTXN(const NewCoinTXN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      input_transfers_(from.input_transfers_),
      output_transfers_(from.output_transfers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_id().empty()) {
    contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_id(),
      GetArena());
  }
  contract_fee_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_contract_fee_id()) {
    contract_fee_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_fee_id(),
      GetArena());
  }
  contract_fee_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_contract_fee_amount()) {
    contract_fee_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_fee_amount(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::zera_txn::BaseTXN(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_auth()) {
    auth_ = new ::zera_txn::TransferAuthentication(*from.auth_);
  } else {
    auth_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zera_txn.NewCoinTXN)
}

void NewCoinTXN::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewCoinTXN_txn_2eproto.base);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_fee_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_fee_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auth_) -
      reinterpret_cast<char*>(&base_)) + sizeof(auth_));
}

NewCoinTXN::~NewCoinTXN() {
  // @@protoc_insertion_point(destructor:zera_txn.NewCoinTXN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NewCoinTXN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_fee_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_fee_amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete auth_;
}

void NewCoinTXN::ArenaDtor(void* object) {
  NewCoinTXN* _this = reinterpret_cast< NewCoinTXN* >(object);
  (void)_this;
}
void NewCoinTXN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewCoinTXN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewCoinTXN& NewCoinTXN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewCoinTXN_txn_2eproto.base);
  return *internal_default_instance();
}


void NewCoinTXN::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.NewCoinTXN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_transfers_.Clear();
  output_transfers_.Clear();
  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      contract_fee_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      contract_fee_amount_.ClearNonDefaultToEmpty();
    }
  }
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArena() == nullptr && auth_ != nullptr) {
    delete auth_;
  }
  auth_ = nullptr;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewCoinTXN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zera_txn.BaseTXN base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string contract_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.NewCoinTXN.contract_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zera_txn.TransferAuthentication auth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_auth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.InputTransfers input_transfers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_input_transfers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.OutputTransfers output_transfers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_output_transfers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // string contract_fee_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_contract_fee_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.NewCoinTXN.contract_fee_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string contract_fee_amount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_contract_fee_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.NewCoinTXN.contract_fee_amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewCoinTXN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.NewCoinTXN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string contract_id = 2;
  if (this->contract_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_id().data(), static_cast<int>(this->_internal_contract_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.NewCoinTXN.contract_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_contract_id(), target);
  }

  // .zera_txn.TransferAuthentication auth = 3;
  if (this->has_auth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::auth(this), target, stream);
  }

  // repeated .zera_txn.InputTransfers input_transfers = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_input_transfers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_input_transfers(i), target, stream);
  }

  // repeated .zera_txn.OutputTransfers output_transfers = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_output_transfers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_output_transfers(i), target, stream);
  }

  // string contract_fee_id = 6;
  if (_internal_has_contract_fee_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_fee_id().data(), static_cast<int>(this->_internal_contract_fee_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.NewCoinTXN.contract_fee_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_contract_fee_id(), target);
  }

  // string contract_fee_amount = 7;
  if (_internal_has_contract_fee_amount()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_fee_amount().data(), static_cast<int>(this->_internal_contract_fee_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.NewCoinTXN.contract_fee_amount");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_contract_fee_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.NewCoinTXN)
  return target;
}

size_t NewCoinTXN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.NewCoinTXN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zera_txn.InputTransfers input_transfers = 4;
  total_size += 1UL * this->_internal_input_transfers_size();
  for (const auto& msg : this->input_transfers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zera_txn.OutputTransfers output_transfers = 5;
  total_size += 1UL * this->_internal_output_transfers_size();
  for (const auto& msg : this->output_transfers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string contract_id = 2;
  if (this->contract_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract_id());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // string contract_fee_id = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contract_fee_id());
    }

    // string contract_fee_amount = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contract_fee_amount());
    }

  }
  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .zera_txn.TransferAuthentication auth = 3;
  if (this->has_auth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *auth_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewCoinTXN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.NewCoinTXN)
  GOOGLE_DCHECK_NE(&from, this);
  const NewCoinTXN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewCoinTXN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.NewCoinTXN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.NewCoinTXN)
    MergeFrom(*source);
  }
}

void NewCoinTXN::MergeFrom(const NewCoinTXN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.NewCoinTXN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_transfers_.MergeFrom(from.input_transfers_);
  output_transfers_.MergeFrom(from.output_transfers_);
  if (from.contract_id().size() > 0) {
    _internal_set_contract_id(from._internal_contract_id());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_contract_fee_id(from._internal_contract_fee_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_contract_fee_amount(from._internal_contract_fee_amount());
    }
  }
  if (from.has_base()) {
    _internal_mutable_base()->::zera_txn::BaseTXN::MergeFrom(from._internal_base());
  }
  if (from.has_auth()) {
    _internal_mutable_auth()->::zera_txn::TransferAuthentication::MergeFrom(from._internal_auth());
  }
}

void NewCoinTXN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.NewCoinTXN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewCoinTXN::CopyFrom(const NewCoinTXN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.NewCoinTXN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewCoinTXN::IsInitialized() const {
  return true;
}

void NewCoinTXN::InternalSwap(NewCoinTXN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  input_transfers_.InternalSwap(&other->input_transfers_);
  output_transfers_.InternalSwap(&other->output_transfers_);
  contract_id_.Swap(&other->contract_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contract_fee_id_.Swap(&other->contract_fee_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contract_fee_amount_.Swap(&other->contract_fee_amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewCoinTXN, auth_)
      + sizeof(NewCoinTXN::auth_)
      - PROTOBUF_FIELD_OFFSET(NewCoinTXN, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NewCoinTXN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransferAuthentication::InitAsDefaultInstance() {
}
class TransferAuthentication::_Internal {
 public:
};

TransferAuthentication::TransferAuthentication(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  public_key_(arena),
  signature_(arena),
  nonce_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.TransferAuthentication)
}
TransferAuthentication::TransferAuthentication(const TransferAuthentication& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      public_key_(from.public_key_),
      signature_(from.signature_),
      nonce_(from.nonce_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zera_txn.TransferAuthentication)
}

void TransferAuthentication::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransferAuthentication_txn_2eproto.base);
}

TransferAuthentication::~TransferAuthentication() {
  // @@protoc_insertion_point(destructor:zera_txn.TransferAuthentication)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferAuthentication::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TransferAuthentication::ArenaDtor(void* object) {
  TransferAuthentication* _this = reinterpret_cast< TransferAuthentication* >(object);
  (void)_this;
}
void TransferAuthentication::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferAuthentication::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferAuthentication& TransferAuthentication::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferAuthentication_txn_2eproto.base);
  return *internal_default_instance();
}


void TransferAuthentication::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.TransferAuthentication)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_key_.Clear();
  signature_.Clear();
  nonce_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferAuthentication::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .zera_txn.PublicKey public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_public_key(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_signature();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint64 nonce = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_nonce(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_nonce(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferAuthentication::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.TransferAuthentication)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zera_txn.PublicKey public_key = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_public_key_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_public_key(i), target, stream);
  }

  // repeated bytes signature = 2;
  for (int i = 0, n = this->_internal_signature_size(); i < n; i++) {
    const auto& s = this->_internal_signature(i);
    target = stream->WriteBytes(2, s, target);
  }

  // repeated uint64 nonce = 3;
  {
    int byte_size = _nonce_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          3, _internal_nonce(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.TransferAuthentication)
  return target;
}

size_t TransferAuthentication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.TransferAuthentication)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zera_txn.PublicKey public_key = 1;
  total_size += 1UL * this->_internal_public_key_size();
  for (const auto& msg : this->public_key_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bytes signature = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(signature_.size());
  for (int i = 0, n = signature_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      signature_.Get(i));
  }

  // repeated uint64 nonce = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->nonce_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _nonce_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferAuthentication::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.TransferAuthentication)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferAuthentication* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferAuthentication>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.TransferAuthentication)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.TransferAuthentication)
    MergeFrom(*source);
  }
}

void TransferAuthentication::MergeFrom(const TransferAuthentication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.TransferAuthentication)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  public_key_.MergeFrom(from.public_key_);
  signature_.MergeFrom(from.signature_);
  nonce_.MergeFrom(from.nonce_);
}

void TransferAuthentication::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.TransferAuthentication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferAuthentication::CopyFrom(const TransferAuthentication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.TransferAuthentication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferAuthentication::IsInitialized() const {
  return true;
}

void TransferAuthentication::InternalSwap(TransferAuthentication* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  public_key_.InternalSwap(&other->public_key_);
  signature_.InternalSwap(&other->signature_);
  nonce_.InternalSwap(&other->nonce_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferAuthentication::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InputTransfers::InitAsDefaultInstance() {
}
class InputTransfers::_Internal {
 public:
  using HasBits = decltype(std::declval<InputTransfers>()._has_bits_);
  static void set_has_contract_fee_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

InputTransfers::InputTransfers(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.InputTransfers)
}
InputTransfers::InputTransfers(const InputTransfers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_amount(),
      GetArena());
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&contract_fee_percent_) -
    reinterpret_cast<char*>(&index_)) + sizeof(contract_fee_percent_));
  // @@protoc_insertion_point(copy_constructor:zera_txn.InputTransfers)
}

void InputTransfers::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputTransfers_txn_2eproto.base);
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contract_fee_percent_) -
      reinterpret_cast<char*>(&index_)) + sizeof(contract_fee_percent_));
}

InputTransfers::~InputTransfers() {
  // @@protoc_insertion_point(destructor:zera_txn.InputTransfers)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InputTransfers::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InputTransfers::ArenaDtor(void* object) {
  InputTransfers* _this = reinterpret_cast< InputTransfers* >(object);
  (void)_this;
}
void InputTransfers::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InputTransfers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputTransfers& InputTransfers::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputTransfers_txn_2eproto.base);
  return *internal_default_instance();
}


void InputTransfers::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.InputTransfers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  amount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fee_percent_) -
      reinterpret_cast<char*>(&index_)) + sizeof(fee_percent_));
  contract_fee_percent_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputTransfers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.InputTransfers.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 fee_percent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fee_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 contract_fee_percent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_contract_fee_percent(&has_bits);
          contract_fee_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputTransfers::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.InputTransfers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_index(), target);
  }

  // string amount = 2;
  if (this->amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.InputTransfers.amount");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_amount(), target);
  }

  // uint32 fee_percent = 3;
  if (this->fee_percent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_fee_percent(), target);
  }

  // uint32 contract_fee_percent = 4;
  if (_internal_has_contract_fee_percent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_contract_fee_percent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.InputTransfers)
  return target;
}

size_t InputTransfers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.InputTransfers)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string amount = 2;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // uint64 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_index());
  }

  // uint32 fee_percent = 3;
  if (this->fee_percent() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fee_percent());
  }

  // uint32 contract_fee_percent = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_contract_fee_percent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputTransfers::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.InputTransfers)
  GOOGLE_DCHECK_NE(&from, this);
  const InputTransfers* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputTransfers>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.InputTransfers)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.InputTransfers)
    MergeFrom(*source);
  }
}

void InputTransfers::MergeFrom(const InputTransfers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.InputTransfers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.fee_percent() != 0) {
    _internal_set_fee_percent(from._internal_fee_percent());
  }
  if (from._internal_has_contract_fee_percent()) {
    _internal_set_contract_fee_percent(from._internal_contract_fee_percent());
  }
}

void InputTransfers::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.InputTransfers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputTransfers::CopyFrom(const InputTransfers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.InputTransfers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputTransfers::IsInitialized() const {
  return true;
}

void InputTransfers::InternalSwap(InputTransfers* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InputTransfers, contract_fee_percent_)
      + sizeof(InputTransfers::contract_fee_percent_)
      - PROTOBUF_FIELD_OFFSET(InputTransfers, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InputTransfers::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OutputTransfers::InitAsDefaultInstance() {
}
class OutputTransfers::_Internal {
 public:
  using HasBits = decltype(std::declval<OutputTransfers>()._has_bits_);
  static void set_has_memo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OutputTransfers::OutputTransfers(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.OutputTransfers)
}
OutputTransfers::OutputTransfers(const OutputTransfers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  wallet_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_wallet_address().empty()) {
    wallet_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_wallet_address(),
      GetArena());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_amount(),
      GetArena());
  }
  memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_memo()) {
    memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_memo(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:zera_txn.OutputTransfers)
}

void OutputTransfers::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OutputTransfers_txn_2eproto.base);
  wallet_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OutputTransfers::~OutputTransfers() {
  // @@protoc_insertion_point(destructor:zera_txn.OutputTransfers)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OutputTransfers::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  wallet_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OutputTransfers::ArenaDtor(void* object) {
  OutputTransfers* _this = reinterpret_cast< OutputTransfers* >(object);
  (void)_this;
}
void OutputTransfers::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OutputTransfers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OutputTransfers& OutputTransfers::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OutputTransfers_txn_2eproto.base);
  return *internal_default_instance();
}


void OutputTransfers::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.OutputTransfers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wallet_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    memo_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutputTransfers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes wallet_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_wallet_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.OutputTransfers.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string memo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_memo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.OutputTransfers.memo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OutputTransfers::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.OutputTransfers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes wallet_address = 1;
  if (this->wallet_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_wallet_address(), target);
  }

  // string amount = 2;
  if (this->amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.OutputTransfers.amount");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_amount(), target);
  }

  // string memo = 3;
  if (_internal_has_memo()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memo().data(), static_cast<int>(this->_internal_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.OutputTransfers.memo");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_memo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.OutputTransfers)
  return target;
}

size_t OutputTransfers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.OutputTransfers)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes wallet_address = 1;
  if (this->wallet_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_wallet_address());
  }

  // string amount = 2;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // string memo = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memo());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OutputTransfers::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.OutputTransfers)
  GOOGLE_DCHECK_NE(&from, this);
  const OutputTransfers* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OutputTransfers>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.OutputTransfers)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.OutputTransfers)
    MergeFrom(*source);
  }
}

void OutputTransfers::MergeFrom(const OutputTransfers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.OutputTransfers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.wallet_address().size() > 0) {
    _internal_set_wallet_address(from._internal_wallet_address());
  }
  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from._internal_has_memo()) {
    _internal_set_memo(from._internal_memo());
  }
}

void OutputTransfers::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.OutputTransfers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutputTransfers::CopyFrom(const OutputTransfers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.OutputTransfers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputTransfers::IsInitialized() const {
  return true;
}

void OutputTransfers::InternalSwap(OutputTransfers* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  wallet_address_.Swap(&other->wallet_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  memo_.Swap(&other->memo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata OutputTransfers::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MintTXN::InitAsDefaultInstance() {
  ::zera_txn::_MintTXN_default_instance_._instance.get_mutable()->base_ = const_cast< ::zera_txn::BaseTXN*>(
      ::zera_txn::BaseTXN::internal_default_instance());
}
class MintTXN::_Internal {
 public:
  static const ::zera_txn::BaseTXN& base(const MintTXN* msg);
};

const ::zera_txn::BaseTXN&
MintTXN::_Internal::base(const MintTXN* msg) {
  return *msg->base_;
}
MintTXN::MintTXN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.MintTXN)
}
MintTXN::MintTXN(const MintTXN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_id().empty()) {
    contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_id(),
      GetArena());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_amount(),
      GetArena());
  }
  recipient_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recipient_address().empty()) {
    recipient_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_recipient_address(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::zera_txn::BaseTXN(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zera_txn.MintTXN)
}

void MintTXN::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MintTXN_txn_2eproto.base);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

MintTXN::~MintTXN() {
  // @@protoc_insertion_point(destructor:zera_txn.MintTXN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MintTXN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void MintTXN::ArenaDtor(void* object) {
  MintTXN* _this = reinterpret_cast< MintTXN* >(object);
  (void)_this;
}
void MintTXN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MintTXN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MintTXN& MintTXN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MintTXN_txn_2eproto.base);
  return *internal_default_instance();
}


void MintTXN::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.MintTXN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  recipient_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MintTXN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zera_txn.BaseTXN base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string contract_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.MintTXN.contract_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.MintTXN.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes recipient_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_recipient_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MintTXN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.MintTXN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string contract_id = 2;
  if (this->contract_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_id().data(), static_cast<int>(this->_internal_contract_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.MintTXN.contract_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_contract_id(), target);
  }

  // string amount = 3;
  if (this->amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.MintTXN.amount");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_amount(), target);
  }

  // bytes recipient_address = 4;
  if (this->recipient_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_recipient_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.MintTXN)
  return target;
}

size_t MintTXN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.MintTXN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string contract_id = 2;
  if (this->contract_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract_id());
  }

  // string amount = 3;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // bytes recipient_address = 4;
  if (this->recipient_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_recipient_address());
  }

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MintTXN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.MintTXN)
  GOOGLE_DCHECK_NE(&from, this);
  const MintTXN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MintTXN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.MintTXN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.MintTXN)
    MergeFrom(*source);
  }
}

void MintTXN::MergeFrom(const MintTXN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.MintTXN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.contract_id().size() > 0) {
    _internal_set_contract_id(from._internal_contract_id());
  }
  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.recipient_address().size() > 0) {
    _internal_set_recipient_address(from._internal_recipient_address());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::zera_txn::BaseTXN::MergeFrom(from._internal_base());
  }
}

void MintTXN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.MintTXN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MintTXN::CopyFrom(const MintTXN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.MintTXN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MintTXN::IsInitialized() const {
  return true;
}

void MintTXN::InternalSwap(MintTXN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  contract_id_.Swap(&other->contract_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  recipient_address_.Swap(&other->recipient_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MintTXN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NFTTXN::InitAsDefaultInstance() {
  ::zera_txn::_NFTTXN_default_instance_._instance.get_mutable()->base_ = const_cast< ::zera_txn::BaseTXN*>(
      ::zera_txn::BaseTXN::internal_default_instance());
}
class NFTTXN::_Internal {
 public:
  using HasBits = decltype(std::declval<NFTTXN>()._has_bits_);
  static const ::zera_txn::BaseTXN& base(const NFTTXN* msg);
  static void set_has_contract_fee_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_contract_fee_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zera_txn::BaseTXN&
NFTTXN::_Internal::base(const NFTTXN* msg) {
  return *msg->base_;
}
NFTTXN::NFTTXN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.NFTTXN)
}
NFTTXN::NFTTXN(const NFTTXN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_id().empty()) {
    contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_id(),
      GetArena());
  }
  item_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_item_id().empty()) {
    item_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_item_id(),
      GetArena());
  }
  recipient_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recipient_address().empty()) {
    recipient_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_recipient_address(),
      GetArena());
  }
  contract_fee_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_contract_fee_amount()) {
    contract_fee_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_fee_amount(),
      GetArena());
  }
  contract_fee_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_contract_fee_id()) {
    contract_fee_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_fee_id(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::zera_txn::BaseTXN(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zera_txn.NFTTXN)
}

void NFTTXN::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NFTTXN_txn_2eproto.base);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_fee_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_fee_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

NFTTXN::~NFTTXN() {
  // @@protoc_insertion_point(destructor:zera_txn.NFTTXN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NFTTXN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_fee_amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_fee_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void NFTTXN::ArenaDtor(void* object) {
  NFTTXN* _this = reinterpret_cast< NFTTXN* >(object);
  (void)_this;
}
void NFTTXN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NFTTXN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NFTTXN& NFTTXN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NFTTXN_txn_2eproto.base);
  return *internal_default_instance();
}


void NFTTXN::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.NFTTXN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  item_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  recipient_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      contract_fee_amount_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      contract_fee_id_.ClearNonDefaultToEmpty();
    }
  }
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NFTTXN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zera_txn.BaseTXN base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string contract_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.NFTTXN.contract_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string item_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_item_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.NFTTXN.item_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes recipient_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_recipient_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string contract_fee_amount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_contract_fee_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.NFTTXN.contract_fee_amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string contract_fee_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_contract_fee_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.NFTTXN.contract_fee_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NFTTXN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.NFTTXN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string contract_id = 2;
  if (this->contract_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_id().data(), static_cast<int>(this->_internal_contract_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.NFTTXN.contract_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_contract_id(), target);
  }

  // string item_id = 3;
  if (this->item_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_item_id().data(), static_cast<int>(this->_internal_item_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.NFTTXN.item_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_item_id(), target);
  }

  // bytes recipient_address = 4;
  if (this->recipient_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_recipient_address(), target);
  }

  // string contract_fee_amount = 5;
  if (_internal_has_contract_fee_amount()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_fee_amount().data(), static_cast<int>(this->_internal_contract_fee_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.NFTTXN.contract_fee_amount");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_contract_fee_amount(), target);
  }

  // string contract_fee_id = 6;
  if (_internal_has_contract_fee_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_fee_id().data(), static_cast<int>(this->_internal_contract_fee_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.NFTTXN.contract_fee_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_contract_fee_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.NFTTXN)
  return target;
}

size_t NFTTXN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.NFTTXN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string contract_id = 2;
  if (this->contract_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract_id());
  }

  // string item_id = 3;
  if (this->item_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_item_id());
  }

  // bytes recipient_address = 4;
  if (this->recipient_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_recipient_address());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // string contract_fee_amount = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contract_fee_amount());
    }

    // string contract_fee_id = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contract_fee_id());
    }

  }
  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NFTTXN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.NFTTXN)
  GOOGLE_DCHECK_NE(&from, this);
  const NFTTXN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NFTTXN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.NFTTXN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.NFTTXN)
    MergeFrom(*source);
  }
}

void NFTTXN::MergeFrom(const NFTTXN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.NFTTXN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.contract_id().size() > 0) {
    _internal_set_contract_id(from._internal_contract_id());
  }
  if (from.item_id().size() > 0) {
    _internal_set_item_id(from._internal_item_id());
  }
  if (from.recipient_address().size() > 0) {
    _internal_set_recipient_address(from._internal_recipient_address());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_contract_fee_amount(from._internal_contract_fee_amount());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_contract_fee_id(from._internal_contract_fee_id());
    }
  }
  if (from.has_base()) {
    _internal_mutable_base()->::zera_txn::BaseTXN::MergeFrom(from._internal_base());
  }
}

void NFTTXN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.NFTTXN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NFTTXN::CopyFrom(const NFTTXN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.NFTTXN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NFTTXN::IsInitialized() const {
  return true;
}

void NFTTXN::InternalSwap(NFTTXN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  contract_id_.Swap(&other->contract_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  item_id_.Swap(&other->item_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  recipient_address_.Swap(&other->recipient_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contract_fee_amount_.Swap(&other->contract_fee_amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contract_fee_id_.Swap(&other->contract_fee_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NFTTXN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ItemizedMintTXN::InitAsDefaultInstance() {
  ::zera_txn::_ItemizedMintTXN_default_instance_._instance.get_mutable()->base_ = const_cast< ::zera_txn::BaseTXN*>(
      ::zera_txn::BaseTXN::internal_default_instance());
  ::zera_txn::_ItemizedMintTXN_default_instance_._instance.get_mutable()->contract_fees_ = const_cast< ::zera_txn::ItemContractFees*>(
      ::zera_txn::ItemContractFees::internal_default_instance());
}
class ItemizedMintTXN::_Internal {
 public:
  using HasBits = decltype(std::declval<ItemizedMintTXN>()._has_bits_);
  static const ::zera_txn::BaseTXN& base(const ItemizedMintTXN* msg);
  static void set_has_voting_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_expiry(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zera_txn::ItemContractFees& contract_fees(const ItemizedMintTXN* msg);
  static void set_has_contract_fees(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_valid_from(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zera_txn::BaseTXN&
ItemizedMintTXN::_Internal::base(const ItemizedMintTXN* msg) {
  return *msg->base_;
}
const ::zera_txn::ItemContractFees&
ItemizedMintTXN::_Internal::contract_fees(const ItemizedMintTXN* msg) {
  return *msg->contract_fees_;
}
ItemizedMintTXN::ItemizedMintTXN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  parameters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.ItemizedMintTXN)
}
ItemizedMintTXN::ItemizedMintTXN(const ItemizedMintTXN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      parameters_(from.parameters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_id().empty()) {
    contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_id(),
      GetArena());
  }
  item_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_item_id().empty()) {
    item_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_item_id(),
      GetArena());
  }
  recipient_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recipient_address().empty()) {
    recipient_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_recipient_address(),
      GetArena());
  }
  voting_weight_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_voting_weight()) {
    voting_weight_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_voting_weight(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::zera_txn::BaseTXN(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_contract_fees()) {
    contract_fees_ = new ::zera_txn::ItemContractFees(*from.contract_fees_);
  } else {
    contract_fees_ = nullptr;
  }
  ::memcpy(&expiry_, &from.expiry_,
    static_cast<size_t>(reinterpret_cast<char*>(&valid_from_) -
    reinterpret_cast<char*>(&expiry_)) + sizeof(valid_from_));
  // @@protoc_insertion_point(copy_constructor:zera_txn.ItemizedMintTXN)
}

void ItemizedMintTXN::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ItemizedMintTXN_txn_2eproto.base);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  voting_weight_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&valid_from_) -
      reinterpret_cast<char*>(&base_)) + sizeof(valid_from_));
}

ItemizedMintTXN::~ItemizedMintTXN() {
  // @@protoc_insertion_point(destructor:zera_txn.ItemizedMintTXN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ItemizedMintTXN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recipient_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  voting_weight_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete contract_fees_;
}

void ItemizedMintTXN::ArenaDtor(void* object) {
  ItemizedMintTXN* _this = reinterpret_cast< ItemizedMintTXN* >(object);
  (void)_this;
}
void ItemizedMintTXN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ItemizedMintTXN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ItemizedMintTXN& ItemizedMintTXN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ItemizedMintTXN_txn_2eproto.base);
  return *internal_default_instance();
}


void ItemizedMintTXN::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.ItemizedMintTXN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameters_.Clear();
  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  item_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  recipient_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    voting_weight_.ClearNonDefaultToEmpty();
  }
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (cached_has_bits & 0x00000002u) {
    if (GetArena() == nullptr && contract_fees_ != nullptr) {
      delete contract_fees_;
    }
    contract_fees_ = nullptr;
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&expiry_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&valid_from_) -
        reinterpret_cast<char*>(&expiry_)) + sizeof(valid_from_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemizedMintTXN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zera_txn.BaseTXN base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string contract_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.ItemizedMintTXN.contract_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string item_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_item_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.ItemizedMintTXN.item_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes recipient_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_recipient_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string voting_weight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_voting_weight();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.ItemizedMintTXN.voting_weight"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.KeyValuePair parameters = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 expiry = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_expiry(&has_bits);
          expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zera_txn.ItemContractFees contract_fees = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_contract_fees(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 valid_from = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_valid_from(&has_bits);
          valid_from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ItemizedMintTXN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.ItemizedMintTXN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string contract_id = 2;
  if (this->contract_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_id().data(), static_cast<int>(this->_internal_contract_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.ItemizedMintTXN.contract_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_contract_id(), target);
  }

  // string item_id = 3;
  if (this->item_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_item_id().data(), static_cast<int>(this->_internal_item_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.ItemizedMintTXN.item_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_item_id(), target);
  }

  // bytes recipient_address = 4;
  if (this->recipient_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_recipient_address(), target);
  }

  // string voting_weight = 5;
  if (_internal_has_voting_weight()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_voting_weight().data(), static_cast<int>(this->_internal_voting_weight().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.ItemizedMintTXN.voting_weight");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_voting_weight(), target);
  }

  // repeated .zera_txn.KeyValuePair parameters = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parameters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_parameters(i), target, stream);
  }

  // uint64 expiry = 7;
  if (_internal_has_expiry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_expiry(), target);
  }

  // .zera_txn.ItemContractFees contract_fees = 8;
  if (_internal_has_contract_fees()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::contract_fees(this), target, stream);
  }

  // uint64 valid_from = 9;
  if (_internal_has_valid_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_valid_from(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.ItemizedMintTXN)
  return target;
}

size_t ItemizedMintTXN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.ItemizedMintTXN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zera_txn.KeyValuePair parameters = 6;
  total_size += 1UL * this->_internal_parameters_size();
  for (const auto& msg : this->parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string contract_id = 2;
  if (this->contract_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract_id());
  }

  // string item_id = 3;
  if (this->item_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_item_id());
  }

  // bytes recipient_address = 4;
  if (this->recipient_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_recipient_address());
  }

  // string voting_weight = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_voting_weight());
  }

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (cached_has_bits & 0x0000000eu) {
    // .zera_txn.ItemContractFees contract_fees = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contract_fees_);
    }

    // uint64 expiry = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_expiry());
    }

    // uint64 valid_from = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_valid_from());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ItemizedMintTXN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.ItemizedMintTXN)
  GOOGLE_DCHECK_NE(&from, this);
  const ItemizedMintTXN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ItemizedMintTXN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.ItemizedMintTXN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.ItemizedMintTXN)
    MergeFrom(*source);
  }
}

void ItemizedMintTXN::MergeFrom(const ItemizedMintTXN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.ItemizedMintTXN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parameters_.MergeFrom(from.parameters_);
  if (from.contract_id().size() > 0) {
    _internal_set_contract_id(from._internal_contract_id());
  }
  if (from.item_id().size() > 0) {
    _internal_set_item_id(from._internal_item_id());
  }
  if (from.recipient_address().size() > 0) {
    _internal_set_recipient_address(from._internal_recipient_address());
  }
  if (from._internal_has_voting_weight()) {
    _internal_set_voting_weight(from._internal_voting_weight());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::zera_txn::BaseTXN::MergeFrom(from._internal_base());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_contract_fees()->::zera_txn::ItemContractFees::MergeFrom(from._internal_contract_fees());
    }
    if (cached_has_bits & 0x00000004u) {
      expiry_ = from.expiry_;
    }
    if (cached_has_bits & 0x00000008u) {
      valid_from_ = from.valid_from_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ItemizedMintTXN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.ItemizedMintTXN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemizedMintTXN::CopyFrom(const ItemizedMintTXN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.ItemizedMintTXN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemizedMintTXN::IsInitialized() const {
  return true;
}

void ItemizedMintTXN::InternalSwap(ItemizedMintTXN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  parameters_.InternalSwap(&other->parameters_);
  contract_id_.Swap(&other->contract_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  item_id_.Swap(&other->item_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  recipient_address_.Swap(&other->recipient_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  voting_weight_.Swap(&other->voting_weight_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ItemizedMintTXN, valid_from_)
      + sizeof(ItemizedMintTXN::valid_from_)
      - PROTOBUF_FIELD_OFFSET(ItemizedMintTXN, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemizedMintTXN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractUpdateTXN::InitAsDefaultInstance() {
  ::zera_txn::_ContractUpdateTXN_default_instance_._instance.get_mutable()->base_ = const_cast< ::zera_txn::BaseTXN*>(
      ::zera_txn::BaseTXN::internal_default_instance());
  ::zera_txn::_ContractUpdateTXN_default_instance_._instance.get_mutable()->governance_ = const_cast< ::zera_txn::Governance*>(
      ::zera_txn::Governance::internal_default_instance());
  ::zera_txn::_ContractUpdateTXN_default_instance_._instance.get_mutable()->contract_fees_ = const_cast< ::zera_txn::ContractFees*>(
      ::zera_txn::ContractFees::internal_default_instance());
}
class ContractUpdateTXN::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractUpdateTXN>()._has_bits_);
  static const ::zera_txn::BaseTXN& base(const ContractUpdateTXN* msg);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zera_txn::Governance& governance(const ContractUpdateTXN* msg);
  static void set_has_governance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zera_txn::ContractFees& contract_fees(const ContractUpdateTXN* msg);
  static void set_has_contract_fees(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zera_txn::BaseTXN&
ContractUpdateTXN::_Internal::base(const ContractUpdateTXN* msg) {
  return *msg->base_;
}
const ::zera_txn::Governance&
ContractUpdateTXN::_Internal::governance(const ContractUpdateTXN* msg) {
  return *msg->governance_;
}
const ::zera_txn::ContractFees&
ContractUpdateTXN::_Internal::contract_fees(const ContractUpdateTXN* msg) {
  return *msg->contract_fees_;
}
ContractUpdateTXN::ContractUpdateTXN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  restricted_keys_(arena),
  custom_parameters_(arena),
  expense_ratio_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.ContractUpdateTXN)
}
ContractUpdateTXN::ContractUpdateTXN(const ContractUpdateTXN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      restricted_keys_(from.restricted_keys_),
      custom_parameters_(from.custom_parameters_),
      expense_ratio_(from.expense_ratio_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_id().empty()) {
    contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::zera_txn::BaseTXN(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_governance()) {
    governance_ = new ::zera_txn::Governance(*from.governance_);
  } else {
    governance_ = nullptr;
  }
  if (from._internal_has_contract_fees()) {
    contract_fees_ = new ::zera_txn::ContractFees(*from.contract_fees_);
  } else {
    contract_fees_ = nullptr;
  }
  contract_version_ = from.contract_version_;
  // @@protoc_insertion_point(copy_constructor:zera_txn.ContractUpdateTXN)
}

void ContractUpdateTXN::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractUpdateTXN_txn_2eproto.base);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contract_version_) -
      reinterpret_cast<char*>(&base_)) + sizeof(contract_version_));
}

ContractUpdateTXN::~ContractUpdateTXN() {
  // @@protoc_insertion_point(destructor:zera_txn.ContractUpdateTXN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContractUpdateTXN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete governance_;
  if (this != internal_default_instance()) delete contract_fees_;
}

void ContractUpdateTXN::ArenaDtor(void* object) {
  ContractUpdateTXN* _this = reinterpret_cast< ContractUpdateTXN* >(object);
  (void)_this;
}
void ContractUpdateTXN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContractUpdateTXN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractUpdateTXN& ContractUpdateTXN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractUpdateTXN_txn_2eproto.base);
  return *internal_default_instance();
}


void ContractUpdateTXN::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.ContractUpdateTXN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  restricted_keys_.Clear();
  custom_parameters_.Clear();
  expense_ratio_.Clear();
  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      if (GetArena() == nullptr && governance_ != nullptr) {
        delete governance_;
      }
      governance_ = nullptr;
    }
    if (cached_has_bits & 0x00000004u) {
      if (GetArena() == nullptr && contract_fees_ != nullptr) {
        delete contract_fees_;
      }
      contract_fees_ = nullptr;
    }
  }
  contract_version_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractUpdateTXN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zera_txn.BaseTXN base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string contract_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.ContractUpdateTXN.contract_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 contract_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          contract_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.ContractUpdateTXN.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zera_txn.Governance governance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_governance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.RestrictedKey restricted_keys = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_restricted_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .zera_txn.ContractFees contract_fees = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_contract_fees(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.KeyValuePair custom_parameters = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.ExpenseRatio expense_ratio = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_expense_ratio(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractUpdateTXN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.ContractUpdateTXN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string contract_id = 2;
  if (this->contract_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_id().data(), static_cast<int>(this->_internal_contract_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.ContractUpdateTXN.contract_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_contract_id(), target);
  }

  // uint64 contract_version = 3;
  if (this->contract_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_contract_version(), target);
  }

  // string name = 4;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.ContractUpdateTXN.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // .zera_txn.Governance governance = 5;
  if (_internal_has_governance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::governance(this), target, stream);
  }

  // repeated .zera_txn.RestrictedKey restricted_keys = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_restricted_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_restricted_keys(i), target, stream);
  }

  // .zera_txn.ContractFees contract_fees = 7;
  if (_internal_has_contract_fees()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::contract_fees(this), target, stream);
  }

  // repeated .zera_txn.KeyValuePair custom_parameters = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_custom_parameters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_custom_parameters(i), target, stream);
  }

  // repeated .zera_txn.ExpenseRatio expense_ratio = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_expense_ratio_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_expense_ratio(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.ContractUpdateTXN)
  return target;
}

size_t ContractUpdateTXN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.ContractUpdateTXN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zera_txn.RestrictedKey restricted_keys = 6;
  total_size += 1UL * this->_internal_restricted_keys_size();
  for (const auto& msg : this->restricted_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zera_txn.KeyValuePair custom_parameters = 8;
  total_size += 1UL * this->_internal_custom_parameters_size();
  for (const auto& msg : this->custom_parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zera_txn.ExpenseRatio expense_ratio = 9;
  total_size += 1UL * this->_internal_expense_ratio_size();
  for (const auto& msg : this->expense_ratio_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string contract_id = 2;
  if (this->contract_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract_id());
  }

  // string name = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (cached_has_bits & 0x00000006u) {
    // .zera_txn.Governance governance = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *governance_);
    }

    // .zera_txn.ContractFees contract_fees = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contract_fees_);
    }

  }
  // uint64 contract_version = 3;
  if (this->contract_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_contract_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractUpdateTXN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.ContractUpdateTXN)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractUpdateTXN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractUpdateTXN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.ContractUpdateTXN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.ContractUpdateTXN)
    MergeFrom(*source);
  }
}

void ContractUpdateTXN::MergeFrom(const ContractUpdateTXN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.ContractUpdateTXN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  restricted_keys_.MergeFrom(from.restricted_keys_);
  custom_parameters_.MergeFrom(from.custom_parameters_);
  expense_ratio_.MergeFrom(from.expense_ratio_);
  if (from.contract_id().size() > 0) {
    _internal_set_contract_id(from._internal_contract_id());
  }
  if (from._internal_has_name()) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::zera_txn::BaseTXN::MergeFrom(from._internal_base());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_governance()->::zera_txn::Governance::MergeFrom(from._internal_governance());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_contract_fees()->::zera_txn::ContractFees::MergeFrom(from._internal_contract_fees());
    }
  }
  if (from.contract_version() != 0) {
    _internal_set_contract_version(from._internal_contract_version());
  }
}

void ContractUpdateTXN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.ContractUpdateTXN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractUpdateTXN::CopyFrom(const ContractUpdateTXN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.ContractUpdateTXN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractUpdateTXN::IsInitialized() const {
  return true;
}

void ContractUpdateTXN::InternalSwap(ContractUpdateTXN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  restricted_keys_.InternalSwap(&other->restricted_keys_);
  custom_parameters_.InternalSwap(&other->custom_parameters_);
  expense_ratio_.InternalSwap(&other->expense_ratio_);
  contract_id_.Swap(&other->contract_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContractUpdateTXN, contract_version_)
      + sizeof(ContractUpdateTXN::contract_version_)
      - PROTOBUF_FIELD_OFFSET(ContractUpdateTXN, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractUpdateTXN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InstrumentContract::InitAsDefaultInstance() {
  ::zera_txn::_InstrumentContract_default_instance_._instance.get_mutable()->base_ = const_cast< ::zera_txn::BaseTXN*>(
      ::zera_txn::BaseTXN::internal_default_instance());
  ::zera_txn::_InstrumentContract_default_instance_._instance.get_mutable()->governance_ = const_cast< ::zera_txn::Governance*>(
      ::zera_txn::Governance::internal_default_instance());
  ::zera_txn::_InstrumentContract_default_instance_._instance.get_mutable()->contract_fees_ = const_cast< ::zera_txn::ContractFees*>(
      ::zera_txn::ContractFees::internal_default_instance());
  ::zera_txn::_InstrumentContract_default_instance_._instance.get_mutable()->coin_denomination_ = const_cast< ::zera_txn::CoinDenomination*>(
      ::zera_txn::CoinDenomination::internal_default_instance());
}
class InstrumentContract::_Internal {
 public:
  using HasBits = decltype(std::declval<InstrumentContract>()._has_bits_);
  static const ::zera_txn::BaseTXN& base(const InstrumentContract* msg);
  static const ::zera_txn::Governance& governance(const InstrumentContract* msg);
  static void set_has_governance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_supply(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zera_txn::ContractFees& contract_fees(const InstrumentContract* msg);
  static void set_has_contract_fees(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zera_txn::CoinDenomination& coin_denomination(const InstrumentContract* msg);
  static void set_has_coin_denomination(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_quash_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_cur_equiv_start(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zera_txn::BaseTXN&
InstrumentContract::_Internal::base(const InstrumentContract* msg) {
  return *msg->base_;
}
const ::zera_txn::Governance&
InstrumentContract::_Internal::governance(const InstrumentContract* msg) {
  return *msg->governance_;
}
const ::zera_txn::ContractFees&
InstrumentContract::_Internal::contract_fees(const InstrumentContract* msg) {
  return *msg->contract_fees_;
}
const ::zera_txn::CoinDenomination&
InstrumentContract::_Internal::coin_denomination(const InstrumentContract* msg) {
  return *msg->coin_denomination_;
}
InstrumentContract::InstrumentContract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  restricted_keys_(arena),
  premint_wallets_(arena),
  custom_parameters_(arena),
  expense_ratio_(arena),
  token_compliance_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.InstrumentContract)
}
InstrumentContract::InstrumentContract(const InstrumentContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      restricted_keys_(from.restricted_keys_),
      premint_wallets_(from.premint_wallets_),
      custom_parameters_(from.custom_parameters_),
      expense_ratio_(from.expense_ratio_),
      token_compliance_(from.token_compliance_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_symbol(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  max_supply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_max_supply()) {
    max_supply_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_max_supply(),
      GetArena());
  }
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_id().empty()) {
    contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_id(),
      GetArena());
  }
  cur_equiv_start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cur_equiv_start()) {
    cur_equiv_start_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cur_equiv_start(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::zera_txn::BaseTXN(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_governance()) {
    governance_ = new ::zera_txn::Governance(*from.governance_);
  } else {
    governance_ = nullptr;
  }
  if (from._internal_has_contract_fees()) {
    contract_fees_ = new ::zera_txn::ContractFees(*from.contract_fees_);
  } else {
    contract_fees_ = nullptr;
  }
  if (from._internal_has_coin_denomination()) {
    coin_denomination_ = new ::zera_txn::CoinDenomination(*from.coin_denomination_);
  } else {
    coin_denomination_ = nullptr;
  }
  ::memcpy(&contract_version_, &from.contract_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&immutable_kyc_status_) -
    reinterpret_cast<char*>(&contract_version_)) + sizeof(immutable_kyc_status_));
  // @@protoc_insertion_point(copy_constructor:zera_txn.InstrumentContract)
}

void InstrumentContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InstrumentContract_txn_2eproto.base);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_supply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cur_equiv_start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&immutable_kyc_status_) -
      reinterpret_cast<char*>(&base_)) + sizeof(immutable_kyc_status_));
}

InstrumentContract::~InstrumentContract() {
  // @@protoc_insertion_point(destructor:zera_txn.InstrumentContract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstrumentContract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_supply_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cur_equiv_start_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete governance_;
  if (this != internal_default_instance()) delete contract_fees_;
  if (this != internal_default_instance()) delete coin_denomination_;
}

void InstrumentContract::ArenaDtor(void* object) {
  InstrumentContract* _this = reinterpret_cast< InstrumentContract* >(object);
  (void)_this;
}
void InstrumentContract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstrumentContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstrumentContract& InstrumentContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstrumentContract_txn_2eproto.base);
  return *internal_default_instance();
}


void InstrumentContract::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.InstrumentContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  restricted_keys_.Clear();
  premint_wallets_.Clear();
  custom_parameters_.Clear();
  expense_ratio_.Clear();
  token_compliance_.Clear();
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    max_supply_.ClearNonDefaultToEmpty();
  }
  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (cached_has_bits & 0x00000002u) {
    cur_equiv_start_.ClearNonDefaultToEmpty();
  }
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (cached_has_bits & 0x0000001cu) {
    if (cached_has_bits & 0x00000004u) {
      if (GetArena() == nullptr && governance_ != nullptr) {
        delete governance_;
      }
      governance_ = nullptr;
    }
    if (cached_has_bits & 0x00000008u) {
      if (GetArena() == nullptr && contract_fees_ != nullptr) {
        delete contract_fees_;
      }
      contract_fees_ = nullptr;
    }
    if (cached_has_bits & 0x00000010u) {
      if (GetArena() == nullptr && coin_denomination_ != nullptr) {
        delete coin_denomination_;
      }
      coin_denomination_ = nullptr;
    }
  }
  ::memset(&contract_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&contract_version_)) + sizeof(type_));
  quash_threshold_ = 0u;
  ::memset(&update_contract_fees_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&immutable_kyc_status_) -
      reinterpret_cast<char*>(&update_contract_fees_)) + sizeof(immutable_kyc_status_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstrumentContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zera_txn.BaseTXN base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 contract_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          contract_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.InstrumentContract.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.InstrumentContract.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zera_txn.Governance governance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_governance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.RestrictedKey restricted_keys = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_restricted_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // string max_supply = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_max_supply();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.InstrumentContract.max_supply"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zera_txn.ContractFees contract_fees = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_contract_fees(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.PreMintWallet premint_wallets = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_premint_wallets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // .zera_txn.CoinDenomination coin_denomination = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_coin_denomination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.KeyValuePair custom_parameters = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // string contract_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.InstrumentContract.contract_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.ExpenseRatio expense_ratio = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_expense_ratio(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // .zera_txn.CONTRACT_TYPE type = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::zera_txn::CONTRACT_TYPE>(val));
        } else goto handle_unusual;
        continue;
      // bool update_contract_fees = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          update_contract_fees_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool update_expense_ratio = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          update_expense_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 quash_threshold = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_quash_threshold(&has_bits);
          quash_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.TokenCompliance token_compliance = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_token_compliance(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // bool kyc_status = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          kyc_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool immutable_kyc_status = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          immutable_kyc_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cur_equiv_start = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_cur_equiv_start();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.InstrumentContract.cur_equiv_start"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstrumentContract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.InstrumentContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // uint64 contract_version = 2;
  if (this->contract_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_contract_version(), target);
  }

  // string symbol = 3;
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.InstrumentContract.symbol");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_symbol(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.InstrumentContract.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // .zera_txn.Governance governance = 5;
  if (_internal_has_governance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::governance(this), target, stream);
  }

  // repeated .zera_txn.RestrictedKey restricted_keys = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_restricted_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_restricted_keys(i), target, stream);
  }

  // string max_supply = 7;
  if (_internal_has_max_supply()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_max_supply().data(), static_cast<int>(this->_internal_max_supply().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.InstrumentContract.max_supply");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_max_supply(), target);
  }

  // .zera_txn.ContractFees contract_fees = 8;
  if (_internal_has_contract_fees()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::contract_fees(this), target, stream);
  }

  // repeated .zera_txn.PreMintWallet premint_wallets = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_premint_wallets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_premint_wallets(i), target, stream);
  }

  // .zera_txn.CoinDenomination coin_denomination = 10;
  if (_internal_has_coin_denomination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::coin_denomination(this), target, stream);
  }

  // repeated .zera_txn.KeyValuePair custom_parameters = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_custom_parameters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_custom_parameters(i), target, stream);
  }

  // string contract_id = 12;
  if (this->contract_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_id().data(), static_cast<int>(this->_internal_contract_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.InstrumentContract.contract_id");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_contract_id(), target);
  }

  // repeated .zera_txn.ExpenseRatio expense_ratio = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_expense_ratio_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_expense_ratio(i), target, stream);
  }

  // .zera_txn.CONTRACT_TYPE type = 14;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_type(), target);
  }

  // bool update_contract_fees = 15;
  if (this->update_contract_fees() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_update_contract_fees(), target);
  }

  // bool update_expense_ratio = 16;
  if (this->update_expense_ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_update_expense_ratio(), target);
  }

  // uint32 quash_threshold = 17;
  if (_internal_has_quash_threshold()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_quash_threshold(), target);
  }

  // repeated .zera_txn.TokenCompliance token_compliance = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_token_compliance_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_token_compliance(i), target, stream);
  }

  // bool kyc_status = 19;
  if (this->kyc_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_kyc_status(), target);
  }

  // bool immutable_kyc_status = 20;
  if (this->immutable_kyc_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_immutable_kyc_status(), target);
  }

  // string cur_equiv_start = 21;
  if (_internal_has_cur_equiv_start()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cur_equiv_start().data(), static_cast<int>(this->_internal_cur_equiv_start().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.InstrumentContract.cur_equiv_start");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_cur_equiv_start(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.InstrumentContract)
  return target;
}

size_t InstrumentContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.InstrumentContract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zera_txn.RestrictedKey restricted_keys = 6;
  total_size += 1UL * this->_internal_restricted_keys_size();
  for (const auto& msg : this->restricted_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zera_txn.PreMintWallet premint_wallets = 9;
  total_size += 1UL * this->_internal_premint_wallets_size();
  for (const auto& msg : this->premint_wallets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zera_txn.KeyValuePair custom_parameters = 11;
  total_size += 1UL * this->_internal_custom_parameters_size();
  for (const auto& msg : this->custom_parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zera_txn.ExpenseRatio expense_ratio = 13;
  total_size += 1UL * this->_internal_expense_ratio_size();
  for (const auto& msg : this->expense_ratio_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zera_txn.TokenCompliance token_compliance = 18;
  total_size += 2UL * this->_internal_token_compliance_size();
  for (const auto& msg : this->token_compliance_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string symbol = 3;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string max_supply = 7;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_max_supply());
  }

  // string contract_id = 12;
  if (this->contract_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract_id());
  }

  // string cur_equiv_start = 21;
  if (cached_has_bits & 0x00000002u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cur_equiv_start());
  }

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (cached_has_bits & 0x0000001cu) {
    // .zera_txn.Governance governance = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *governance_);
    }

    // .zera_txn.ContractFees contract_fees = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contract_fees_);
    }

    // .zera_txn.CoinDenomination coin_denomination = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *coin_denomination_);
    }

  }
  // uint64 contract_version = 2;
  if (this->contract_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_contract_version());
  }

  // .zera_txn.CONTRACT_TYPE type = 14;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 quash_threshold = 17;
  if (cached_has_bits & 0x00000020u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_quash_threshold());
  }

  // bool update_contract_fees = 15;
  if (this->update_contract_fees() != 0) {
    total_size += 1 + 1;
  }

  // bool update_expense_ratio = 16;
  if (this->update_expense_ratio() != 0) {
    total_size += 2 + 1;
  }

  // bool kyc_status = 19;
  if (this->kyc_status() != 0) {
    total_size += 2 + 1;
  }

  // bool immutable_kyc_status = 20;
  if (this->immutable_kyc_status() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstrumentContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.InstrumentContract)
  GOOGLE_DCHECK_NE(&from, this);
  const InstrumentContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstrumentContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.InstrumentContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.InstrumentContract)
    MergeFrom(*source);
  }
}

void InstrumentContract::MergeFrom(const InstrumentContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.InstrumentContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  restricted_keys_.MergeFrom(from.restricted_keys_);
  premint_wallets_.MergeFrom(from.premint_wallets_);
  custom_parameters_.MergeFrom(from.custom_parameters_);
  expense_ratio_.MergeFrom(from.expense_ratio_);
  token_compliance_.MergeFrom(from.token_compliance_);
  if (from.symbol().size() > 0) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_max_supply()) {
    _internal_set_max_supply(from._internal_max_supply());
  }
  if (from.contract_id().size() > 0) {
    _internal_set_contract_id(from._internal_contract_id());
  }
  if (from._internal_has_cur_equiv_start()) {
    _internal_set_cur_equiv_start(from._internal_cur_equiv_start());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::zera_txn::BaseTXN::MergeFrom(from._internal_base());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_governance()->::zera_txn::Governance::MergeFrom(from._internal_governance());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_contract_fees()->::zera_txn::ContractFees::MergeFrom(from._internal_contract_fees());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_coin_denomination()->::zera_txn::CoinDenomination::MergeFrom(from._internal_coin_denomination());
    }
  }
  if (from.contract_version() != 0) {
    _internal_set_contract_version(from._internal_contract_version());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (cached_has_bits & 0x00000020u) {
    _internal_set_quash_threshold(from._internal_quash_threshold());
  }
  if (from.update_contract_fees() != 0) {
    _internal_set_update_contract_fees(from._internal_update_contract_fees());
  }
  if (from.update_expense_ratio() != 0) {
    _internal_set_update_expense_ratio(from._internal_update_expense_ratio());
  }
  if (from.kyc_status() != 0) {
    _internal_set_kyc_status(from._internal_kyc_status());
  }
  if (from.immutable_kyc_status() != 0) {
    _internal_set_immutable_kyc_status(from._internal_immutable_kyc_status());
  }
}

void InstrumentContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.InstrumentContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentContract::CopyFrom(const InstrumentContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.InstrumentContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentContract::IsInitialized() const {
  return true;
}

void InstrumentContract::InternalSwap(InstrumentContract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  restricted_keys_.InternalSwap(&other->restricted_keys_);
  premint_wallets_.InternalSwap(&other->premint_wallets_);
  custom_parameters_.InternalSwap(&other->custom_parameters_);
  expense_ratio_.InternalSwap(&other->expense_ratio_);
  token_compliance_.InternalSwap(&other->token_compliance_);
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  max_supply_.Swap(&other->max_supply_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contract_id_.Swap(&other->contract_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cur_equiv_start_.Swap(&other->cur_equiv_start_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstrumentContract, immutable_kyc_status_)
      + sizeof(InstrumentContract::immutable_kyc_status_)
      - PROTOBUF_FIELD_OFFSET(InstrumentContract, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstrumentContract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GovernanceVote::InitAsDefaultInstance() {
  ::zera_txn::_GovernanceVote_default_instance_._instance.get_mutable()->base_ = const_cast< ::zera_txn::BaseTXN*>(
      ::zera_txn::BaseTXN::internal_default_instance());
}
class GovernanceVote::_Internal {
 public:
  using HasBits = decltype(std::declval<GovernanceVote>()._has_bits_);
  static const ::zera_txn::BaseTXN& base(const GovernanceVote* msg);
  static void set_has_support(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_support_option(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zera_txn::BaseTXN&
GovernanceVote::_Internal::base(const GovernanceVote* msg) {
  return *msg->base_;
}
GovernanceVote::GovernanceVote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.GovernanceVote)
}
GovernanceVote::GovernanceVote(const GovernanceVote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_id().empty()) {
    contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_id(),
      GetArena());
  }
  proposal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_proposal_id().empty()) {
    proposal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_proposal_id(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::zera_txn::BaseTXN(*from.base_);
  } else {
    base_ = nullptr;
  }
  ::memcpy(&support_, &from.support_,
    static_cast<size_t>(reinterpret_cast<char*>(&support_option_) -
    reinterpret_cast<char*>(&support_)) + sizeof(support_option_));
  // @@protoc_insertion_point(copy_constructor:zera_txn.GovernanceVote)
}

void GovernanceVote::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GovernanceVote_txn_2eproto.base);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proposal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&support_option_) -
      reinterpret_cast<char*>(&base_)) + sizeof(support_option_));
}

GovernanceVote::~GovernanceVote() {
  // @@protoc_insertion_point(destructor:zera_txn.GovernanceVote)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GovernanceVote::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proposal_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void GovernanceVote::ArenaDtor(void* object) {
  GovernanceVote* _this = reinterpret_cast< GovernanceVote* >(object);
  (void)_this;
}
void GovernanceVote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GovernanceVote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GovernanceVote& GovernanceVote::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GovernanceVote_txn_2eproto.base);
  return *internal_default_instance();
}


void GovernanceVote::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.GovernanceVote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  proposal_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&support_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&support_option_) -
        reinterpret_cast<char*>(&support_)) + sizeof(support_option_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GovernanceVote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zera_txn.BaseTXN base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string contract_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.GovernanceVote.contract_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes proposal_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_proposal_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool support = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_support(&has_bits);
          support_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 support_option = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_support_option(&has_bits);
          support_option_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GovernanceVote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.GovernanceVote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string contract_id = 2;
  if (this->contract_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_id().data(), static_cast<int>(this->_internal_contract_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.GovernanceVote.contract_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_contract_id(), target);
  }

  // bytes proposal_id = 3;
  if (this->proposal_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_proposal_id(), target);
  }

  // bool support = 4;
  if (_internal_has_support()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_support(), target);
  }

  // uint32 support_option = 5;
  if (_internal_has_support_option()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_support_option(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.GovernanceVote)
  return target;
}

size_t GovernanceVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.GovernanceVote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string contract_id = 2;
  if (this->contract_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract_id());
  }

  // bytes proposal_id = 3;
  if (this->proposal_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_proposal_id());
  }

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // bool support = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // uint32 support_option = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_support_option());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GovernanceVote::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.GovernanceVote)
  GOOGLE_DCHECK_NE(&from, this);
  const GovernanceVote* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GovernanceVote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.GovernanceVote)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.GovernanceVote)
    MergeFrom(*source);
  }
}

void GovernanceVote::MergeFrom(const GovernanceVote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.GovernanceVote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.contract_id().size() > 0) {
    _internal_set_contract_id(from._internal_contract_id());
  }
  if (from.proposal_id().size() > 0) {
    _internal_set_proposal_id(from._internal_proposal_id());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::zera_txn::BaseTXN::MergeFrom(from._internal_base());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      support_ = from.support_;
    }
    if (cached_has_bits & 0x00000002u) {
      support_option_ = from.support_option_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GovernanceVote::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.GovernanceVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GovernanceVote::CopyFrom(const GovernanceVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.GovernanceVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GovernanceVote::IsInitialized() const {
  return true;
}

void GovernanceVote::InternalSwap(GovernanceVote* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  contract_id_.Swap(&other->contract_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  proposal_id_.Swap(&other->proposal_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GovernanceVote, support_option_)
      + sizeof(GovernanceVote::support_option_)
      - PROTOBUF_FIELD_OFFSET(GovernanceVote, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GovernanceVote::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GovernanceProposal::InitAsDefaultInstance() {
  ::zera_txn::_GovernanceProposal_default_instance_._instance.get_mutable()->base_ = const_cast< ::zera_txn::BaseTXN*>(
      ::zera_txn::BaseTXN::internal_default_instance());
  ::zera_txn::_GovernanceProposal_default_instance_._instance.get_mutable()->start_timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::zera_txn::_GovernanceProposal_default_instance_._instance.get_mutable()->end_timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class GovernanceProposal::_Internal {
 public:
  using HasBits = decltype(std::declval<GovernanceProposal>()._has_bits_);
  static const ::zera_txn::BaseTXN& base(const GovernanceProposal* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& start_timestamp(const GovernanceProposal* msg);
  static void set_has_start_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const PROTOBUF_NAMESPACE_ID::Timestamp& end_timestamp(const GovernanceProposal* msg);
  static void set_has_end_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zera_txn::BaseTXN&
GovernanceProposal::_Internal::base(const GovernanceProposal* msg) {
  return *msg->base_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
GovernanceProposal::_Internal::start_timestamp(const GovernanceProposal* msg) {
  return *msg->start_timestamp_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
GovernanceProposal::_Internal::end_timestamp(const GovernanceProposal* msg) {
  return *msg->end_timestamp_;
}
void GovernanceProposal::clear_start_timestamp() {
  if (GetArena() == nullptr && start_timestamp_ != nullptr) {
    delete start_timestamp_;
  }
  start_timestamp_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
void GovernanceProposal::clear_end_timestamp() {
  if (GetArena() == nullptr && end_timestamp_ != nullptr) {
    delete end_timestamp_;
  }
  end_timestamp_ = nullptr;
  _has_bits_[0] &= ~0x00000002u;
}
GovernanceProposal::GovernanceProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  options_(arena),
  governance_txn_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.GovernanceProposal)
}
GovernanceProposal::GovernanceProposal(const GovernanceProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      options_(from.options_),
      governance_txn_(from.governance_txn_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_id().empty()) {
    contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_id(),
      GetArena());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_title(),
      GetArena());
  }
  synopsis_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_synopsis().empty()) {
    synopsis_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_synopsis(),
      GetArena());
  }
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_body().empty()) {
    body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_body(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::zera_txn::BaseTXN(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_start_timestamp()) {
    start_timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_timestamp_);
  } else {
    start_timestamp_ = nullptr;
  }
  if (from._internal_has_end_timestamp()) {
    end_timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_timestamp_);
  } else {
    end_timestamp_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zera_txn.GovernanceProposal)
}

void GovernanceProposal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GovernanceProposal_txn_2eproto.base);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  synopsis_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_timestamp_) -
      reinterpret_cast<char*>(&base_)) + sizeof(end_timestamp_));
}

GovernanceProposal::~GovernanceProposal() {
  // @@protoc_insertion_point(destructor:zera_txn.GovernanceProposal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GovernanceProposal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  synopsis_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete start_timestamp_;
  if (this != internal_default_instance()) delete end_timestamp_;
}

void GovernanceProposal::ArenaDtor(void* object) {
  GovernanceProposal* _this = reinterpret_cast< GovernanceProposal* >(object);
  (void)_this;
}
void GovernanceProposal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GovernanceProposal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GovernanceProposal& GovernanceProposal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GovernanceProposal_txn_2eproto.base);
  return *internal_default_instance();
}


void GovernanceProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.GovernanceProposal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  options_.Clear();
  governance_txn_.Clear();
  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  synopsis_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  body_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      if (GetArena() == nullptr && start_timestamp_ != nullptr) {
        delete start_timestamp_;
      }
      start_timestamp_ = nullptr;
    }
    if (cached_has_bits & 0x00000002u) {
      if (GetArena() == nullptr && end_timestamp_ != nullptr) {
        delete end_timestamp_;
      }
      end_timestamp_ = nullptr;
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GovernanceProposal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zera_txn.BaseTXN base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string contract_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.GovernanceProposal.contract_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.GovernanceProposal.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string synopsis = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_synopsis();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.GovernanceProposal.synopsis"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string body = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.GovernanceProposal.body"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string options = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_options();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.GovernanceProposal.options"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.GovernanceTXN governance_txn = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_governance_txn(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GovernanceProposal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.GovernanceProposal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string contract_id = 2;
  if (this->contract_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_id().data(), static_cast<int>(this->_internal_contract_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.GovernanceProposal.contract_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_contract_id(), target);
  }

  // string title = 3;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.GovernanceProposal.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  // string synopsis = 4;
  if (this->synopsis().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_synopsis().data(), static_cast<int>(this->_internal_synopsis().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.GovernanceProposal.synopsis");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_synopsis(), target);
  }

  // string body = 5;
  if (this->body().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.GovernanceProposal.body");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_body(), target);
  }

  // repeated string options = 6;
  for (int i = 0, n = this->_internal_options_size(); i < n; i++) {
    const auto& s = this->_internal_options(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.GovernanceProposal.options");
    target = stream->WriteString(6, s, target);
  }

  // .google.protobuf.Timestamp start_timestamp = 7;
  if (_internal_has_start_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::start_timestamp(this), target, stream);
  }

  // .google.protobuf.Timestamp end_timestamp = 8;
  if (_internal_has_end_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::end_timestamp(this), target, stream);
  }

  // repeated .zera_txn.GovernanceTXN governance_txn = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_governance_txn_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_governance_txn(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.GovernanceProposal)
  return target;
}

size_t GovernanceProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.GovernanceProposal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string options = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(options_.size());
  for (int i = 0, n = options_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      options_.Get(i));
  }

  // repeated .zera_txn.GovernanceTXN governance_txn = 9;
  total_size += 1UL * this->_internal_governance_txn_size();
  for (const auto& msg : this->governance_txn_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string contract_id = 2;
  if (this->contract_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract_id());
  }

  // string title = 3;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string synopsis = 4;
  if (this->synopsis().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_synopsis());
  }

  // string body = 5;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body());
  }

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Timestamp start_timestamp = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *start_timestamp_);
    }

    // .google.protobuf.Timestamp end_timestamp = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *end_timestamp_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GovernanceProposal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.GovernanceProposal)
  GOOGLE_DCHECK_NE(&from, this);
  const GovernanceProposal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GovernanceProposal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.GovernanceProposal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.GovernanceProposal)
    MergeFrom(*source);
  }
}

void GovernanceProposal::MergeFrom(const GovernanceProposal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.GovernanceProposal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  options_.MergeFrom(from.options_);
  governance_txn_.MergeFrom(from.governance_txn_);
  if (from.contract_id().size() > 0) {
    _internal_set_contract_id(from._internal_contract_id());
  }
  if (from.title().size() > 0) {
    _internal_set_title(from._internal_title());
  }
  if (from.synopsis().size() > 0) {
    _internal_set_synopsis(from._internal_synopsis());
  }
  if (from.body().size() > 0) {
    _internal_set_body(from._internal_body());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::zera_txn::BaseTXN::MergeFrom(from._internal_base());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_start_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_end_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end_timestamp());
    }
  }
}

void GovernanceProposal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.GovernanceProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GovernanceProposal::CopyFrom(const GovernanceProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.GovernanceProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GovernanceProposal::IsInitialized() const {
  return true;
}

void GovernanceProposal::InternalSwap(GovernanceProposal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  options_.InternalSwap(&other->options_);
  governance_txn_.InternalSwap(&other->governance_txn_);
  contract_id_.Swap(&other->contract_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  synopsis_.Swap(&other->synopsis_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  body_.Swap(&other->body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GovernanceProposal, end_timestamp_)
      + sizeof(GovernanceProposal::end_timestamp_)
      - PROTOBUF_FIELD_OFFSET(GovernanceProposal, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GovernanceProposal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GovernanceTXN::InitAsDefaultInstance() {
}
class GovernanceTXN::_Internal {
 public:
};

GovernanceTXN::GovernanceTXN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.GovernanceTXN)
}
GovernanceTXN::GovernanceTXN(const GovernanceTXN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serialized_txn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serialized_txn().empty()) {
    serialized_txn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_serialized_txn(),
      GetArena());
  }
  txn_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_txn_hash().empty()) {
    txn_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_txn_hash(),
      GetArena());
  }
  txn_type_ = from.txn_type_;
  // @@protoc_insertion_point(copy_constructor:zera_txn.GovernanceTXN)
}

void GovernanceTXN::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GovernanceTXN_txn_2eproto.base);
  serialized_txn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txn_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txn_type_ = 0;
}

GovernanceTXN::~GovernanceTXN() {
  // @@protoc_insertion_point(destructor:zera_txn.GovernanceTXN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GovernanceTXN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  serialized_txn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txn_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GovernanceTXN::ArenaDtor(void* object) {
  GovernanceTXN* _this = reinterpret_cast< GovernanceTXN* >(object);
  (void)_this;
}
void GovernanceTXN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GovernanceTXN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GovernanceTXN& GovernanceTXN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GovernanceTXN_txn_2eproto.base);
  return *internal_default_instance();
}


void GovernanceTXN::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.GovernanceTXN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serialized_txn_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  txn_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  txn_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GovernanceTXN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zera_txn.TRANSACTION_TYPE txn_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_txn_type(static_cast<::zera_txn::TRANSACTION_TYPE>(val));
        } else goto handle_unusual;
        continue;
      // bytes serialized_txn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_serialized_txn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes txn_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_txn_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GovernanceTXN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.GovernanceTXN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zera_txn.TRANSACTION_TYPE txn_type = 1;
  if (this->txn_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_txn_type(), target);
  }

  // bytes serialized_txn = 2;
  if (this->serialized_txn().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_serialized_txn(), target);
  }

  // bytes txn_hash = 3;
  if (this->txn_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_txn_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.GovernanceTXN)
  return target;
}

size_t GovernanceTXN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.GovernanceTXN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes serialized_txn = 2;
  if (this->serialized_txn().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_serialized_txn());
  }

  // bytes txn_hash = 3;
  if (this->txn_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_txn_hash());
  }

  // .zera_txn.TRANSACTION_TYPE txn_type = 1;
  if (this->txn_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_txn_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GovernanceTXN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.GovernanceTXN)
  GOOGLE_DCHECK_NE(&from, this);
  const GovernanceTXN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GovernanceTXN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.GovernanceTXN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.GovernanceTXN)
    MergeFrom(*source);
  }
}

void GovernanceTXN::MergeFrom(const GovernanceTXN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.GovernanceTXN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.serialized_txn().size() > 0) {
    _internal_set_serialized_txn(from._internal_serialized_txn());
  }
  if (from.txn_hash().size() > 0) {
    _internal_set_txn_hash(from._internal_txn_hash());
  }
  if (from.txn_type() != 0) {
    _internal_set_txn_type(from._internal_txn_type());
  }
}

void GovernanceTXN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.GovernanceTXN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GovernanceTXN::CopyFrom(const GovernanceTXN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.GovernanceTXN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GovernanceTXN::IsInitialized() const {
  return true;
}

void GovernanceTXN::InternalSwap(GovernanceTXN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  serialized_txn_.Swap(&other->serialized_txn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  txn_hash_.Swap(&other->txn_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(txn_type_, other->txn_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GovernanceTXN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SmartContractTXN::InitAsDefaultInstance() {
  ::zera_txn::_SmartContractTXN_default_instance_._instance.get_mutable()->base_ = const_cast< ::zera_txn::BaseTXN*>(
      ::zera_txn::BaseTXN::internal_default_instance());
}
class SmartContractTXN::_Internal {
 public:
  static const ::zera_txn::BaseTXN& base(const SmartContractTXN* msg);
};

const ::zera_txn::BaseTXN&
SmartContractTXN::_Internal::base(const SmartContractTXN* msg) {
  return *msg->base_;
}
SmartContractTXN::SmartContractTXN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  variable_type_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.SmartContractTXN)
}
SmartContractTXN::SmartContractTXN(const SmartContractTXN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      variable_type_(from.variable_type_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  raw_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_raw_code().empty()) {
    raw_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_raw_code(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::zera_txn::BaseTXN(*from.base_);
  } else {
    base_ = nullptr;
  }
  language_ = from.language_;
  // @@protoc_insertion_point(copy_constructor:zera_txn.SmartContractTXN)
}

void SmartContractTXN::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SmartContractTXN_txn_2eproto.base);
  raw_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&language_) -
      reinterpret_cast<char*>(&base_)) + sizeof(language_));
}

SmartContractTXN::~SmartContractTXN() {
  // @@protoc_insertion_point(destructor:zera_txn.SmartContractTXN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SmartContractTXN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  raw_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void SmartContractTXN::ArenaDtor(void* object) {
  SmartContractTXN* _this = reinterpret_cast< SmartContractTXN* >(object);
  (void)_this;
}
void SmartContractTXN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SmartContractTXN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SmartContractTXN& SmartContractTXN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SmartContractTXN_txn_2eproto.base);
  return *internal_default_instance();
}


void SmartContractTXN::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.SmartContractTXN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variable_type_.Clear();
  raw_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  language_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SmartContractTXN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zera_txn.BaseTXN base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string raw_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_raw_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.SmartContractTXN.raw_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zera_txn.LANGUAGE language = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_language(static_cast<::zera_txn::LANGUAGE>(val));
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.SmartContractParameter variable_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_variable_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SmartContractTXN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.SmartContractTXN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string raw_code = 2;
  if (this->raw_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_raw_code().data(), static_cast<int>(this->_internal_raw_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.SmartContractTXN.raw_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_raw_code(), target);
  }

  // .zera_txn.LANGUAGE language = 3;
  if (this->language() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_language(), target);
  }

  // repeated .zera_txn.SmartContractParameter variable_type = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_variable_type_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_variable_type(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.SmartContractTXN)
  return target;
}

size_t SmartContractTXN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.SmartContractTXN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zera_txn.SmartContractParameter variable_type = 4;
  total_size += 1UL * this->_internal_variable_type_size();
  for (const auto& msg : this->variable_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string raw_code = 2;
  if (this->raw_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_raw_code());
  }

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .zera_txn.LANGUAGE language = 3;
  if (this->language() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_language());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SmartContractTXN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.SmartContractTXN)
  GOOGLE_DCHECK_NE(&from, this);
  const SmartContractTXN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SmartContractTXN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.SmartContractTXN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.SmartContractTXN)
    MergeFrom(*source);
  }
}

void SmartContractTXN::MergeFrom(const SmartContractTXN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.SmartContractTXN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  variable_type_.MergeFrom(from.variable_type_);
  if (from.raw_code().size() > 0) {
    _internal_set_raw_code(from._internal_raw_code());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::zera_txn::BaseTXN::MergeFrom(from._internal_base());
  }
  if (from.language() != 0) {
    _internal_set_language(from._internal_language());
  }
}

void SmartContractTXN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.SmartContractTXN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmartContractTXN::CopyFrom(const SmartContractTXN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.SmartContractTXN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmartContractTXN::IsInitialized() const {
  return true;
}

void SmartContractTXN::InternalSwap(SmartContractTXN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  variable_type_.InternalSwap(&other->variable_type_);
  raw_code_.Swap(&other->raw_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SmartContractTXN, language_)
      + sizeof(SmartContractTXN::language_)
      - PROTOBUF_FIELD_OFFSET(SmartContractTXN, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SmartContractTXN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SmartContractExecuteTXN::InitAsDefaultInstance() {
  ::zera_txn::_SmartContractExecuteTXN_default_instance_._instance.get_mutable()->base_ = const_cast< ::zera_txn::BaseTXN*>(
      ::zera_txn::BaseTXN::internal_default_instance());
}
class SmartContractExecuteTXN::_Internal {
 public:
  static const ::zera_txn::BaseTXN& base(const SmartContractExecuteTXN* msg);
};

const ::zera_txn::BaseTXN&
SmartContractExecuteTXN::_Internal::base(const SmartContractExecuteTXN* msg) {
  return *msg->base_;
}
SmartContractExecuteTXN::SmartContractExecuteTXN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  parameters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.SmartContractExecuteTXN)
}
SmartContractExecuteTXN::SmartContractExecuteTXN(const SmartContractExecuteTXN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      parameters_(from.parameters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  smart_contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_smart_contract_id().empty()) {
    smart_contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_smart_contract_id(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::zera_txn::BaseTXN(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zera_txn.SmartContractExecuteTXN)
}

void SmartContractExecuteTXN::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SmartContractExecuteTXN_txn_2eproto.base);
  smart_contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_ = nullptr;
}

SmartContractExecuteTXN::~SmartContractExecuteTXN() {
  // @@protoc_insertion_point(destructor:zera_txn.SmartContractExecuteTXN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SmartContractExecuteTXN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  smart_contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void SmartContractExecuteTXN::ArenaDtor(void* object) {
  SmartContractExecuteTXN* _this = reinterpret_cast< SmartContractExecuteTXN* >(object);
  (void)_this;
}
void SmartContractExecuteTXN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SmartContractExecuteTXN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SmartContractExecuteTXN& SmartContractExecuteTXN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SmartContractExecuteTXN_txn_2eproto.base);
  return *internal_default_instance();
}


void SmartContractExecuteTXN::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.SmartContractExecuteTXN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameters_.Clear();
  smart_contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SmartContractExecuteTXN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zera_txn.BaseTXN base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes smart_contract_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_smart_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.SmartContractParameter parameters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SmartContractExecuteTXN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.SmartContractExecuteTXN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // bytes smart_contract_id = 2;
  if (this->smart_contract_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_smart_contract_id(), target);
  }

  // repeated .zera_txn.SmartContractParameter parameters = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parameters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_parameters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.SmartContractExecuteTXN)
  return target;
}

size_t SmartContractExecuteTXN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.SmartContractExecuteTXN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zera_txn.SmartContractParameter parameters = 3;
  total_size += 1UL * this->_internal_parameters_size();
  for (const auto& msg : this->parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes smart_contract_id = 2;
  if (this->smart_contract_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_smart_contract_id());
  }

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SmartContractExecuteTXN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.SmartContractExecuteTXN)
  GOOGLE_DCHECK_NE(&from, this);
  const SmartContractExecuteTXN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SmartContractExecuteTXN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.SmartContractExecuteTXN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.SmartContractExecuteTXN)
    MergeFrom(*source);
  }
}

void SmartContractExecuteTXN::MergeFrom(const SmartContractExecuteTXN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.SmartContractExecuteTXN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parameters_.MergeFrom(from.parameters_);
  if (from.smart_contract_id().size() > 0) {
    _internal_set_smart_contract_id(from._internal_smart_contract_id());
  }
  if (from.has_base()) {
    _internal_mutable_base()->::zera_txn::BaseTXN::MergeFrom(from._internal_base());
  }
}

void SmartContractExecuteTXN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.SmartContractExecuteTXN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmartContractExecuteTXN::CopyFrom(const SmartContractExecuteTXN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.SmartContractExecuteTXN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmartContractExecuteTXN::IsInitialized() const {
  return true;
}

void SmartContractExecuteTXN::InternalSwap(SmartContractExecuteTXN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  parameters_.InternalSwap(&other->parameters_);
  smart_contract_id_.Swap(&other->smart_contract_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SmartContractExecuteTXN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Validator::InitAsDefaultInstance() {
  ::zera_txn::_Validator_default_instance_._instance.get_mutable()->public_key_ = const_cast< ::zera_txn::PublicKey*>(
      ::zera_txn::PublicKey::internal_default_instance());
  ::zera_txn::_Validator_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class Validator::_Internal {
 public:
  static const ::zera_txn::PublicKey& public_key(const Validator* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const Validator* msg);
};

const ::zera_txn::PublicKey&
Validator::_Internal::public_key(const Validator* msg) {
  return *msg->public_key_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Validator::_Internal::timestamp(const Validator* msg) {
  return *msg->timestamp_;
}
void Validator::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
Validator::Validator(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  staked_contract_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.Validator)
}
Validator::Validator(const Validator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      staked_contract_ids_(from.staked_contract_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host().empty()) {
    host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_host(),
      GetArena());
  }
  client_port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_port().empty()) {
    client_port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_client_port(),
      GetArena());
  }
  validator_port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_validator_port().empty()) {
    validator_port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_validator_port(),
      GetArena());
  }
  if (from._internal_has_public_key()) {
    public_key_ = new ::zera_txn::PublicKey(*from.public_key_);
  } else {
    public_key_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ::memcpy(&benchmark_, &from.benchmark_,
    static_cast<size_t>(reinterpret_cast<char*>(&online_) -
    reinterpret_cast<char*>(&benchmark_)) + sizeof(online_));
  // @@protoc_insertion_point(copy_constructor:zera_txn.Validator)
}

void Validator::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Validator_txn_2eproto.base);
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validator_port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&public_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_) -
      reinterpret_cast<char*>(&public_key_)) + sizeof(online_));
}

Validator::~Validator() {
  // @@protoc_insertion_point(destructor:zera_txn.Validator)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Validator::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_port_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validator_port_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete public_key_;
  if (this != internal_default_instance()) delete timestamp_;
}

void Validator::ArenaDtor(void* object) {
  Validator* _this = reinterpret_cast< Validator* >(object);
  (void)_this;
}
void Validator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Validator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Validator& Validator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Validator_txn_2eproto.base);
  return *internal_default_instance();
}


void Validator::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.Validator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  staked_contract_ids_.Clear();
  host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  client_port_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  validator_port_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && public_key_ != nullptr) {
    delete public_key_;
  }
  public_key_ = nullptr;
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  ::memset(&benchmark_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_) -
      reinterpret_cast<char*>(&benchmark_)) + sizeof(online_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Validator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zera_txn.PublicKey public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_public_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string host = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.Validator.host"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string client_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_client_port();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.Validator.client_port"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string validator_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_validator_port();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.Validator.validator_port"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string staked_contract_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_staked_contract_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.Validator.staked_contract_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 benchmark = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          benchmark_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool lite = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          lite_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool online = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Validator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.Validator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zera_txn.PublicKey public_key = 1;
  if (this->has_public_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::public_key(this), target, stream);
  }

  // string host = 2;
  if (this->host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.Validator.host");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_host(), target);
  }

  // string client_port = 3;
  if (this->client_port().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_port().data(), static_cast<int>(this->_internal_client_port().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.Validator.client_port");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_client_port(), target);
  }

  // string validator_port = 4;
  if (this->validator_port().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_validator_port().data(), static_cast<int>(this->_internal_validator_port().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.Validator.validator_port");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_validator_port(), target);
  }

  // repeated string staked_contract_ids = 5;
  for (int i = 0, n = this->_internal_staked_contract_ids_size(); i < n; i++) {
    const auto& s = this->_internal_staked_contract_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.Validator.staked_contract_ids");
    target = stream->WriteString(5, s, target);
  }

  // uint64 benchmark = 6;
  if (this->benchmark() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_benchmark(), target);
  }

  // .google.protobuf.Timestamp timestamp = 7;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::timestamp(this), target, stream);
  }

  // bool lite = 8;
  if (this->lite() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_lite(), target);
  }

  // bool online = 9;
  if (this->online() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_online(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.Validator)
  return target;
}

size_t Validator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.Validator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string staked_contract_ids = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(staked_contract_ids_.size());
  for (int i = 0, n = staked_contract_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      staked_contract_ids_.Get(i));
  }

  // string host = 2;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // string client_port = 3;
  if (this->client_port().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_port());
  }

  // string validator_port = 4;
  if (this->validator_port().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_validator_port());
  }

  // .zera_txn.PublicKey public_key = 1;
  if (this->has_public_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *public_key_);
  }

  // .google.protobuf.Timestamp timestamp = 7;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // uint64 benchmark = 6;
  if (this->benchmark() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_benchmark());
  }

  // bool lite = 8;
  if (this->lite() != 0) {
    total_size += 1 + 1;
  }

  // bool online = 9;
  if (this->online() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Validator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.Validator)
  GOOGLE_DCHECK_NE(&from, this);
  const Validator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Validator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.Validator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.Validator)
    MergeFrom(*source);
  }
}

void Validator::MergeFrom(const Validator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.Validator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  staked_contract_ids_.MergeFrom(from.staked_contract_ids_);
  if (from.host().size() > 0) {
    _internal_set_host(from._internal_host());
  }
  if (from.client_port().size() > 0) {
    _internal_set_client_port(from._internal_client_port());
  }
  if (from.validator_port().size() > 0) {
    _internal_set_validator_port(from._internal_validator_port());
  }
  if (from.has_public_key()) {
    _internal_mutable_public_key()->::zera_txn::PublicKey::MergeFrom(from._internal_public_key());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.benchmark() != 0) {
    _internal_set_benchmark(from._internal_benchmark());
  }
  if (from.lite() != 0) {
    _internal_set_lite(from._internal_lite());
  }
  if (from.online() != 0) {
    _internal_set_online(from._internal_online());
  }
}

void Validator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.Validator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Validator::CopyFrom(const Validator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.Validator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Validator::IsInitialized() const {
  return true;
}

void Validator::InternalSwap(Validator* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  staked_contract_ids_.InternalSwap(&other->staked_contract_ids_);
  host_.Swap(&other->host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  client_port_.Swap(&other->client_port_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  validator_port_.Swap(&other->validator_port_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Validator, online_)
      + sizeof(Validator::online_)
      - PROTOBUF_FIELD_OFFSET(Validator, public_key_)>(
          reinterpret_cast<char*>(&public_key_),
          reinterpret_cast<char*>(&other->public_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Validator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ValidatorRegistration::InitAsDefaultInstance() {
  ::zera_txn::_ValidatorRegistration_default_instance_._instance.get_mutable()->base_ = const_cast< ::zera_txn::BaseTXN*>(
      ::zera_txn::BaseTXN::internal_default_instance());
  ::zera_txn::_ValidatorRegistration_default_instance_._instance.get_mutable()->validator_ = const_cast< ::zera_txn::Validator*>(
      ::zera_txn::Validator::internal_default_instance());
}
class ValidatorRegistration::_Internal {
 public:
  static const ::zera_txn::BaseTXN& base(const ValidatorRegistration* msg);
  static const ::zera_txn::Validator& validator(const ValidatorRegistration* msg);
};

const ::zera_txn::BaseTXN&
ValidatorRegistration::_Internal::base(const ValidatorRegistration* msg) {
  return *msg->base_;
}
const ::zera_txn::Validator&
ValidatorRegistration::_Internal::validator(const ValidatorRegistration* msg) {
  return *msg->validator_;
}
ValidatorRegistration::ValidatorRegistration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.ValidatorRegistration)
}
ValidatorRegistration::ValidatorRegistration(const ValidatorRegistration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::zera_txn::BaseTXN(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_validator()) {
    validator_ = new ::zera_txn::Validator(*from.validator_);
  } else {
    validator_ = nullptr;
  }
  register__ = from.register__;
  // @@protoc_insertion_point(copy_constructor:zera_txn.ValidatorRegistration)
}

void ValidatorRegistration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ValidatorRegistration_txn_2eproto.base);
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&register__) -
      reinterpret_cast<char*>(&base_)) + sizeof(register__));
}

ValidatorRegistration::~ValidatorRegistration() {
  // @@protoc_insertion_point(destructor:zera_txn.ValidatorRegistration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidatorRegistration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete validator_;
}

void ValidatorRegistration::ArenaDtor(void* object) {
  ValidatorRegistration* _this = reinterpret_cast< ValidatorRegistration* >(object);
  (void)_this;
}
void ValidatorRegistration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidatorRegistration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidatorRegistration& ValidatorRegistration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidatorRegistration_txn_2eproto.base);
  return *internal_default_instance();
}


void ValidatorRegistration::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.ValidatorRegistration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArena() == nullptr && validator_ != nullptr) {
    delete validator_;
  }
  validator_ = nullptr;
  register__ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatorRegistration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zera_txn.BaseTXN base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zera_txn.Validator validator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_validator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool register = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          register__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidatorRegistration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.ValidatorRegistration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // .zera_txn.Validator validator = 2;
  if (this->has_validator()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::validator(this), target, stream);
  }

  // bool register = 3;
  if (this->register_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_register_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.ValidatorRegistration)
  return target;
}

size_t ValidatorRegistration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.ValidatorRegistration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .zera_txn.Validator validator = 2;
  if (this->has_validator()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *validator_);
  }

  // bool register = 3;
  if (this->register_() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidatorRegistration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.ValidatorRegistration)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidatorRegistration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidatorRegistration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.ValidatorRegistration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.ValidatorRegistration)
    MergeFrom(*source);
  }
}

void ValidatorRegistration::MergeFrom(const ValidatorRegistration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.ValidatorRegistration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    _internal_mutable_base()->::zera_txn::BaseTXN::MergeFrom(from._internal_base());
  }
  if (from.has_validator()) {
    _internal_mutable_validator()->::zera_txn::Validator::MergeFrom(from._internal_validator());
  }
  if (from.register_() != 0) {
    _internal_set_register_(from._internal_register_());
  }
}

void ValidatorRegistration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.ValidatorRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidatorRegistration::CopyFrom(const ValidatorRegistration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.ValidatorRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorRegistration::IsInitialized() const {
  return true;
}

void ValidatorRegistration::InternalSwap(ValidatorRegistration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValidatorRegistration, register__)
      + sizeof(ValidatorRegistration::register__)
      - PROTOBUF_FIELD_OFFSET(ValidatorRegistration, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatorRegistration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ValidatorHeartbeat::InitAsDefaultInstance() {
  ::zera_txn::_ValidatorHeartbeat_default_instance_._instance.get_mutable()->base_ = const_cast< ::zera_txn::BaseTXN*>(
      ::zera_txn::BaseTXN::internal_default_instance());
}
class ValidatorHeartbeat::_Internal {
 public:
  static const ::zera_txn::BaseTXN& base(const ValidatorHeartbeat* msg);
};

const ::zera_txn::BaseTXN&
ValidatorHeartbeat::_Internal::base(const ValidatorHeartbeat* msg) {
  return *msg->base_;
}
ValidatorHeartbeat::ValidatorHeartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.ValidatorHeartbeat)
}
ValidatorHeartbeat::ValidatorHeartbeat(const ValidatorHeartbeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::zera_txn::BaseTXN(*from.base_);
  } else {
    base_ = nullptr;
  }
  online_ = from.online_;
  // @@protoc_insertion_point(copy_constructor:zera_txn.ValidatorHeartbeat)
}

void ValidatorHeartbeat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ValidatorHeartbeat_txn_2eproto.base);
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_) -
      reinterpret_cast<char*>(&base_)) + sizeof(online_));
}

ValidatorHeartbeat::~ValidatorHeartbeat() {
  // @@protoc_insertion_point(destructor:zera_txn.ValidatorHeartbeat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidatorHeartbeat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
}

void ValidatorHeartbeat::ArenaDtor(void* object) {
  ValidatorHeartbeat* _this = reinterpret_cast< ValidatorHeartbeat* >(object);
  (void)_this;
}
void ValidatorHeartbeat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidatorHeartbeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidatorHeartbeat& ValidatorHeartbeat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidatorHeartbeat_txn_2eproto.base);
  return *internal_default_instance();
}


void ValidatorHeartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.ValidatorHeartbeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  online_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatorHeartbeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zera_txn.BaseTXN base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool online = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidatorHeartbeat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.ValidatorHeartbeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // bool online = 2;
  if (this->online() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_online(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.ValidatorHeartbeat)
  return target;
}

size_t ValidatorHeartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.ValidatorHeartbeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // bool online = 2;
  if (this->online() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidatorHeartbeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.ValidatorHeartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidatorHeartbeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidatorHeartbeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.ValidatorHeartbeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.ValidatorHeartbeat)
    MergeFrom(*source);
  }
}

void ValidatorHeartbeat::MergeFrom(const ValidatorHeartbeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.ValidatorHeartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    _internal_mutable_base()->::zera_txn::BaseTXN::MergeFrom(from._internal_base());
  }
  if (from.online() != 0) {
    _internal_set_online(from._internal_online());
  }
}

void ValidatorHeartbeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.ValidatorHeartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidatorHeartbeat::CopyFrom(const ValidatorHeartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.ValidatorHeartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorHeartbeat::IsInitialized() const {
  return true;
}

void ValidatorHeartbeat::InternalSwap(ValidatorHeartbeat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValidatorHeartbeat, online_)
      + sizeof(ValidatorHeartbeat::online_)
      - PROTOBUF_FIELD_OFFSET(ValidatorHeartbeat, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatorHeartbeat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SmartContractParameter::InitAsDefaultInstance() {
}
class SmartContractParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<SmartContractParameter>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SmartContractParameter::SmartContractParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.SmartContractParameter)
}
SmartContractParameter::SmartContractParameter(const SmartContractParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&index_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:zera_txn.SmartContractParameter)
}

void SmartContractParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SmartContractParameter_txn_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&index_)) + sizeof(type_));
}

SmartContractParameter::~SmartContractParameter() {
  // @@protoc_insertion_point(destructor:zera_txn.SmartContractParameter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SmartContractParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SmartContractParameter::ArenaDtor(void* object) {
  SmartContractParameter* _this = reinterpret_cast< SmartContractParameter* >(object);
  (void)_this;
}
void SmartContractParameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SmartContractParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SmartContractParameter& SmartContractParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SmartContractParameter_txn_2eproto.base);
  return *internal_default_instance();
}


void SmartContractParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.SmartContractParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmpty();
  }
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&index_)) + sizeof(type_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SmartContractParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 index = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zera_txn.VARIABLE_TYPE type = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::zera_txn::VARIABLE_TYPE>(val));
        } else goto handle_unusual;
        continue;
      // string value = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.SmartContractParameter.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SmartContractParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.SmartContractParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 75;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(75, this->_internal_index(), target);
  }

  // .zera_txn.VARIABLE_TYPE type = 76;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      76, this->_internal_type(), target);
  }

  // string value = 77;
  if (_internal_has_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.SmartContractParameter.value");
    target = stream->WriteStringMaybeAliased(
        77, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.SmartContractParameter)
  return target;
}

size_t SmartContractParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.SmartContractParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 77;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // uint32 index = 75;
  if (this->index() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  // .zera_txn.VARIABLE_TYPE type = 76;
  if (this->type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SmartContractParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.SmartContractParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const SmartContractParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SmartContractParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.SmartContractParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.SmartContractParameter)
    MergeFrom(*source);
  }
}

void SmartContractParameter::MergeFrom(const SmartContractParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.SmartContractParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_set_value(from._internal_value());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void SmartContractParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.SmartContractParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmartContractParameter::CopyFrom(const SmartContractParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.SmartContractParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmartContractParameter::IsInitialized() const {
  return true;
}

void SmartContractParameter::InternalSwap(SmartContractParameter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SmartContractParameter, type_)
      + sizeof(SmartContractParameter::type_)
      - PROTOBUF_FIELD_OFFSET(SmartContractParameter, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SmartContractParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Votes::InitAsDefaultInstance() {
}
class Votes::_Internal {
 public:
};

Votes::Votes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  votes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.Votes)
}
Votes::Votes(const Votes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      votes_(from.votes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zera_txn.Votes)
}

void Votes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Votes_txn_2eproto.base);
}

Votes::~Votes() {
  // @@protoc_insertion_point(destructor:zera_txn.Votes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Votes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Votes::ArenaDtor(void* object) {
  Votes* _this = reinterpret_cast< Votes* >(object);
  (void)_this;
}
void Votes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Votes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Votes& Votes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Votes_txn_2eproto.base);
  return *internal_default_instance();
}


void Votes::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.Votes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  votes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Votes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .zera_txn.VotePair votes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_votes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Votes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.Votes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zera_txn.VotePair votes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_votes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_votes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.Votes)
  return target;
}

size_t Votes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.Votes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zera_txn.VotePair votes = 1;
  total_size += 1UL * this->_internal_votes_size();
  for (const auto& msg : this->votes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Votes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.Votes)
  GOOGLE_DCHECK_NE(&from, this);
  const Votes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Votes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.Votes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.Votes)
    MergeFrom(*source);
  }
}

void Votes::MergeFrom(const Votes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.Votes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  votes_.MergeFrom(from.votes_);
}

void Votes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.Votes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Votes::CopyFrom(const Votes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.Votes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Votes::IsInitialized() const {
  return true;
}

void Votes::InternalSwap(Votes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  votes_.InternalSwap(&other->votes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Votes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VotePair::InitAsDefaultInstance() {
}
class VotePair::_Internal {
 public:
};

VotePair::VotePair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.VotePair)
}
VotePair::VotePair(const VotePair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_id().empty()) {
    contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_id(),
      GetArena());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_amount(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:zera_txn.VotePair)
}

void VotePair::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VotePair_txn_2eproto.base);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VotePair::~VotePair() {
  // @@protoc_insertion_point(destructor:zera_txn.VotePair)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VotePair::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VotePair::ArenaDtor(void* object) {
  VotePair* _this = reinterpret_cast< VotePair* >(object);
  (void)_this;
}
void VotePair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VotePair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VotePair& VotePair::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VotePair_txn_2eproto.base);
  return *internal_default_instance();
}


void VotePair::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.VotePair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VotePair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string contract_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.VotePair.contract_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.VotePair.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VotePair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.VotePair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string contract_id = 1;
  if (this->contract_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_id().data(), static_cast<int>(this->_internal_contract_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.VotePair.contract_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contract_id(), target);
  }

  // string amount = 2;
  if (this->amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.VotePair.amount");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.VotePair)
  return target;
}

size_t VotePair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.VotePair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string contract_id = 1;
  if (this->contract_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract_id());
  }

  // string amount = 2;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VotePair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.VotePair)
  GOOGLE_DCHECK_NE(&from, this);
  const VotePair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VotePair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.VotePair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.VotePair)
    MergeFrom(*source);
  }
}

void VotePair::MergeFrom(const VotePair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.VotePair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.contract_id().size() > 0) {
    _internal_set_contract_id(from._internal_contract_id());
  }
  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void VotePair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.VotePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VotePair::CopyFrom(const VotePair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.VotePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VotePair::IsInitialized() const {
  return true;
}

void VotePair::InternalSwap(VotePair* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  contract_id_.Swap(&other->contract_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata VotePair::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProposalResult::InitAsDefaultInstance() {
  ::zera_txn::_ProposalResult_default_instance_._instance.get_mutable()->base_ = const_cast< ::zera_txn::BaseTXN*>(
      ::zera_txn::BaseTXN::internal_default_instance());
  ::zera_txn::_ProposalResult_default_instance_._instance.get_mutable()->support_votes_ = const_cast< ::zera_txn::Votes*>(
      ::zera_txn::Votes::internal_default_instance());
  ::zera_txn::_ProposalResult_default_instance_._instance.get_mutable()->against_votes_ = const_cast< ::zera_txn::Votes*>(
      ::zera_txn::Votes::internal_default_instance());
}
class ProposalResult::_Internal {
 public:
  using HasBits = decltype(std::declval<ProposalResult>()._has_bits_);
  static const ::zera_txn::BaseTXN& base(const ProposalResult* msg);
  static void set_has_support_cur_equiv(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_against_cur_equiv(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zera_txn::Votes& support_votes(const ProposalResult* msg);
  static void set_has_support_votes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zera_txn::Votes& against_votes(const ProposalResult* msg);
  static void set_has_against_votes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zera_txn::BaseTXN&
ProposalResult::_Internal::base(const ProposalResult* msg) {
  return *msg->base_;
}
const ::zera_txn::Votes&
ProposalResult::_Internal::support_votes(const ProposalResult* msg) {
  return *msg->support_votes_;
}
const ::zera_txn::Votes&
ProposalResult::_Internal::against_votes(const ProposalResult* msg) {
  return *msg->against_votes_;
}
ProposalResult::ProposalResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  option_cur_equiv_(arena),
  option_votes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.ProposalResult)
}
ProposalResult::ProposalResult(const ProposalResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      option_cur_equiv_(from.option_cur_equiv_),
      option_votes_(from.option_votes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_id().empty()) {
    contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_id(),
      GetArena());
  }
  proposal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_proposal_id().empty()) {
    proposal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_proposal_id(),
      GetArena());
  }
  support_cur_equiv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_support_cur_equiv()) {
    support_cur_equiv_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_support_cur_equiv(),
      GetArena());
  }
  against_cur_equiv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_against_cur_equiv()) {
    against_cur_equiv_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_against_cur_equiv(),
      GetArena());
  }
  if (from._internal_has_base()) {
    base_ = new ::zera_txn::BaseTXN(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_support_votes()) {
    support_votes_ = new ::zera_txn::Votes(*from.support_votes_);
  } else {
    support_votes_ = nullptr;
  }
  if (from._internal_has_against_votes()) {
    against_votes_ = new ::zera_txn::Votes(*from.against_votes_);
  } else {
    against_votes_ = nullptr;
  }
  ::memcpy(&passed_, &from.passed_,
    static_cast<size_t>(reinterpret_cast<char*>(&stage_) -
    reinterpret_cast<char*>(&passed_)) + sizeof(stage_));
  // @@protoc_insertion_point(copy_constructor:zera_txn.ProposalResult)
}

void ProposalResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProposalResult_txn_2eproto.base);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proposal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  support_cur_equiv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  against_cur_equiv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stage_) -
      reinterpret_cast<char*>(&base_)) + sizeof(stage_));
}

ProposalResult::~ProposalResult() {
  // @@protoc_insertion_point(destructor:zera_txn.ProposalResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProposalResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proposal_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  support_cur_equiv_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  against_cur_equiv_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete support_votes_;
  if (this != internal_default_instance()) delete against_votes_;
}

void ProposalResult::ArenaDtor(void* object) {
  ProposalResult* _this = reinterpret_cast< ProposalResult* >(object);
  (void)_this;
}
void ProposalResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProposalResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProposalResult& ProposalResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProposalResult_txn_2eproto.base);
  return *internal_default_instance();
}


void ProposalResult::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.ProposalResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  option_cur_equiv_.Clear();
  option_votes_.Clear();
  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  proposal_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      support_cur_equiv_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      against_cur_equiv_.ClearNonDefaultToEmpty();
    }
  }
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (cached_has_bits & 0x0000000cu) {
    if (cached_has_bits & 0x00000004u) {
      if (GetArena() == nullptr && support_votes_ != nullptr) {
        delete support_votes_;
      }
      support_votes_ = nullptr;
    }
    if (cached_has_bits & 0x00000008u) {
      if (GetArena() == nullptr && against_votes_ != nullptr) {
        delete against_votes_;
      }
      against_votes_ = nullptr;
    }
  }
  ::memset(&passed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stage_) -
      reinterpret_cast<char*>(&passed_)) + sizeof(stage_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProposalResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zera_txn.BaseTXN base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string contract_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.ProposalResult.contract_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes proposal_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_proposal_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string support_cur_equiv = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_support_cur_equiv();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.ProposalResult.support_cur_equiv"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string against_cur_equiv = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_against_cur_equiv();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.ProposalResult.against_cur_equiv"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string option_cur_equiv = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_option_cur_equiv();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.ProposalResult.option_cur_equiv"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .zera_txn.Votes support_votes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_support_votes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zera_txn.Votes against_votes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_against_votes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.Votes option_votes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_option_votes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // bool passed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          passed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool final_stage = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          final_stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 stage = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool fast_quorum = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          fast_quorum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProposalResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.ProposalResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // string contract_id = 2;
  if (this->contract_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_id().data(), static_cast<int>(this->_internal_contract_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.ProposalResult.contract_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_contract_id(), target);
  }

  // bytes proposal_id = 3;
  if (this->proposal_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_proposal_id(), target);
  }

  // string support_cur_equiv = 4;
  if (_internal_has_support_cur_equiv()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_support_cur_equiv().data(), static_cast<int>(this->_internal_support_cur_equiv().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.ProposalResult.support_cur_equiv");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_support_cur_equiv(), target);
  }

  // string against_cur_equiv = 5;
  if (_internal_has_against_cur_equiv()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_against_cur_equiv().data(), static_cast<int>(this->_internal_against_cur_equiv().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.ProposalResult.against_cur_equiv");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_against_cur_equiv(), target);
  }

  // repeated string option_cur_equiv = 6;
  for (int i = 0, n = this->_internal_option_cur_equiv_size(); i < n; i++) {
    const auto& s = this->_internal_option_cur_equiv(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.ProposalResult.option_cur_equiv");
    target = stream->WriteString(6, s, target);
  }

  // .zera_txn.Votes support_votes = 7;
  if (_internal_has_support_votes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::support_votes(this), target, stream);
  }

  // .zera_txn.Votes against_votes = 8;
  if (_internal_has_against_votes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::against_votes(this), target, stream);
  }

  // repeated .zera_txn.Votes option_votes = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_option_votes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_option_votes(i), target, stream);
  }

  // bool passed = 10;
  if (this->passed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_passed(), target);
  }

  // bool final_stage = 11;
  if (this->final_stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_final_stage(), target);
  }

  // uint32 stage = 12;
  if (this->stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_stage(), target);
  }

  // bool fast_quorum = 13;
  if (this->fast_quorum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_fast_quorum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.ProposalResult)
  return target;
}

size_t ProposalResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.ProposalResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string option_cur_equiv = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(option_cur_equiv_.size());
  for (int i = 0, n = option_cur_equiv_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      option_cur_equiv_.Get(i));
  }

  // repeated .zera_txn.Votes option_votes = 9;
  total_size += 1UL * this->_internal_option_votes_size();
  for (const auto& msg : this->option_votes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string contract_id = 2;
  if (this->contract_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract_id());
  }

  // bytes proposal_id = 3;
  if (this->proposal_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_proposal_id());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // string support_cur_equiv = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_support_cur_equiv());
    }

    // string against_cur_equiv = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_against_cur_equiv());
    }

  }
  // .zera_txn.BaseTXN base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (cached_has_bits & 0x0000000cu) {
    // .zera_txn.Votes support_votes = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *support_votes_);
    }

    // .zera_txn.Votes against_votes = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *against_votes_);
    }

  }
  // bool passed = 10;
  if (this->passed() != 0) {
    total_size += 1 + 1;
  }

  // bool final_stage = 11;
  if (this->final_stage() != 0) {
    total_size += 1 + 1;
  }

  // bool fast_quorum = 13;
  if (this->fast_quorum() != 0) {
    total_size += 1 + 1;
  }

  // uint32 stage = 12;
  if (this->stage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProposalResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.ProposalResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ProposalResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProposalResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.ProposalResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.ProposalResult)
    MergeFrom(*source);
  }
}

void ProposalResult::MergeFrom(const ProposalResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.ProposalResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  option_cur_equiv_.MergeFrom(from.option_cur_equiv_);
  option_votes_.MergeFrom(from.option_votes_);
  if (from.contract_id().size() > 0) {
    _internal_set_contract_id(from._internal_contract_id());
  }
  if (from.proposal_id().size() > 0) {
    _internal_set_proposal_id(from._internal_proposal_id());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_support_cur_equiv(from._internal_support_cur_equiv());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_against_cur_equiv(from._internal_against_cur_equiv());
    }
  }
  if (from.has_base()) {
    _internal_mutable_base()->::zera_txn::BaseTXN::MergeFrom(from._internal_base());
  }
  if (cached_has_bits & 0x0000000cu) {
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_support_votes()->::zera_txn::Votes::MergeFrom(from._internal_support_votes());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_against_votes()->::zera_txn::Votes::MergeFrom(from._internal_against_votes());
    }
  }
  if (from.passed() != 0) {
    _internal_set_passed(from._internal_passed());
  }
  if (from.final_stage() != 0) {
    _internal_set_final_stage(from._internal_final_stage());
  }
  if (from.fast_quorum() != 0) {
    _internal_set_fast_quorum(from._internal_fast_quorum());
  }
  if (from.stage() != 0) {
    _internal_set_stage(from._internal_stage());
  }
}

void ProposalResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.ProposalResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProposalResult::CopyFrom(const ProposalResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.ProposalResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProposalResult::IsInitialized() const {
  return true;
}

void ProposalResult::InternalSwap(ProposalResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  option_cur_equiv_.InternalSwap(&other->option_cur_equiv_);
  option_votes_.InternalSwap(&other->option_votes_);
  contract_id_.Swap(&other->contract_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  proposal_id_.Swap(&other->proposal_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  support_cur_equiv_.Swap(&other->support_cur_equiv_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  against_cur_equiv_.Swap(&other->against_cur_equiv_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProposalResult, stage_)
      + sizeof(ProposalResult::stage_)
      - PROTOBUF_FIELD_OFFSET(ProposalResult, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProposalResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TXNS::InitAsDefaultInstance() {
}
class TXNS::_Internal {
 public:
};

TXNS::TXNS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  coin_txns_(arena),
  mint_txns_(arena),
  item_mint_txns_(arena),
  contract_txns_(arena),
  governance_votes_(arena),
  governance_proposals_(arena),
  smart_contracts_(arena),
  smart_contract_executes_(arena),
  self_cur_equivs_(arena),
  auth_cur_equivs_(arena),
  expense_ratios_(arena),
  txn_fees_and_status_(arena),
  token_fees_(arena),
  nft_txns_(arena),
  contract_update_txns_(arena),
  validator_registration_txns_(arena),
  validator_heartbeat_txns_(arena),
  proposal_result_txns_(arena),
  expense_ratio_result_txns_(arena),
  foundation_txns_(arena),
  delegated_voting_txns_(arena),
  quash_txns_(arena),
  fast_quorum_txns_(arena),
  quash_results_(arena),
  revoke_txns_(arena),
  compliance_txns_(arena),
  burn_sbt_txns_(arena),
  new_coin_txns_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.TXNS)
}
TXNS::TXNS(const TXNS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      coin_txns_(from.coin_txns_),
      mint_txns_(from.mint_txns_),
      item_mint_txns_(from.item_mint_txns_),
      contract_txns_(from.contract_txns_),
      governance_votes_(from.governance_votes_),
      governance_proposals_(from.governance_proposals_),
      smart_contracts_(from.smart_contracts_),
      smart_contract_executes_(from.smart_contract_executes_),
      self_cur_equivs_(from.self_cur_equivs_),
      auth_cur_equivs_(from.auth_cur_equivs_),
      expense_ratios_(from.expense_ratios_),
      txn_fees_and_status_(from.txn_fees_and_status_),
      token_fees_(from.token_fees_),
      nft_txns_(from.nft_txns_),
      contract_update_txns_(from.contract_update_txns_),
      validator_registration_txns_(from.validator_registration_txns_),
      validator_heartbeat_txns_(from.validator_heartbeat_txns_),
      proposal_result_txns_(from.proposal_result_txns_),
      expense_ratio_result_txns_(from.expense_ratio_result_txns_),
      foundation_txns_(from.foundation_txns_),
      delegated_voting_txns_(from.delegated_voting_txns_),
      quash_txns_(from.quash_txns_),
      fast_quorum_txns_(from.fast_quorum_txns_),
      quash_results_(from.quash_results_),
      revoke_txns_(from.revoke_txns_),
      compliance_txns_(from.compliance_txns_),
      burn_sbt_txns_(from.burn_sbt_txns_),
      new_coin_txns_(from.new_coin_txns_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zera_txn.TXNS)
}

void TXNS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TXNS_txn_2eproto.base);
}

TXNS::~TXNS() {
  // @@protoc_insertion_point(destructor:zera_txn.TXNS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TXNS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TXNS::ArenaDtor(void* object) {
  TXNS* _this = reinterpret_cast< TXNS* >(object);
  (void)_this;
}
void TXNS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TXNS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TXNS& TXNS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TXNS_txn_2eproto.base);
  return *internal_default_instance();
}


void TXNS::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.TXNS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coin_txns_.Clear();
  mint_txns_.Clear();
  item_mint_txns_.Clear();
  contract_txns_.Clear();
  governance_votes_.Clear();
  governance_proposals_.Clear();
  smart_contracts_.Clear();
  smart_contract_executes_.Clear();
  self_cur_equivs_.Clear();
  auth_cur_equivs_.Clear();
  expense_ratios_.Clear();
  txn_fees_and_status_.Clear();
  token_fees_.Clear();
  nft_txns_.Clear();
  contract_update_txns_.Clear();
  validator_registration_txns_.Clear();
  validator_heartbeat_txns_.Clear();
  proposal_result_txns_.Clear();
  expense_ratio_result_txns_.Clear();
  foundation_txns_.Clear();
  delegated_voting_txns_.Clear();
  quash_txns_.Clear();
  fast_quorum_txns_.Clear();
  quash_results_.Clear();
  revoke_txns_.Clear();
  compliance_txns_.Clear();
  burn_sbt_txns_.Clear();
  new_coin_txns_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TXNS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .zera_txn.CoinTXN coin_txns = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_coin_txns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.MintTXN mint_txns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mint_txns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.ItemizedMintTXN item_mint_txns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item_mint_txns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.InstrumentContract contract_txns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contract_txns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.GovernanceVote governance_votes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_governance_votes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.GovernanceProposal governance_proposals = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_governance_proposals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.SmartContractTXN smart_contracts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_smart_contracts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.SmartContractExecuteTXN smart_contract_executes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_smart_contract_executes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.SelfCurrencyEquiv self_cur_equivs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_self_cur_equivs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.AuthorizedCurrencyEquiv auth_cur_equivs = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_auth_cur_equivs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.ExpenseRatioTXN expense_ratios = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_expense_ratios(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.TXNStatusFees txn_fees_and_status = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_txn_fees_and_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.TokenFees token_fees = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_token_fees(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.NFTTXN nft_txns = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nft_txns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.ContractUpdateTXN contract_update_txns = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contract_update_txns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.ValidatorRegistration validator_registration_txns = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_validator_registration_txns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.ValidatorHeartbeat validator_heartbeat_txns = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_validator_heartbeat_txns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.ProposalResult proposal_result_txns = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_proposal_result_txns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.ExpenseRatioResult expense_ratio_result_txns = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_expense_ratio_result_txns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.FoundationTXN foundation_txns = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_foundation_txns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.DelegatedVotingTXN delegated_voting_txns = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_delegated_voting_txns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.QuashTXN quash_txns = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_quash_txns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.FastQuorumTXN fast_quorum_txns = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_fast_quorum_txns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.QuashResult quash_results = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_quash_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.RevokeTXN revoke_txns = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_revoke_txns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.ComplianceTXN compliance_txns = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_compliance_txns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.BurnSBTTXN burn_sbt_txns = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_burn_sbt_txns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<218>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.NewCoinTXN new_coin_txns = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_new_coin_txns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TXNS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.TXNS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zera_txn.CoinTXN coin_txns = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_coin_txns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_coin_txns(i), target, stream);
  }

  // repeated .zera_txn.MintTXN mint_txns = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mint_txns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_mint_txns(i), target, stream);
  }

  // repeated .zera_txn.ItemizedMintTXN item_mint_txns = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_mint_txns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_item_mint_txns(i), target, stream);
  }

  // repeated .zera_txn.InstrumentContract contract_txns = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contract_txns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_contract_txns(i), target, stream);
  }

  // repeated .zera_txn.GovernanceVote governance_votes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_governance_votes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_governance_votes(i), target, stream);
  }

  // repeated .zera_txn.GovernanceProposal governance_proposals = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_governance_proposals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_governance_proposals(i), target, stream);
  }

  // repeated .zera_txn.SmartContractTXN smart_contracts = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_smart_contracts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_smart_contracts(i), target, stream);
  }

  // repeated .zera_txn.SmartContractExecuteTXN smart_contract_executes = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_smart_contract_executes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_smart_contract_executes(i), target, stream);
  }

  // repeated .zera_txn.SelfCurrencyEquiv self_cur_equivs = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_self_cur_equivs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_self_cur_equivs(i), target, stream);
  }

  // repeated .zera_txn.AuthorizedCurrencyEquiv auth_cur_equivs = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_auth_cur_equivs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_auth_cur_equivs(i), target, stream);
  }

  // repeated .zera_txn.ExpenseRatioTXN expense_ratios = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_expense_ratios_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_expense_ratios(i), target, stream);
  }

  // repeated .zera_txn.TXNStatusFees txn_fees_and_status = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_txn_fees_and_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_txn_fees_and_status(i), target, stream);
  }

  // repeated .zera_txn.TokenFees token_fees = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_token_fees_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_token_fees(i), target, stream);
  }

  // repeated .zera_txn.NFTTXN nft_txns = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nft_txns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_nft_txns(i), target, stream);
  }

  // repeated .zera_txn.ContractUpdateTXN contract_update_txns = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contract_update_txns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_contract_update_txns(i), target, stream);
  }

  // repeated .zera_txn.ValidatorRegistration validator_registration_txns = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_validator_registration_txns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_validator_registration_txns(i), target, stream);
  }

  // repeated .zera_txn.ValidatorHeartbeat validator_heartbeat_txns = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_validator_heartbeat_txns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_validator_heartbeat_txns(i), target, stream);
  }

  // repeated .zera_txn.ProposalResult proposal_result_txns = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_proposal_result_txns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_proposal_result_txns(i), target, stream);
  }

  // repeated .zera_txn.ExpenseRatioResult expense_ratio_result_txns = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_expense_ratio_result_txns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_expense_ratio_result_txns(i), target, stream);
  }

  // repeated .zera_txn.FoundationTXN foundation_txns = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_foundation_txns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_foundation_txns(i), target, stream);
  }

  // repeated .zera_txn.DelegatedVotingTXN delegated_voting_txns = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_delegated_voting_txns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_delegated_voting_txns(i), target, stream);
  }

  // repeated .zera_txn.QuashTXN quash_txns = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_quash_txns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, this->_internal_quash_txns(i), target, stream);
  }

  // repeated .zera_txn.FastQuorumTXN fast_quorum_txns = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fast_quorum_txns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, this->_internal_fast_quorum_txns(i), target, stream);
  }

  // repeated .zera_txn.QuashResult quash_results = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_quash_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_quash_results(i), target, stream);
  }

  // repeated .zera_txn.RevokeTXN revoke_txns = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_revoke_txns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, this->_internal_revoke_txns(i), target, stream);
  }

  // repeated .zera_txn.ComplianceTXN compliance_txns = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_compliance_txns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, this->_internal_compliance_txns(i), target, stream);
  }

  // repeated .zera_txn.BurnSBTTXN burn_sbt_txns = 27;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_burn_sbt_txns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, this->_internal_burn_sbt_txns(i), target, stream);
  }

  // repeated .zera_txn.NewCoinTXN new_coin_txns = 28;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_new_coin_txns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, this->_internal_new_coin_txns(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.TXNS)
  return target;
}

size_t TXNS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.TXNS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zera_txn.CoinTXN coin_txns = 1;
  total_size += 1UL * this->_internal_coin_txns_size();
  for (const auto& msg : this->coin_txns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zera_txn.MintTXN mint_txns = 2;
  total_size += 1UL * this->_internal_mint_txns_size();
  for (const auto& msg : this->mint_txns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zera_txn.ItemizedMintTXN item_mint_txns = 3;
  total_size += 1UL * this->_internal_item_mint_txns_size();
  for (const auto& msg : this->item_mint_txns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zera_txn.InstrumentContract contract_txns = 4;
  total_size += 1UL * this->_internal_contract_txns_size();
  for (const auto& msg : this->contract_txns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zera_txn.GovernanceVote governance_votes = 5;
  total_size += 1UL * this->_internal_governance_votes_size();
  for (const auto& msg : this->governance_votes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zera_txn.GovernanceProposal governance_proposals = 6;
  total_size += 1UL * this->_internal_governance_proposals_size();
  for (const auto& msg : this->governance_proposals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zera_txn.SmartContractTXN smart_contracts = 7;
  total_size += 1UL * this->_internal_smart_contracts_size();
  for (const auto& msg : this->smart_contracts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zera_txn.SmartContractExecuteTXN smart_contract_executes = 8;
  total_size += 1UL * this->_internal_smart_contract_executes_size();
  for (const auto& msg : this->smart_contract_executes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zera_txn.SelfCurrencyEquiv self_cur_equivs = 9;
  total_size += 1UL * this->_internal_self_cur_equivs_size();
  for (const auto& msg : this->self_cur_equivs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zera_txn.AuthorizedCurrencyEquiv auth_cur_equivs = 10;
  total_size += 1UL * this->_internal_auth_cur_equivs_size();
  for (const auto& msg : this->auth_cur_equivs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zera_txn.ExpenseRatioTXN expense_ratios = 11;
  total_size += 1UL * this->_internal_expense_ratios_size();
  for (const auto& msg : this->expense_ratios_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zera_txn.TXNStatusFees txn_fees_and_status = 12;
  total_size += 1UL * this->_internal_txn_fees_and_status_size();
  for (const auto& msg : this->txn_fees_and_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zera_txn.TokenFees token_fees = 13;
  total_size += 1UL * this->_internal_token_fees_size();
  for (const auto& msg : this->token_fees_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zera_txn.NFTTXN nft_txns = 14;
  total_size += 1UL * this->_internal_nft_txns_size();
  for (const auto& msg : this->nft_txns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zera_txn.ContractUpdateTXN contract_update_txns = 15;
  total_size += 1UL * this->_internal_contract_update_txns_size();
  for (const auto& msg : this->contract_update_txns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zera_txn.ValidatorRegistration validator_registration_txns = 16;
  total_size += 2UL * this->_internal_validator_registration_txns_size();
  for (const auto& msg : this->validator_registration_txns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zera_txn.ValidatorHeartbeat validator_heartbeat_txns = 17;
  total_size += 2UL * this->_internal_validator_heartbeat_txns_size();
  for (const auto& msg : this->validator_heartbeat_txns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zera_txn.ProposalResult proposal_result_txns = 18;
  total_size += 2UL * this->_internal_proposal_result_txns_size();
  for (const auto& msg : this->proposal_result_txns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zera_txn.ExpenseRatioResult expense_ratio_result_txns = 19;
  total_size += 2UL * this->_internal_expense_ratio_result_txns_size();
  for (const auto& msg : this->expense_ratio_result_txns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zera_txn.FoundationTXN foundation_txns = 20;
  total_size += 2UL * this->_internal_foundation_txns_size();
  for (const auto& msg : this->foundation_txns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zera_txn.DelegatedVotingTXN delegated_voting_txns = 21;
  total_size += 2UL * this->_internal_delegated_voting_txns_size();
  for (const auto& msg : this->delegated_voting_txns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zera_txn.QuashTXN quash_txns = 22;
  total_size += 2UL * this->_internal_quash_txns_size();
  for (const auto& msg : this->quash_txns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zera_txn.FastQuorumTXN fast_quorum_txns = 23;
  total_size += 2UL * this->_internal_fast_quorum_txns_size();
  for (const auto& msg : this->fast_quorum_txns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zera_txn.QuashResult quash_results = 24;
  total_size += 2UL * this->_internal_quash_results_size();
  for (const auto& msg : this->quash_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zera_txn.RevokeTXN revoke_txns = 25;
  total_size += 2UL * this->_internal_revoke_txns_size();
  for (const auto& msg : this->revoke_txns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zera_txn.ComplianceTXN compliance_txns = 26;
  total_size += 2UL * this->_internal_compliance_txns_size();
  for (const auto& msg : this->compliance_txns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zera_txn.BurnSBTTXN burn_sbt_txns = 27;
  total_size += 2UL * this->_internal_burn_sbt_txns_size();
  for (const auto& msg : this->burn_sbt_txns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zera_txn.NewCoinTXN new_coin_txns = 28;
  total_size += 2UL * this->_internal_new_coin_txns_size();
  for (const auto& msg : this->new_coin_txns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TXNS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.TXNS)
  GOOGLE_DCHECK_NE(&from, this);
  const TXNS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TXNS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.TXNS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.TXNS)
    MergeFrom(*source);
  }
}

void TXNS::MergeFrom(const TXNS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.TXNS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  coin_txns_.MergeFrom(from.coin_txns_);
  mint_txns_.MergeFrom(from.mint_txns_);
  item_mint_txns_.MergeFrom(from.item_mint_txns_);
  contract_txns_.MergeFrom(from.contract_txns_);
  governance_votes_.MergeFrom(from.governance_votes_);
  governance_proposals_.MergeFrom(from.governance_proposals_);
  smart_contracts_.MergeFrom(from.smart_contracts_);
  smart_contract_executes_.MergeFrom(from.smart_contract_executes_);
  self_cur_equivs_.MergeFrom(from.self_cur_equivs_);
  auth_cur_equivs_.MergeFrom(from.auth_cur_equivs_);
  expense_ratios_.MergeFrom(from.expense_ratios_);
  txn_fees_and_status_.MergeFrom(from.txn_fees_and_status_);
  token_fees_.MergeFrom(from.token_fees_);
  nft_txns_.MergeFrom(from.nft_txns_);
  contract_update_txns_.MergeFrom(from.contract_update_txns_);
  validator_registration_txns_.MergeFrom(from.validator_registration_txns_);
  validator_heartbeat_txns_.MergeFrom(from.validator_heartbeat_txns_);
  proposal_result_txns_.MergeFrom(from.proposal_result_txns_);
  expense_ratio_result_txns_.MergeFrom(from.expense_ratio_result_txns_);
  foundation_txns_.MergeFrom(from.foundation_txns_);
  delegated_voting_txns_.MergeFrom(from.delegated_voting_txns_);
  quash_txns_.MergeFrom(from.quash_txns_);
  fast_quorum_txns_.MergeFrom(from.fast_quorum_txns_);
  quash_results_.MergeFrom(from.quash_results_);
  revoke_txns_.MergeFrom(from.revoke_txns_);
  compliance_txns_.MergeFrom(from.compliance_txns_);
  burn_sbt_txns_.MergeFrom(from.burn_sbt_txns_);
  new_coin_txns_.MergeFrom(from.new_coin_txns_);
}

void TXNS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.TXNS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TXNS::CopyFrom(const TXNS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.TXNS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TXNS::IsInitialized() const {
  return true;
}

void TXNS::InternalSwap(TXNS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  coin_txns_.InternalSwap(&other->coin_txns_);
  mint_txns_.InternalSwap(&other->mint_txns_);
  item_mint_txns_.InternalSwap(&other->item_mint_txns_);
  contract_txns_.InternalSwap(&other->contract_txns_);
  governance_votes_.InternalSwap(&other->governance_votes_);
  governance_proposals_.InternalSwap(&other->governance_proposals_);
  smart_contracts_.InternalSwap(&other->smart_contracts_);
  smart_contract_executes_.InternalSwap(&other->smart_contract_executes_);
  self_cur_equivs_.InternalSwap(&other->self_cur_equivs_);
  auth_cur_equivs_.InternalSwap(&other->auth_cur_equivs_);
  expense_ratios_.InternalSwap(&other->expense_ratios_);
  txn_fees_and_status_.InternalSwap(&other->txn_fees_and_status_);
  token_fees_.InternalSwap(&other->token_fees_);
  nft_txns_.InternalSwap(&other->nft_txns_);
  contract_update_txns_.InternalSwap(&other->contract_update_txns_);
  validator_registration_txns_.InternalSwap(&other->validator_registration_txns_);
  validator_heartbeat_txns_.InternalSwap(&other->validator_heartbeat_txns_);
  proposal_result_txns_.InternalSwap(&other->proposal_result_txns_);
  expense_ratio_result_txns_.InternalSwap(&other->expense_ratio_result_txns_);
  foundation_txns_.InternalSwap(&other->foundation_txns_);
  delegated_voting_txns_.InternalSwap(&other->delegated_voting_txns_);
  quash_txns_.InternalSwap(&other->quash_txns_);
  fast_quorum_txns_.InternalSwap(&other->fast_quorum_txns_);
  quash_results_.InternalSwap(&other->quash_results_);
  revoke_txns_.InternalSwap(&other->revoke_txns_);
  compliance_txns_.InternalSwap(&other->compliance_txns_);
  burn_sbt_txns_.InternalSwap(&other->burn_sbt_txns_);
  new_coin_txns_.InternalSwap(&other->new_coin_txns_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TXNS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Token::InitAsDefaultInstance() {
}
class Token::_Internal {
 public:
};

Token::Token(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.Token)
}
Token::Token(const Token& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_id().empty()) {
    contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_id(),
      GetArena());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_amount(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:zera_txn.Token)
}

void Token::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Token_txn_2eproto.base);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Token::~Token() {
  // @@protoc_insertion_point(destructor:zera_txn.Token)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Token::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Token::ArenaDtor(void* object) {
  Token* _this = reinterpret_cast< Token* >(object);
  (void)_this;
}
void Token::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Token::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Token& Token::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Token_txn_2eproto.base);
  return *internal_default_instance();
}


void Token::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.Token)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Token::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string contract_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.Token.contract_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.Token.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Token::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.Token)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string contract_id = 1;
  if (this->contract_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_id().data(), static_cast<int>(this->_internal_contract_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.Token.contract_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contract_id(), target);
  }

  // string amount = 2;
  if (this->amount().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.Token.amount");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.Token)
  return target;
}

size_t Token::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.Token)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string contract_id = 1;
  if (this->contract_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract_id());
  }

  // string amount = 2;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Token::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.Token)
  GOOGLE_DCHECK_NE(&from, this);
  const Token* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Token>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.Token)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.Token)
    MergeFrom(*source);
  }
}

void Token::MergeFrom(const Token& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.Token)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.contract_id().size() > 0) {
    _internal_set_contract_id(from._internal_contract_id());
  }
  if (from.amount().size() > 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void Token::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Token::CopyFrom(const Token& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Token::IsInitialized() const {
  return true;
}

void Token::InternalSwap(Token* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  contract_id_.Swap(&other->contract_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Token::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TokenFees::InitAsDefaultInstance() {
}
class TokenFees::_Internal {
 public:
};

TokenFees::TokenFees(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tokens_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.TokenFees)
}
TokenFees::TokenFees(const TokenFees& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tokens_(from.tokens_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:zera_txn.TokenFees)
}

void TokenFees::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TokenFees_txn_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TokenFees::~TokenFees() {
  // @@protoc_insertion_point(destructor:zera_txn.TokenFees)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TokenFees::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TokenFees::ArenaDtor(void* object) {
  TokenFees* _this = reinterpret_cast< TokenFees* >(object);
  (void)_this;
}
void TokenFees::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TokenFees::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TokenFees& TokenFees::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TokenFees_txn_2eproto.base);
  return *internal_default_instance();
}


void TokenFees::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.TokenFees)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tokens_.Clear();
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenFees::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zera_txn.Token tokens = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tokens(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TokenFees::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.TokenFees)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (this->address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  // repeated .zera_txn.Token tokens = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tokens_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tokens(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.TokenFees)
  return target;
}

size_t TokenFees::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.TokenFees)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zera_txn.Token tokens = 2;
  total_size += 1UL * this->_internal_tokens_size();
  for (const auto& msg : this->tokens_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TokenFees::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.TokenFees)
  GOOGLE_DCHECK_NE(&from, this);
  const TokenFees* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TokenFees>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.TokenFees)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.TokenFees)
    MergeFrom(*source);
  }
}

void TokenFees::MergeFrom(const TokenFees& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.TokenFees)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tokens_.MergeFrom(from.tokens_);
  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
}

void TokenFees::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.TokenFees)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TokenFees::CopyFrom(const TokenFees& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.TokenFees)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenFees::IsInitialized() const {
  return true;
}

void TokenFees::InternalSwap(TokenFees* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tokens_.InternalSwap(&other->tokens_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenFees::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TXNStatusFees::InitAsDefaultInstance() {
}
class TXNStatusFees::_Internal {
 public:
  using HasBits = decltype(std::declval<TXNStatusFees>()._has_bits_);
  static void set_has_approved_votes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_against_votes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TXNStatusFees::TXNStatusFees(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  base_fees_(arena),
  base_contract_id_(arena),
  smar_contract_result_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.TXNStatusFees)
}
TXNStatusFees::TXNStatusFees(const TXNStatusFees& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      base_fees_(from.base_fees_),
      base_contract_id_(from.base_contract_id_),
      smar_contract_result_(from.smar_contract_result_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  txn_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_txn_hash().empty()) {
    txn_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_txn_hash(),
      GetArena());
  }
  contract_fees_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_fees().empty()) {
    contract_fees_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_fees(),
      GetArena());
  }
  contract_contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_contract_id().empty()) {
    contract_contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contract_contract_id(),
      GetArena());
  }
  approved_votes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_approved_votes()) {
    approved_votes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_approved_votes(),
      GetArena());
  }
  against_votes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_against_votes()) {
    against_votes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_against_votes(),
      GetArena());
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&smart_contract_) -
    reinterpret_cast<char*>(&status_)) + sizeof(smart_contract_));
  // @@protoc_insertion_point(copy_constructor:zera_txn.TXNStatusFees)
}

void TXNStatusFees::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TXNStatusFees_txn_2eproto.base);
  txn_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_fees_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  approved_votes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  against_votes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&smart_contract_) -
      reinterpret_cast<char*>(&status_)) + sizeof(smart_contract_));
}

TXNStatusFees::~TXNStatusFees() {
  // @@protoc_insertion_point(destructor:zera_txn.TXNStatusFees)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TXNStatusFees::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  txn_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_fees_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  approved_votes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  against_votes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TXNStatusFees::ArenaDtor(void* object) {
  TXNStatusFees* _this = reinterpret_cast< TXNStatusFees* >(object);
  (void)_this;
}
void TXNStatusFees::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TXNStatusFees::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TXNStatusFees& TXNStatusFees::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TXNStatusFees_txn_2eproto.base);
  return *internal_default_instance();
}


void TXNStatusFees::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.TXNStatusFees)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  base_fees_.Clear();
  base_contract_id_.Clear();
  smar_contract_result_.Clear();
  txn_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contract_fees_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contract_contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      approved_votes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      against_votes_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&smart_contract_) -
      reinterpret_cast<char*>(&status_)) + sizeof(smart_contract_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TXNStatusFees::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes txn_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_txn_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zera_txn.TXN_STATUS status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::zera_txn::TXN_STATUS>(val));
        } else goto handle_unusual;
        continue;
      // repeated string base_fees = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_base_fees();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.TXNStatusFees.base_fees"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string base_contract_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_base_contract_id();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.TXNStatusFees.base_contract_id"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // string contract_fees = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_contract_fees();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.TXNStatusFees.contract_fees"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string contract_contract_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_contract_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.TXNStatusFees.contract_contract_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string approved_votes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_approved_votes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.TXNStatusFees.approved_votes"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string against_votes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_against_votes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zera_txn.TXNStatusFees.against_votes"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool smart_contract = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          smart_contract_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes smar_contract_result = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_smar_contract_result();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TXNStatusFees::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.TXNStatusFees)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes txn_hash = 1;
  if (this->txn_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_txn_hash(), target);
  }

  // .zera_txn.TXN_STATUS status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // repeated string base_fees = 3;
  for (int i = 0, n = this->_internal_base_fees_size(); i < n; i++) {
    const auto& s = this->_internal_base_fees(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.TXNStatusFees.base_fees");
    target = stream->WriteString(3, s, target);
  }

  // repeated string base_contract_id = 4;
  for (int i = 0, n = this->_internal_base_contract_id_size(); i < n; i++) {
    const auto& s = this->_internal_base_contract_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.TXNStatusFees.base_contract_id");
    target = stream->WriteString(4, s, target);
  }

  // string contract_fees = 5;
  if (this->contract_fees().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_fees().data(), static_cast<int>(this->_internal_contract_fees().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.TXNStatusFees.contract_fees");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_contract_fees(), target);
  }

  // string contract_contract_id = 6;
  if (this->contract_contract_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_contract_id().data(), static_cast<int>(this->_internal_contract_contract_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.TXNStatusFees.contract_contract_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_contract_contract_id(), target);
  }

  // string approved_votes = 7;
  if (_internal_has_approved_votes()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_approved_votes().data(), static_cast<int>(this->_internal_approved_votes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.TXNStatusFees.approved_votes");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_approved_votes(), target);
  }

  // string against_votes = 8;
  if (_internal_has_against_votes()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_against_votes().data(), static_cast<int>(this->_internal_against_votes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zera_txn.TXNStatusFees.against_votes");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_against_votes(), target);
  }

  // bool smart_contract = 9;
  if (this->smart_contract() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_smart_contract(), target);
  }

  // repeated bytes smar_contract_result = 10;
  for (int i = 0, n = this->_internal_smar_contract_result_size(); i < n; i++) {
    const auto& s = this->_internal_smar_contract_result(i);
    target = stream->WriteBytes(10, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.TXNStatusFees)
  return target;
}

size_t TXNStatusFees::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.TXNStatusFees)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string base_fees = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(base_fees_.size());
  for (int i = 0, n = base_fees_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      base_fees_.Get(i));
  }

  // repeated string base_contract_id = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(base_contract_id_.size());
  for (int i = 0, n = base_contract_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      base_contract_id_.Get(i));
  }

  // repeated bytes smar_contract_result = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(smar_contract_result_.size());
  for (int i = 0, n = smar_contract_result_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      smar_contract_result_.Get(i));
  }

  // bytes txn_hash = 1;
  if (this->txn_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_txn_hash());
  }

  // string contract_fees = 5;
  if (this->contract_fees().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract_fees());
  }

  // string contract_contract_id = 6;
  if (this->contract_contract_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract_contract_id());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // string approved_votes = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_approved_votes());
    }

    // string against_votes = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_against_votes());
    }

  }
  // .zera_txn.TXN_STATUS status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // bool smart_contract = 9;
  if (this->smart_contract() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TXNStatusFees::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.TXNStatusFees)
  GOOGLE_DCHECK_NE(&from, this);
  const TXNStatusFees* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TXNStatusFees>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.TXNStatusFees)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.TXNStatusFees)
    MergeFrom(*source);
  }
}

void TXNStatusFees::MergeFrom(const TXNStatusFees& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.TXNStatusFees)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  base_fees_.MergeFrom(from.base_fees_);
  base_contract_id_.MergeFrom(from.base_contract_id_);
  smar_contract_result_.MergeFrom(from.smar_contract_result_);
  if (from.txn_hash().size() > 0) {
    _internal_set_txn_hash(from._internal_txn_hash());
  }
  if (from.contract_fees().size() > 0) {
    _internal_set_contract_fees(from._internal_contract_fees());
  }
  if (from.contract_contract_id().size() > 0) {
    _internal_set_contract_contract_id(from._internal_contract_contract_id());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_approved_votes(from._internal_approved_votes());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_against_votes(from._internal_against_votes());
    }
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.smart_contract() != 0) {
    _internal_set_smart_contract(from._internal_smart_contract());
  }
}

void TXNStatusFees::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.TXNStatusFees)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TXNStatusFees::CopyFrom(const TXNStatusFees& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.TXNStatusFees)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TXNStatusFees::IsInitialized() const {
  return true;
}

void TXNStatusFees::InternalSwap(TXNStatusFees* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  base_fees_.InternalSwap(&other->base_fees_);
  base_contract_id_.InternalSwap(&other->base_contract_id_);
  smar_contract_result_.InternalSwap(&other->smar_contract_result_);
  txn_hash_.Swap(&other->txn_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contract_fees_.Swap(&other->contract_fees_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contract_contract_id_.Swap(&other->contract_contract_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  approved_votes_.Swap(&other->approved_votes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  against_votes_.Swap(&other->against_votes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TXNStatusFees, smart_contract_)
      + sizeof(TXNStatusFees::smart_contract_)
      - PROTOBUF_FIELD_OFFSET(TXNStatusFees, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TXNStatusFees::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TXNWrapper::InitAsDefaultInstance() {
  ::zera_txn::_TXNWrapper_default_instance_.coin_txn_ = const_cast< ::zera_txn::CoinTXN*>(
      ::zera_txn::CoinTXN::internal_default_instance());
  ::zera_txn::_TXNWrapper_default_instance_.mint_txn_ = const_cast< ::zera_txn::MintTXN*>(
      ::zera_txn::MintTXN::internal_default_instance());
  ::zera_txn::_TXNWrapper_default_instance_.item_mint_txn_ = const_cast< ::zera_txn::ItemizedMintTXN*>(
      ::zera_txn::ItemizedMintTXN::internal_default_instance());
  ::zera_txn::_TXNWrapper_default_instance_.contract_txn_ = const_cast< ::zera_txn::InstrumentContract*>(
      ::zera_txn::InstrumentContract::internal_default_instance());
  ::zera_txn::_TXNWrapper_default_instance_.governance_vote_ = const_cast< ::zera_txn::GovernanceVote*>(
      ::zera_txn::GovernanceVote::internal_default_instance());
  ::zera_txn::_TXNWrapper_default_instance_.governance_proposal_ = const_cast< ::zera_txn::GovernanceProposal*>(
      ::zera_txn::GovernanceProposal::internal_default_instance());
  ::zera_txn::_TXNWrapper_default_instance_.smart_contract_ = const_cast< ::zera_txn::SmartContractTXN*>(
      ::zera_txn::SmartContractTXN::internal_default_instance());
  ::zera_txn::_TXNWrapper_default_instance_.smart_contract_execute_ = const_cast< ::zera_txn::SmartContractExecuteTXN*>(
      ::zera_txn::SmartContractExecuteTXN::internal_default_instance());
  ::zera_txn::_TXNWrapper_default_instance_.self_cur_equivs_ = const_cast< ::zera_txn::SelfCurrencyEquiv*>(
      ::zera_txn::SelfCurrencyEquiv::internal_default_instance());
  ::zera_txn::_TXNWrapper_default_instance_.auth_cur_equivs_ = const_cast< ::zera_txn::AuthorizedCurrencyEquiv*>(
      ::zera_txn::AuthorizedCurrencyEquiv::internal_default_instance());
  ::zera_txn::_TXNWrapper_default_instance_.expense_ratios_ = const_cast< ::zera_txn::ExpenseRatioTXN*>(
      ::zera_txn::ExpenseRatioTXN::internal_default_instance());
  ::zera_txn::_TXNWrapper_default_instance_.nft_txn_ = const_cast< ::zera_txn::NFTTXN*>(
      ::zera_txn::NFTTXN::internal_default_instance());
  ::zera_txn::_TXNWrapper_default_instance_.contract_update_txn_ = const_cast< ::zera_txn::ContractUpdateTXN*>(
      ::zera_txn::ContractUpdateTXN::internal_default_instance());
  ::zera_txn::_TXNWrapper_default_instance_.validator_registration_txn_ = const_cast< ::zera_txn::ValidatorRegistration*>(
      ::zera_txn::ValidatorRegistration::internal_default_instance());
  ::zera_txn::_TXNWrapper_default_instance_.validator_heartbeat_txn_ = const_cast< ::zera_txn::ValidatorHeartbeat*>(
      ::zera_txn::ValidatorHeartbeat::internal_default_instance());
  ::zera_txn::_TXNWrapper_default_instance_.foundation_txn_ = const_cast< ::zera_txn::FoundationTXN*>(
      ::zera_txn::FoundationTXN::internal_default_instance());
  ::zera_txn::_TXNWrapper_default_instance_.delegated_voting_txn_ = const_cast< ::zera_txn::DelegatedVotingTXN*>(
      ::zera_txn::DelegatedVotingTXN::internal_default_instance());
  ::zera_txn::_TXNWrapper_default_instance_.quash_txn_ = const_cast< ::zera_txn::QuashTXN*>(
      ::zera_txn::QuashTXN::internal_default_instance());
  ::zera_txn::_TXNWrapper_default_instance_.fast_quorum_txn_ = const_cast< ::zera_txn::FastQuorumTXN*>(
      ::zera_txn::FastQuorumTXN::internal_default_instance());
  ::zera_txn::_TXNWrapper_default_instance_.revoke_txn_ = const_cast< ::zera_txn::RevokeTXN*>(
      ::zera_txn::RevokeTXN::internal_default_instance());
  ::zera_txn::_TXNWrapper_default_instance_.compliance_txn_ = const_cast< ::zera_txn::ComplianceTXN*>(
      ::zera_txn::ComplianceTXN::internal_default_instance());
  ::zera_txn::_TXNWrapper_default_instance_.proposal_result_txn_ = false;
  ::zera_txn::_TXNWrapper_default_instance_.burn_sbt_txn_ = const_cast< ::zera_txn::BurnSBTTXN*>(
      ::zera_txn::BurnSBTTXN::internal_default_instance());
  ::zera_txn::_TXNWrapper_default_instance_.new_coin_txn_ = const_cast< ::zera_txn::NewCoinTXN*>(
      ::zera_txn::NewCoinTXN::internal_default_instance());
}
class TXNWrapper::_Internal {
 public:
  static const ::zera_txn::CoinTXN& coin_txn(const TXNWrapper* msg);
  static const ::zera_txn::MintTXN& mint_txn(const TXNWrapper* msg);
  static const ::zera_txn::ItemizedMintTXN& item_mint_txn(const TXNWrapper* msg);
  static const ::zera_txn::InstrumentContract& contract_txn(const TXNWrapper* msg);
  static const ::zera_txn::GovernanceVote& governance_vote(const TXNWrapper* msg);
  static const ::zera_txn::GovernanceProposal& governance_proposal(const TXNWrapper* msg);
  static const ::zera_txn::SmartContractTXN& smart_contract(const TXNWrapper* msg);
  static const ::zera_txn::SmartContractExecuteTXN& smart_contract_execute(const TXNWrapper* msg);
  static const ::zera_txn::SelfCurrencyEquiv& self_cur_equivs(const TXNWrapper* msg);
  static const ::zera_txn::AuthorizedCurrencyEquiv& auth_cur_equivs(const TXNWrapper* msg);
  static const ::zera_txn::ExpenseRatioTXN& expense_ratios(const TXNWrapper* msg);
  static const ::zera_txn::NFTTXN& nft_txn(const TXNWrapper* msg);
  static const ::zera_txn::ContractUpdateTXN& contract_update_txn(const TXNWrapper* msg);
  static const ::zera_txn::ValidatorRegistration& validator_registration_txn(const TXNWrapper* msg);
  static const ::zera_txn::ValidatorHeartbeat& validator_heartbeat_txn(const TXNWrapper* msg);
  static const ::zera_txn::FoundationTXN& foundation_txn(const TXNWrapper* msg);
  static const ::zera_txn::DelegatedVotingTXN& delegated_voting_txn(const TXNWrapper* msg);
  static const ::zera_txn::QuashTXN& quash_txn(const TXNWrapper* msg);
  static const ::zera_txn::FastQuorumTXN& fast_quorum_txn(const TXNWrapper* msg);
  static const ::zera_txn::RevokeTXN& revoke_txn(const TXNWrapper* msg);
  static const ::zera_txn::ComplianceTXN& compliance_txn(const TXNWrapper* msg);
  static const ::zera_txn::BurnSBTTXN& burn_sbt_txn(const TXNWrapper* msg);
  static const ::zera_txn::NewCoinTXN& new_coin_txn(const TXNWrapper* msg);
};

const ::zera_txn::CoinTXN&
TXNWrapper::_Internal::coin_txn(const TXNWrapper* msg) {
  return *msg->payload_.coin_txn_;
}
const ::zera_txn::MintTXN&
TXNWrapper::_Internal::mint_txn(const TXNWrapper* msg) {
  return *msg->payload_.mint_txn_;
}
const ::zera_txn::ItemizedMintTXN&
TXNWrapper::_Internal::item_mint_txn(const TXNWrapper* msg) {
  return *msg->payload_.item_mint_txn_;
}
const ::zera_txn::InstrumentContract&
TXNWrapper::_Internal::contract_txn(const TXNWrapper* msg) {
  return *msg->payload_.contract_txn_;
}
const ::zera_txn::GovernanceVote&
TXNWrapper::_Internal::governance_vote(const TXNWrapper* msg) {
  return *msg->payload_.governance_vote_;
}
const ::zera_txn::GovernanceProposal&
TXNWrapper::_Internal::governance_proposal(const TXNWrapper* msg) {
  return *msg->payload_.governance_proposal_;
}
const ::zera_txn::SmartContractTXN&
TXNWrapper::_Internal::smart_contract(const TXNWrapper* msg) {
  return *msg->payload_.smart_contract_;
}
const ::zera_txn::SmartContractExecuteTXN&
TXNWrapper::_Internal::smart_contract_execute(const TXNWrapper* msg) {
  return *msg->payload_.smart_contract_execute_;
}
const ::zera_txn::SelfCurrencyEquiv&
TXNWrapper::_Internal::self_cur_equivs(const TXNWrapper* msg) {
  return *msg->payload_.self_cur_equivs_;
}
const ::zera_txn::AuthorizedCurrencyEquiv&
TXNWrapper::_Internal::auth_cur_equivs(const TXNWrapper* msg) {
  return *msg->payload_.auth_cur_equivs_;
}
const ::zera_txn::ExpenseRatioTXN&
TXNWrapper::_Internal::expense_ratios(const TXNWrapper* msg) {
  return *msg->payload_.expense_ratios_;
}
const ::zera_txn::NFTTXN&
TXNWrapper::_Internal::nft_txn(const TXNWrapper* msg) {
  return *msg->payload_.nft_txn_;
}
const ::zera_txn::ContractUpdateTXN&
TXNWrapper::_Internal::contract_update_txn(const TXNWrapper* msg) {
  return *msg->payload_.contract_update_txn_;
}
const ::zera_txn::ValidatorRegistration&
TXNWrapper::_Internal::validator_registration_txn(const TXNWrapper* msg) {
  return *msg->payload_.validator_registration_txn_;
}
const ::zera_txn::ValidatorHeartbeat&
TXNWrapper::_Internal::validator_heartbeat_txn(const TXNWrapper* msg) {
  return *msg->payload_.validator_heartbeat_txn_;
}
const ::zera_txn::FoundationTXN&
TXNWrapper::_Internal::foundation_txn(const TXNWrapper* msg) {
  return *msg->payload_.foundation_txn_;
}
const ::zera_txn::DelegatedVotingTXN&
TXNWrapper::_Internal::delegated_voting_txn(const TXNWrapper* msg) {
  return *msg->payload_.delegated_voting_txn_;
}
const ::zera_txn::QuashTXN&
TXNWrapper::_Internal::quash_txn(const TXNWrapper* msg) {
  return *msg->payload_.quash_txn_;
}
const ::zera_txn::FastQuorumTXN&
TXNWrapper::_Internal::fast_quorum_txn(const TXNWrapper* msg) {
  return *msg->payload_.fast_quorum_txn_;
}
const ::zera_txn::RevokeTXN&
TXNWrapper::_Internal::revoke_txn(const TXNWrapper* msg) {
  return *msg->payload_.revoke_txn_;
}
const ::zera_txn::ComplianceTXN&
TXNWrapper::_Internal::compliance_txn(const TXNWrapper* msg) {
  return *msg->payload_.compliance_txn_;
}
const ::zera_txn::BurnSBTTXN&
TXNWrapper::_Internal::burn_sbt_txn(const TXNWrapper* msg) {
  return *msg->payload_.burn_sbt_txn_;
}
const ::zera_txn::NewCoinTXN&
TXNWrapper::_Internal::new_coin_txn(const TXNWrapper* msg) {
  return *msg->payload_.new_coin_txn_;
}
void TXNWrapper::set_allocated_coin_txn(::zera_txn::CoinTXN* coin_txn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (coin_txn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(coin_txn);
    if (message_arena != submessage_arena) {
      coin_txn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coin_txn, submessage_arena);
    }
    set_has_coin_txn();
    payload_.coin_txn_ = coin_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:zera_txn.TXNWrapper.coin_txn)
}
void TXNWrapper::set_allocated_mint_txn(::zera_txn::MintTXN* mint_txn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (mint_txn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mint_txn);
    if (message_arena != submessage_arena) {
      mint_txn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mint_txn, submessage_arena);
    }
    set_has_mint_txn();
    payload_.mint_txn_ = mint_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:zera_txn.TXNWrapper.mint_txn)
}
void TXNWrapper::set_allocated_item_mint_txn(::zera_txn::ItemizedMintTXN* item_mint_txn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (item_mint_txn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(item_mint_txn);
    if (message_arena != submessage_arena) {
      item_mint_txn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item_mint_txn, submessage_arena);
    }
    set_has_item_mint_txn();
    payload_.item_mint_txn_ = item_mint_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:zera_txn.TXNWrapper.item_mint_txn)
}
void TXNWrapper::set_allocated_contract_txn(::zera_txn::InstrumentContract* contract_txn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (contract_txn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(contract_txn);
    if (message_arena != submessage_arena) {
      contract_txn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contract_txn, submessage_arena);
    }
    set_has_contract_txn();
    payload_.contract_txn_ = contract_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:zera_txn.TXNWrapper.contract_txn)
}
void TXNWrapper::set_allocated_governance_vote(::zera_txn::GovernanceVote* governance_vote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (governance_vote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(governance_vote);
    if (message_arena != submessage_arena) {
      governance_vote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, governance_vote, submessage_arena);
    }
    set_has_governance_vote();
    payload_.governance_vote_ = governance_vote;
  }
  // @@protoc_insertion_point(field_set_allocated:zera_txn.TXNWrapper.governance_vote)
}
void TXNWrapper::set_allocated_governance_proposal(::zera_txn::GovernanceProposal* governance_proposal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (governance_proposal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(governance_proposal);
    if (message_arena != submessage_arena) {
      governance_proposal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, governance_proposal, submessage_arena);
    }
    set_has_governance_proposal();
    payload_.governance_proposal_ = governance_proposal;
  }
  // @@protoc_insertion_point(field_set_allocated:zera_txn.TXNWrapper.governance_proposal)
}
void TXNWrapper::set_allocated_smart_contract(::zera_txn::SmartContractTXN* smart_contract) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (smart_contract) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(smart_contract);
    if (message_arena != submessage_arena) {
      smart_contract = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, smart_contract, submessage_arena);
    }
    set_has_smart_contract();
    payload_.smart_contract_ = smart_contract;
  }
  // @@protoc_insertion_point(field_set_allocated:zera_txn.TXNWrapper.smart_contract)
}
void TXNWrapper::set_allocated_smart_contract_execute(::zera_txn::SmartContractExecuteTXN* smart_contract_execute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (smart_contract_execute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(smart_contract_execute);
    if (message_arena != submessage_arena) {
      smart_contract_execute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, smart_contract_execute, submessage_arena);
    }
    set_has_smart_contract_execute();
    payload_.smart_contract_execute_ = smart_contract_execute;
  }
  // @@protoc_insertion_point(field_set_allocated:zera_txn.TXNWrapper.smart_contract_execute)
}
void TXNWrapper::set_allocated_self_cur_equivs(::zera_txn::SelfCurrencyEquiv* self_cur_equivs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (self_cur_equivs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(self_cur_equivs);
    if (message_arena != submessage_arena) {
      self_cur_equivs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, self_cur_equivs, submessage_arena);
    }
    set_has_self_cur_equivs();
    payload_.self_cur_equivs_ = self_cur_equivs;
  }
  // @@protoc_insertion_point(field_set_allocated:zera_txn.TXNWrapper.self_cur_equivs)
}
void TXNWrapper::set_allocated_auth_cur_equivs(::zera_txn::AuthorizedCurrencyEquiv* auth_cur_equivs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (auth_cur_equivs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(auth_cur_equivs);
    if (message_arena != submessage_arena) {
      auth_cur_equivs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth_cur_equivs, submessage_arena);
    }
    set_has_auth_cur_equivs();
    payload_.auth_cur_equivs_ = auth_cur_equivs;
  }
  // @@protoc_insertion_point(field_set_allocated:zera_txn.TXNWrapper.auth_cur_equivs)
}
void TXNWrapper::set_allocated_expense_ratios(::zera_txn::ExpenseRatioTXN* expense_ratios) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (expense_ratios) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(expense_ratios);
    if (message_arena != submessage_arena) {
      expense_ratios = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expense_ratios, submessage_arena);
    }
    set_has_expense_ratios();
    payload_.expense_ratios_ = expense_ratios;
  }
  // @@protoc_insertion_point(field_set_allocated:zera_txn.TXNWrapper.expense_ratios)
}
void TXNWrapper::set_allocated_nft_txn(::zera_txn::NFTTXN* nft_txn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (nft_txn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nft_txn);
    if (message_arena != submessage_arena) {
      nft_txn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nft_txn, submessage_arena);
    }
    set_has_nft_txn();
    payload_.nft_txn_ = nft_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:zera_txn.TXNWrapper.nft_txn)
}
void TXNWrapper::set_allocated_contract_update_txn(::zera_txn::ContractUpdateTXN* contract_update_txn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (contract_update_txn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(contract_update_txn);
    if (message_arena != submessage_arena) {
      contract_update_txn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contract_update_txn, submessage_arena);
    }
    set_has_contract_update_txn();
    payload_.contract_update_txn_ = contract_update_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:zera_txn.TXNWrapper.contract_update_txn)
}
void TXNWrapper::set_allocated_validator_registration_txn(::zera_txn::ValidatorRegistration* validator_registration_txn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (validator_registration_txn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(validator_registration_txn);
    if (message_arena != submessage_arena) {
      validator_registration_txn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, validator_registration_txn, submessage_arena);
    }
    set_has_validator_registration_txn();
    payload_.validator_registration_txn_ = validator_registration_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:zera_txn.TXNWrapper.validator_registration_txn)
}
void TXNWrapper::set_allocated_validator_heartbeat_txn(::zera_txn::ValidatorHeartbeat* validator_heartbeat_txn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (validator_heartbeat_txn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(validator_heartbeat_txn);
    if (message_arena != submessage_arena) {
      validator_heartbeat_txn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, validator_heartbeat_txn, submessage_arena);
    }
    set_has_validator_heartbeat_txn();
    payload_.validator_heartbeat_txn_ = validator_heartbeat_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:zera_txn.TXNWrapper.validator_heartbeat_txn)
}
void TXNWrapper::set_allocated_foundation_txn(::zera_txn::FoundationTXN* foundation_txn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (foundation_txn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(foundation_txn);
    if (message_arena != submessage_arena) {
      foundation_txn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, foundation_txn, submessage_arena);
    }
    set_has_foundation_txn();
    payload_.foundation_txn_ = foundation_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:zera_txn.TXNWrapper.foundation_txn)
}
void TXNWrapper::set_allocated_delegated_voting_txn(::zera_txn::DelegatedVotingTXN* delegated_voting_txn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (delegated_voting_txn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(delegated_voting_txn);
    if (message_arena != submessage_arena) {
      delegated_voting_txn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delegated_voting_txn, submessage_arena);
    }
    set_has_delegated_voting_txn();
    payload_.delegated_voting_txn_ = delegated_voting_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:zera_txn.TXNWrapper.delegated_voting_txn)
}
void TXNWrapper::set_allocated_quash_txn(::zera_txn::QuashTXN* quash_txn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (quash_txn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(quash_txn);
    if (message_arena != submessage_arena) {
      quash_txn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quash_txn, submessage_arena);
    }
    set_has_quash_txn();
    payload_.quash_txn_ = quash_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:zera_txn.TXNWrapper.quash_txn)
}
void TXNWrapper::set_allocated_fast_quorum_txn(::zera_txn::FastQuorumTXN* fast_quorum_txn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (fast_quorum_txn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fast_quorum_txn);
    if (message_arena != submessage_arena) {
      fast_quorum_txn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fast_quorum_txn, submessage_arena);
    }
    set_has_fast_quorum_txn();
    payload_.fast_quorum_txn_ = fast_quorum_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:zera_txn.TXNWrapper.fast_quorum_txn)
}
void TXNWrapper::set_allocated_revoke_txn(::zera_txn::RevokeTXN* revoke_txn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (revoke_txn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(revoke_txn);
    if (message_arena != submessage_arena) {
      revoke_txn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, revoke_txn, submessage_arena);
    }
    set_has_revoke_txn();
    payload_.revoke_txn_ = revoke_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:zera_txn.TXNWrapper.revoke_txn)
}
void TXNWrapper::set_allocated_compliance_txn(::zera_txn::ComplianceTXN* compliance_txn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (compliance_txn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(compliance_txn);
    if (message_arena != submessage_arena) {
      compliance_txn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compliance_txn, submessage_arena);
    }
    set_has_compliance_txn();
    payload_.compliance_txn_ = compliance_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:zera_txn.TXNWrapper.compliance_txn)
}
void TXNWrapper::set_allocated_burn_sbt_txn(::zera_txn::BurnSBTTXN* burn_sbt_txn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (burn_sbt_txn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(burn_sbt_txn);
    if (message_arena != submessage_arena) {
      burn_sbt_txn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, burn_sbt_txn, submessage_arena);
    }
    set_has_burn_sbt_txn();
    payload_.burn_sbt_txn_ = burn_sbt_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:zera_txn.TXNWrapper.burn_sbt_txn)
}
void TXNWrapper::set_allocated_new_coin_txn(::zera_txn::NewCoinTXN* new_coin_txn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (new_coin_txn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(new_coin_txn);
    if (message_arena != submessage_arena) {
      new_coin_txn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_coin_txn, submessage_arena);
    }
    set_has_new_coin_txn();
    payload_.new_coin_txn_ = new_coin_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:zera_txn.TXNWrapper.new_coin_txn)
}
TXNWrapper::TXNWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zera_txn.TXNWrapper)
}
TXNWrapper::TXNWrapper(const TXNWrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  txn_type_ = from.txn_type_;
  clear_has_payload();
  switch (from.payload_case()) {
    case kCoinTxn: {
      _internal_mutable_coin_txn()->::zera_txn::CoinTXN::MergeFrom(from._internal_coin_txn());
      break;
    }
    case kMintTxn: {
      _internal_mutable_mint_txn()->::zera_txn::MintTXN::MergeFrom(from._internal_mint_txn());
      break;
    }
    case kItemMintTxn: {
      _internal_mutable_item_mint_txn()->::zera_txn::ItemizedMintTXN::MergeFrom(from._internal_item_mint_txn());
      break;
    }
    case kContractTxn: {
      _internal_mutable_contract_txn()->::zera_txn::InstrumentContract::MergeFrom(from._internal_contract_txn());
      break;
    }
    case kGovernanceVote: {
      _internal_mutable_governance_vote()->::zera_txn::GovernanceVote::MergeFrom(from._internal_governance_vote());
      break;
    }
    case kGovernanceProposal: {
      _internal_mutable_governance_proposal()->::zera_txn::GovernanceProposal::MergeFrom(from._internal_governance_proposal());
      break;
    }
    case kSmartContract: {
      _internal_mutable_smart_contract()->::zera_txn::SmartContractTXN::MergeFrom(from._internal_smart_contract());
      break;
    }
    case kSmartContractExecute: {
      _internal_mutable_smart_contract_execute()->::zera_txn::SmartContractExecuteTXN::MergeFrom(from._internal_smart_contract_execute());
      break;
    }
    case kSelfCurEquivs: {
      _internal_mutable_self_cur_equivs()->::zera_txn::SelfCurrencyEquiv::MergeFrom(from._internal_self_cur_equivs());
      break;
    }
    case kAuthCurEquivs: {
      _internal_mutable_auth_cur_equivs()->::zera_txn::AuthorizedCurrencyEquiv::MergeFrom(from._internal_auth_cur_equivs());
      break;
    }
    case kExpenseRatios: {
      _internal_mutable_expense_ratios()->::zera_txn::ExpenseRatioTXN::MergeFrom(from._internal_expense_ratios());
      break;
    }
    case kNftTxn: {
      _internal_mutable_nft_txn()->::zera_txn::NFTTXN::MergeFrom(from._internal_nft_txn());
      break;
    }
    case kContractUpdateTxn: {
      _internal_mutable_contract_update_txn()->::zera_txn::ContractUpdateTXN::MergeFrom(from._internal_contract_update_txn());
      break;
    }
    case kValidatorRegistrationTxn: {
      _internal_mutable_validator_registration_txn()->::zera_txn::ValidatorRegistration::MergeFrom(from._internal_validator_registration_txn());
      break;
    }
    case kValidatorHeartbeatTxn: {
      _internal_mutable_validator_heartbeat_txn()->::zera_txn::ValidatorHeartbeat::MergeFrom(from._internal_validator_heartbeat_txn());
      break;
    }
    case kFoundationTxn: {
      _internal_mutable_foundation_txn()->::zera_txn::FoundationTXN::MergeFrom(from._internal_foundation_txn());
      break;
    }
    case kDelegatedVotingTxn: {
      _internal_mutable_delegated_voting_txn()->::zera_txn::DelegatedVotingTXN::MergeFrom(from._internal_delegated_voting_txn());
      break;
    }
    case kQuashTxn: {
      _internal_mutable_quash_txn()->::zera_txn::QuashTXN::MergeFrom(from._internal_quash_txn());
      break;
    }
    case kFastQuorumTxn: {
      _internal_mutable_fast_quorum_txn()->::zera_txn::FastQuorumTXN::MergeFrom(from._internal_fast_quorum_txn());
      break;
    }
    case kRevokeTxn: {
      _internal_mutable_revoke_txn()->::zera_txn::RevokeTXN::MergeFrom(from._internal_revoke_txn());
      break;
    }
    case kComplianceTxn: {
      _internal_mutable_compliance_txn()->::zera_txn::ComplianceTXN::MergeFrom(from._internal_compliance_txn());
      break;
    }
    case kProposalResultTxn: {
      _internal_set_proposal_result_txn(from._internal_proposal_result_txn());
      break;
    }
    case kBurnSbtTxn: {
      _internal_mutable_burn_sbt_txn()->::zera_txn::BurnSBTTXN::MergeFrom(from._internal_burn_sbt_txn());
      break;
    }
    case kNewCoinTxn: {
      _internal_mutable_new_coin_txn()->::zera_txn::NewCoinTXN::MergeFrom(from._internal_new_coin_txn());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zera_txn.TXNWrapper)
}

void TXNWrapper::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TXNWrapper_txn_2eproto.base);
  txn_type_ = 0;
  clear_has_payload();
}

TXNWrapper::~TXNWrapper() {
  // @@protoc_insertion_point(destructor:zera_txn.TXNWrapper)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TXNWrapper::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void TXNWrapper::ArenaDtor(void* object) {
  TXNWrapper* _this = reinterpret_cast< TXNWrapper* >(object);
  (void)_this;
}
void TXNWrapper::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TXNWrapper::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TXNWrapper& TXNWrapper::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TXNWrapper_txn_2eproto.base);
  return *internal_default_instance();
}


void TXNWrapper::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:zera_txn.TXNWrapper)
  switch (payload_case()) {
    case kCoinTxn: {
      if (GetArena() == nullptr) {
        delete payload_.coin_txn_;
      }
      break;
    }
    case kMintTxn: {
      if (GetArena() == nullptr) {
        delete payload_.mint_txn_;
      }
      break;
    }
    case kItemMintTxn: {
      if (GetArena() == nullptr) {
        delete payload_.item_mint_txn_;
      }
      break;
    }
    case kContractTxn: {
      if (GetArena() == nullptr) {
        delete payload_.contract_txn_;
      }
      break;
    }
    case kGovernanceVote: {
      if (GetArena() == nullptr) {
        delete payload_.governance_vote_;
      }
      break;
    }
    case kGovernanceProposal: {
      if (GetArena() == nullptr) {
        delete payload_.governance_proposal_;
      }
      break;
    }
    case kSmartContract: {
      if (GetArena() == nullptr) {
        delete payload_.smart_contract_;
      }
      break;
    }
    case kSmartContractExecute: {
      if (GetArena() == nullptr) {
        delete payload_.smart_contract_execute_;
      }
      break;
    }
    case kSelfCurEquivs: {
      if (GetArena() == nullptr) {
        delete payload_.self_cur_equivs_;
      }
      break;
    }
    case kAuthCurEquivs: {
      if (GetArena() == nullptr) {
        delete payload_.auth_cur_equivs_;
      }
      break;
    }
    case kExpenseRatios: {
      if (GetArena() == nullptr) {
        delete payload_.expense_ratios_;
      }
      break;
    }
    case kNftTxn: {
      if (GetArena() == nullptr) {
        delete payload_.nft_txn_;
      }
      break;
    }
    case kContractUpdateTxn: {
      if (GetArena() == nullptr) {
        delete payload_.contract_update_txn_;
      }
      break;
    }
    case kValidatorRegistrationTxn: {
      if (GetArena() == nullptr) {
        delete payload_.validator_registration_txn_;
      }
      break;
    }
    case kValidatorHeartbeatTxn: {
      if (GetArena() == nullptr) {
        delete payload_.validator_heartbeat_txn_;
      }
      break;
    }
    case kFoundationTxn: {
      if (GetArena() == nullptr) {
        delete payload_.foundation_txn_;
      }
      break;
    }
    case kDelegatedVotingTxn: {
      if (GetArena() == nullptr) {
        delete payload_.delegated_voting_txn_;
      }
      break;
    }
    case kQuashTxn: {
      if (GetArena() == nullptr) {
        delete payload_.quash_txn_;
      }
      break;
    }
    case kFastQuorumTxn: {
      if (GetArena() == nullptr) {
        delete payload_.fast_quorum_txn_;
      }
      break;
    }
    case kRevokeTxn: {
      if (GetArena() == nullptr) {
        delete payload_.revoke_txn_;
      }
      break;
    }
    case kComplianceTxn: {
      if (GetArena() == nullptr) {
        delete payload_.compliance_txn_;
      }
      break;
    }
    case kProposalResultTxn: {
      // No need to clear
      break;
    }
    case kBurnSbtTxn: {
      if (GetArena() == nullptr) {
        delete payload_.burn_sbt_txn_;
      }
      break;
    }
    case kNewCoinTxn: {
      if (GetArena() == nullptr) {
        delete payload_.new_coin_txn_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void TXNWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:zera_txn.TXNWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txn_type_ = 0;
  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TXNWrapper::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zera_txn.CoinTXN coin_txn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coin_txn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zera_txn.MintTXN mint_txn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mint_txn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zera_txn.ItemizedMintTXN item_mint_txn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_item_mint_txn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zera_txn.InstrumentContract contract_txn = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_contract_txn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zera_txn.GovernanceVote governance_vote = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_governance_vote(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zera_txn.GovernanceProposal governance_proposal = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_governance_proposal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zera_txn.SmartContractTXN smart_contract = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_smart_contract(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zera_txn.SmartContractExecuteTXN smart_contract_execute = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_smart_contract_execute(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zera_txn.SelfCurrencyEquiv self_cur_equivs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_self_cur_equivs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zera_txn.AuthorizedCurrencyEquiv auth_cur_equivs = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_auth_cur_equivs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zera_txn.ExpenseRatioTXN expense_ratios = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_expense_ratios(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zera_txn.NFTTXN nft_txn = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_nft_txn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zera_txn.ContractUpdateTXN contract_update_txn = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_contract_update_txn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zera_txn.ValidatorRegistration validator_registration_txn = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_validator_registration_txn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zera_txn.ValidatorHeartbeat validator_heartbeat_txn = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_validator_heartbeat_txn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zera_txn.FoundationTXN foundation_txn = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_foundation_txn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zera_txn.DelegatedVotingTXN delegated_voting_txn = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_delegated_voting_txn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zera_txn.QuashTXN quash_txn = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_quash_txn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zera_txn.FastQuorumTXN fast_quorum_txn = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_fast_quorum_txn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zera_txn.RevokeTXN revoke_txn = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_revoke_txn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zera_txn.ComplianceTXN compliance_txn = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_compliance_txn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool proposal_result_txn = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _internal_set_proposal_result_txn(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zera_txn.BurnSBTTXN burn_sbt_txn = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_burn_sbt_txn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zera_txn.NewCoinTXN new_coin_txn = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_coin_txn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zera_txn.TRANSACTION_TYPE txn_type = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_txn_type(static_cast<::zera_txn::TRANSACTION_TYPE>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TXNWrapper::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zera_txn.TXNWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zera_txn.CoinTXN coin_txn = 1;
  if (_internal_has_coin_txn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::coin_txn(this), target, stream);
  }

  // .zera_txn.MintTXN mint_txn = 2;
  if (_internal_has_mint_txn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mint_txn(this), target, stream);
  }

  // .zera_txn.ItemizedMintTXN item_mint_txn = 3;
  if (_internal_has_item_mint_txn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::item_mint_txn(this), target, stream);
  }

  // .zera_txn.InstrumentContract contract_txn = 4;
  if (_internal_has_contract_txn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::contract_txn(this), target, stream);
  }

  // .zera_txn.GovernanceVote governance_vote = 5;
  if (_internal_has_governance_vote()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::governance_vote(this), target, stream);
  }

  // .zera_txn.GovernanceProposal governance_proposal = 6;
  if (_internal_has_governance_proposal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::governance_proposal(this), target, stream);
  }

  // .zera_txn.SmartContractTXN smart_contract = 7;
  if (_internal_has_smart_contract()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::smart_contract(this), target, stream);
  }

  // .zera_txn.SmartContractExecuteTXN smart_contract_execute = 8;
  if (_internal_has_smart_contract_execute()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::smart_contract_execute(this), target, stream);
  }

  // .zera_txn.SelfCurrencyEquiv self_cur_equivs = 9;
  if (_internal_has_self_cur_equivs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::self_cur_equivs(this), target, stream);
  }

  // .zera_txn.AuthorizedCurrencyEquiv auth_cur_equivs = 10;
  if (_internal_has_auth_cur_equivs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::auth_cur_equivs(this), target, stream);
  }

  // .zera_txn.ExpenseRatioTXN expense_ratios = 11;
  if (_internal_has_expense_ratios()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::expense_ratios(this), target, stream);
  }

  // .zera_txn.NFTTXN nft_txn = 12;
  if (_internal_has_nft_txn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::nft_txn(this), target, stream);
  }

  // .zera_txn.ContractUpdateTXN contract_update_txn = 13;
  if (_internal_has_contract_update_txn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::contract_update_txn(this), target, stream);
  }

  // .zera_txn.ValidatorRegistration validator_registration_txn = 14;
  if (_internal_has_validator_registration_txn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::validator_registration_txn(this), target, stream);
  }

  // .zera_txn.ValidatorHeartbeat validator_heartbeat_txn = 15;
  if (_internal_has_validator_heartbeat_txn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::validator_heartbeat_txn(this), target, stream);
  }

  // .zera_txn.FoundationTXN foundation_txn = 16;
  if (_internal_has_foundation_txn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::foundation_txn(this), target, stream);
  }

  // .zera_txn.DelegatedVotingTXN delegated_voting_txn = 17;
  if (_internal_has_delegated_voting_txn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::delegated_voting_txn(this), target, stream);
  }

  // .zera_txn.QuashTXN quash_txn = 18;
  if (_internal_has_quash_txn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::quash_txn(this), target, stream);
  }

  // .zera_txn.FastQuorumTXN fast_quorum_txn = 19;
  if (_internal_has_fast_quorum_txn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::fast_quorum_txn(this), target, stream);
  }

  // .zera_txn.RevokeTXN revoke_txn = 20;
  if (_internal_has_revoke_txn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::revoke_txn(this), target, stream);
  }

  // .zera_txn.ComplianceTXN compliance_txn = 21;
  if (_internal_has_compliance_txn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::compliance_txn(this), target, stream);
  }

  // bool proposal_result_txn = 22;
  if (_internal_has_proposal_result_txn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_proposal_result_txn(), target);
  }

  // .zera_txn.BurnSBTTXN burn_sbt_txn = 23;
  if (_internal_has_burn_sbt_txn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::burn_sbt_txn(this), target, stream);
  }

  // .zera_txn.NewCoinTXN new_coin_txn = 24;
  if (_internal_has_new_coin_txn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::new_coin_txn(this), target, stream);
  }

  // .zera_txn.TRANSACTION_TYPE txn_type = 25;
  if (this->txn_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      25, this->_internal_txn_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zera_txn.TXNWrapper)
  return target;
}

size_t TXNWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zera_txn.TXNWrapper)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zera_txn.TRANSACTION_TYPE txn_type = 25;
  if (this->txn_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_txn_type());
  }

  switch (payload_case()) {
    // .zera_txn.CoinTXN coin_txn = 1;
    case kCoinTxn: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.coin_txn_);
      break;
    }
    // .zera_txn.MintTXN mint_txn = 2;
    case kMintTxn: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.mint_txn_);
      break;
    }
    // .zera_txn.ItemizedMintTXN item_mint_txn = 3;
    case kItemMintTxn: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.item_mint_txn_);
      break;
    }
    // .zera_txn.InstrumentContract contract_txn = 4;
    case kContractTxn: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.contract_txn_);
      break;
    }
    // .zera_txn.GovernanceVote governance_vote = 5;
    case kGovernanceVote: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.governance_vote_);
      break;
    }
    // .zera_txn.GovernanceProposal governance_proposal = 6;
    case kGovernanceProposal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.governance_proposal_);
      break;
    }
    // .zera_txn.SmartContractTXN smart_contract = 7;
    case kSmartContract: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.smart_contract_);
      break;
    }
    // .zera_txn.SmartContractExecuteTXN smart_contract_execute = 8;
    case kSmartContractExecute: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.smart_contract_execute_);
      break;
    }
    // .zera_txn.SelfCurrencyEquiv self_cur_equivs = 9;
    case kSelfCurEquivs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.self_cur_equivs_);
      break;
    }
    // .zera_txn.AuthorizedCurrencyEquiv auth_cur_equivs = 10;
    case kAuthCurEquivs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.auth_cur_equivs_);
      break;
    }
    // .zera_txn.ExpenseRatioTXN expense_ratios = 11;
    case kExpenseRatios: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.expense_ratios_);
      break;
    }
    // .zera_txn.NFTTXN nft_txn = 12;
    case kNftTxn: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.nft_txn_);
      break;
    }
    // .zera_txn.ContractUpdateTXN contract_update_txn = 13;
    case kContractUpdateTxn: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.contract_update_txn_);
      break;
    }
    // .zera_txn.ValidatorRegistration validator_registration_txn = 14;
    case kValidatorRegistrationTxn: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.validator_registration_txn_);
      break;
    }
    // .zera_txn.ValidatorHeartbeat validator_heartbeat_txn = 15;
    case kValidatorHeartbeatTxn: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.validator_heartbeat_txn_);
      break;
    }
    // .zera_txn.FoundationTXN foundation_txn = 16;
    case kFoundationTxn: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.foundation_txn_);
      break;
    }
    // .zera_txn.DelegatedVotingTXN delegated_voting_txn = 17;
    case kDelegatedVotingTxn: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.delegated_voting_txn_);
      break;
    }
    // .zera_txn.QuashTXN quash_txn = 18;
    case kQuashTxn: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.quash_txn_);
      break;
    }
    // .zera_txn.FastQuorumTXN fast_quorum_txn = 19;
    case kFastQuorumTxn: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.fast_quorum_txn_);
      break;
    }
    // .zera_txn.RevokeTXN revoke_txn = 20;
    case kRevokeTxn: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.revoke_txn_);
      break;
    }
    // .zera_txn.ComplianceTXN compliance_txn = 21;
    case kComplianceTxn: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.compliance_txn_);
      break;
    }
    // bool proposal_result_txn = 22;
    case kProposalResultTxn: {
      total_size += 2 + 1;
      break;
    }
    // .zera_txn.BurnSBTTXN burn_sbt_txn = 23;
    case kBurnSbtTxn: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.burn_sbt_txn_);
      break;
    }
    // .zera_txn.NewCoinTXN new_coin_txn = 24;
    case kNewCoinTxn: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.new_coin_txn_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TXNWrapper::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zera_txn.TXNWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  const TXNWrapper* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TXNWrapper>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zera_txn.TXNWrapper)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zera_txn.TXNWrapper)
    MergeFrom(*source);
  }
}

void TXNWrapper::MergeFrom(const TXNWrapper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zera_txn.TXNWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.txn_type() != 0) {
    _internal_set_txn_type(from._internal_txn_type());
  }
  switch (from.payload_case()) {
    case kCoinTxn: {
      _internal_mutable_coin_txn()->::zera_txn::CoinTXN::MergeFrom(from._internal_coin_txn());
      break;
    }
    case kMintTxn: {
      _internal_mutable_mint_txn()->::zera_txn::MintTXN::MergeFrom(from._internal_mint_txn());
      break;
    }
    case kItemMintTxn: {
      _internal_mutable_item_mint_txn()->::zera_txn::ItemizedMintTXN::MergeFrom(from._internal_item_mint_txn());
      break;
    }
    case kContractTxn: {
      _internal_mutable_contract_txn()->::zera_txn::InstrumentContract::MergeFrom(from._internal_contract_txn());
      break;
    }
    case kGovernanceVote: {
      _internal_mutable_governance_vote()->::zera_txn::GovernanceVote::MergeFrom(from._internal_governance_vote());
      break;
    }
    case kGovernanceProposal: {
      _internal_mutable_governance_proposal()->::zera_txn::GovernanceProposal::MergeFrom(from._internal_governance_proposal());
      break;
    }
    case kSmartContract: {
      _internal_mutable_smart_contract()->::zera_txn::SmartContractTXN::MergeFrom(from._internal_smart_contract());
      break;
    }
    case kSmartContractExecute: {
      _internal_mutable_smart_contract_execute()->::zera_txn::SmartContractExecuteTXN::MergeFrom(from._internal_smart_contract_execute());
      break;
    }
    case kSelfCurEquivs: {
      _internal_mutable_self_cur_equivs()->::zera_txn::SelfCurrencyEquiv::MergeFrom(from._internal_self_cur_equivs());
      break;
    }
    case kAuthCurEquivs: {
      _internal_mutable_auth_cur_equivs()->::zera_txn::AuthorizedCurrencyEquiv::MergeFrom(from._internal_auth_cur_equivs());
      break;
    }
    case kExpenseRatios: {
      _internal_mutable_expense_ratios()->::zera_txn::ExpenseRatioTXN::MergeFrom(from._internal_expense_ratios());
      break;
    }
    case kNftTxn: {
      _internal_mutable_nft_txn()->::zera_txn::NFTTXN::MergeFrom(from._internal_nft_txn());
      break;
    }
    case kContractUpdateTxn: {
      _internal_mutable_contract_update_txn()->::zera_txn::ContractUpdateTXN::MergeFrom(from._internal_contract_update_txn());
      break;
    }
    case kValidatorRegistrationTxn: {
      _internal_mutable_validator_registration_txn()->::zera_txn::ValidatorRegistration::MergeFrom(from._internal_validator_registration_txn());
      break;
    }
    case kValidatorHeartbeatTxn: {
      _internal_mutable_validator_heartbeat_txn()->::zera_txn::ValidatorHeartbeat::MergeFrom(from._internal_validator_heartbeat_txn());
      break;
    }
    case kFoundationTxn: {
      _internal_mutable_foundation_txn()->::zera_txn::FoundationTXN::MergeFrom(from._internal_foundation_txn());
      break;
    }
    case kDelegatedVotingTxn: {
      _internal_mutable_delegated_voting_txn()->::zera_txn::DelegatedVotingTXN::MergeFrom(from._internal_delegated_voting_txn());
      break;
    }
    case kQuashTxn: {
      _internal_mutable_quash_txn()->::zera_txn::QuashTXN::MergeFrom(from._internal_quash_txn());
      break;
    }
    case kFastQuorumTxn: {
      _internal_mutable_fast_quorum_txn()->::zera_txn::FastQuorumTXN::MergeFrom(from._internal_fast_quorum_txn());
      break;
    }
    case kRevokeTxn: {
      _internal_mutable_revoke_txn()->::zera_txn::RevokeTXN::MergeFrom(from._internal_revoke_txn());
      break;
    }
    case kComplianceTxn: {
      _internal_mutable_compliance_txn()->::zera_txn::ComplianceTXN::MergeFrom(from._internal_compliance_txn());
      break;
    }
    case kProposalResultTxn: {
      _internal_set_proposal_result_txn(from._internal_proposal_result_txn());
      break;
    }
    case kBurnSbtTxn: {
      _internal_mutable_burn_sbt_txn()->::zera_txn::BurnSBTTXN::MergeFrom(from._internal_burn_sbt_txn());
      break;
    }
    case kNewCoinTxn: {
      _internal_mutable_new_coin_txn()->::zera_txn::NewCoinTXN::MergeFrom(from._internal_new_coin_txn());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void TXNWrapper::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zera_txn.TXNWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TXNWrapper::CopyFrom(const TXNWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zera_txn.TXNWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TXNWrapper::IsInitialized() const {
  return true;
}

void TXNWrapper::InternalSwap(TXNWrapper* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(txn_type_, other->txn_type_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TXNWrapper::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace zera_txn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zera_txn::DelegateContract* Arena::CreateMaybeMessage< ::zera_txn::DelegateContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::DelegateContract >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::DelegatedVotingTXN* Arena::CreateMaybeMessage< ::zera_txn::DelegatedVotingTXN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::DelegatedVotingTXN >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::DelegateVote* Arena::CreateMaybeMessage< ::zera_txn::DelegateVote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::DelegateVote >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::DelegateFees* Arena::CreateMaybeMessage< ::zera_txn::DelegateFees >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::DelegateFees >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::Compliance* Arena::CreateMaybeMessage< ::zera_txn::Compliance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::Compliance >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::TokenCompliance* Arena::CreateMaybeMessage< ::zera_txn::TokenCompliance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::TokenCompliance >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::ExpenseRatio* Arena::CreateMaybeMessage< ::zera_txn::ExpenseRatio >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::ExpenseRatio >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::KeyValuePair* Arena::CreateMaybeMessage< ::zera_txn::KeyValuePair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::KeyValuePair >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::ByteMultiplier* Arena::CreateMaybeMessage< ::zera_txn::ByteMultiplier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::ByteMultiplier >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::FoundationTXN* Arena::CreateMaybeMessage< ::zera_txn::FoundationTXN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::FoundationTXN >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::RevokeTXN* Arena::CreateMaybeMessage< ::zera_txn::RevokeTXN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::RevokeTXN >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::FastQuorumTXN* Arena::CreateMaybeMessage< ::zera_txn::FastQuorumTXN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::FastQuorumTXN >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::Governance* Arena::CreateMaybeMessage< ::zera_txn::Governance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::Governance >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::Stage* Arena::CreateMaybeMessage< ::zera_txn::Stage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::Stage >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::CoinDenomination* Arena::CreateMaybeMessage< ::zera_txn::CoinDenomination >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::CoinDenomination >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::ContractFees* Arena::CreateMaybeMessage< ::zera_txn::ContractFees >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::ContractFees >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::ItemContractFees* Arena::CreateMaybeMessage< ::zera_txn::ItemContractFees >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::ItemContractFees >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::RestrictedKey* Arena::CreateMaybeMessage< ::zera_txn::RestrictedKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::RestrictedKey >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::ExpenseRatioTXN* Arena::CreateMaybeMessage< ::zera_txn::ExpenseRatioTXN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::ExpenseRatioTXN >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::PreMintWallet* Arena::CreateMaybeMessage< ::zera_txn::PreMintWallet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::PreMintWallet >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::Transfer* Arena::CreateMaybeMessage< ::zera_txn::Transfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::Transfer >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::BurnSBTTXN* Arena::CreateMaybeMessage< ::zera_txn::BurnSBTTXN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::BurnSBTTXN >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::BaseTXN* Arena::CreateMaybeMessage< ::zera_txn::BaseTXN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::BaseTXN >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::PublicKey* Arena::CreateMaybeMessage< ::zera_txn::PublicKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::PublicKey >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::GovernanceAuth* Arena::CreateMaybeMessage< ::zera_txn::GovernanceAuth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::GovernanceAuth >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::MultiKey* Arena::CreateMaybeMessage< ::zera_txn::MultiKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::MultiKey >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::MultiPatterns* Arena::CreateMaybeMessage< ::zera_txn::MultiPatterns >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::MultiPatterns >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::SelfCurrencyEquiv* Arena::CreateMaybeMessage< ::zera_txn::SelfCurrencyEquiv >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::SelfCurrencyEquiv >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::AuthorizedCurrencyEquiv* Arena::CreateMaybeMessage< ::zera_txn::AuthorizedCurrencyEquiv >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::AuthorizedCurrencyEquiv >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::CurrencyEquiv* Arena::CreateMaybeMessage< ::zera_txn::CurrencyEquiv >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::CurrencyEquiv >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::ExpenseRatioResult* Arena::CreateMaybeMessage< ::zera_txn::ExpenseRatioResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::ExpenseRatioResult >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::ComplianceAssign* Arena::CreateMaybeMessage< ::zera_txn::ComplianceAssign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::ComplianceAssign >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::ComplianceTXN* Arena::CreateMaybeMessage< ::zera_txn::ComplianceTXN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::ComplianceTXN >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::Wallets* Arena::CreateMaybeMessage< ::zera_txn::Wallets >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::Wallets >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::QuashTXN* Arena::CreateMaybeMessage< ::zera_txn::QuashTXN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::QuashTXN >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::QuashResult* Arena::CreateMaybeMessage< ::zera_txn::QuashResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::QuashResult >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::CoinTXN* Arena::CreateMaybeMessage< ::zera_txn::CoinTXN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::CoinTXN >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::NewCoinTXN* Arena::CreateMaybeMessage< ::zera_txn::NewCoinTXN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::NewCoinTXN >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::TransferAuthentication* Arena::CreateMaybeMessage< ::zera_txn::TransferAuthentication >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::TransferAuthentication >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::InputTransfers* Arena::CreateMaybeMessage< ::zera_txn::InputTransfers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::InputTransfers >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::OutputTransfers* Arena::CreateMaybeMessage< ::zera_txn::OutputTransfers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::OutputTransfers >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::MintTXN* Arena::CreateMaybeMessage< ::zera_txn::MintTXN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::MintTXN >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::NFTTXN* Arena::CreateMaybeMessage< ::zera_txn::NFTTXN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::NFTTXN >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::ItemizedMintTXN* Arena::CreateMaybeMessage< ::zera_txn::ItemizedMintTXN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::ItemizedMintTXN >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::ContractUpdateTXN* Arena::CreateMaybeMessage< ::zera_txn::ContractUpdateTXN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::ContractUpdateTXN >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::InstrumentContract* Arena::CreateMaybeMessage< ::zera_txn::InstrumentContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::InstrumentContract >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::GovernanceVote* Arena::CreateMaybeMessage< ::zera_txn::GovernanceVote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::GovernanceVote >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::GovernanceProposal* Arena::CreateMaybeMessage< ::zera_txn::GovernanceProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::GovernanceProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::GovernanceTXN* Arena::CreateMaybeMessage< ::zera_txn::GovernanceTXN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::GovernanceTXN >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::SmartContractTXN* Arena::CreateMaybeMessage< ::zera_txn::SmartContractTXN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::SmartContractTXN >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::SmartContractExecuteTXN* Arena::CreateMaybeMessage< ::zera_txn::SmartContractExecuteTXN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::SmartContractExecuteTXN >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::Validator* Arena::CreateMaybeMessage< ::zera_txn::Validator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::Validator >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::ValidatorRegistration* Arena::CreateMaybeMessage< ::zera_txn::ValidatorRegistration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::ValidatorRegistration >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::ValidatorHeartbeat* Arena::CreateMaybeMessage< ::zera_txn::ValidatorHeartbeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::ValidatorHeartbeat >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::SmartContractParameter* Arena::CreateMaybeMessage< ::zera_txn::SmartContractParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::SmartContractParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::Votes* Arena::CreateMaybeMessage< ::zera_txn::Votes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::Votes >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::VotePair* Arena::CreateMaybeMessage< ::zera_txn::VotePair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::VotePair >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::ProposalResult* Arena::CreateMaybeMessage< ::zera_txn::ProposalResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::ProposalResult >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::TXNS* Arena::CreateMaybeMessage< ::zera_txn::TXNS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::TXNS >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::Token* Arena::CreateMaybeMessage< ::zera_txn::Token >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::Token >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::TokenFees* Arena::CreateMaybeMessage< ::zera_txn::TokenFees >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::TokenFees >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::TXNStatusFees* Arena::CreateMaybeMessage< ::zera_txn::TXNStatusFees >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::TXNStatusFees >(arena);
}
template<> PROTOBUF_NOINLINE ::zera_txn::TXNWrapper* Arena::CreateMaybeMessage< ::zera_txn::TXNWrapper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zera_txn::TXNWrapper >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

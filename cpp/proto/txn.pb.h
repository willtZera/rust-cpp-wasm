// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: txn.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_txn_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_txn_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_txn_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_txn_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[63]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_txn_2eproto;
namespace zera_txn {
class AuthorizedCurrencyEquiv;
class AuthorizedCurrencyEquivDefaultTypeInternal;
extern AuthorizedCurrencyEquivDefaultTypeInternal _AuthorizedCurrencyEquiv_default_instance_;
class BaseTXN;
class BaseTXNDefaultTypeInternal;
extern BaseTXNDefaultTypeInternal _BaseTXN_default_instance_;
class BurnSBTTXN;
class BurnSBTTXNDefaultTypeInternal;
extern BurnSBTTXNDefaultTypeInternal _BurnSBTTXN_default_instance_;
class ByteMultiplier;
class ByteMultiplierDefaultTypeInternal;
extern ByteMultiplierDefaultTypeInternal _ByteMultiplier_default_instance_;
class CoinDenomination;
class CoinDenominationDefaultTypeInternal;
extern CoinDenominationDefaultTypeInternal _CoinDenomination_default_instance_;
class CoinTXN;
class CoinTXNDefaultTypeInternal;
extern CoinTXNDefaultTypeInternal _CoinTXN_default_instance_;
class Compliance;
class ComplianceDefaultTypeInternal;
extern ComplianceDefaultTypeInternal _Compliance_default_instance_;
class ComplianceAssign;
class ComplianceAssignDefaultTypeInternal;
extern ComplianceAssignDefaultTypeInternal _ComplianceAssign_default_instance_;
class ComplianceTXN;
class ComplianceTXNDefaultTypeInternal;
extern ComplianceTXNDefaultTypeInternal _ComplianceTXN_default_instance_;
class ContractFees;
class ContractFeesDefaultTypeInternal;
extern ContractFeesDefaultTypeInternal _ContractFees_default_instance_;
class ContractUpdateTXN;
class ContractUpdateTXNDefaultTypeInternal;
extern ContractUpdateTXNDefaultTypeInternal _ContractUpdateTXN_default_instance_;
class CurrencyEquiv;
class CurrencyEquivDefaultTypeInternal;
extern CurrencyEquivDefaultTypeInternal _CurrencyEquiv_default_instance_;
class DelegateContract;
class DelegateContractDefaultTypeInternal;
extern DelegateContractDefaultTypeInternal _DelegateContract_default_instance_;
class DelegateFees;
class DelegateFeesDefaultTypeInternal;
extern DelegateFeesDefaultTypeInternal _DelegateFees_default_instance_;
class DelegateVote;
class DelegateVoteDefaultTypeInternal;
extern DelegateVoteDefaultTypeInternal _DelegateVote_default_instance_;
class DelegatedVotingTXN;
class DelegatedVotingTXNDefaultTypeInternal;
extern DelegatedVotingTXNDefaultTypeInternal _DelegatedVotingTXN_default_instance_;
class ExpenseRatio;
class ExpenseRatioDefaultTypeInternal;
extern ExpenseRatioDefaultTypeInternal _ExpenseRatio_default_instance_;
class ExpenseRatioResult;
class ExpenseRatioResultDefaultTypeInternal;
extern ExpenseRatioResultDefaultTypeInternal _ExpenseRatioResult_default_instance_;
class ExpenseRatioTXN;
class ExpenseRatioTXNDefaultTypeInternal;
extern ExpenseRatioTXNDefaultTypeInternal _ExpenseRatioTXN_default_instance_;
class FastQuorumTXN;
class FastQuorumTXNDefaultTypeInternal;
extern FastQuorumTXNDefaultTypeInternal _FastQuorumTXN_default_instance_;
class FoundationTXN;
class FoundationTXNDefaultTypeInternal;
extern FoundationTXNDefaultTypeInternal _FoundationTXN_default_instance_;
class Governance;
class GovernanceDefaultTypeInternal;
extern GovernanceDefaultTypeInternal _Governance_default_instance_;
class GovernanceAuth;
class GovernanceAuthDefaultTypeInternal;
extern GovernanceAuthDefaultTypeInternal _GovernanceAuth_default_instance_;
class GovernanceProposal;
class GovernanceProposalDefaultTypeInternal;
extern GovernanceProposalDefaultTypeInternal _GovernanceProposal_default_instance_;
class GovernanceTXN;
class GovernanceTXNDefaultTypeInternal;
extern GovernanceTXNDefaultTypeInternal _GovernanceTXN_default_instance_;
class GovernanceVote;
class GovernanceVoteDefaultTypeInternal;
extern GovernanceVoteDefaultTypeInternal _GovernanceVote_default_instance_;
class InputTransfers;
class InputTransfersDefaultTypeInternal;
extern InputTransfersDefaultTypeInternal _InputTransfers_default_instance_;
class InstrumentContract;
class InstrumentContractDefaultTypeInternal;
extern InstrumentContractDefaultTypeInternal _InstrumentContract_default_instance_;
class ItemContractFees;
class ItemContractFeesDefaultTypeInternal;
extern ItemContractFeesDefaultTypeInternal _ItemContractFees_default_instance_;
class ItemizedMintTXN;
class ItemizedMintTXNDefaultTypeInternal;
extern ItemizedMintTXNDefaultTypeInternal _ItemizedMintTXN_default_instance_;
class KeyValuePair;
class KeyValuePairDefaultTypeInternal;
extern KeyValuePairDefaultTypeInternal _KeyValuePair_default_instance_;
class MintTXN;
class MintTXNDefaultTypeInternal;
extern MintTXNDefaultTypeInternal _MintTXN_default_instance_;
class MultiKey;
class MultiKeyDefaultTypeInternal;
extern MultiKeyDefaultTypeInternal _MultiKey_default_instance_;
class MultiPatterns;
class MultiPatternsDefaultTypeInternal;
extern MultiPatternsDefaultTypeInternal _MultiPatterns_default_instance_;
class NFTTXN;
class NFTTXNDefaultTypeInternal;
extern NFTTXNDefaultTypeInternal _NFTTXN_default_instance_;
class NewCoinTXN;
class NewCoinTXNDefaultTypeInternal;
extern NewCoinTXNDefaultTypeInternal _NewCoinTXN_default_instance_;
class OutputTransfers;
class OutputTransfersDefaultTypeInternal;
extern OutputTransfersDefaultTypeInternal _OutputTransfers_default_instance_;
class PreMintWallet;
class PreMintWalletDefaultTypeInternal;
extern PreMintWalletDefaultTypeInternal _PreMintWallet_default_instance_;
class ProposalResult;
class ProposalResultDefaultTypeInternal;
extern ProposalResultDefaultTypeInternal _ProposalResult_default_instance_;
class PublicKey;
class PublicKeyDefaultTypeInternal;
extern PublicKeyDefaultTypeInternal _PublicKey_default_instance_;
class QuashResult;
class QuashResultDefaultTypeInternal;
extern QuashResultDefaultTypeInternal _QuashResult_default_instance_;
class QuashTXN;
class QuashTXNDefaultTypeInternal;
extern QuashTXNDefaultTypeInternal _QuashTXN_default_instance_;
class RestrictedKey;
class RestrictedKeyDefaultTypeInternal;
extern RestrictedKeyDefaultTypeInternal _RestrictedKey_default_instance_;
class RevokeTXN;
class RevokeTXNDefaultTypeInternal;
extern RevokeTXNDefaultTypeInternal _RevokeTXN_default_instance_;
class SelfCurrencyEquiv;
class SelfCurrencyEquivDefaultTypeInternal;
extern SelfCurrencyEquivDefaultTypeInternal _SelfCurrencyEquiv_default_instance_;
class SmartContractExecuteTXN;
class SmartContractExecuteTXNDefaultTypeInternal;
extern SmartContractExecuteTXNDefaultTypeInternal _SmartContractExecuteTXN_default_instance_;
class SmartContractParameter;
class SmartContractParameterDefaultTypeInternal;
extern SmartContractParameterDefaultTypeInternal _SmartContractParameter_default_instance_;
class SmartContractTXN;
class SmartContractTXNDefaultTypeInternal;
extern SmartContractTXNDefaultTypeInternal _SmartContractTXN_default_instance_;
class Stage;
class StageDefaultTypeInternal;
extern StageDefaultTypeInternal _Stage_default_instance_;
class TXNS;
class TXNSDefaultTypeInternal;
extern TXNSDefaultTypeInternal _TXNS_default_instance_;
class TXNStatusFees;
class TXNStatusFeesDefaultTypeInternal;
extern TXNStatusFeesDefaultTypeInternal _TXNStatusFees_default_instance_;
class TXNWrapper;
class TXNWrapperDefaultTypeInternal;
extern TXNWrapperDefaultTypeInternal _TXNWrapper_default_instance_;
class Token;
class TokenDefaultTypeInternal;
extern TokenDefaultTypeInternal _Token_default_instance_;
class TokenCompliance;
class TokenComplianceDefaultTypeInternal;
extern TokenComplianceDefaultTypeInternal _TokenCompliance_default_instance_;
class TokenFees;
class TokenFeesDefaultTypeInternal;
extern TokenFeesDefaultTypeInternal _TokenFees_default_instance_;
class Transfer;
class TransferDefaultTypeInternal;
extern TransferDefaultTypeInternal _Transfer_default_instance_;
class TransferAuthentication;
class TransferAuthenticationDefaultTypeInternal;
extern TransferAuthenticationDefaultTypeInternal _TransferAuthentication_default_instance_;
class Validator;
class ValidatorDefaultTypeInternal;
extern ValidatorDefaultTypeInternal _Validator_default_instance_;
class ValidatorHeartbeat;
class ValidatorHeartbeatDefaultTypeInternal;
extern ValidatorHeartbeatDefaultTypeInternal _ValidatorHeartbeat_default_instance_;
class ValidatorRegistration;
class ValidatorRegistrationDefaultTypeInternal;
extern ValidatorRegistrationDefaultTypeInternal _ValidatorRegistration_default_instance_;
class VotePair;
class VotePairDefaultTypeInternal;
extern VotePairDefaultTypeInternal _VotePair_default_instance_;
class Votes;
class VotesDefaultTypeInternal;
extern VotesDefaultTypeInternal _Votes_default_instance_;
class Wallets;
class WalletsDefaultTypeInternal;
extern WalletsDefaultTypeInternal _Wallets_default_instance_;
}  // namespace zera_txn
PROTOBUF_NAMESPACE_OPEN
template<> ::zera_txn::AuthorizedCurrencyEquiv* Arena::CreateMaybeMessage<::zera_txn::AuthorizedCurrencyEquiv>(Arena*);
template<> ::zera_txn::BaseTXN* Arena::CreateMaybeMessage<::zera_txn::BaseTXN>(Arena*);
template<> ::zera_txn::BurnSBTTXN* Arena::CreateMaybeMessage<::zera_txn::BurnSBTTXN>(Arena*);
template<> ::zera_txn::ByteMultiplier* Arena::CreateMaybeMessage<::zera_txn::ByteMultiplier>(Arena*);
template<> ::zera_txn::CoinDenomination* Arena::CreateMaybeMessage<::zera_txn::CoinDenomination>(Arena*);
template<> ::zera_txn::CoinTXN* Arena::CreateMaybeMessage<::zera_txn::CoinTXN>(Arena*);
template<> ::zera_txn::Compliance* Arena::CreateMaybeMessage<::zera_txn::Compliance>(Arena*);
template<> ::zera_txn::ComplianceAssign* Arena::CreateMaybeMessage<::zera_txn::ComplianceAssign>(Arena*);
template<> ::zera_txn::ComplianceTXN* Arena::CreateMaybeMessage<::zera_txn::ComplianceTXN>(Arena*);
template<> ::zera_txn::ContractFees* Arena::CreateMaybeMessage<::zera_txn::ContractFees>(Arena*);
template<> ::zera_txn::ContractUpdateTXN* Arena::CreateMaybeMessage<::zera_txn::ContractUpdateTXN>(Arena*);
template<> ::zera_txn::CurrencyEquiv* Arena::CreateMaybeMessage<::zera_txn::CurrencyEquiv>(Arena*);
template<> ::zera_txn::DelegateContract* Arena::CreateMaybeMessage<::zera_txn::DelegateContract>(Arena*);
template<> ::zera_txn::DelegateFees* Arena::CreateMaybeMessage<::zera_txn::DelegateFees>(Arena*);
template<> ::zera_txn::DelegateVote* Arena::CreateMaybeMessage<::zera_txn::DelegateVote>(Arena*);
template<> ::zera_txn::DelegatedVotingTXN* Arena::CreateMaybeMessage<::zera_txn::DelegatedVotingTXN>(Arena*);
template<> ::zera_txn::ExpenseRatio* Arena::CreateMaybeMessage<::zera_txn::ExpenseRatio>(Arena*);
template<> ::zera_txn::ExpenseRatioResult* Arena::CreateMaybeMessage<::zera_txn::ExpenseRatioResult>(Arena*);
template<> ::zera_txn::ExpenseRatioTXN* Arena::CreateMaybeMessage<::zera_txn::ExpenseRatioTXN>(Arena*);
template<> ::zera_txn::FastQuorumTXN* Arena::CreateMaybeMessage<::zera_txn::FastQuorumTXN>(Arena*);
template<> ::zera_txn::FoundationTXN* Arena::CreateMaybeMessage<::zera_txn::FoundationTXN>(Arena*);
template<> ::zera_txn::Governance* Arena::CreateMaybeMessage<::zera_txn::Governance>(Arena*);
template<> ::zera_txn::GovernanceAuth* Arena::CreateMaybeMessage<::zera_txn::GovernanceAuth>(Arena*);
template<> ::zera_txn::GovernanceProposal* Arena::CreateMaybeMessage<::zera_txn::GovernanceProposal>(Arena*);
template<> ::zera_txn::GovernanceTXN* Arena::CreateMaybeMessage<::zera_txn::GovernanceTXN>(Arena*);
template<> ::zera_txn::GovernanceVote* Arena::CreateMaybeMessage<::zera_txn::GovernanceVote>(Arena*);
template<> ::zera_txn::InputTransfers* Arena::CreateMaybeMessage<::zera_txn::InputTransfers>(Arena*);
template<> ::zera_txn::InstrumentContract* Arena::CreateMaybeMessage<::zera_txn::InstrumentContract>(Arena*);
template<> ::zera_txn::ItemContractFees* Arena::CreateMaybeMessage<::zera_txn::ItemContractFees>(Arena*);
template<> ::zera_txn::ItemizedMintTXN* Arena::CreateMaybeMessage<::zera_txn::ItemizedMintTXN>(Arena*);
template<> ::zera_txn::KeyValuePair* Arena::CreateMaybeMessage<::zera_txn::KeyValuePair>(Arena*);
template<> ::zera_txn::MintTXN* Arena::CreateMaybeMessage<::zera_txn::MintTXN>(Arena*);
template<> ::zera_txn::MultiKey* Arena::CreateMaybeMessage<::zera_txn::MultiKey>(Arena*);
template<> ::zera_txn::MultiPatterns* Arena::CreateMaybeMessage<::zera_txn::MultiPatterns>(Arena*);
template<> ::zera_txn::NFTTXN* Arena::CreateMaybeMessage<::zera_txn::NFTTXN>(Arena*);
template<> ::zera_txn::NewCoinTXN* Arena::CreateMaybeMessage<::zera_txn::NewCoinTXN>(Arena*);
template<> ::zera_txn::OutputTransfers* Arena::CreateMaybeMessage<::zera_txn::OutputTransfers>(Arena*);
template<> ::zera_txn::PreMintWallet* Arena::CreateMaybeMessage<::zera_txn::PreMintWallet>(Arena*);
template<> ::zera_txn::ProposalResult* Arena::CreateMaybeMessage<::zera_txn::ProposalResult>(Arena*);
template<> ::zera_txn::PublicKey* Arena::CreateMaybeMessage<::zera_txn::PublicKey>(Arena*);
template<> ::zera_txn::QuashResult* Arena::CreateMaybeMessage<::zera_txn::QuashResult>(Arena*);
template<> ::zera_txn::QuashTXN* Arena::CreateMaybeMessage<::zera_txn::QuashTXN>(Arena*);
template<> ::zera_txn::RestrictedKey* Arena::CreateMaybeMessage<::zera_txn::RestrictedKey>(Arena*);
template<> ::zera_txn::RevokeTXN* Arena::CreateMaybeMessage<::zera_txn::RevokeTXN>(Arena*);
template<> ::zera_txn::SelfCurrencyEquiv* Arena::CreateMaybeMessage<::zera_txn::SelfCurrencyEquiv>(Arena*);
template<> ::zera_txn::SmartContractExecuteTXN* Arena::CreateMaybeMessage<::zera_txn::SmartContractExecuteTXN>(Arena*);
template<> ::zera_txn::SmartContractParameter* Arena::CreateMaybeMessage<::zera_txn::SmartContractParameter>(Arena*);
template<> ::zera_txn::SmartContractTXN* Arena::CreateMaybeMessage<::zera_txn::SmartContractTXN>(Arena*);
template<> ::zera_txn::Stage* Arena::CreateMaybeMessage<::zera_txn::Stage>(Arena*);
template<> ::zera_txn::TXNS* Arena::CreateMaybeMessage<::zera_txn::TXNS>(Arena*);
template<> ::zera_txn::TXNStatusFees* Arena::CreateMaybeMessage<::zera_txn::TXNStatusFees>(Arena*);
template<> ::zera_txn::TXNWrapper* Arena::CreateMaybeMessage<::zera_txn::TXNWrapper>(Arena*);
template<> ::zera_txn::Token* Arena::CreateMaybeMessage<::zera_txn::Token>(Arena*);
template<> ::zera_txn::TokenCompliance* Arena::CreateMaybeMessage<::zera_txn::TokenCompliance>(Arena*);
template<> ::zera_txn::TokenFees* Arena::CreateMaybeMessage<::zera_txn::TokenFees>(Arena*);
template<> ::zera_txn::Transfer* Arena::CreateMaybeMessage<::zera_txn::Transfer>(Arena*);
template<> ::zera_txn::TransferAuthentication* Arena::CreateMaybeMessage<::zera_txn::TransferAuthentication>(Arena*);
template<> ::zera_txn::Validator* Arena::CreateMaybeMessage<::zera_txn::Validator>(Arena*);
template<> ::zera_txn::ValidatorHeartbeat* Arena::CreateMaybeMessage<::zera_txn::ValidatorHeartbeat>(Arena*);
template<> ::zera_txn::ValidatorRegistration* Arena::CreateMaybeMessage<::zera_txn::ValidatorRegistration>(Arena*);
template<> ::zera_txn::VotePair* Arena::CreateMaybeMessage<::zera_txn::VotePair>(Arena*);
template<> ::zera_txn::Votes* Arena::CreateMaybeMessage<::zera_txn::Votes>(Arena*);
template<> ::zera_txn::Wallets* Arena::CreateMaybeMessage<::zera_txn::Wallets>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zera_txn {

enum TXN_STATUS : int {
  OK = 0,
  INVALID_PARAMETERS = 1,
  INSUFFICIENT_AMOUNT = 2,
  INSUFFICIENT_CONTRACT_FEES = 3,
  AUTHORIZED_INSUFFICIENT_FEES = 4,
  AUTHORIZED_INSUFFICIENT_CONTRACT_FEES = 5,
  INVALID_CONTRACT = 6,
  INVALID_AUTH_KEY = 7,
  INVALID_WALLET_ADDRESS = 8,
  INVALID_MULTI_TRANSACTION = 9,
  INVALID_CONTRACT_PARAMETERS = 10,
  INVALID_CONTRACT_FEE_ID = 11,
  INVALID_UINT256 = 12,
  EXCEEDED_MAX_SUPPLY = 13,
  INVALID_NFT = 14,
  NFT_OWNERSHIP = 15,
  VALIDATOR_ADDRESS = 16,
  CONTRACT_HAS_NO_GOVERNANCE = 17,
  INVALID_BASE_FEE_ID = 18,
  EXPENSE_RATIO_DUPLICATE = 19,
  RESTRICTED_SYMBOL = 20,
  INVALID_PROPOSAL_ID = 21,
  PROPOSAL_NOT_IN_VOTING_PERIOD = 22,
  TIME_DELAY_INITIALIZED = 23,
  INVALID_TXN_HASH = 24,
  INVALID_TXN_TYPE = 25,
  TIME_DELAY_EXPIRED = 26,
  DUPLICATE_AUTH_KEY = 27,
  KEY_WEIGHT_TOO_LOW = 28,
  INVALID_ITEM = 29,
  INVALID_PROPOSAL = 30,
  PROPOSAL_DOES_NOT_BELONG_TO_SENDER = 31,
  INVALID_ADDRESS = 32,
  NO_CHANGE_TO_COMPLIANCE = 33,
  COMPLIANCE_CHECK_FAILED = 34,
  INVALID_SAFE_SEND = 35,
  INVALID_TXN_DATA = 36,
  TXN_STATUS_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TXN_STATUS_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TXN_STATUS_IsValid(int value);
constexpr TXN_STATUS TXN_STATUS_MIN = OK;
constexpr TXN_STATUS TXN_STATUS_MAX = INVALID_TXN_DATA;
constexpr int TXN_STATUS_ARRAYSIZE = TXN_STATUS_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TXN_STATUS_descriptor();
template<typename T>
inline const std::string& TXN_STATUS_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TXN_STATUS>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TXN_STATUS_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TXN_STATUS_descriptor(), enum_t_value);
}
inline bool TXN_STATUS_Parse(
    const std::string& name, TXN_STATUS* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TXN_STATUS>(
    TXN_STATUS_descriptor(), name, value);
}
enum TRANSACTION_TYPE : int {
  COIN_TYPE = 0,
  FOUNDATION_TYPE = 2,
  MINT_TYPE = 1,
  ITEM_MINT_TYPE = 3,
  CONTRACT_TXN_TYPE = 4,
  VOTE_TYPE = 5,
  PROPOSAL_TYPE = 6,
  SMART_CONTRACT_TYPE = 7,
  SMART_CONTRACT_EXECUTE_TYPE = 8,
  SELF_CURRENCY_EQUIV_TYPE = 9,
  AUTHORIZED_CURRENCY_EQUIV_TYPE = 10,
  EXPENSE_RATIO_TYPE = 11,
  NFT_TYPE = 12,
  UPDATE_CONTRACT_TYPE = 13,
  VALIDATOR_REGISTRATION_TYPE = 14,
  VALIDATOR_HEARTBEAT_TYPE = 15,
  PROPOSAL_RESULT_TYPE = 16,
  DELEGATED_VOTING_TYPE = 17,
  REVOKE_TYPE = 18,
  QUASH_TYPE = 19,
  FAST_QUORUM_TYPE = 20,
  COMPLIANCE_TYPE = 21,
  SBT_BURN_TYPE = 22,
  NEW_COIN_TYPE = 23,
  UKNOWN_TYPE = 24,
  TRANSACTION_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TRANSACTION_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TRANSACTION_TYPE_IsValid(int value);
constexpr TRANSACTION_TYPE TRANSACTION_TYPE_MIN = COIN_TYPE;
constexpr TRANSACTION_TYPE TRANSACTION_TYPE_MAX = UKNOWN_TYPE;
constexpr int TRANSACTION_TYPE_ARRAYSIZE = TRANSACTION_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TRANSACTION_TYPE_descriptor();
template<typename T>
inline const std::string& TRANSACTION_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TRANSACTION_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TRANSACTION_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TRANSACTION_TYPE_descriptor(), enum_t_value);
}
inline bool TRANSACTION_TYPE_Parse(
    const std::string& name, TRANSACTION_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TRANSACTION_TYPE>(
    TRANSACTION_TYPE_descriptor(), name, value);
}
enum LANGUAGE : int {
  CPLUSPLUS = 0,
  RUST = 1,
  PYTHON = 2,
  JAVASCRIPT = 3,
  LANGUAGE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LANGUAGE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LANGUAGE_IsValid(int value);
constexpr LANGUAGE LANGUAGE_MIN = CPLUSPLUS;
constexpr LANGUAGE LANGUAGE_MAX = JAVASCRIPT;
constexpr int LANGUAGE_ARRAYSIZE = LANGUAGE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LANGUAGE_descriptor();
template<typename T>
inline const std::string& LANGUAGE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LANGUAGE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LANGUAGE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LANGUAGE_descriptor(), enum_t_value);
}
inline bool LANGUAGE_Parse(
    const std::string& name, LANGUAGE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LANGUAGE>(
    LANGUAGE_descriptor(), name, value);
}
enum PROPOSAL_PERIOD : int {
  DAYS = 0,
  MONTHS = 1,
  PROPOSAL_PERIOD_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PROPOSAL_PERIOD_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PROPOSAL_PERIOD_IsValid(int value);
constexpr PROPOSAL_PERIOD PROPOSAL_PERIOD_MIN = DAYS;
constexpr PROPOSAL_PERIOD PROPOSAL_PERIOD_MAX = MONTHS;
constexpr int PROPOSAL_PERIOD_ARRAYSIZE = PROPOSAL_PERIOD_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PROPOSAL_PERIOD_descriptor();
template<typename T>
inline const std::string& PROPOSAL_PERIOD_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PROPOSAL_PERIOD>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PROPOSAL_PERIOD_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PROPOSAL_PERIOD_descriptor(), enum_t_value);
}
inline bool PROPOSAL_PERIOD_Parse(
    const std::string& name, PROPOSAL_PERIOD* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PROPOSAL_PERIOD>(
    PROPOSAL_PERIOD_descriptor(), name, value);
}
enum VARIABLE_TYPE : int {
  INT = 0,
  SHORT = 1,
  LONG = 2,
  LONG_LONG = 3,
  BOOL = 4,
  STRING = 5,
  VARIABLE_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  VARIABLE_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool VARIABLE_TYPE_IsValid(int value);
constexpr VARIABLE_TYPE VARIABLE_TYPE_MIN = INT;
constexpr VARIABLE_TYPE VARIABLE_TYPE_MAX = STRING;
constexpr int VARIABLE_TYPE_ARRAYSIZE = VARIABLE_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VARIABLE_TYPE_descriptor();
template<typename T>
inline const std::string& VARIABLE_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VARIABLE_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VARIABLE_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VARIABLE_TYPE_descriptor(), enum_t_value);
}
inline bool VARIABLE_TYPE_Parse(
    const std::string& name, VARIABLE_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VARIABLE_TYPE>(
    VARIABLE_TYPE_descriptor(), name, value);
}
enum CONTRACT_FEE_TYPE : int {
  FIXED = 0,
  CUR_EQUIVALENT = 1,
  PERCENTAGE = 2,
  CONTRACT_FEE_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CONTRACT_FEE_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CONTRACT_FEE_TYPE_IsValid(int value);
constexpr CONTRACT_FEE_TYPE CONTRACT_FEE_TYPE_MIN = FIXED;
constexpr CONTRACT_FEE_TYPE CONTRACT_FEE_TYPE_MAX = PERCENTAGE;
constexpr int CONTRACT_FEE_TYPE_ARRAYSIZE = CONTRACT_FEE_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CONTRACT_FEE_TYPE_descriptor();
template<typename T>
inline const std::string& CONTRACT_FEE_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CONTRACT_FEE_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CONTRACT_FEE_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CONTRACT_FEE_TYPE_descriptor(), enum_t_value);
}
inline bool CONTRACT_FEE_TYPE_Parse(
    const std::string& name, CONTRACT_FEE_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CONTRACT_FEE_TYPE>(
    CONTRACT_FEE_TYPE_descriptor(), name, value);
}
enum GOVERNANCE_TYPE : int {
  STAGED = 0,
  CYCLE = 1,
  STAGGERED = 2,
  ADAPTIVE = 3,
  GOVERNANCE_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GOVERNANCE_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GOVERNANCE_TYPE_IsValid(int value);
constexpr GOVERNANCE_TYPE GOVERNANCE_TYPE_MIN = STAGED;
constexpr GOVERNANCE_TYPE GOVERNANCE_TYPE_MAX = ADAPTIVE;
constexpr int GOVERNANCE_TYPE_ARRAYSIZE = GOVERNANCE_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GOVERNANCE_TYPE_descriptor();
template<typename T>
inline const std::string& GOVERNANCE_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GOVERNANCE_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GOVERNANCE_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GOVERNANCE_TYPE_descriptor(), enum_t_value);
}
inline bool GOVERNANCE_TYPE_Parse(
    const std::string& name, GOVERNANCE_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GOVERNANCE_TYPE>(
    GOVERNANCE_TYPE_descriptor(), name, value);
}
enum CONTRACT_TYPE : int {
  TOKEN = 0,
  NFT = 1,
  SBT = 2,
  CONTRACT_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CONTRACT_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CONTRACT_TYPE_IsValid(int value);
constexpr CONTRACT_TYPE CONTRACT_TYPE_MIN = TOKEN;
constexpr CONTRACT_TYPE CONTRACT_TYPE_MAX = SBT;
constexpr int CONTRACT_TYPE_ARRAYSIZE = CONTRACT_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CONTRACT_TYPE_descriptor();
template<typename T>
inline const std::string& CONTRACT_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CONTRACT_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CONTRACT_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CONTRACT_TYPE_descriptor(), enum_t_value);
}
inline bool CONTRACT_TYPE_Parse(
    const std::string& name, CONTRACT_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CONTRACT_TYPE>(
    CONTRACT_TYPE_descriptor(), name, value);
}
// ===================================================================

class DelegateContract PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.DelegateContract) */ {
 public:
  inline DelegateContract() : DelegateContract(nullptr) {};
  virtual ~DelegateContract();

  DelegateContract(const DelegateContract& from);
  DelegateContract(DelegateContract&& from) noexcept
    : DelegateContract() {
    *this = ::std::move(from);
  }

  inline DelegateContract& operator=(const DelegateContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelegateContract& operator=(DelegateContract&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DelegateContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DelegateContract* internal_default_instance() {
    return reinterpret_cast<const DelegateContract*>(
               &_DelegateContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DelegateContract& a, DelegateContract& b) {
    a.Swap(&b);
  }
  inline void Swap(DelegateContract* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelegateContract* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DelegateContract* New() const final {
    return CreateMaybeMessage<DelegateContract>(nullptr);
  }

  DelegateContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DelegateContract>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DelegateContract& from);
  void MergeFrom(const DelegateContract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelegateContract* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.DelegateContract";
  }
  protected:
  explicit DelegateContract(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractIdFieldNumber = 2,
    kPriorityFieldNumber = 1,
  };
  // string contract_id = 2;
  void clear_contract_id();
  const std::string& contract_id() const;
  void set_contract_id(const std::string& value);
  void set_contract_id(std::string&& value);
  void set_contract_id(const char* value);
  void set_contract_id(const char* value, size_t size);
  std::string* mutable_contract_id();
  std::string* release_contract_id();
  void set_allocated_contract_id(std::string* contract_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contract_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contract_id(
      std::string* contract_id);
  private:
  const std::string& _internal_contract_id() const;
  void _internal_set_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_id();
  public:

  // int32 priority = 1;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.DelegateContract)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 priority_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class DelegatedVotingTXN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.DelegatedVotingTXN) */ {
 public:
  inline DelegatedVotingTXN() : DelegatedVotingTXN(nullptr) {};
  virtual ~DelegatedVotingTXN();

  DelegatedVotingTXN(const DelegatedVotingTXN& from);
  DelegatedVotingTXN(DelegatedVotingTXN&& from) noexcept
    : DelegatedVotingTXN() {
    *this = ::std::move(from);
  }

  inline DelegatedVotingTXN& operator=(const DelegatedVotingTXN& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelegatedVotingTXN& operator=(DelegatedVotingTXN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DelegatedVotingTXN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DelegatedVotingTXN* internal_default_instance() {
    return reinterpret_cast<const DelegatedVotingTXN*>(
               &_DelegatedVotingTXN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DelegatedVotingTXN& a, DelegatedVotingTXN& b) {
    a.Swap(&b);
  }
  inline void Swap(DelegatedVotingTXN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelegatedVotingTXN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DelegatedVotingTXN* New() const final {
    return CreateMaybeMessage<DelegatedVotingTXN>(nullptr);
  }

  DelegatedVotingTXN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DelegatedVotingTXN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DelegatedVotingTXN& from);
  void MergeFrom(const DelegatedVotingTXN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelegatedVotingTXN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.DelegatedVotingTXN";
  }
  protected:
  explicit DelegatedVotingTXN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelegateVotesFieldNumber = 2,
    kDelegateFeesFieldNumber = 3,
    kBaseFieldNumber = 1,
  };
  // repeated .zera_txn.DelegateVote delegate_votes = 2;
  int delegate_votes_size() const;
  private:
  int _internal_delegate_votes_size() const;
  public:
  void clear_delegate_votes();
  ::zera_txn::DelegateVote* mutable_delegate_votes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::DelegateVote >*
      mutable_delegate_votes();
  private:
  const ::zera_txn::DelegateVote& _internal_delegate_votes(int index) const;
  ::zera_txn::DelegateVote* _internal_add_delegate_votes();
  public:
  const ::zera_txn::DelegateVote& delegate_votes(int index) const;
  ::zera_txn::DelegateVote* add_delegate_votes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::DelegateVote >&
      delegate_votes() const;

  // repeated .zera_txn.DelegateFees delegate_fees = 3;
  int delegate_fees_size() const;
  private:
  int _internal_delegate_fees_size() const;
  public:
  void clear_delegate_fees();
  ::zera_txn::DelegateFees* mutable_delegate_fees(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::DelegateFees >*
      mutable_delegate_fees();
  private:
  const ::zera_txn::DelegateFees& _internal_delegate_fees(int index) const;
  ::zera_txn::DelegateFees* _internal_add_delegate_fees();
  public:
  const ::zera_txn::DelegateFees& delegate_fees(int index) const;
  ::zera_txn::DelegateFees* add_delegate_fees();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::DelegateFees >&
      delegate_fees() const;

  // .zera_txn.BaseTXN base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::zera_txn::BaseTXN& base() const;
  ::zera_txn::BaseTXN* release_base();
  ::zera_txn::BaseTXN* mutable_base();
  void set_allocated_base(::zera_txn::BaseTXN* base);
  private:
  const ::zera_txn::BaseTXN& _internal_base() const;
  ::zera_txn::BaseTXN* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::zera_txn::BaseTXN* base);
  ::zera_txn::BaseTXN* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:zera_txn.DelegatedVotingTXN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::DelegateVote > delegate_votes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::DelegateFees > delegate_fees_;
  ::zera_txn::BaseTXN* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class DelegateVote PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.DelegateVote) */ {
 public:
  inline DelegateVote() : DelegateVote(nullptr) {};
  virtual ~DelegateVote();

  DelegateVote(const DelegateVote& from);
  DelegateVote(DelegateVote&& from) noexcept
    : DelegateVote() {
    *this = ::std::move(from);
  }

  inline DelegateVote& operator=(const DelegateVote& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelegateVote& operator=(DelegateVote&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DelegateVote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DelegateVote* internal_default_instance() {
    return reinterpret_cast<const DelegateVote*>(
               &_DelegateVote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DelegateVote& a, DelegateVote& b) {
    a.Swap(&b);
  }
  inline void Swap(DelegateVote* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelegateVote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DelegateVote* New() const final {
    return CreateMaybeMessage<DelegateVote>(nullptr);
  }

  DelegateVote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DelegateVote>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DelegateVote& from);
  void MergeFrom(const DelegateVote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelegateVote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.DelegateVote";
  }
  protected:
  explicit DelegateVote(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractsFieldNumber = 2,
    kAddressFieldNumber = 1,
  };
  // repeated .zera_txn.DelegateContract contracts = 2;
  int contracts_size() const;
  private:
  int _internal_contracts_size() const;
  public:
  void clear_contracts();
  ::zera_txn::DelegateContract* mutable_contracts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::DelegateContract >*
      mutable_contracts();
  private:
  const ::zera_txn::DelegateContract& _internal_contracts(int index) const;
  ::zera_txn::DelegateContract* _internal_add_contracts();
  public:
  const ::zera_txn::DelegateContract& contracts(int index) const;
  ::zera_txn::DelegateContract* add_contracts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::DelegateContract >&
      contracts() const;

  // bytes address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_address(
      std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.DelegateVote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::DelegateContract > contracts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class DelegateFees PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.DelegateFees) */ {
 public:
  inline DelegateFees() : DelegateFees(nullptr) {};
  virtual ~DelegateFees();

  DelegateFees(const DelegateFees& from);
  DelegateFees(DelegateFees&& from) noexcept
    : DelegateFees() {
    *this = ::std::move(from);
  }

  inline DelegateFees& operator=(const DelegateFees& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelegateFees& operator=(DelegateFees&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DelegateFees& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DelegateFees* internal_default_instance() {
    return reinterpret_cast<const DelegateFees*>(
               &_DelegateFees_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DelegateFees& a, DelegateFees& b) {
    a.Swap(&b);
  }
  inline void Swap(DelegateFees* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelegateFees* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DelegateFees* New() const final {
    return CreateMaybeMessage<DelegateFees>(nullptr);
  }

  DelegateFees* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DelegateFees>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DelegateFees& from);
  void MergeFrom(const DelegateFees& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelegateFees* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.DelegateFees";
  }
  protected:
  explicit DelegateFees(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractIdFieldNumber = 1,
    kAuthAmountFieldNumber = 2,
  };
  // string contract_id = 1;
  void clear_contract_id();
  const std::string& contract_id() const;
  void set_contract_id(const std::string& value);
  void set_contract_id(std::string&& value);
  void set_contract_id(const char* value);
  void set_contract_id(const char* value, size_t size);
  std::string* mutable_contract_id();
  std::string* release_contract_id();
  void set_allocated_contract_id(std::string* contract_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contract_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contract_id(
      std::string* contract_id);
  private:
  const std::string& _internal_contract_id() const;
  void _internal_set_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_id();
  public:

  // string auth_amount = 2;
  void clear_auth_amount();
  const std::string& auth_amount() const;
  void set_auth_amount(const std::string& value);
  void set_auth_amount(std::string&& value);
  void set_auth_amount(const char* value);
  void set_auth_amount(const char* value, size_t size);
  std::string* mutable_auth_amount();
  std::string* release_auth_amount();
  void set_allocated_auth_amount(std::string* auth_amount);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_auth_amount();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_auth_amount(
      std::string* auth_amount);
  private:
  const std::string& _internal_auth_amount() const;
  void _internal_set_auth_amount(const std::string& value);
  std::string* _internal_mutable_auth_amount();
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.DelegateFees)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class Compliance PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.Compliance) */ {
 public:
  inline Compliance() : Compliance(nullptr) {};
  virtual ~Compliance();

  Compliance(const Compliance& from);
  Compliance(Compliance&& from) noexcept
    : Compliance() {
    *this = ::std::move(from);
  }

  inline Compliance& operator=(const Compliance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Compliance& operator=(Compliance&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Compliance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Compliance* internal_default_instance() {
    return reinterpret_cast<const Compliance*>(
               &_Compliance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Compliance& a, Compliance& b) {
    a.Swap(&b);
  }
  inline void Swap(Compliance* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Compliance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Compliance* New() const final {
    return CreateMaybeMessage<Compliance>(nullptr);
  }

  Compliance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Compliance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Compliance& from);
  void MergeFrom(const Compliance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Compliance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.Compliance";
  }
  protected:
  explicit Compliance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractIdFieldNumber = 1,
    kExpiryFieldNumber = 3,
    kComplianceLevelFieldNumber = 2,
  };
  // string contract_id = 1;
  void clear_contract_id();
  const std::string& contract_id() const;
  void set_contract_id(const std::string& value);
  void set_contract_id(std::string&& value);
  void set_contract_id(const char* value);
  void set_contract_id(const char* value, size_t size);
  std::string* mutable_contract_id();
  std::string* release_contract_id();
  void set_allocated_contract_id(std::string* contract_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contract_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contract_id(
      std::string* contract_id);
  private:
  const std::string& _internal_contract_id() const;
  void _internal_set_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_id();
  public:

  // .google.protobuf.Timestamp expiry = 3;
  bool has_expiry() const;
  private:
  bool _internal_has_expiry() const;
  public:
  void clear_expiry();
  const PROTOBUF_NAMESPACE_ID::Timestamp& expiry() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_expiry();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expiry();
  void set_allocated_expiry(PROTOBUF_NAMESPACE_ID::Timestamp* expiry);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expiry() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expiry();
  public:
  void unsafe_arena_set_allocated_expiry(
      PROTOBUF_NAMESPACE_ID::Timestamp* expiry);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expiry();

  // uint32 compliance_level = 2;
  void clear_compliance_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 compliance_level() const;
  void set_compliance_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_compliance_level() const;
  void _internal_set_compliance_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.Compliance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* expiry_;
  ::PROTOBUF_NAMESPACE_ID::uint32 compliance_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class TokenCompliance PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.TokenCompliance) */ {
 public:
  inline TokenCompliance() : TokenCompliance(nullptr) {};
  virtual ~TokenCompliance();

  TokenCompliance(const TokenCompliance& from);
  TokenCompliance(TokenCompliance&& from) noexcept
    : TokenCompliance() {
    *this = ::std::move(from);
  }

  inline TokenCompliance& operator=(const TokenCompliance& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenCompliance& operator=(TokenCompliance&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TokenCompliance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TokenCompliance* internal_default_instance() {
    return reinterpret_cast<const TokenCompliance*>(
               &_TokenCompliance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TokenCompliance& a, TokenCompliance& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenCompliance* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenCompliance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TokenCompliance* New() const final {
    return CreateMaybeMessage<TokenCompliance>(nullptr);
  }

  TokenCompliance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TokenCompliance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TokenCompliance& from);
  void MergeFrom(const TokenCompliance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenCompliance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.TokenCompliance";
  }
  protected:
  explicit TokenCompliance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComplianceFieldNumber = 1,
  };
  // repeated .zera_txn.Compliance compliance = 1;
  int compliance_size() const;
  private:
  int _internal_compliance_size() const;
  public:
  void clear_compliance();
  ::zera_txn::Compliance* mutable_compliance(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::Compliance >*
      mutable_compliance();
  private:
  const ::zera_txn::Compliance& _internal_compliance(int index) const;
  ::zera_txn::Compliance* _internal_add_compliance();
  public:
  const ::zera_txn::Compliance& compliance(int index) const;
  ::zera_txn::Compliance* add_compliance();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::Compliance >&
      compliance() const;

  // @@protoc_insertion_point(class_scope:zera_txn.TokenCompliance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::Compliance > compliance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class ExpenseRatio PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.ExpenseRatio) */ {
 public:
  inline ExpenseRatio() : ExpenseRatio(nullptr) {};
  virtual ~ExpenseRatio();

  ExpenseRatio(const ExpenseRatio& from);
  ExpenseRatio(ExpenseRatio&& from) noexcept
    : ExpenseRatio() {
    *this = ::std::move(from);
  }

  inline ExpenseRatio& operator=(const ExpenseRatio& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExpenseRatio& operator=(ExpenseRatio&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExpenseRatio& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExpenseRatio* internal_default_instance() {
    return reinterpret_cast<const ExpenseRatio*>(
               &_ExpenseRatio_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ExpenseRatio& a, ExpenseRatio& b) {
    a.Swap(&b);
  }
  inline void Swap(ExpenseRatio* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExpenseRatio* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExpenseRatio* New() const final {
    return CreateMaybeMessage<ExpenseRatio>(nullptr);
  }

  ExpenseRatio* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExpenseRatio>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExpenseRatio& from);
  void MergeFrom(const ExpenseRatio& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExpenseRatio* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.ExpenseRatio";
  }
  protected:
  explicit ExpenseRatio(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDayFieldNumber = 1,
    kMonthFieldNumber = 2,
    kPercentFieldNumber = 3,
  };
  // uint32 day = 1;
  void clear_day();
  ::PROTOBUF_NAMESPACE_ID::uint32 day() const;
  void set_day(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_day() const;
  void _internal_set_day(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 month = 2;
  void clear_month();
  ::PROTOBUF_NAMESPACE_ID::uint32 month() const;
  void set_month(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_month() const;
  void _internal_set_month(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 percent = 3;
  void clear_percent();
  ::PROTOBUF_NAMESPACE_ID::uint32 percent() const;
  void set_percent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_percent() const;
  void _internal_set_percent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.ExpenseRatio)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 day_;
  ::PROTOBUF_NAMESPACE_ID::uint32 month_;
  ::PROTOBUF_NAMESPACE_ID::uint32 percent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class KeyValuePair PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.KeyValuePair) */ {
 public:
  inline KeyValuePair() : KeyValuePair(nullptr) {};
  virtual ~KeyValuePair();

  KeyValuePair(const KeyValuePair& from);
  KeyValuePair(KeyValuePair&& from) noexcept
    : KeyValuePair() {
    *this = ::std::move(from);
  }

  inline KeyValuePair& operator=(const KeyValuePair& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValuePair& operator=(KeyValuePair&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyValuePair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyValuePair* internal_default_instance() {
    return reinterpret_cast<const KeyValuePair*>(
               &_KeyValuePair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(KeyValuePair& a, KeyValuePair& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyValuePair* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyValuePair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyValuePair* New() const final {
    return CreateMaybeMessage<KeyValuePair>(nullptr);
  }

  KeyValuePair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyValuePair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyValuePair& from);
  void MergeFrom(const KeyValuePair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyValuePair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.KeyValuePair";
  }
  protected:
  explicit KeyValuePair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.KeyValuePair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class ByteMultiplier PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.ByteMultiplier) */ {
 public:
  inline ByteMultiplier() : ByteMultiplier(nullptr) {};
  virtual ~ByteMultiplier();

  ByteMultiplier(const ByteMultiplier& from);
  ByteMultiplier(ByteMultiplier&& from) noexcept
    : ByteMultiplier() {
    *this = ::std::move(from);
  }

  inline ByteMultiplier& operator=(const ByteMultiplier& from) {
    CopyFrom(from);
    return *this;
  }
  inline ByteMultiplier& operator=(ByteMultiplier&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ByteMultiplier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ByteMultiplier* internal_default_instance() {
    return reinterpret_cast<const ByteMultiplier*>(
               &_ByteMultiplier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ByteMultiplier& a, ByteMultiplier& b) {
    a.Swap(&b);
  }
  inline void Swap(ByteMultiplier* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ByteMultiplier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ByteMultiplier* New() const final {
    return CreateMaybeMessage<ByteMultiplier>(nullptr);
  }

  ByteMultiplier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ByteMultiplier>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ByteMultiplier& from);
  void MergeFrom(const ByteMultiplier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ByteMultiplier* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.ByteMultiplier";
  }
  protected:
  explicit ByteMultiplier(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMultiplierFieldNumber = 2,
    kTxnTypeFieldNumber = 1,
  };
  // string multiplier = 2;
  void clear_multiplier();
  const std::string& multiplier() const;
  void set_multiplier(const std::string& value);
  void set_multiplier(std::string&& value);
  void set_multiplier(const char* value);
  void set_multiplier(const char* value, size_t size);
  std::string* mutable_multiplier();
  std::string* release_multiplier();
  void set_allocated_multiplier(std::string* multiplier);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_multiplier();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_multiplier(
      std::string* multiplier);
  private:
  const std::string& _internal_multiplier() const;
  void _internal_set_multiplier(const std::string& value);
  std::string* _internal_mutable_multiplier();
  public:

  // .zera_txn.TRANSACTION_TYPE txn_type = 1;
  void clear_txn_type();
  ::zera_txn::TRANSACTION_TYPE txn_type() const;
  void set_txn_type(::zera_txn::TRANSACTION_TYPE value);
  private:
  ::zera_txn::TRANSACTION_TYPE _internal_txn_type() const;
  void _internal_set_txn_type(::zera_txn::TRANSACTION_TYPE value);
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.ByteMultiplier)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr multiplier_;
  int txn_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class FoundationTXN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.FoundationTXN) */ {
 public:
  inline FoundationTXN() : FoundationTXN(nullptr) {};
  virtual ~FoundationTXN();

  FoundationTXN(const FoundationTXN& from);
  FoundationTXN(FoundationTXN&& from) noexcept
    : FoundationTXN() {
    *this = ::std::move(from);
  }

  inline FoundationTXN& operator=(const FoundationTXN& from) {
    CopyFrom(from);
    return *this;
  }
  inline FoundationTXN& operator=(FoundationTXN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FoundationTXN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FoundationTXN* internal_default_instance() {
    return reinterpret_cast<const FoundationTXN*>(
               &_FoundationTXN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(FoundationTXN& a, FoundationTXN& b) {
    a.Swap(&b);
  }
  inline void Swap(FoundationTXN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FoundationTXN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FoundationTXN* New() const final {
    return CreateMaybeMessage<FoundationTXN>(nullptr);
  }

  FoundationTXN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FoundationTXN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FoundationTXN& from);
  void MergeFrom(const FoundationTXN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FoundationTXN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.FoundationTXN";
  }
  protected:
  explicit FoundationTXN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRestrictedSymbolsFieldNumber = 2,
    kByteMultiplierFieldNumber = 3,
    kFeeISO4217FieldNumber = 4,
    kBaseFieldNumber = 1,
  };
  // repeated string restricted_symbols = 2;
  int restricted_symbols_size() const;
  private:
  int _internal_restricted_symbols_size() const;
  public:
  void clear_restricted_symbols();
  const std::string& restricted_symbols(int index) const;
  std::string* mutable_restricted_symbols(int index);
  void set_restricted_symbols(int index, const std::string& value);
  void set_restricted_symbols(int index, std::string&& value);
  void set_restricted_symbols(int index, const char* value);
  void set_restricted_symbols(int index, const char* value, size_t size);
  std::string* add_restricted_symbols();
  void add_restricted_symbols(const std::string& value);
  void add_restricted_symbols(std::string&& value);
  void add_restricted_symbols(const char* value);
  void add_restricted_symbols(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& restricted_symbols() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_restricted_symbols();
  private:
  const std::string& _internal_restricted_symbols(int index) const;
  std::string* _internal_add_restricted_symbols();
  public:

  // repeated .zera_txn.ByteMultiplier byte_multiplier = 3;
  int byte_multiplier_size() const;
  private:
  int _internal_byte_multiplier_size() const;
  public:
  void clear_byte_multiplier();
  ::zera_txn::ByteMultiplier* mutable_byte_multiplier(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ByteMultiplier >*
      mutable_byte_multiplier();
  private:
  const ::zera_txn::ByteMultiplier& _internal_byte_multiplier(int index) const;
  ::zera_txn::ByteMultiplier* _internal_add_byte_multiplier();
  public:
  const ::zera_txn::ByteMultiplier& byte_multiplier(int index) const;
  ::zera_txn::ByteMultiplier* add_byte_multiplier();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ByteMultiplier >&
      byte_multiplier() const;

  // string fee_ISO4217 = 4;
  bool has_fee_iso4217() const;
  private:
  bool _internal_has_fee_iso4217() const;
  public:
  void clear_fee_iso4217();
  const std::string& fee_iso4217() const;
  void set_fee_iso4217(const std::string& value);
  void set_fee_iso4217(std::string&& value);
  void set_fee_iso4217(const char* value);
  void set_fee_iso4217(const char* value, size_t size);
  std::string* mutable_fee_iso4217();
  std::string* release_fee_iso4217();
  void set_allocated_fee_iso4217(std::string* fee_iso4217);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fee_iso4217();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fee_iso4217(
      std::string* fee_iso4217);
  private:
  const std::string& _internal_fee_iso4217() const;
  void _internal_set_fee_iso4217(const std::string& value);
  std::string* _internal_mutable_fee_iso4217();
  public:

  // .zera_txn.BaseTXN base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::zera_txn::BaseTXN& base() const;
  ::zera_txn::BaseTXN* release_base();
  ::zera_txn::BaseTXN* mutable_base();
  void set_allocated_base(::zera_txn::BaseTXN* base);
  private:
  const ::zera_txn::BaseTXN& _internal_base() const;
  ::zera_txn::BaseTXN* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::zera_txn::BaseTXN* base);
  ::zera_txn::BaseTXN* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:zera_txn.FoundationTXN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> restricted_symbols_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ByteMultiplier > byte_multiplier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fee_iso4217_;
  ::zera_txn::BaseTXN* base_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class RevokeTXN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.RevokeTXN) */ {
 public:
  inline RevokeTXN() : RevokeTXN(nullptr) {};
  virtual ~RevokeTXN();

  RevokeTXN(const RevokeTXN& from);
  RevokeTXN(RevokeTXN&& from) noexcept
    : RevokeTXN() {
    *this = ::std::move(from);
  }

  inline RevokeTXN& operator=(const RevokeTXN& from) {
    CopyFrom(from);
    return *this;
  }
  inline RevokeTXN& operator=(RevokeTXN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RevokeTXN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RevokeTXN* internal_default_instance() {
    return reinterpret_cast<const RevokeTXN*>(
               &_RevokeTXN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RevokeTXN& a, RevokeTXN& b) {
    a.Swap(&b);
  }
  inline void Swap(RevokeTXN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RevokeTXN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RevokeTXN* New() const final {
    return CreateMaybeMessage<RevokeTXN>(nullptr);
  }

  RevokeTXN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RevokeTXN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RevokeTXN& from);
  void MergeFrom(const RevokeTXN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RevokeTXN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.RevokeTXN";
  }
  protected:
  explicit RevokeTXN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractIdFieldNumber = 2,
    kRecipientAddressFieldNumber = 3,
    kItemIdFieldNumber = 4,
    kBaseFieldNumber = 1,
  };
  // string contract_id = 2;
  void clear_contract_id();
  const std::string& contract_id() const;
  void set_contract_id(const std::string& value);
  void set_contract_id(std::string&& value);
  void set_contract_id(const char* value);
  void set_contract_id(const char* value, size_t size);
  std::string* mutable_contract_id();
  std::string* release_contract_id();
  void set_allocated_contract_id(std::string* contract_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contract_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contract_id(
      std::string* contract_id);
  private:
  const std::string& _internal_contract_id() const;
  void _internal_set_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_id();
  public:

  // bytes recipient_address = 3;
  void clear_recipient_address();
  const std::string& recipient_address() const;
  void set_recipient_address(const std::string& value);
  void set_recipient_address(std::string&& value);
  void set_recipient_address(const char* value);
  void set_recipient_address(const void* value, size_t size);
  std::string* mutable_recipient_address();
  std::string* release_recipient_address();
  void set_allocated_recipient_address(std::string* recipient_address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_recipient_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_recipient_address(
      std::string* recipient_address);
  private:
  const std::string& _internal_recipient_address() const;
  void _internal_set_recipient_address(const std::string& value);
  std::string* _internal_mutable_recipient_address();
  public:

  // string item_id = 4;
  void clear_item_id();
  const std::string& item_id() const;
  void set_item_id(const std::string& value);
  void set_item_id(std::string&& value);
  void set_item_id(const char* value);
  void set_item_id(const char* value, size_t size);
  std::string* mutable_item_id();
  std::string* release_item_id();
  void set_allocated_item_id(std::string* item_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_item_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_item_id(
      std::string* item_id);
  private:
  const std::string& _internal_item_id() const;
  void _internal_set_item_id(const std::string& value);
  std::string* _internal_mutable_item_id();
  public:

  // .zera_txn.BaseTXN base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::zera_txn::BaseTXN& base() const;
  ::zera_txn::BaseTXN* release_base();
  ::zera_txn::BaseTXN* mutable_base();
  void set_allocated_base(::zera_txn::BaseTXN* base);
  private:
  const ::zera_txn::BaseTXN& _internal_base() const;
  ::zera_txn::BaseTXN* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::zera_txn::BaseTXN* base);
  ::zera_txn::BaseTXN* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:zera_txn.RevokeTXN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recipient_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_id_;
  ::zera_txn::BaseTXN* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class FastQuorumTXN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.FastQuorumTXN) */ {
 public:
  inline FastQuorumTXN() : FastQuorumTXN(nullptr) {};
  virtual ~FastQuorumTXN();

  FastQuorumTXN(const FastQuorumTXN& from);
  FastQuorumTXN(FastQuorumTXN&& from) noexcept
    : FastQuorumTXN() {
    *this = ::std::move(from);
  }

  inline FastQuorumTXN& operator=(const FastQuorumTXN& from) {
    CopyFrom(from);
    return *this;
  }
  inline FastQuorumTXN& operator=(FastQuorumTXN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FastQuorumTXN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FastQuorumTXN* internal_default_instance() {
    return reinterpret_cast<const FastQuorumTXN*>(
               &_FastQuorumTXN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(FastQuorumTXN& a, FastQuorumTXN& b) {
    a.Swap(&b);
  }
  inline void Swap(FastQuorumTXN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FastQuorumTXN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FastQuorumTXN* New() const final {
    return CreateMaybeMessage<FastQuorumTXN>(nullptr);
  }

  FastQuorumTXN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FastQuorumTXN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FastQuorumTXN& from);
  void MergeFrom(const FastQuorumTXN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FastQuorumTXN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.FastQuorumTXN";
  }
  protected:
  explicit FastQuorumTXN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposalIdFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // bytes proposal_id = 2;
  void clear_proposal_id();
  const std::string& proposal_id() const;
  void set_proposal_id(const std::string& value);
  void set_proposal_id(std::string&& value);
  void set_proposal_id(const char* value);
  void set_proposal_id(const void* value, size_t size);
  std::string* mutable_proposal_id();
  std::string* release_proposal_id();
  void set_allocated_proposal_id(std::string* proposal_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_proposal_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_proposal_id(
      std::string* proposal_id);
  private:
  const std::string& _internal_proposal_id() const;
  void _internal_set_proposal_id(const std::string& value);
  std::string* _internal_mutable_proposal_id();
  public:

  // .zera_txn.BaseTXN base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::zera_txn::BaseTXN& base() const;
  ::zera_txn::BaseTXN* release_base();
  ::zera_txn::BaseTXN* mutable_base();
  void set_allocated_base(::zera_txn::BaseTXN* base);
  private:
  const ::zera_txn::BaseTXN& _internal_base() const;
  ::zera_txn::BaseTXN* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::zera_txn::BaseTXN* base);
  ::zera_txn::BaseTXN* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:zera_txn.FastQuorumTXN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proposal_id_;
  ::zera_txn::BaseTXN* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class Governance PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.Governance) */ {
 public:
  inline Governance() : Governance(nullptr) {};
  virtual ~Governance();

  Governance(const Governance& from);
  Governance(Governance&& from) noexcept
    : Governance() {
    *this = ::std::move(from);
  }

  inline Governance& operator=(const Governance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Governance& operator=(Governance&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Governance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Governance* internal_default_instance() {
    return reinterpret_cast<const Governance*>(
               &_Governance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Governance& a, Governance& b) {
    a.Swap(&b);
  }
  inline void Swap(Governance* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Governance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Governance* New() const final {
    return CreateMaybeMessage<Governance>(nullptr);
  }

  Governance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Governance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Governance& from);
  void MergeFrom(const Governance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Governance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.Governance";
  }
  protected:
  explicit Governance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVotingInstrumentFieldNumber = 4,
    kAllowedProposalInstrumentFieldNumber = 9,
    kStageLengthFieldNumber = 11,
    kStartTimestampFieldNumber = 12,
    kTypeFieldNumber = 1,
    kRegularQuorumFieldNumber = 2,
    kFastQuorumFieldNumber = 3,
    kThresholdFieldNumber = 5,
    kChickenDinnerFieldNumber = 6,
    kAllowMultiFieldNumber = 7,
    kVotingPeriodFieldNumber = 8,
    kProposalPeriodFieldNumber = 10,
  };
  // repeated string voting_instrument = 4;
  int voting_instrument_size() const;
  private:
  int _internal_voting_instrument_size() const;
  public:
  void clear_voting_instrument();
  const std::string& voting_instrument(int index) const;
  std::string* mutable_voting_instrument(int index);
  void set_voting_instrument(int index, const std::string& value);
  void set_voting_instrument(int index, std::string&& value);
  void set_voting_instrument(int index, const char* value);
  void set_voting_instrument(int index, const char* value, size_t size);
  std::string* add_voting_instrument();
  void add_voting_instrument(const std::string& value);
  void add_voting_instrument(std::string&& value);
  void add_voting_instrument(const char* value);
  void add_voting_instrument(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& voting_instrument() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_voting_instrument();
  private:
  const std::string& _internal_voting_instrument(int index) const;
  std::string* _internal_add_voting_instrument();
  public:

  // repeated string allowed_proposal_instrument = 9;
  int allowed_proposal_instrument_size() const;
  private:
  int _internal_allowed_proposal_instrument_size() const;
  public:
  void clear_allowed_proposal_instrument();
  const std::string& allowed_proposal_instrument(int index) const;
  std::string* mutable_allowed_proposal_instrument(int index);
  void set_allowed_proposal_instrument(int index, const std::string& value);
  void set_allowed_proposal_instrument(int index, std::string&& value);
  void set_allowed_proposal_instrument(int index, const char* value);
  void set_allowed_proposal_instrument(int index, const char* value, size_t size);
  std::string* add_allowed_proposal_instrument();
  void add_allowed_proposal_instrument(const std::string& value);
  void add_allowed_proposal_instrument(std::string&& value);
  void add_allowed_proposal_instrument(const char* value);
  void add_allowed_proposal_instrument(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& allowed_proposal_instrument() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_allowed_proposal_instrument();
  private:
  const std::string& _internal_allowed_proposal_instrument(int index) const;
  std::string* _internal_add_allowed_proposal_instrument();
  public:

  // repeated .zera_txn.Stage stage_length = 11;
  int stage_length_size() const;
  private:
  int _internal_stage_length_size() const;
  public:
  void clear_stage_length();
  ::zera_txn::Stage* mutable_stage_length(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::Stage >*
      mutable_stage_length();
  private:
  const ::zera_txn::Stage& _internal_stage_length(int index) const;
  ::zera_txn::Stage* _internal_add_stage_length();
  public:
  const ::zera_txn::Stage& stage_length(int index) const;
  ::zera_txn::Stage* add_stage_length();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::Stage >&
      stage_length() const;

  // .google.protobuf.Timestamp start_timestamp = 12;
  bool has_start_timestamp() const;
  private:
  bool _internal_has_start_timestamp() const;
  public:
  void clear_start_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_timestamp();
  void set_allocated_start_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* start_timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_timestamp();
  public:
  void unsafe_arena_set_allocated_start_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* start_timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_timestamp();

  // .zera_txn.GOVERNANCE_TYPE type = 1;
  void clear_type();
  ::zera_txn::GOVERNANCE_TYPE type() const;
  void set_type(::zera_txn::GOVERNANCE_TYPE value);
  private:
  ::zera_txn::GOVERNANCE_TYPE _internal_type() const;
  void _internal_set_type(::zera_txn::GOVERNANCE_TYPE value);
  public:

  // uint32 regular_quorum = 2;
  void clear_regular_quorum();
  ::PROTOBUF_NAMESPACE_ID::uint32 regular_quorum() const;
  void set_regular_quorum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_regular_quorum() const;
  void _internal_set_regular_quorum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 fast_quorum = 3;
  bool has_fast_quorum() const;
  private:
  bool _internal_has_fast_quorum() const;
  public:
  void clear_fast_quorum();
  ::PROTOBUF_NAMESPACE_ID::uint32 fast_quorum() const;
  void set_fast_quorum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fast_quorum() const;
  void _internal_set_fast_quorum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 threshold = 5;
  void clear_threshold();
  ::PROTOBUF_NAMESPACE_ID::uint32 threshold() const;
  void set_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_threshold() const;
  void _internal_set_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool chicken_dinner = 6;
  bool has_chicken_dinner() const;
  private:
  bool _internal_has_chicken_dinner() const;
  public:
  void clear_chicken_dinner();
  bool chicken_dinner() const;
  void set_chicken_dinner(bool value);
  private:
  bool _internal_chicken_dinner() const;
  void _internal_set_chicken_dinner(bool value);
  public:

  // bool allow_multi = 7;
  void clear_allow_multi();
  bool allow_multi() const;
  void set_allow_multi(bool value);
  private:
  bool _internal_allow_multi() const;
  void _internal_set_allow_multi(bool value);
  public:

  // uint32 voting_period = 8;
  bool has_voting_period() const;
  private:
  bool _internal_has_voting_period() const;
  public:
  void clear_voting_period();
  ::PROTOBUF_NAMESPACE_ID::uint32 voting_period() const;
  void set_voting_period(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_voting_period() const;
  void _internal_set_voting_period(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .zera_txn.PROPOSAL_PERIOD proposal_period = 10;
  bool has_proposal_period() const;
  private:
  bool _internal_has_proposal_period() const;
  public:
  void clear_proposal_period();
  ::zera_txn::PROPOSAL_PERIOD proposal_period() const;
  void set_proposal_period(::zera_txn::PROPOSAL_PERIOD value);
  private:
  ::zera_txn::PROPOSAL_PERIOD _internal_proposal_period() const;
  void _internal_set_proposal_period(::zera_txn::PROPOSAL_PERIOD value);
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.Governance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> voting_instrument_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> allowed_proposal_instrument_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::Stage > stage_length_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_timestamp_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 regular_quorum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fast_quorum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 threshold_;
  bool chicken_dinner_;
  bool allow_multi_;
  ::PROTOBUF_NAMESPACE_ID::uint32 voting_period_;
  int proposal_period_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class Stage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.Stage) */ {
 public:
  inline Stage() : Stage(nullptr) {};
  virtual ~Stage();

  Stage(const Stage& from);
  Stage(Stage&& from) noexcept
    : Stage() {
    *this = ::std::move(from);
  }

  inline Stage& operator=(const Stage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stage& operator=(Stage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Stage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Stage* internal_default_instance() {
    return reinterpret_cast<const Stage*>(
               &_Stage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Stage& a, Stage& b) {
    a.Swap(&b);
  }
  inline void Swap(Stage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Stage* New() const final {
    return CreateMaybeMessage<Stage>(nullptr);
  }

  Stage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Stage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Stage& from);
  void MergeFrom(const Stage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.Stage";
  }
  protected:
  explicit Stage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLengthFieldNumber = 1,
    kPeriodFieldNumber = 2,
    kBreakFieldNumber = 3,
  };
  // uint32 length = 1;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .zera_txn.PROPOSAL_PERIOD period = 2;
  void clear_period();
  ::zera_txn::PROPOSAL_PERIOD period() const;
  void set_period(::zera_txn::PROPOSAL_PERIOD value);
  private:
  ::zera_txn::PROPOSAL_PERIOD _internal_period() const;
  void _internal_set_period(::zera_txn::PROPOSAL_PERIOD value);
  public:

  // bool break = 3;
  void clear_break_();
  bool break_() const;
  void set_break_(bool value);
  private:
  bool _internal_break_() const;
  void _internal_set_break_(bool value);
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.Stage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 length_;
  int period_;
  bool break__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class CoinDenomination PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.CoinDenomination) */ {
 public:
  inline CoinDenomination() : CoinDenomination(nullptr) {};
  virtual ~CoinDenomination();

  CoinDenomination(const CoinDenomination& from);
  CoinDenomination(CoinDenomination&& from) noexcept
    : CoinDenomination() {
    *this = ::std::move(from);
  }

  inline CoinDenomination& operator=(const CoinDenomination& from) {
    CopyFrom(from);
    return *this;
  }
  inline CoinDenomination& operator=(CoinDenomination&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CoinDenomination& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CoinDenomination* internal_default_instance() {
    return reinterpret_cast<const CoinDenomination*>(
               &_CoinDenomination_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CoinDenomination& a, CoinDenomination& b) {
    a.Swap(&b);
  }
  inline void Swap(CoinDenomination* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CoinDenomination* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CoinDenomination* New() const final {
    return CreateMaybeMessage<CoinDenomination>(nullptr);
  }

  CoinDenomination* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CoinDenomination>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CoinDenomination& from);
  void MergeFrom(const CoinDenomination& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoinDenomination* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.CoinDenomination";
  }
  protected:
  explicit CoinDenomination(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDenominationNameFieldNumber = 5,
    kAmountFieldNumber = 6,
  };
  // string denomination_name = 5;
  void clear_denomination_name();
  const std::string& denomination_name() const;
  void set_denomination_name(const std::string& value);
  void set_denomination_name(std::string&& value);
  void set_denomination_name(const char* value);
  void set_denomination_name(const char* value, size_t size);
  std::string* mutable_denomination_name();
  std::string* release_denomination_name();
  void set_allocated_denomination_name(std::string* denomination_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_denomination_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_denomination_name(
      std::string* denomination_name);
  private:
  const std::string& _internal_denomination_name() const;
  void _internal_set_denomination_name(const std::string& value);
  std::string* _internal_mutable_denomination_name();
  public:

  // string amount = 6;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_amount();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_amount(
      std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.CoinDenomination)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr denomination_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class ContractFees PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.ContractFees) */ {
 public:
  inline ContractFees() : ContractFees(nullptr) {};
  virtual ~ContractFees();

  ContractFees(const ContractFees& from);
  ContractFees(ContractFees&& from) noexcept
    : ContractFees() {
    *this = ::std::move(from);
  }

  inline ContractFees& operator=(const ContractFees& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContractFees& operator=(ContractFees&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContractFees& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContractFees* internal_default_instance() {
    return reinterpret_cast<const ContractFees*>(
               &_ContractFees_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ContractFees& a, ContractFees& b) {
    a.Swap(&b);
  }
  inline void Swap(ContractFees* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContractFees* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContractFees* New() const final {
    return CreateMaybeMessage<ContractFees>(nullptr);
  }

  ContractFees* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContractFees>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContractFees& from);
  void MergeFrom(const ContractFees& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContractFees* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.ContractFees";
  }
  protected:
  explicit ContractFees(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowedFeeInstrumentFieldNumber = 5,
    kFeeFieldNumber = 1,
    kFeeAddressFieldNumber = 2,
    kBurnFieldNumber = 3,
    kValidatorFieldNumber = 4,
    kContractFeeTypeFieldNumber = 6,
  };
  // repeated string allowed_fee_instrument = 5;
  int allowed_fee_instrument_size() const;
  private:
  int _internal_allowed_fee_instrument_size() const;
  public:
  void clear_allowed_fee_instrument();
  const std::string& allowed_fee_instrument(int index) const;
  std::string* mutable_allowed_fee_instrument(int index);
  void set_allowed_fee_instrument(int index, const std::string& value);
  void set_allowed_fee_instrument(int index, std::string&& value);
  void set_allowed_fee_instrument(int index, const char* value);
  void set_allowed_fee_instrument(int index, const char* value, size_t size);
  std::string* add_allowed_fee_instrument();
  void add_allowed_fee_instrument(const std::string& value);
  void add_allowed_fee_instrument(std::string&& value);
  void add_allowed_fee_instrument(const char* value);
  void add_allowed_fee_instrument(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& allowed_fee_instrument() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_allowed_fee_instrument();
  private:
  const std::string& _internal_allowed_fee_instrument(int index) const;
  std::string* _internal_add_allowed_fee_instrument();
  public:

  // string fee = 1;
  void clear_fee();
  const std::string& fee() const;
  void set_fee(const std::string& value);
  void set_fee(std::string&& value);
  void set_fee(const char* value);
  void set_fee(const char* value, size_t size);
  std::string* mutable_fee();
  std::string* release_fee();
  void set_allocated_fee(std::string* fee);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fee();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fee(
      std::string* fee);
  private:
  const std::string& _internal_fee() const;
  void _internal_set_fee(const std::string& value);
  std::string* _internal_mutable_fee();
  public:

  // bytes fee_address = 2;
  bool has_fee_address() const;
  private:
  bool _internal_has_fee_address() const;
  public:
  void clear_fee_address();
  const std::string& fee_address() const;
  void set_fee_address(const std::string& value);
  void set_fee_address(std::string&& value);
  void set_fee_address(const char* value);
  void set_fee_address(const void* value, size_t size);
  std::string* mutable_fee_address();
  std::string* release_fee_address();
  void set_allocated_fee_address(std::string* fee_address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fee_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fee_address(
      std::string* fee_address);
  private:
  const std::string& _internal_fee_address() const;
  void _internal_set_fee_address(const std::string& value);
  std::string* _internal_mutable_fee_address();
  public:

  // string burn = 3;
  void clear_burn();
  const std::string& burn() const;
  void set_burn(const std::string& value);
  void set_burn(std::string&& value);
  void set_burn(const char* value);
  void set_burn(const char* value, size_t size);
  std::string* mutable_burn();
  std::string* release_burn();
  void set_allocated_burn(std::string* burn);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_burn();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_burn(
      std::string* burn);
  private:
  const std::string& _internal_burn() const;
  void _internal_set_burn(const std::string& value);
  std::string* _internal_mutable_burn();
  public:

  // string validator = 4;
  void clear_validator();
  const std::string& validator() const;
  void set_validator(const std::string& value);
  void set_validator(std::string&& value);
  void set_validator(const char* value);
  void set_validator(const char* value, size_t size);
  std::string* mutable_validator();
  std::string* release_validator();
  void set_allocated_validator(std::string* validator);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_validator();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_validator(
      std::string* validator);
  private:
  const std::string& _internal_validator() const;
  void _internal_set_validator(const std::string& value);
  std::string* _internal_mutable_validator();
  public:

  // .zera_txn.CONTRACT_FEE_TYPE contract_fee_type = 6;
  void clear_contract_fee_type();
  ::zera_txn::CONTRACT_FEE_TYPE contract_fee_type() const;
  void set_contract_fee_type(::zera_txn::CONTRACT_FEE_TYPE value);
  private:
  ::zera_txn::CONTRACT_FEE_TYPE _internal_contract_fee_type() const;
  void _internal_set_contract_fee_type(::zera_txn::CONTRACT_FEE_TYPE value);
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.ContractFees)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> allowed_fee_instrument_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fee_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fee_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr burn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_;
  int contract_fee_type_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class ItemContractFees PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.ItemContractFees) */ {
 public:
  inline ItemContractFees() : ItemContractFees(nullptr) {};
  virtual ~ItemContractFees();

  ItemContractFees(const ItemContractFees& from);
  ItemContractFees(ItemContractFees&& from) noexcept
    : ItemContractFees() {
    *this = ::std::move(from);
  }

  inline ItemContractFees& operator=(const ItemContractFees& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemContractFees& operator=(ItemContractFees&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ItemContractFees& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ItemContractFees* internal_default_instance() {
    return reinterpret_cast<const ItemContractFees*>(
               &_ItemContractFees_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ItemContractFees& a, ItemContractFees& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemContractFees* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ItemContractFees* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ItemContractFees* New() const final {
    return CreateMaybeMessage<ItemContractFees>(nullptr);
  }

  ItemContractFees* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ItemContractFees>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ItemContractFees& from);
  void MergeFrom(const ItemContractFees& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemContractFees* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.ItemContractFees";
  }
  protected:
  explicit ItemContractFees(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowedFeeInstrumentFieldNumber = 5,
    kFeeFieldNumber = 1,
    kFeeAddressFieldNumber = 2,
    kBurnFieldNumber = 3,
    kValidatorFieldNumber = 4,
  };
  // repeated string allowed_fee_instrument = 5;
  int allowed_fee_instrument_size() const;
  private:
  int _internal_allowed_fee_instrument_size() const;
  public:
  void clear_allowed_fee_instrument();
  const std::string& allowed_fee_instrument(int index) const;
  std::string* mutable_allowed_fee_instrument(int index);
  void set_allowed_fee_instrument(int index, const std::string& value);
  void set_allowed_fee_instrument(int index, std::string&& value);
  void set_allowed_fee_instrument(int index, const char* value);
  void set_allowed_fee_instrument(int index, const char* value, size_t size);
  std::string* add_allowed_fee_instrument();
  void add_allowed_fee_instrument(const std::string& value);
  void add_allowed_fee_instrument(std::string&& value);
  void add_allowed_fee_instrument(const char* value);
  void add_allowed_fee_instrument(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& allowed_fee_instrument() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_allowed_fee_instrument();
  private:
  const std::string& _internal_allowed_fee_instrument(int index) const;
  std::string* _internal_add_allowed_fee_instrument();
  public:

  // string fee = 1;
  void clear_fee();
  const std::string& fee() const;
  void set_fee(const std::string& value);
  void set_fee(std::string&& value);
  void set_fee(const char* value);
  void set_fee(const char* value, size_t size);
  std::string* mutable_fee();
  std::string* release_fee();
  void set_allocated_fee(std::string* fee);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fee();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fee(
      std::string* fee);
  private:
  const std::string& _internal_fee() const;
  void _internal_set_fee(const std::string& value);
  std::string* _internal_mutable_fee();
  public:

  // bytes fee_address = 2;
  bool has_fee_address() const;
  private:
  bool _internal_has_fee_address() const;
  public:
  void clear_fee_address();
  const std::string& fee_address() const;
  void set_fee_address(const std::string& value);
  void set_fee_address(std::string&& value);
  void set_fee_address(const char* value);
  void set_fee_address(const void* value, size_t size);
  std::string* mutable_fee_address();
  std::string* release_fee_address();
  void set_allocated_fee_address(std::string* fee_address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fee_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fee_address(
      std::string* fee_address);
  private:
  const std::string& _internal_fee_address() const;
  void _internal_set_fee_address(const std::string& value);
  std::string* _internal_mutable_fee_address();
  public:

  // string burn = 3;
  void clear_burn();
  const std::string& burn() const;
  void set_burn(const std::string& value);
  void set_burn(std::string&& value);
  void set_burn(const char* value);
  void set_burn(const char* value, size_t size);
  std::string* mutable_burn();
  std::string* release_burn();
  void set_allocated_burn(std::string* burn);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_burn();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_burn(
      std::string* burn);
  private:
  const std::string& _internal_burn() const;
  void _internal_set_burn(const std::string& value);
  std::string* _internal_mutable_burn();
  public:

  // string validator = 4;
  void clear_validator();
  const std::string& validator() const;
  void set_validator(const std::string& value);
  void set_validator(std::string&& value);
  void set_validator(const char* value);
  void set_validator(const char* value, size_t size);
  std::string* mutable_validator();
  std::string* release_validator();
  void set_allocated_validator(std::string* validator);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_validator();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_validator(
      std::string* validator);
  private:
  const std::string& _internal_validator() const;
  void _internal_set_validator(const std::string& value);
  std::string* _internal_mutable_validator();
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.ItemContractFees)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> allowed_fee_instrument_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fee_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fee_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr burn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class RestrictedKey PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.RestrictedKey) */ {
 public:
  inline RestrictedKey() : RestrictedKey(nullptr) {};
  virtual ~RestrictedKey();

  RestrictedKey(const RestrictedKey& from);
  RestrictedKey(RestrictedKey&& from) noexcept
    : RestrictedKey() {
    *this = ::std::move(from);
  }

  inline RestrictedKey& operator=(const RestrictedKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestrictedKey& operator=(RestrictedKey&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RestrictedKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RestrictedKey* internal_default_instance() {
    return reinterpret_cast<const RestrictedKey*>(
               &_RestrictedKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(RestrictedKey& a, RestrictedKey& b) {
    a.Swap(&b);
  }
  inline void Swap(RestrictedKey* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestrictedKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestrictedKey* New() const final {
    return CreateMaybeMessage<RestrictedKey>(nullptr);
  }

  RestrictedKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestrictedKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RestrictedKey& from);
  void MergeFrom(const RestrictedKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestrictedKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.RestrictedKey";
  }
  protected:
  explicit RestrictedKey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 1,
    kTimeDelayFieldNumber = 2,
    kGlobalFieldNumber = 3,
    kUpdateContractFieldNumber = 4,
    kTransferFieldNumber = 5,
    kQuashFieldNumber = 6,
    kMintFieldNumber = 7,
    kVoteFieldNumber = 8,
    kProposeFieldNumber = 9,
    kComplianceFieldNumber = 10,
    kExpenseRatioFieldNumber = 11,
    kCurEquivFieldNumber = 12,
    kRevokeFieldNumber = 13,
    kKeyWeightFieldNumber = 14,
  };
  // .zera_txn.PublicKey public_key = 1;
  bool has_public_key() const;
  private:
  bool _internal_has_public_key() const;
  public:
  void clear_public_key();
  const ::zera_txn::PublicKey& public_key() const;
  ::zera_txn::PublicKey* release_public_key();
  ::zera_txn::PublicKey* mutable_public_key();
  void set_allocated_public_key(::zera_txn::PublicKey* public_key);
  private:
  const ::zera_txn::PublicKey& _internal_public_key() const;
  ::zera_txn::PublicKey* _internal_mutable_public_key();
  public:
  void unsafe_arena_set_allocated_public_key(
      ::zera_txn::PublicKey* public_key);
  ::zera_txn::PublicKey* unsafe_arena_release_public_key();

  // int64 time_delay = 2;
  void clear_time_delay();
  ::PROTOBUF_NAMESPACE_ID::int64 time_delay() const;
  void set_time_delay(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_delay() const;
  void _internal_set_time_delay(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool global = 3;
  void clear_global();
  bool global() const;
  void set_global(bool value);
  private:
  bool _internal_global() const;
  void _internal_set_global(bool value);
  public:

  // bool update_contract = 4;
  void clear_update_contract();
  bool update_contract() const;
  void set_update_contract(bool value);
  private:
  bool _internal_update_contract() const;
  void _internal_set_update_contract(bool value);
  public:

  // bool transfer = 5;
  void clear_transfer();
  bool transfer() const;
  void set_transfer(bool value);
  private:
  bool _internal_transfer() const;
  void _internal_set_transfer(bool value);
  public:

  // bool quash = 6;
  void clear_quash();
  bool quash() const;
  void set_quash(bool value);
  private:
  bool _internal_quash() const;
  void _internal_set_quash(bool value);
  public:

  // bool mint = 7;
  void clear_mint();
  bool mint() const;
  void set_mint(bool value);
  private:
  bool _internal_mint() const;
  void _internal_set_mint(bool value);
  public:

  // bool vote = 8;
  void clear_vote();
  bool vote() const;
  void set_vote(bool value);
  private:
  bool _internal_vote() const;
  void _internal_set_vote(bool value);
  public:

  // bool propose = 9;
  void clear_propose();
  bool propose() const;
  void set_propose(bool value);
  private:
  bool _internal_propose() const;
  void _internal_set_propose(bool value);
  public:

  // bool compliance = 10;
  void clear_compliance();
  bool compliance() const;
  void set_compliance(bool value);
  private:
  bool _internal_compliance() const;
  void _internal_set_compliance(bool value);
  public:

  // bool expense_ratio = 11;
  void clear_expense_ratio();
  bool expense_ratio() const;
  void set_expense_ratio(bool value);
  private:
  bool _internal_expense_ratio() const;
  void _internal_set_expense_ratio(bool value);
  public:

  // bool cur_equiv = 12;
  void clear_cur_equiv();
  bool cur_equiv() const;
  void set_cur_equiv(bool value);
  private:
  bool _internal_cur_equiv() const;
  void _internal_set_cur_equiv(bool value);
  public:

  // bool revoke = 13;
  void clear_revoke();
  bool revoke() const;
  void set_revoke(bool value);
  private:
  bool _internal_revoke() const;
  void _internal_set_revoke(bool value);
  public:

  // uint32 key_weight = 14;
  void clear_key_weight();
  ::PROTOBUF_NAMESPACE_ID::uint32 key_weight() const;
  void set_key_weight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_key_weight() const;
  void _internal_set_key_weight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.RestrictedKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zera_txn::PublicKey* public_key_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_delay_;
  bool global_;
  bool update_contract_;
  bool transfer_;
  bool quash_;
  bool mint_;
  bool vote_;
  bool propose_;
  bool compliance_;
  bool expense_ratio_;
  bool cur_equiv_;
  bool revoke_;
  ::PROTOBUF_NAMESPACE_ID::uint32 key_weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class ExpenseRatioTXN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.ExpenseRatioTXN) */ {
 public:
  inline ExpenseRatioTXN() : ExpenseRatioTXN(nullptr) {};
  virtual ~ExpenseRatioTXN();

  ExpenseRatioTXN(const ExpenseRatioTXN& from);
  ExpenseRatioTXN(ExpenseRatioTXN&& from) noexcept
    : ExpenseRatioTXN() {
    *this = ::std::move(from);
  }

  inline ExpenseRatioTXN& operator=(const ExpenseRatioTXN& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExpenseRatioTXN& operator=(ExpenseRatioTXN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExpenseRatioTXN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExpenseRatioTXN* internal_default_instance() {
    return reinterpret_cast<const ExpenseRatioTXN*>(
               &_ExpenseRatioTXN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ExpenseRatioTXN& a, ExpenseRatioTXN& b) {
    a.Swap(&b);
  }
  inline void Swap(ExpenseRatioTXN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExpenseRatioTXN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExpenseRatioTXN* New() const final {
    return CreateMaybeMessage<ExpenseRatioTXN>(nullptr);
  }

  ExpenseRatioTXN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExpenseRatioTXN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExpenseRatioTXN& from);
  void MergeFrom(const ExpenseRatioTXN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExpenseRatioTXN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.ExpenseRatioTXN";
  }
  protected:
  explicit ExpenseRatioTXN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressesFieldNumber = 3,
    kContractIdFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // repeated bytes addresses = 3;
  int addresses_size() const;
  private:
  int _internal_addresses_size() const;
  public:
  void clear_addresses();
  const std::string& addresses(int index) const;
  std::string* mutable_addresses(int index);
  void set_addresses(int index, const std::string& value);
  void set_addresses(int index, std::string&& value);
  void set_addresses(int index, const char* value);
  void set_addresses(int index, const void* value, size_t size);
  std::string* add_addresses();
  void add_addresses(const std::string& value);
  void add_addresses(std::string&& value);
  void add_addresses(const char* value);
  void add_addresses(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_addresses();
  private:
  const std::string& _internal_addresses(int index) const;
  std::string* _internal_add_addresses();
  public:

  // string contract_id = 2;
  void clear_contract_id();
  const std::string& contract_id() const;
  void set_contract_id(const std::string& value);
  void set_contract_id(std::string&& value);
  void set_contract_id(const char* value);
  void set_contract_id(const char* value, size_t size);
  std::string* mutable_contract_id();
  std::string* release_contract_id();
  void set_allocated_contract_id(std::string* contract_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contract_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contract_id(
      std::string* contract_id);
  private:
  const std::string& _internal_contract_id() const;
  void _internal_set_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_id();
  public:

  // .zera_txn.BaseTXN base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::zera_txn::BaseTXN& base() const;
  ::zera_txn::BaseTXN* release_base();
  ::zera_txn::BaseTXN* mutable_base();
  void set_allocated_base(::zera_txn::BaseTXN* base);
  private:
  const ::zera_txn::BaseTXN& _internal_base() const;
  ::zera_txn::BaseTXN* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::zera_txn::BaseTXN* base);
  ::zera_txn::BaseTXN* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:zera_txn.ExpenseRatioTXN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> addresses_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
  ::zera_txn::BaseTXN* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class PreMintWallet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.PreMintWallet) */ {
 public:
  inline PreMintWallet() : PreMintWallet(nullptr) {};
  virtual ~PreMintWallet();

  PreMintWallet(const PreMintWallet& from);
  PreMintWallet(PreMintWallet&& from) noexcept
    : PreMintWallet() {
    *this = ::std::move(from);
  }

  inline PreMintWallet& operator=(const PreMintWallet& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreMintWallet& operator=(PreMintWallet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PreMintWallet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PreMintWallet* internal_default_instance() {
    return reinterpret_cast<const PreMintWallet*>(
               &_PreMintWallet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(PreMintWallet& a, PreMintWallet& b) {
    a.Swap(&b);
  }
  inline void Swap(PreMintWallet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreMintWallet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PreMintWallet* New() const final {
    return CreateMaybeMessage<PreMintWallet>(nullptr);
  }

  PreMintWallet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PreMintWallet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PreMintWallet& from);
  void MergeFrom(const PreMintWallet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreMintWallet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.PreMintWallet";
  }
  protected:
  explicit PreMintWallet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // bytes address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_address(
      std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string amount = 2;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_amount();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_amount(
      std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.PreMintWallet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class Transfer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.Transfer) */ {
 public:
  inline Transfer() : Transfer(nullptr) {};
  virtual ~Transfer();

  Transfer(const Transfer& from);
  Transfer(Transfer&& from) noexcept
    : Transfer() {
    *this = ::std::move(from);
  }

  inline Transfer& operator=(const Transfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transfer& operator=(Transfer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transfer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transfer* internal_default_instance() {
    return reinterpret_cast<const Transfer*>(
               &_Transfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Transfer& a, Transfer& b) {
    a.Swap(&b);
  }
  inline void Swap(Transfer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transfer* New() const final {
    return CreateMaybeMessage<Transfer>(nullptr);
  }

  Transfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transfer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transfer& from);
  void MergeFrom(const Transfer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transfer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.Transfer";
  }
  protected:
  explicit Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecipientAddressFieldNumber = 1,
    kAmountFieldNumber = 2,
    kContractIdFieldNumber = 3,
    kContractFeeAmountFieldNumber = 4,
    kContractFeeIdFieldNumber = 5,
    kBaseFeeAmountFieldNumber = 6,
    kBaseFeeIdFieldNumber = 7,
    kMemoFieldNumber = 8,
  };
  // bytes recipient_address = 1;
  void clear_recipient_address();
  const std::string& recipient_address() const;
  void set_recipient_address(const std::string& value);
  void set_recipient_address(std::string&& value);
  void set_recipient_address(const char* value);
  void set_recipient_address(const void* value, size_t size);
  std::string* mutable_recipient_address();
  std::string* release_recipient_address();
  void set_allocated_recipient_address(std::string* recipient_address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_recipient_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_recipient_address(
      std::string* recipient_address);
  private:
  const std::string& _internal_recipient_address() const;
  void _internal_set_recipient_address(const std::string& value);
  std::string* _internal_mutable_recipient_address();
  public:

  // string amount = 2;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_amount();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_amount(
      std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string contract_id = 3;
  void clear_contract_id();
  const std::string& contract_id() const;
  void set_contract_id(const std::string& value);
  void set_contract_id(std::string&& value);
  void set_contract_id(const char* value);
  void set_contract_id(const char* value, size_t size);
  std::string* mutable_contract_id();
  std::string* release_contract_id();
  void set_allocated_contract_id(std::string* contract_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contract_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contract_id(
      std::string* contract_id);
  private:
  const std::string& _internal_contract_id() const;
  void _internal_set_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_id();
  public:

  // string contract_fee_amount = 4;
  bool has_contract_fee_amount() const;
  private:
  bool _internal_has_contract_fee_amount() const;
  public:
  void clear_contract_fee_amount();
  const std::string& contract_fee_amount() const;
  void set_contract_fee_amount(const std::string& value);
  void set_contract_fee_amount(std::string&& value);
  void set_contract_fee_amount(const char* value);
  void set_contract_fee_amount(const char* value, size_t size);
  std::string* mutable_contract_fee_amount();
  std::string* release_contract_fee_amount();
  void set_allocated_contract_fee_amount(std::string* contract_fee_amount);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contract_fee_amount();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contract_fee_amount(
      std::string* contract_fee_amount);
  private:
  const std::string& _internal_contract_fee_amount() const;
  void _internal_set_contract_fee_amount(const std::string& value);
  std::string* _internal_mutable_contract_fee_amount();
  public:

  // string contract_fee_id = 5;
  bool has_contract_fee_id() const;
  private:
  bool _internal_has_contract_fee_id() const;
  public:
  void clear_contract_fee_id();
  const std::string& contract_fee_id() const;
  void set_contract_fee_id(const std::string& value);
  void set_contract_fee_id(std::string&& value);
  void set_contract_fee_id(const char* value);
  void set_contract_fee_id(const char* value, size_t size);
  std::string* mutable_contract_fee_id();
  std::string* release_contract_fee_id();
  void set_allocated_contract_fee_id(std::string* contract_fee_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contract_fee_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contract_fee_id(
      std::string* contract_fee_id);
  private:
  const std::string& _internal_contract_fee_id() const;
  void _internal_set_contract_fee_id(const std::string& value);
  std::string* _internal_mutable_contract_fee_id();
  public:

  // string base_fee_amount = 6;
  void clear_base_fee_amount();
  const std::string& base_fee_amount() const;
  void set_base_fee_amount(const std::string& value);
  void set_base_fee_amount(std::string&& value);
  void set_base_fee_amount(const char* value);
  void set_base_fee_amount(const char* value, size_t size);
  std::string* mutable_base_fee_amount();
  std::string* release_base_fee_amount();
  void set_allocated_base_fee_amount(std::string* base_fee_amount);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_base_fee_amount();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_base_fee_amount(
      std::string* base_fee_amount);
  private:
  const std::string& _internal_base_fee_amount() const;
  void _internal_set_base_fee_amount(const std::string& value);
  std::string* _internal_mutable_base_fee_amount();
  public:

  // string base_fee_id = 7;
  void clear_base_fee_id();
  const std::string& base_fee_id() const;
  void set_base_fee_id(const std::string& value);
  void set_base_fee_id(std::string&& value);
  void set_base_fee_id(const char* value);
  void set_base_fee_id(const char* value, size_t size);
  std::string* mutable_base_fee_id();
  std::string* release_base_fee_id();
  void set_allocated_base_fee_id(std::string* base_fee_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_base_fee_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_base_fee_id(
      std::string* base_fee_id);
  private:
  const std::string& _internal_base_fee_id() const;
  void _internal_set_base_fee_id(const std::string& value);
  std::string* _internal_mutable_base_fee_id();
  public:

  // string memo = 8;
  bool has_memo() const;
  private:
  bool _internal_has_memo() const;
  public:
  void clear_memo();
  const std::string& memo() const;
  void set_memo(const std::string& value);
  void set_memo(std::string&& value);
  void set_memo(const char* value);
  void set_memo(const char* value, size_t size);
  std::string* mutable_memo();
  std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_memo();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_memo(
      std::string* memo);
  private:
  const std::string& _internal_memo() const;
  void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.Transfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recipient_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_fee_amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_fee_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_fee_amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_fee_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class BurnSBTTXN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.BurnSBTTXN) */ {
 public:
  inline BurnSBTTXN() : BurnSBTTXN(nullptr) {};
  virtual ~BurnSBTTXN();

  BurnSBTTXN(const BurnSBTTXN& from);
  BurnSBTTXN(BurnSBTTXN&& from) noexcept
    : BurnSBTTXN() {
    *this = ::std::move(from);
  }

  inline BurnSBTTXN& operator=(const BurnSBTTXN& from) {
    CopyFrom(from);
    return *this;
  }
  inline BurnSBTTXN& operator=(BurnSBTTXN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BurnSBTTXN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BurnSBTTXN* internal_default_instance() {
    return reinterpret_cast<const BurnSBTTXN*>(
               &_BurnSBTTXN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(BurnSBTTXN& a, BurnSBTTXN& b) {
    a.Swap(&b);
  }
  inline void Swap(BurnSBTTXN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BurnSBTTXN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BurnSBTTXN* New() const final {
    return CreateMaybeMessage<BurnSBTTXN>(nullptr);
  }

  BurnSBTTXN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BurnSBTTXN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BurnSBTTXN& from);
  void MergeFrom(const BurnSBTTXN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BurnSBTTXN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.BurnSBTTXN";
  }
  protected:
  explicit BurnSBTTXN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractIdFieldNumber = 2,
    kItemIdFieldNumber = 3,
    kBaseFieldNumber = 1,
  };
  // string contract_id = 2;
  void clear_contract_id();
  const std::string& contract_id() const;
  void set_contract_id(const std::string& value);
  void set_contract_id(std::string&& value);
  void set_contract_id(const char* value);
  void set_contract_id(const char* value, size_t size);
  std::string* mutable_contract_id();
  std::string* release_contract_id();
  void set_allocated_contract_id(std::string* contract_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contract_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contract_id(
      std::string* contract_id);
  private:
  const std::string& _internal_contract_id() const;
  void _internal_set_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_id();
  public:

  // string item_id = 3;
  void clear_item_id();
  const std::string& item_id() const;
  void set_item_id(const std::string& value);
  void set_item_id(std::string&& value);
  void set_item_id(const char* value);
  void set_item_id(const char* value, size_t size);
  std::string* mutable_item_id();
  std::string* release_item_id();
  void set_allocated_item_id(std::string* item_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_item_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_item_id(
      std::string* item_id);
  private:
  const std::string& _internal_item_id() const;
  void _internal_set_item_id(const std::string& value);
  std::string* _internal_mutable_item_id();
  public:

  // .zera_txn.BaseTXN base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::zera_txn::BaseTXN& base() const;
  ::zera_txn::BaseTXN* release_base();
  ::zera_txn::BaseTXN* mutable_base();
  void set_allocated_base(::zera_txn::BaseTXN* base);
  private:
  const ::zera_txn::BaseTXN& _internal_base() const;
  ::zera_txn::BaseTXN* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::zera_txn::BaseTXN* base);
  ::zera_txn::BaseTXN* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:zera_txn.BurnSBTTXN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_id_;
  ::zera_txn::BaseTXN* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class BaseTXN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.BaseTXN) */ {
 public:
  inline BaseTXN() : BaseTXN(nullptr) {};
  virtual ~BaseTXN();

  BaseTXN(const BaseTXN& from);
  BaseTXN(BaseTXN&& from) noexcept
    : BaseTXN() {
    *this = ::std::move(from);
  }

  inline BaseTXN& operator=(const BaseTXN& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseTXN& operator=(BaseTXN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BaseTXN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BaseTXN* internal_default_instance() {
    return reinterpret_cast<const BaseTXN*>(
               &_BaseTXN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(BaseTXN& a, BaseTXN& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseTXN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseTXN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BaseTXN* New() const final {
    return CreateMaybeMessage<BaseTXN>(nullptr);
  }

  BaseTXN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BaseTXN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BaseTXN& from);
  void MergeFrom(const BaseTXN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseTXN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.BaseTXN";
  }
  protected:
  explicit BaseTXN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeeAmountFieldNumber = 4,
    kFeeIdFieldNumber = 5,
    kSignatureFieldNumber = 6,
    kHashFieldNumber = 7,
    kMemoFieldNumber = 8,
    kPublicKeyFieldNumber = 1,
    kTimestampFieldNumber = 3,
    kNonceFieldNumber = 10,
    kSafeSendFieldNumber = 9,
  };
  // string fee_amount = 4;
  void clear_fee_amount();
  const std::string& fee_amount() const;
  void set_fee_amount(const std::string& value);
  void set_fee_amount(std::string&& value);
  void set_fee_amount(const char* value);
  void set_fee_amount(const char* value, size_t size);
  std::string* mutable_fee_amount();
  std::string* release_fee_amount();
  void set_allocated_fee_amount(std::string* fee_amount);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fee_amount();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fee_amount(
      std::string* fee_amount);
  private:
  const std::string& _internal_fee_amount() const;
  void _internal_set_fee_amount(const std::string& value);
  std::string* _internal_mutable_fee_amount();
  public:

  // string fee_id = 5;
  void clear_fee_id();
  const std::string& fee_id() const;
  void set_fee_id(const std::string& value);
  void set_fee_id(std::string&& value);
  void set_fee_id(const char* value);
  void set_fee_id(const char* value, size_t size);
  std::string* mutable_fee_id();
  std::string* release_fee_id();
  void set_allocated_fee_id(std::string* fee_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fee_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fee_id(
      std::string* fee_id);
  private:
  const std::string& _internal_fee_id() const;
  void _internal_set_fee_id(const std::string& value);
  std::string* _internal_mutable_fee_id();
  public:

  // bytes signature = 6;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_signature();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_signature(
      std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // bytes hash = 7;
  bool has_hash() const;
  private:
  bool _internal_has_hash() const;
  public:
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_hash();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_hash(
      std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // string memo = 8;
  bool has_memo() const;
  private:
  bool _internal_has_memo() const;
  public:
  void clear_memo();
  const std::string& memo() const;
  void set_memo(const std::string& value);
  void set_memo(std::string&& value);
  void set_memo(const char* value);
  void set_memo(const char* value, size_t size);
  std::string* mutable_memo();
  std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_memo();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_memo(
      std::string* memo);
  private:
  const std::string& _internal_memo() const;
  void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // .zera_txn.PublicKey public_key = 1;
  bool has_public_key() const;
  private:
  bool _internal_has_public_key() const;
  public:
  void clear_public_key();
  const ::zera_txn::PublicKey& public_key() const;
  ::zera_txn::PublicKey* release_public_key();
  ::zera_txn::PublicKey* mutable_public_key();
  void set_allocated_public_key(::zera_txn::PublicKey* public_key);
  private:
  const ::zera_txn::PublicKey& _internal_public_key() const;
  ::zera_txn::PublicKey* _internal_mutable_public_key();
  public:
  void unsafe_arena_set_allocated_public_key(
      ::zera_txn::PublicKey* public_key);
  ::zera_txn::PublicKey* unsafe_arena_release_public_key();

  // .google.protobuf.Timestamp timestamp = 3;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // uint64 nonce = 10;
  void clear_nonce();
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce() const;
  void set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_nonce() const;
  void _internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool safe_send = 9;
  bool has_safe_send() const;
  private:
  bool _internal_has_safe_send() const;
  public:
  void clear_safe_send();
  bool safe_send() const;
  void set_safe_send(bool value);
  private:
  bool _internal_safe_send() const;
  void _internal_set_safe_send(bool value);
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.BaseTXN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fee_amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fee_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
  ::zera_txn::PublicKey* public_key_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce_;
  bool safe_send_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class PublicKey PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.PublicKey) */ {
 public:
  inline PublicKey() : PublicKey(nullptr) {};
  virtual ~PublicKey();

  PublicKey(const PublicKey& from);
  PublicKey(PublicKey&& from) noexcept
    : PublicKey() {
    *this = ::std::move(from);
  }

  inline PublicKey& operator=(const PublicKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublicKey& operator=(PublicKey&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PublicKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublicKey* internal_default_instance() {
    return reinterpret_cast<const PublicKey*>(
               &_PublicKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(PublicKey& a, PublicKey& b) {
    a.Swap(&b);
  }
  inline void Swap(PublicKey* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublicKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PublicKey* New() const final {
    return CreateMaybeMessage<PublicKey>(nullptr);
  }

  PublicKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PublicKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PublicKey& from);
  void MergeFrom(const PublicKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublicKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.PublicKey";
  }
  protected:
  explicit PublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSingleFieldNumber = 1,
    kScWalletAdrFieldNumber = 3,
    kMultiFieldNumber = 2,
    kGovernanceAuthFieldNumber = 4,
  };
  // bytes single = 1;
  void clear_single();
  const std::string& single() const;
  void set_single(const std::string& value);
  void set_single(std::string&& value);
  void set_single(const char* value);
  void set_single(const void* value, size_t size);
  std::string* mutable_single();
  std::string* release_single();
  void set_allocated_single(std::string* single);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_single();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_single(
      std::string* single);
  private:
  const std::string& _internal_single() const;
  void _internal_set_single(const std::string& value);
  std::string* _internal_mutable_single();
  public:

  // bytes sc_wallet_adr = 3;
  bool has_sc_wallet_adr() const;
  private:
  bool _internal_has_sc_wallet_adr() const;
  public:
  void clear_sc_wallet_adr();
  const std::string& sc_wallet_adr() const;
  void set_sc_wallet_adr(const std::string& value);
  void set_sc_wallet_adr(std::string&& value);
  void set_sc_wallet_adr(const char* value);
  void set_sc_wallet_adr(const void* value, size_t size);
  std::string* mutable_sc_wallet_adr();
  std::string* release_sc_wallet_adr();
  void set_allocated_sc_wallet_adr(std::string* sc_wallet_adr);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sc_wallet_adr();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sc_wallet_adr(
      std::string* sc_wallet_adr);
  private:
  const std::string& _internal_sc_wallet_adr() const;
  void _internal_set_sc_wallet_adr(const std::string& value);
  std::string* _internal_mutable_sc_wallet_adr();
  public:

  // .zera_txn.MultiKey multi = 2;
  bool has_multi() const;
  private:
  bool _internal_has_multi() const;
  public:
  void clear_multi();
  const ::zera_txn::MultiKey& multi() const;
  ::zera_txn::MultiKey* release_multi();
  ::zera_txn::MultiKey* mutable_multi();
  void set_allocated_multi(::zera_txn::MultiKey* multi);
  private:
  const ::zera_txn::MultiKey& _internal_multi() const;
  ::zera_txn::MultiKey* _internal_mutable_multi();
  public:
  void unsafe_arena_set_allocated_multi(
      ::zera_txn::MultiKey* multi);
  ::zera_txn::MultiKey* unsafe_arena_release_multi();

  // .zera_txn.GovernanceAuth governance_auth = 4;
  bool has_governance_auth() const;
  private:
  bool _internal_has_governance_auth() const;
  public:
  void clear_governance_auth();
  const ::zera_txn::GovernanceAuth& governance_auth() const;
  ::zera_txn::GovernanceAuth* release_governance_auth();
  ::zera_txn::GovernanceAuth* mutable_governance_auth();
  void set_allocated_governance_auth(::zera_txn::GovernanceAuth* governance_auth);
  private:
  const ::zera_txn::GovernanceAuth& _internal_governance_auth() const;
  ::zera_txn::GovernanceAuth* _internal_mutable_governance_auth();
  public:
  void unsafe_arena_set_allocated_governance_auth(
      ::zera_txn::GovernanceAuth* governance_auth);
  ::zera_txn::GovernanceAuth* unsafe_arena_release_governance_auth();

  // @@protoc_insertion_point(class_scope:zera_txn.PublicKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr single_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sc_wallet_adr_;
  ::zera_txn::MultiKey* multi_;
  ::zera_txn::GovernanceAuth* governance_auth_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class GovernanceAuth PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.GovernanceAuth) */ {
 public:
  inline GovernanceAuth() : GovernanceAuth(nullptr) {};
  virtual ~GovernanceAuth();

  GovernanceAuth(const GovernanceAuth& from);
  GovernanceAuth(GovernanceAuth&& from) noexcept
    : GovernanceAuth() {
    *this = ::std::move(from);
  }

  inline GovernanceAuth& operator=(const GovernanceAuth& from) {
    CopyFrom(from);
    return *this;
  }
  inline GovernanceAuth& operator=(GovernanceAuth&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GovernanceAuth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GovernanceAuth* internal_default_instance() {
    return reinterpret_cast<const GovernanceAuth*>(
               &_GovernanceAuth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GovernanceAuth& a, GovernanceAuth& b) {
    a.Swap(&b);
  }
  inline void Swap(GovernanceAuth* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GovernanceAuth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GovernanceAuth* New() const final {
    return CreateMaybeMessage<GovernanceAuth>(nullptr);
  }

  GovernanceAuth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GovernanceAuth>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GovernanceAuth& from);
  void MergeFrom(const GovernanceAuth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GovernanceAuth* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.GovernanceAuth";
  }
  protected:
  explicit GovernanceAuth(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthFieldNumber = 1,
    kProposalIdFieldNumber = 2,
  };
  // bytes auth = 1;
  void clear_auth();
  const std::string& auth() const;
  void set_auth(const std::string& value);
  void set_auth(std::string&& value);
  void set_auth(const char* value);
  void set_auth(const void* value, size_t size);
  std::string* mutable_auth();
  std::string* release_auth();
  void set_allocated_auth(std::string* auth);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_auth();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_auth(
      std::string* auth);
  private:
  const std::string& _internal_auth() const;
  void _internal_set_auth(const std::string& value);
  std::string* _internal_mutable_auth();
  public:

  // bytes proposal_id = 2;
  void clear_proposal_id();
  const std::string& proposal_id() const;
  void set_proposal_id(const std::string& value);
  void set_proposal_id(std::string&& value);
  void set_proposal_id(const char* value);
  void set_proposal_id(const void* value, size_t size);
  std::string* mutable_proposal_id();
  std::string* release_proposal_id();
  void set_allocated_proposal_id(std::string* proposal_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_proposal_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_proposal_id(
      std::string* proposal_id);
  private:
  const std::string& _internal_proposal_id() const;
  void _internal_set_proposal_id(const std::string& value);
  std::string* _internal_mutable_proposal_id();
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.GovernanceAuth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proposal_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class MultiKey PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.MultiKey) */ {
 public:
  inline MultiKey() : MultiKey(nullptr) {};
  virtual ~MultiKey();

  MultiKey(const MultiKey& from);
  MultiKey(MultiKey&& from) noexcept
    : MultiKey() {
    *this = ::std::move(from);
  }

  inline MultiKey& operator=(const MultiKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiKey& operator=(MultiKey&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiKey* internal_default_instance() {
    return reinterpret_cast<const MultiKey*>(
               &_MultiKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(MultiKey& a, MultiKey& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiKey* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiKey* New() const final {
    return CreateMaybeMessage<MultiKey>(nullptr);
  }

  MultiKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiKey& from);
  void MergeFrom(const MultiKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.MultiKey";
  }
  protected:
  explicit MultiKey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeysFieldNumber = 1,
    kSignaturesFieldNumber = 2,
    kMultiPatternsFieldNumber = 3,
    kHashTokensFieldNumber = 4,
  };
  // repeated bytes public_keys = 1;
  int public_keys_size() const;
  private:
  int _internal_public_keys_size() const;
  public:
  void clear_public_keys();
  const std::string& public_keys(int index) const;
  std::string* mutable_public_keys(int index);
  void set_public_keys(int index, const std::string& value);
  void set_public_keys(int index, std::string&& value);
  void set_public_keys(int index, const char* value);
  void set_public_keys(int index, const void* value, size_t size);
  std::string* add_public_keys();
  void add_public_keys(const std::string& value);
  void add_public_keys(std::string&& value);
  void add_public_keys(const char* value);
  void add_public_keys(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& public_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_public_keys();
  private:
  const std::string& _internal_public_keys(int index) const;
  std::string* _internal_add_public_keys();
  public:

  // repeated bytes signatures = 2;
  int signatures_size() const;
  private:
  int _internal_signatures_size() const;
  public:
  void clear_signatures();
  const std::string& signatures(int index) const;
  std::string* mutable_signatures(int index);
  void set_signatures(int index, const std::string& value);
  void set_signatures(int index, std::string&& value);
  void set_signatures(int index, const char* value);
  void set_signatures(int index, const void* value, size_t size);
  std::string* add_signatures();
  void add_signatures(const std::string& value);
  void add_signatures(std::string&& value);
  void add_signatures(const char* value);
  void add_signatures(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& signatures() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_signatures();
  private:
  const std::string& _internal_signatures(int index) const;
  std::string* _internal_add_signatures();
  public:

  // repeated .zera_txn.MultiPatterns multi_patterns = 3;
  int multi_patterns_size() const;
  private:
  int _internal_multi_patterns_size() const;
  public:
  void clear_multi_patterns();
  ::zera_txn::MultiPatterns* mutable_multi_patterns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::MultiPatterns >*
      mutable_multi_patterns();
  private:
  const ::zera_txn::MultiPatterns& _internal_multi_patterns(int index) const;
  ::zera_txn::MultiPatterns* _internal_add_multi_patterns();
  public:
  const ::zera_txn::MultiPatterns& multi_patterns(int index) const;
  ::zera_txn::MultiPatterns* add_multi_patterns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::MultiPatterns >&
      multi_patterns() const;

  // repeated string hash_tokens = 4;
  int hash_tokens_size() const;
  private:
  int _internal_hash_tokens_size() const;
  public:
  void clear_hash_tokens();
  const std::string& hash_tokens(int index) const;
  std::string* mutable_hash_tokens(int index);
  void set_hash_tokens(int index, const std::string& value);
  void set_hash_tokens(int index, std::string&& value);
  void set_hash_tokens(int index, const char* value);
  void set_hash_tokens(int index, const char* value, size_t size);
  std::string* add_hash_tokens();
  void add_hash_tokens(const std::string& value);
  void add_hash_tokens(std::string&& value);
  void add_hash_tokens(const char* value);
  void add_hash_tokens(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& hash_tokens() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_hash_tokens();
  private:
  const std::string& _internal_hash_tokens(int index) const;
  std::string* _internal_add_hash_tokens();
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.MultiKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> public_keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> signatures_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::MultiPatterns > multi_patterns_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> hash_tokens_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class MultiPatterns PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.MultiPatterns) */ {
 public:
  inline MultiPatterns() : MultiPatterns(nullptr) {};
  virtual ~MultiPatterns();

  MultiPatterns(const MultiPatterns& from);
  MultiPatterns(MultiPatterns&& from) noexcept
    : MultiPatterns() {
    *this = ::std::move(from);
  }

  inline MultiPatterns& operator=(const MultiPatterns& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiPatterns& operator=(MultiPatterns&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiPatterns& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiPatterns* internal_default_instance() {
    return reinterpret_cast<const MultiPatterns*>(
               &_MultiPatterns_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(MultiPatterns& a, MultiPatterns& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiPatterns* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiPatterns* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiPatterns* New() const final {
    return CreateMaybeMessage<MultiPatterns>(nullptr);
  }

  MultiPatterns* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiPatterns>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiPatterns& from);
  void MergeFrom(const MultiPatterns& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiPatterns* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.MultiPatterns";
  }
  protected:
  explicit MultiPatterns(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassFieldNumber = 1,
    kRequiredFieldNumber = 2,
  };
  // repeated int32 class = 1;
  int class__size() const;
  private:
  int _internal_class__size() const;
  public:
  void clear_class_();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_class_(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_class_() const;
  void _internal_add_class_(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_class_();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 class_(int index) const;
  void set_class_(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_class_(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      class_() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_class_();

  // repeated int32 required = 2;
  int required_size() const;
  private:
  int _internal_required_size() const;
  public:
  void clear_required();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_required(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_required() const;
  void _internal_add_required(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_required();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 required(int index) const;
  void set_required(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_required(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      required() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_required();

  // @@protoc_insertion_point(class_scope:zera_txn.MultiPatterns)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > class__;
  mutable std::atomic<int> _class__cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > required_;
  mutable std::atomic<int> _required_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class SelfCurrencyEquiv PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.SelfCurrencyEquiv) */ {
 public:
  inline SelfCurrencyEquiv() : SelfCurrencyEquiv(nullptr) {};
  virtual ~SelfCurrencyEquiv();

  SelfCurrencyEquiv(const SelfCurrencyEquiv& from);
  SelfCurrencyEquiv(SelfCurrencyEquiv&& from) noexcept
    : SelfCurrencyEquiv() {
    *this = ::std::move(from);
  }

  inline SelfCurrencyEquiv& operator=(const SelfCurrencyEquiv& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelfCurrencyEquiv& operator=(SelfCurrencyEquiv&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SelfCurrencyEquiv& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SelfCurrencyEquiv* internal_default_instance() {
    return reinterpret_cast<const SelfCurrencyEquiv*>(
               &_SelfCurrencyEquiv_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(SelfCurrencyEquiv& a, SelfCurrencyEquiv& b) {
    a.Swap(&b);
  }
  inline void Swap(SelfCurrencyEquiv* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelfCurrencyEquiv* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelfCurrencyEquiv* New() const final {
    return CreateMaybeMessage<SelfCurrencyEquiv>(nullptr);
  }

  SelfCurrencyEquiv* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelfCurrencyEquiv>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SelfCurrencyEquiv& from);
  void MergeFrom(const SelfCurrencyEquiv& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelfCurrencyEquiv* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.SelfCurrencyEquiv";
  }
  protected:
  explicit SelfCurrencyEquiv(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurEquivFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // repeated .zera_txn.CurrencyEquiv cur_equiv = 2;
  int cur_equiv_size() const;
  private:
  int _internal_cur_equiv_size() const;
  public:
  void clear_cur_equiv();
  ::zera_txn::CurrencyEquiv* mutable_cur_equiv(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::CurrencyEquiv >*
      mutable_cur_equiv();
  private:
  const ::zera_txn::CurrencyEquiv& _internal_cur_equiv(int index) const;
  ::zera_txn::CurrencyEquiv* _internal_add_cur_equiv();
  public:
  const ::zera_txn::CurrencyEquiv& cur_equiv(int index) const;
  ::zera_txn::CurrencyEquiv* add_cur_equiv();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::CurrencyEquiv >&
      cur_equiv() const;

  // .zera_txn.BaseTXN base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::zera_txn::BaseTXN& base() const;
  ::zera_txn::BaseTXN* release_base();
  ::zera_txn::BaseTXN* mutable_base();
  void set_allocated_base(::zera_txn::BaseTXN* base);
  private:
  const ::zera_txn::BaseTXN& _internal_base() const;
  ::zera_txn::BaseTXN* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::zera_txn::BaseTXN* base);
  ::zera_txn::BaseTXN* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:zera_txn.SelfCurrencyEquiv)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::CurrencyEquiv > cur_equiv_;
  ::zera_txn::BaseTXN* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class AuthorizedCurrencyEquiv PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.AuthorizedCurrencyEquiv) */ {
 public:
  inline AuthorizedCurrencyEquiv() : AuthorizedCurrencyEquiv(nullptr) {};
  virtual ~AuthorizedCurrencyEquiv();

  AuthorizedCurrencyEquiv(const AuthorizedCurrencyEquiv& from);
  AuthorizedCurrencyEquiv(AuthorizedCurrencyEquiv&& from) noexcept
    : AuthorizedCurrencyEquiv() {
    *this = ::std::move(from);
  }

  inline AuthorizedCurrencyEquiv& operator=(const AuthorizedCurrencyEquiv& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthorizedCurrencyEquiv& operator=(AuthorizedCurrencyEquiv&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthorizedCurrencyEquiv& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthorizedCurrencyEquiv* internal_default_instance() {
    return reinterpret_cast<const AuthorizedCurrencyEquiv*>(
               &_AuthorizedCurrencyEquiv_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(AuthorizedCurrencyEquiv& a, AuthorizedCurrencyEquiv& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthorizedCurrencyEquiv* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthorizedCurrencyEquiv* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthorizedCurrencyEquiv* New() const final {
    return CreateMaybeMessage<AuthorizedCurrencyEquiv>(nullptr);
  }

  AuthorizedCurrencyEquiv* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthorizedCurrencyEquiv>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthorizedCurrencyEquiv& from);
  void MergeFrom(const AuthorizedCurrencyEquiv& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthorizedCurrencyEquiv* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.AuthorizedCurrencyEquiv";
  }
  protected:
  explicit AuthorizedCurrencyEquiv(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurEquivFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // repeated .zera_txn.CurrencyEquiv cur_equiv = 2;
  int cur_equiv_size() const;
  private:
  int _internal_cur_equiv_size() const;
  public:
  void clear_cur_equiv();
  ::zera_txn::CurrencyEquiv* mutable_cur_equiv(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::CurrencyEquiv >*
      mutable_cur_equiv();
  private:
  const ::zera_txn::CurrencyEquiv& _internal_cur_equiv(int index) const;
  ::zera_txn::CurrencyEquiv* _internal_add_cur_equiv();
  public:
  const ::zera_txn::CurrencyEquiv& cur_equiv(int index) const;
  ::zera_txn::CurrencyEquiv* add_cur_equiv();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::CurrencyEquiv >&
      cur_equiv() const;

  // .zera_txn.BaseTXN base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::zera_txn::BaseTXN& base() const;
  ::zera_txn::BaseTXN* release_base();
  ::zera_txn::BaseTXN* mutable_base();
  void set_allocated_base(::zera_txn::BaseTXN* base);
  private:
  const ::zera_txn::BaseTXN& _internal_base() const;
  ::zera_txn::BaseTXN* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::zera_txn::BaseTXN* base);
  ::zera_txn::BaseTXN* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:zera_txn.AuthorizedCurrencyEquiv)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::CurrencyEquiv > cur_equiv_;
  ::zera_txn::BaseTXN* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class CurrencyEquiv PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.CurrencyEquiv) */ {
 public:
  inline CurrencyEquiv() : CurrencyEquiv(nullptr) {};
  virtual ~CurrencyEquiv();

  CurrencyEquiv(const CurrencyEquiv& from);
  CurrencyEquiv(CurrencyEquiv&& from) noexcept
    : CurrencyEquiv() {
    *this = ::std::move(from);
  }

  inline CurrencyEquiv& operator=(const CurrencyEquiv& from) {
    CopyFrom(from);
    return *this;
  }
  inline CurrencyEquiv& operator=(CurrencyEquiv&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CurrencyEquiv& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CurrencyEquiv* internal_default_instance() {
    return reinterpret_cast<const CurrencyEquiv*>(
               &_CurrencyEquiv_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CurrencyEquiv& a, CurrencyEquiv& b) {
    a.Swap(&b);
  }
  inline void Swap(CurrencyEquiv* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CurrencyEquiv* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CurrencyEquiv* New() const final {
    return CreateMaybeMessage<CurrencyEquiv>(nullptr);
  }

  CurrencyEquiv* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CurrencyEquiv>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CurrencyEquiv& from);
  void MergeFrom(const CurrencyEquiv& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CurrencyEquiv* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.CurrencyEquiv";
  }
  protected:
  explicit CurrencyEquiv(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractIdFieldNumber = 1,
    kRateFieldNumber = 2,
    kMaxStakeFieldNumber = 4,
    kAuthorizedFieldNumber = 3,
  };
  // string contract_id = 1;
  void clear_contract_id();
  const std::string& contract_id() const;
  void set_contract_id(const std::string& value);
  void set_contract_id(std::string&& value);
  void set_contract_id(const char* value);
  void set_contract_id(const char* value, size_t size);
  std::string* mutable_contract_id();
  std::string* release_contract_id();
  void set_allocated_contract_id(std::string* contract_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contract_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contract_id(
      std::string* contract_id);
  private:
  const std::string& _internal_contract_id() const;
  void _internal_set_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_id();
  public:

  // string rate = 2;
  void clear_rate();
  const std::string& rate() const;
  void set_rate(const std::string& value);
  void set_rate(std::string&& value);
  void set_rate(const char* value);
  void set_rate(const char* value, size_t size);
  std::string* mutable_rate();
  std::string* release_rate();
  void set_allocated_rate(std::string* rate);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_rate();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_rate(
      std::string* rate);
  private:
  const std::string& _internal_rate() const;
  void _internal_set_rate(const std::string& value);
  std::string* _internal_mutable_rate();
  public:

  // string max_stake = 4;
  bool has_max_stake() const;
  private:
  bool _internal_has_max_stake() const;
  public:
  void clear_max_stake();
  const std::string& max_stake() const;
  void set_max_stake(const std::string& value);
  void set_max_stake(std::string&& value);
  void set_max_stake(const char* value);
  void set_max_stake(const char* value, size_t size);
  std::string* mutable_max_stake();
  std::string* release_max_stake();
  void set_allocated_max_stake(std::string* max_stake);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_max_stake();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_max_stake(
      std::string* max_stake);
  private:
  const std::string& _internal_max_stake() const;
  void _internal_set_max_stake(const std::string& value);
  std::string* _internal_mutable_max_stake();
  public:

  // bool authorized = 3;
  bool has_authorized() const;
  private:
  bool _internal_has_authorized() const;
  public:
  void clear_authorized();
  bool authorized() const;
  void set_authorized(bool value);
  private:
  bool _internal_authorized() const;
  void _internal_set_authorized(bool value);
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.CurrencyEquiv)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr max_stake_;
  bool authorized_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class ExpenseRatioResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.ExpenseRatioResult) */ {
 public:
  inline ExpenseRatioResult() : ExpenseRatioResult(nullptr) {};
  virtual ~ExpenseRatioResult();

  ExpenseRatioResult(const ExpenseRatioResult& from);
  ExpenseRatioResult(ExpenseRatioResult&& from) noexcept
    : ExpenseRatioResult() {
    *this = ::std::move(from);
  }

  inline ExpenseRatioResult& operator=(const ExpenseRatioResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExpenseRatioResult& operator=(ExpenseRatioResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExpenseRatioResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExpenseRatioResult* internal_default_instance() {
    return reinterpret_cast<const ExpenseRatioResult*>(
               &_ExpenseRatioResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ExpenseRatioResult& a, ExpenseRatioResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ExpenseRatioResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExpenseRatioResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExpenseRatioResult* New() const final {
    return CreateMaybeMessage<ExpenseRatioResult>(nullptr);
  }

  ExpenseRatioResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExpenseRatioResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExpenseRatioResult& from);
  void MergeFrom(const ExpenseRatioResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExpenseRatioResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.ExpenseRatioResult";
  }
  protected:
  explicit ExpenseRatioResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWalletsFieldNumber = 2,
    kContractIdFieldNumber = 1,
    kHashFieldNumber = 3,
    kRecipientAddressFieldNumber = 4,
  };
  // repeated .zera_txn.Wallets wallets = 2;
  int wallets_size() const;
  private:
  int _internal_wallets_size() const;
  public:
  void clear_wallets();
  ::zera_txn::Wallets* mutable_wallets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::Wallets >*
      mutable_wallets();
  private:
  const ::zera_txn::Wallets& _internal_wallets(int index) const;
  ::zera_txn::Wallets* _internal_add_wallets();
  public:
  const ::zera_txn::Wallets& wallets(int index) const;
  ::zera_txn::Wallets* add_wallets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::Wallets >&
      wallets() const;

  // string contract_id = 1;
  void clear_contract_id();
  const std::string& contract_id() const;
  void set_contract_id(const std::string& value);
  void set_contract_id(std::string&& value);
  void set_contract_id(const char* value);
  void set_contract_id(const char* value, size_t size);
  std::string* mutable_contract_id();
  std::string* release_contract_id();
  void set_allocated_contract_id(std::string* contract_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contract_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contract_id(
      std::string* contract_id);
  private:
  const std::string& _internal_contract_id() const;
  void _internal_set_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_id();
  public:

  // bytes hash = 3;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_hash();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_hash(
      std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // bytes recipient_address = 4;
  void clear_recipient_address();
  const std::string& recipient_address() const;
  void set_recipient_address(const std::string& value);
  void set_recipient_address(std::string&& value);
  void set_recipient_address(const char* value);
  void set_recipient_address(const void* value, size_t size);
  std::string* mutable_recipient_address();
  std::string* release_recipient_address();
  void set_allocated_recipient_address(std::string* recipient_address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_recipient_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_recipient_address(
      std::string* recipient_address);
  private:
  const std::string& _internal_recipient_address() const;
  void _internal_set_recipient_address(const std::string& value);
  std::string* _internal_mutable_recipient_address();
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.ExpenseRatioResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::Wallets > wallets_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recipient_address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class ComplianceAssign PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.ComplianceAssign) */ {
 public:
  inline ComplianceAssign() : ComplianceAssign(nullptr) {};
  virtual ~ComplianceAssign();

  ComplianceAssign(const ComplianceAssign& from);
  ComplianceAssign(ComplianceAssign&& from) noexcept
    : ComplianceAssign() {
    *this = ::std::move(from);
  }

  inline ComplianceAssign& operator=(const ComplianceAssign& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComplianceAssign& operator=(ComplianceAssign&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComplianceAssign& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComplianceAssign* internal_default_instance() {
    return reinterpret_cast<const ComplianceAssign*>(
               &_ComplianceAssign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ComplianceAssign& a, ComplianceAssign& b) {
    a.Swap(&b);
  }
  inline void Swap(ComplianceAssign* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComplianceAssign* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComplianceAssign* New() const final {
    return CreateMaybeMessage<ComplianceAssign>(nullptr);
  }

  ComplianceAssign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComplianceAssign>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComplianceAssign& from);
  void MergeFrom(const ComplianceAssign& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComplianceAssign* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.ComplianceAssign";
  }
  protected:
  explicit ComplianceAssign(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecipientAddressFieldNumber = 1,
    kComplianceLevelFieldNumber = 2,
    kAssignRevokeFieldNumber = 3,
  };
  // bytes recipient_address = 1;
  void clear_recipient_address();
  const std::string& recipient_address() const;
  void set_recipient_address(const std::string& value);
  void set_recipient_address(std::string&& value);
  void set_recipient_address(const char* value);
  void set_recipient_address(const void* value, size_t size);
  std::string* mutable_recipient_address();
  std::string* release_recipient_address();
  void set_allocated_recipient_address(std::string* recipient_address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_recipient_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_recipient_address(
      std::string* recipient_address);
  private:
  const std::string& _internal_recipient_address() const;
  void _internal_set_recipient_address(const std::string& value);
  std::string* _internal_mutable_recipient_address();
  public:

  // uint32 compliance_level = 2;
  void clear_compliance_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 compliance_level() const;
  void set_compliance_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_compliance_level() const;
  void _internal_set_compliance_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool assign_revoke = 3;
  void clear_assign_revoke();
  bool assign_revoke() const;
  void set_assign_revoke(bool value);
  private:
  bool _internal_assign_revoke() const;
  void _internal_set_assign_revoke(bool value);
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.ComplianceAssign)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recipient_address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 compliance_level_;
  bool assign_revoke_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class ComplianceTXN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.ComplianceTXN) */ {
 public:
  inline ComplianceTXN() : ComplianceTXN(nullptr) {};
  virtual ~ComplianceTXN();

  ComplianceTXN(const ComplianceTXN& from);
  ComplianceTXN(ComplianceTXN&& from) noexcept
    : ComplianceTXN() {
    *this = ::std::move(from);
  }

  inline ComplianceTXN& operator=(const ComplianceTXN& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComplianceTXN& operator=(ComplianceTXN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComplianceTXN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComplianceTXN* internal_default_instance() {
    return reinterpret_cast<const ComplianceTXN*>(
               &_ComplianceTXN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ComplianceTXN& a, ComplianceTXN& b) {
    a.Swap(&b);
  }
  inline void Swap(ComplianceTXN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComplianceTXN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComplianceTXN* New() const final {
    return CreateMaybeMessage<ComplianceTXN>(nullptr);
  }

  ComplianceTXN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComplianceTXN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComplianceTXN& from);
  void MergeFrom(const ComplianceTXN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComplianceTXN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.ComplianceTXN";
  }
  protected:
  explicit ComplianceTXN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComplianceFieldNumber = 3,
    kContractIdFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // repeated .zera_txn.ComplianceAssign compliance = 3;
  int compliance_size() const;
  private:
  int _internal_compliance_size() const;
  public:
  void clear_compliance();
  ::zera_txn::ComplianceAssign* mutable_compliance(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ComplianceAssign >*
      mutable_compliance();
  private:
  const ::zera_txn::ComplianceAssign& _internal_compliance(int index) const;
  ::zera_txn::ComplianceAssign* _internal_add_compliance();
  public:
  const ::zera_txn::ComplianceAssign& compliance(int index) const;
  ::zera_txn::ComplianceAssign* add_compliance();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ComplianceAssign >&
      compliance() const;

  // string contract_id = 2;
  void clear_contract_id();
  const std::string& contract_id() const;
  void set_contract_id(const std::string& value);
  void set_contract_id(std::string&& value);
  void set_contract_id(const char* value);
  void set_contract_id(const char* value, size_t size);
  std::string* mutable_contract_id();
  std::string* release_contract_id();
  void set_allocated_contract_id(std::string* contract_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contract_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contract_id(
      std::string* contract_id);
  private:
  const std::string& _internal_contract_id() const;
  void _internal_set_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_id();
  public:

  // .zera_txn.BaseTXN base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::zera_txn::BaseTXN& base() const;
  ::zera_txn::BaseTXN* release_base();
  ::zera_txn::BaseTXN* mutable_base();
  void set_allocated_base(::zera_txn::BaseTXN* base);
  private:
  const ::zera_txn::BaseTXN& _internal_base() const;
  ::zera_txn::BaseTXN* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::zera_txn::BaseTXN* base);
  ::zera_txn::BaseTXN* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:zera_txn.ComplianceTXN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ComplianceAssign > compliance_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
  ::zera_txn::BaseTXN* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class Wallets PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.Wallets) */ {
 public:
  inline Wallets() : Wallets(nullptr) {};
  virtual ~Wallets();

  Wallets(const Wallets& from);
  Wallets(Wallets&& from) noexcept
    : Wallets() {
    *this = ::std::move(from);
  }

  inline Wallets& operator=(const Wallets& from) {
    CopyFrom(from);
    return *this;
  }
  inline Wallets& operator=(Wallets&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Wallets& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Wallets* internal_default_instance() {
    return reinterpret_cast<const Wallets*>(
               &_Wallets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(Wallets& a, Wallets& b) {
    a.Swap(&b);
  }
  inline void Swap(Wallets* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Wallets* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Wallets* New() const final {
    return CreateMaybeMessage<Wallets>(nullptr);
  }

  Wallets* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Wallets>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Wallets& from);
  void MergeFrom(const Wallets& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Wallets* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.Wallets";
  }
  protected:
  explicit Wallets(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // bytes address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_address(
      std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string amount = 2;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_amount();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_amount(
      std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.Wallets)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class QuashTXN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.QuashTXN) */ {
 public:
  inline QuashTXN() : QuashTXN(nullptr) {};
  virtual ~QuashTXN();

  QuashTXN(const QuashTXN& from);
  QuashTXN(QuashTXN&& from) noexcept
    : QuashTXN() {
    *this = ::std::move(from);
  }

  inline QuashTXN& operator=(const QuashTXN& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuashTXN& operator=(QuashTXN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QuashTXN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuashTXN* internal_default_instance() {
    return reinterpret_cast<const QuashTXN*>(
               &_QuashTXN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(QuashTXN& a, QuashTXN& b) {
    a.Swap(&b);
  }
  inline void Swap(QuashTXN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuashTXN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuashTXN* New() const final {
    return CreateMaybeMessage<QuashTXN>(nullptr);
  }

  QuashTXN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuashTXN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QuashTXN& from);
  void MergeFrom(const QuashTXN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuashTXN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.QuashTXN";
  }
  protected:
  explicit QuashTXN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractIdFieldNumber = 2,
    kTxnHashFieldNumber = 3,
    kBaseFieldNumber = 1,
  };
  // string contract_id = 2;
  void clear_contract_id();
  const std::string& contract_id() const;
  void set_contract_id(const std::string& value);
  void set_contract_id(std::string&& value);
  void set_contract_id(const char* value);
  void set_contract_id(const char* value, size_t size);
  std::string* mutable_contract_id();
  std::string* release_contract_id();
  void set_allocated_contract_id(std::string* contract_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contract_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contract_id(
      std::string* contract_id);
  private:
  const std::string& _internal_contract_id() const;
  void _internal_set_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_id();
  public:

  // bytes txn_hash = 3;
  void clear_txn_hash();
  const std::string& txn_hash() const;
  void set_txn_hash(const std::string& value);
  void set_txn_hash(std::string&& value);
  void set_txn_hash(const char* value);
  void set_txn_hash(const void* value, size_t size);
  std::string* mutable_txn_hash();
  std::string* release_txn_hash();
  void set_allocated_txn_hash(std::string* txn_hash);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_txn_hash();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_txn_hash(
      std::string* txn_hash);
  private:
  const std::string& _internal_txn_hash() const;
  void _internal_set_txn_hash(const std::string& value);
  std::string* _internal_mutable_txn_hash();
  public:

  // .zera_txn.BaseTXN base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::zera_txn::BaseTXN& base() const;
  ::zera_txn::BaseTXN* release_base();
  ::zera_txn::BaseTXN* mutable_base();
  void set_allocated_base(::zera_txn::BaseTXN* base);
  private:
  const ::zera_txn::BaseTXN& _internal_base() const;
  ::zera_txn::BaseTXN* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::zera_txn::BaseTXN* base);
  ::zera_txn::BaseTXN* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:zera_txn.QuashTXN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txn_hash_;
  ::zera_txn::BaseTXN* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class QuashResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.QuashResult) */ {
 public:
  inline QuashResult() : QuashResult(nullptr) {};
  virtual ~QuashResult();

  QuashResult(const QuashResult& from);
  QuashResult(QuashResult&& from) noexcept
    : QuashResult() {
    *this = ::std::move(from);
  }

  inline QuashResult& operator=(const QuashResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuashResult& operator=(QuashResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QuashResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuashResult* internal_default_instance() {
    return reinterpret_cast<const QuashResult*>(
               &_QuashResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(QuashResult& a, QuashResult& b) {
    a.Swap(&b);
  }
  inline void Swap(QuashResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuashResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuashResult* New() const final {
    return CreateMaybeMessage<QuashResult>(nullptr);
  }

  QuashResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuashResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QuashResult& from);
  void MergeFrom(const QuashResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuashResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.QuashResult";
  }
  protected:
  explicit QuashResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeysFieldNumber = 2,
    kTxnHashFieldNumber = 1,
  };
  // repeated .zera_txn.PublicKey public_keys = 2;
  int public_keys_size() const;
  private:
  int _internal_public_keys_size() const;
  public:
  void clear_public_keys();
  ::zera_txn::PublicKey* mutable_public_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::PublicKey >*
      mutable_public_keys();
  private:
  const ::zera_txn::PublicKey& _internal_public_keys(int index) const;
  ::zera_txn::PublicKey* _internal_add_public_keys();
  public:
  const ::zera_txn::PublicKey& public_keys(int index) const;
  ::zera_txn::PublicKey* add_public_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::PublicKey >&
      public_keys() const;

  // bytes txn_hash = 1;
  void clear_txn_hash();
  const std::string& txn_hash() const;
  void set_txn_hash(const std::string& value);
  void set_txn_hash(std::string&& value);
  void set_txn_hash(const char* value);
  void set_txn_hash(const void* value, size_t size);
  std::string* mutable_txn_hash();
  std::string* release_txn_hash();
  void set_allocated_txn_hash(std::string* txn_hash);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_txn_hash();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_txn_hash(
      std::string* txn_hash);
  private:
  const std::string& _internal_txn_hash() const;
  void _internal_set_txn_hash(const std::string& value);
  std::string* _internal_mutable_txn_hash();
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.QuashResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::PublicKey > public_keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txn_hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class CoinTXN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.CoinTXN) */ {
 public:
  inline CoinTXN() : CoinTXN(nullptr) {};
  virtual ~CoinTXN();

  CoinTXN(const CoinTXN& from);
  CoinTXN(CoinTXN&& from) noexcept
    : CoinTXN() {
    *this = ::std::move(from);
  }

  inline CoinTXN& operator=(const CoinTXN& from) {
    CopyFrom(from);
    return *this;
  }
  inline CoinTXN& operator=(CoinTXN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CoinTXN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CoinTXN* internal_default_instance() {
    return reinterpret_cast<const CoinTXN*>(
               &_CoinTXN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CoinTXN& a, CoinTXN& b) {
    a.Swap(&b);
  }
  inline void Swap(CoinTXN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CoinTXN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CoinTXN* New() const final {
    return CreateMaybeMessage<CoinTXN>(nullptr);
  }

  CoinTXN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CoinTXN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CoinTXN& from);
  void MergeFrom(const CoinTXN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoinTXN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.CoinTXN";
  }
  protected:
  explicit CoinTXN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransfersFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // repeated .zera_txn.Transfer transfers = 2;
  int transfers_size() const;
  private:
  int _internal_transfers_size() const;
  public:
  void clear_transfers();
  ::zera_txn::Transfer* mutable_transfers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::Transfer >*
      mutable_transfers();
  private:
  const ::zera_txn::Transfer& _internal_transfers(int index) const;
  ::zera_txn::Transfer* _internal_add_transfers();
  public:
  const ::zera_txn::Transfer& transfers(int index) const;
  ::zera_txn::Transfer* add_transfers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::Transfer >&
      transfers() const;

  // .zera_txn.BaseTXN base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::zera_txn::BaseTXN& base() const;
  ::zera_txn::BaseTXN* release_base();
  ::zera_txn::BaseTXN* mutable_base();
  void set_allocated_base(::zera_txn::BaseTXN* base);
  private:
  const ::zera_txn::BaseTXN& _internal_base() const;
  ::zera_txn::BaseTXN* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::zera_txn::BaseTXN* base);
  ::zera_txn::BaseTXN* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:zera_txn.CoinTXN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::Transfer > transfers_;
  ::zera_txn::BaseTXN* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class NewCoinTXN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.NewCoinTXN) */ {
 public:
  inline NewCoinTXN() : NewCoinTXN(nullptr) {};
  virtual ~NewCoinTXN();

  NewCoinTXN(const NewCoinTXN& from);
  NewCoinTXN(NewCoinTXN&& from) noexcept
    : NewCoinTXN() {
    *this = ::std::move(from);
  }

  inline NewCoinTXN& operator=(const NewCoinTXN& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewCoinTXN& operator=(NewCoinTXN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewCoinTXN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewCoinTXN* internal_default_instance() {
    return reinterpret_cast<const NewCoinTXN*>(
               &_NewCoinTXN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(NewCoinTXN& a, NewCoinTXN& b) {
    a.Swap(&b);
  }
  inline void Swap(NewCoinTXN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewCoinTXN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewCoinTXN* New() const final {
    return CreateMaybeMessage<NewCoinTXN>(nullptr);
  }

  NewCoinTXN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewCoinTXN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewCoinTXN& from);
  void MergeFrom(const NewCoinTXN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewCoinTXN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.NewCoinTXN";
  }
  protected:
  explicit NewCoinTXN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputTransfersFieldNumber = 4,
    kOutputTransfersFieldNumber = 5,
    kContractIdFieldNumber = 2,
    kContractFeeIdFieldNumber = 6,
    kContractFeeAmountFieldNumber = 7,
    kBaseFieldNumber = 1,
    kAuthFieldNumber = 3,
  };
  // repeated .zera_txn.InputTransfers input_transfers = 4;
  int input_transfers_size() const;
  private:
  int _internal_input_transfers_size() const;
  public:
  void clear_input_transfers();
  ::zera_txn::InputTransfers* mutable_input_transfers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::InputTransfers >*
      mutable_input_transfers();
  private:
  const ::zera_txn::InputTransfers& _internal_input_transfers(int index) const;
  ::zera_txn::InputTransfers* _internal_add_input_transfers();
  public:
  const ::zera_txn::InputTransfers& input_transfers(int index) const;
  ::zera_txn::InputTransfers* add_input_transfers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::InputTransfers >&
      input_transfers() const;

  // repeated .zera_txn.OutputTransfers output_transfers = 5;
  int output_transfers_size() const;
  private:
  int _internal_output_transfers_size() const;
  public:
  void clear_output_transfers();
  ::zera_txn::OutputTransfers* mutable_output_transfers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::OutputTransfers >*
      mutable_output_transfers();
  private:
  const ::zera_txn::OutputTransfers& _internal_output_transfers(int index) const;
  ::zera_txn::OutputTransfers* _internal_add_output_transfers();
  public:
  const ::zera_txn::OutputTransfers& output_transfers(int index) const;
  ::zera_txn::OutputTransfers* add_output_transfers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::OutputTransfers >&
      output_transfers() const;

  // string contract_id = 2;
  void clear_contract_id();
  const std::string& contract_id() const;
  void set_contract_id(const std::string& value);
  void set_contract_id(std::string&& value);
  void set_contract_id(const char* value);
  void set_contract_id(const char* value, size_t size);
  std::string* mutable_contract_id();
  std::string* release_contract_id();
  void set_allocated_contract_id(std::string* contract_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contract_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contract_id(
      std::string* contract_id);
  private:
  const std::string& _internal_contract_id() const;
  void _internal_set_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_id();
  public:

  // string contract_fee_id = 6;
  bool has_contract_fee_id() const;
  private:
  bool _internal_has_contract_fee_id() const;
  public:
  void clear_contract_fee_id();
  const std::string& contract_fee_id() const;
  void set_contract_fee_id(const std::string& value);
  void set_contract_fee_id(std::string&& value);
  void set_contract_fee_id(const char* value);
  void set_contract_fee_id(const char* value, size_t size);
  std::string* mutable_contract_fee_id();
  std::string* release_contract_fee_id();
  void set_allocated_contract_fee_id(std::string* contract_fee_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contract_fee_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contract_fee_id(
      std::string* contract_fee_id);
  private:
  const std::string& _internal_contract_fee_id() const;
  void _internal_set_contract_fee_id(const std::string& value);
  std::string* _internal_mutable_contract_fee_id();
  public:

  // string contract_fee_amount = 7;
  bool has_contract_fee_amount() const;
  private:
  bool _internal_has_contract_fee_amount() const;
  public:
  void clear_contract_fee_amount();
  const std::string& contract_fee_amount() const;
  void set_contract_fee_amount(const std::string& value);
  void set_contract_fee_amount(std::string&& value);
  void set_contract_fee_amount(const char* value);
  void set_contract_fee_amount(const char* value, size_t size);
  std::string* mutable_contract_fee_amount();
  std::string* release_contract_fee_amount();
  void set_allocated_contract_fee_amount(std::string* contract_fee_amount);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contract_fee_amount();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contract_fee_amount(
      std::string* contract_fee_amount);
  private:
  const std::string& _internal_contract_fee_amount() const;
  void _internal_set_contract_fee_amount(const std::string& value);
  std::string* _internal_mutable_contract_fee_amount();
  public:

  // .zera_txn.BaseTXN base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::zera_txn::BaseTXN& base() const;
  ::zera_txn::BaseTXN* release_base();
  ::zera_txn::BaseTXN* mutable_base();
  void set_allocated_base(::zera_txn::BaseTXN* base);
  private:
  const ::zera_txn::BaseTXN& _internal_base() const;
  ::zera_txn::BaseTXN* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::zera_txn::BaseTXN* base);
  ::zera_txn::BaseTXN* unsafe_arena_release_base();

  // .zera_txn.TransferAuthentication auth = 3;
  bool has_auth() const;
  private:
  bool _internal_has_auth() const;
  public:
  void clear_auth();
  const ::zera_txn::TransferAuthentication& auth() const;
  ::zera_txn::TransferAuthentication* release_auth();
  ::zera_txn::TransferAuthentication* mutable_auth();
  void set_allocated_auth(::zera_txn::TransferAuthentication* auth);
  private:
  const ::zera_txn::TransferAuthentication& _internal_auth() const;
  ::zera_txn::TransferAuthentication* _internal_mutable_auth();
  public:
  void unsafe_arena_set_allocated_auth(
      ::zera_txn::TransferAuthentication* auth);
  ::zera_txn::TransferAuthentication* unsafe_arena_release_auth();

  // @@protoc_insertion_point(class_scope:zera_txn.NewCoinTXN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::InputTransfers > input_transfers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::OutputTransfers > output_transfers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_fee_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_fee_amount_;
  ::zera_txn::BaseTXN* base_;
  ::zera_txn::TransferAuthentication* auth_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class TransferAuthentication PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.TransferAuthentication) */ {
 public:
  inline TransferAuthentication() : TransferAuthentication(nullptr) {};
  virtual ~TransferAuthentication();

  TransferAuthentication(const TransferAuthentication& from);
  TransferAuthentication(TransferAuthentication&& from) noexcept
    : TransferAuthentication() {
    *this = ::std::move(from);
  }

  inline TransferAuthentication& operator=(const TransferAuthentication& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferAuthentication& operator=(TransferAuthentication&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransferAuthentication& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferAuthentication* internal_default_instance() {
    return reinterpret_cast<const TransferAuthentication*>(
               &_TransferAuthentication_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(TransferAuthentication& a, TransferAuthentication& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferAuthentication* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferAuthentication* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferAuthentication* New() const final {
    return CreateMaybeMessage<TransferAuthentication>(nullptr);
  }

  TransferAuthentication* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferAuthentication>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferAuthentication& from);
  void MergeFrom(const TransferAuthentication& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferAuthentication* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.TransferAuthentication";
  }
  protected:
  explicit TransferAuthentication(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 1,
    kSignatureFieldNumber = 2,
    kNonceFieldNumber = 3,
  };
  // repeated .zera_txn.PublicKey public_key = 1;
  int public_key_size() const;
  private:
  int _internal_public_key_size() const;
  public:
  void clear_public_key();
  ::zera_txn::PublicKey* mutable_public_key(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::PublicKey >*
      mutable_public_key();
  private:
  const ::zera_txn::PublicKey& _internal_public_key(int index) const;
  ::zera_txn::PublicKey* _internal_add_public_key();
  public:
  const ::zera_txn::PublicKey& public_key(int index) const;
  ::zera_txn::PublicKey* add_public_key();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::PublicKey >&
      public_key() const;

  // repeated bytes signature = 2;
  int signature_size() const;
  private:
  int _internal_signature_size() const;
  public:
  void clear_signature();
  const std::string& signature(int index) const;
  std::string* mutable_signature(int index);
  void set_signature(int index, const std::string& value);
  void set_signature(int index, std::string&& value);
  void set_signature(int index, const char* value);
  void set_signature(int index, const void* value, size_t size);
  std::string* add_signature();
  void add_signature(const std::string& value);
  void add_signature(std::string&& value);
  void add_signature(const char* value);
  void add_signature(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& signature() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_signature();
  private:
  const std::string& _internal_signature(int index) const;
  std::string* _internal_add_signature();
  public:

  // repeated uint64 nonce = 3;
  int nonce_size() const;
  private:
  int _internal_nonce_size() const;
  public:
  void clear_nonce();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_nonce(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_nonce() const;
  void _internal_add_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_nonce();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce(int index) const;
  void set_nonce(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      nonce() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_nonce();

  // @@protoc_insertion_point(class_scope:zera_txn.TransferAuthentication)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::PublicKey > public_key_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> signature_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > nonce_;
  mutable std::atomic<int> _nonce_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class InputTransfers PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.InputTransfers) */ {
 public:
  inline InputTransfers() : InputTransfers(nullptr) {};
  virtual ~InputTransfers();

  InputTransfers(const InputTransfers& from);
  InputTransfers(InputTransfers&& from) noexcept
    : InputTransfers() {
    *this = ::std::move(from);
  }

  inline InputTransfers& operator=(const InputTransfers& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputTransfers& operator=(InputTransfers&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InputTransfers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputTransfers* internal_default_instance() {
    return reinterpret_cast<const InputTransfers*>(
               &_InputTransfers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(InputTransfers& a, InputTransfers& b) {
    a.Swap(&b);
  }
  inline void Swap(InputTransfers* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputTransfers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputTransfers* New() const final {
    return CreateMaybeMessage<InputTransfers>(nullptr);
  }

  InputTransfers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputTransfers>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InputTransfers& from);
  void MergeFrom(const InputTransfers& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputTransfers* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.InputTransfers";
  }
  protected:
  explicit InputTransfers(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 2,
    kIndexFieldNumber = 1,
    kFeePercentFieldNumber = 3,
    kContractFeePercentFieldNumber = 4,
  };
  // string amount = 2;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_amount();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_amount(
      std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // uint64 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 fee_percent = 3;
  void clear_fee_percent();
  ::PROTOBUF_NAMESPACE_ID::uint32 fee_percent() const;
  void set_fee_percent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fee_percent() const;
  void _internal_set_fee_percent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 contract_fee_percent = 4;
  bool has_contract_fee_percent() const;
  private:
  bool _internal_has_contract_fee_percent() const;
  public:
  void clear_contract_fee_percent();
  ::PROTOBUF_NAMESPACE_ID::uint32 contract_fee_percent() const;
  void set_contract_fee_percent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_contract_fee_percent() const;
  void _internal_set_contract_fee_percent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.InputTransfers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fee_percent_;
  ::PROTOBUF_NAMESPACE_ID::uint32 contract_fee_percent_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class OutputTransfers PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.OutputTransfers) */ {
 public:
  inline OutputTransfers() : OutputTransfers(nullptr) {};
  virtual ~OutputTransfers();

  OutputTransfers(const OutputTransfers& from);
  OutputTransfers(OutputTransfers&& from) noexcept
    : OutputTransfers() {
    *this = ::std::move(from);
  }

  inline OutputTransfers& operator=(const OutputTransfers& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputTransfers& operator=(OutputTransfers&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OutputTransfers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OutputTransfers* internal_default_instance() {
    return reinterpret_cast<const OutputTransfers*>(
               &_OutputTransfers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(OutputTransfers& a, OutputTransfers& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputTransfers* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputTransfers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutputTransfers* New() const final {
    return CreateMaybeMessage<OutputTransfers>(nullptr);
  }

  OutputTransfers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutputTransfers>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OutputTransfers& from);
  void MergeFrom(const OutputTransfers& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputTransfers* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.OutputTransfers";
  }
  protected:
  explicit OutputTransfers(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWalletAddressFieldNumber = 1,
    kAmountFieldNumber = 2,
    kMemoFieldNumber = 3,
  };
  // bytes wallet_address = 1;
  void clear_wallet_address();
  const std::string& wallet_address() const;
  void set_wallet_address(const std::string& value);
  void set_wallet_address(std::string&& value);
  void set_wallet_address(const char* value);
  void set_wallet_address(const void* value, size_t size);
  std::string* mutable_wallet_address();
  std::string* release_wallet_address();
  void set_allocated_wallet_address(std::string* wallet_address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_wallet_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_wallet_address(
      std::string* wallet_address);
  private:
  const std::string& _internal_wallet_address() const;
  void _internal_set_wallet_address(const std::string& value);
  std::string* _internal_mutable_wallet_address();
  public:

  // string amount = 2;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_amount();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_amount(
      std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string memo = 3;
  bool has_memo() const;
  private:
  bool _internal_has_memo() const;
  public:
  void clear_memo();
  const std::string& memo() const;
  void set_memo(const std::string& value);
  void set_memo(std::string&& value);
  void set_memo(const char* value);
  void set_memo(const char* value, size_t size);
  std::string* mutable_memo();
  std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_memo();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_memo(
      std::string* memo);
  private:
  const std::string& _internal_memo() const;
  void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.OutputTransfers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wallet_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class MintTXN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.MintTXN) */ {
 public:
  inline MintTXN() : MintTXN(nullptr) {};
  virtual ~MintTXN();

  MintTXN(const MintTXN& from);
  MintTXN(MintTXN&& from) noexcept
    : MintTXN() {
    *this = ::std::move(from);
  }

  inline MintTXN& operator=(const MintTXN& from) {
    CopyFrom(from);
    return *this;
  }
  inline MintTXN& operator=(MintTXN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MintTXN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MintTXN* internal_default_instance() {
    return reinterpret_cast<const MintTXN*>(
               &_MintTXN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(MintTXN& a, MintTXN& b) {
    a.Swap(&b);
  }
  inline void Swap(MintTXN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MintTXN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MintTXN* New() const final {
    return CreateMaybeMessage<MintTXN>(nullptr);
  }

  MintTXN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MintTXN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MintTXN& from);
  void MergeFrom(const MintTXN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MintTXN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.MintTXN";
  }
  protected:
  explicit MintTXN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractIdFieldNumber = 2,
    kAmountFieldNumber = 3,
    kRecipientAddressFieldNumber = 4,
    kBaseFieldNumber = 1,
  };
  // string contract_id = 2;
  void clear_contract_id();
  const std::string& contract_id() const;
  void set_contract_id(const std::string& value);
  void set_contract_id(std::string&& value);
  void set_contract_id(const char* value);
  void set_contract_id(const char* value, size_t size);
  std::string* mutable_contract_id();
  std::string* release_contract_id();
  void set_allocated_contract_id(std::string* contract_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contract_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contract_id(
      std::string* contract_id);
  private:
  const std::string& _internal_contract_id() const;
  void _internal_set_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_id();
  public:

  // string amount = 3;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_amount();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_amount(
      std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // bytes recipient_address = 4;
  void clear_recipient_address();
  const std::string& recipient_address() const;
  void set_recipient_address(const std::string& value);
  void set_recipient_address(std::string&& value);
  void set_recipient_address(const char* value);
  void set_recipient_address(const void* value, size_t size);
  std::string* mutable_recipient_address();
  std::string* release_recipient_address();
  void set_allocated_recipient_address(std::string* recipient_address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_recipient_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_recipient_address(
      std::string* recipient_address);
  private:
  const std::string& _internal_recipient_address() const;
  void _internal_set_recipient_address(const std::string& value);
  std::string* _internal_mutable_recipient_address();
  public:

  // .zera_txn.BaseTXN base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::zera_txn::BaseTXN& base() const;
  ::zera_txn::BaseTXN* release_base();
  ::zera_txn::BaseTXN* mutable_base();
  void set_allocated_base(::zera_txn::BaseTXN* base);
  private:
  const ::zera_txn::BaseTXN& _internal_base() const;
  ::zera_txn::BaseTXN* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::zera_txn::BaseTXN* base);
  ::zera_txn::BaseTXN* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:zera_txn.MintTXN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recipient_address_;
  ::zera_txn::BaseTXN* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class NFTTXN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.NFTTXN) */ {
 public:
  inline NFTTXN() : NFTTXN(nullptr) {};
  virtual ~NFTTXN();

  NFTTXN(const NFTTXN& from);
  NFTTXN(NFTTXN&& from) noexcept
    : NFTTXN() {
    *this = ::std::move(from);
  }

  inline NFTTXN& operator=(const NFTTXN& from) {
    CopyFrom(from);
    return *this;
  }
  inline NFTTXN& operator=(NFTTXN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NFTTXN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NFTTXN* internal_default_instance() {
    return reinterpret_cast<const NFTTXN*>(
               &_NFTTXN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(NFTTXN& a, NFTTXN& b) {
    a.Swap(&b);
  }
  inline void Swap(NFTTXN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NFTTXN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NFTTXN* New() const final {
    return CreateMaybeMessage<NFTTXN>(nullptr);
  }

  NFTTXN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NFTTXN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NFTTXN& from);
  void MergeFrom(const NFTTXN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NFTTXN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.NFTTXN";
  }
  protected:
  explicit NFTTXN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractIdFieldNumber = 2,
    kItemIdFieldNumber = 3,
    kRecipientAddressFieldNumber = 4,
    kContractFeeAmountFieldNumber = 5,
    kContractFeeIdFieldNumber = 6,
    kBaseFieldNumber = 1,
  };
  // string contract_id = 2;
  void clear_contract_id();
  const std::string& contract_id() const;
  void set_contract_id(const std::string& value);
  void set_contract_id(std::string&& value);
  void set_contract_id(const char* value);
  void set_contract_id(const char* value, size_t size);
  std::string* mutable_contract_id();
  std::string* release_contract_id();
  void set_allocated_contract_id(std::string* contract_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contract_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contract_id(
      std::string* contract_id);
  private:
  const std::string& _internal_contract_id() const;
  void _internal_set_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_id();
  public:

  // string item_id = 3;
  void clear_item_id();
  const std::string& item_id() const;
  void set_item_id(const std::string& value);
  void set_item_id(std::string&& value);
  void set_item_id(const char* value);
  void set_item_id(const char* value, size_t size);
  std::string* mutable_item_id();
  std::string* release_item_id();
  void set_allocated_item_id(std::string* item_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_item_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_item_id(
      std::string* item_id);
  private:
  const std::string& _internal_item_id() const;
  void _internal_set_item_id(const std::string& value);
  std::string* _internal_mutable_item_id();
  public:

  // bytes recipient_address = 4;
  void clear_recipient_address();
  const std::string& recipient_address() const;
  void set_recipient_address(const std::string& value);
  void set_recipient_address(std::string&& value);
  void set_recipient_address(const char* value);
  void set_recipient_address(const void* value, size_t size);
  std::string* mutable_recipient_address();
  std::string* release_recipient_address();
  void set_allocated_recipient_address(std::string* recipient_address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_recipient_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_recipient_address(
      std::string* recipient_address);
  private:
  const std::string& _internal_recipient_address() const;
  void _internal_set_recipient_address(const std::string& value);
  std::string* _internal_mutable_recipient_address();
  public:

  // string contract_fee_amount = 5;
  bool has_contract_fee_amount() const;
  private:
  bool _internal_has_contract_fee_amount() const;
  public:
  void clear_contract_fee_amount();
  const std::string& contract_fee_amount() const;
  void set_contract_fee_amount(const std::string& value);
  void set_contract_fee_amount(std::string&& value);
  void set_contract_fee_amount(const char* value);
  void set_contract_fee_amount(const char* value, size_t size);
  std::string* mutable_contract_fee_amount();
  std::string* release_contract_fee_amount();
  void set_allocated_contract_fee_amount(std::string* contract_fee_amount);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contract_fee_amount();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contract_fee_amount(
      std::string* contract_fee_amount);
  private:
  const std::string& _internal_contract_fee_amount() const;
  void _internal_set_contract_fee_amount(const std::string& value);
  std::string* _internal_mutable_contract_fee_amount();
  public:

  // string contract_fee_id = 6;
  bool has_contract_fee_id() const;
  private:
  bool _internal_has_contract_fee_id() const;
  public:
  void clear_contract_fee_id();
  const std::string& contract_fee_id() const;
  void set_contract_fee_id(const std::string& value);
  void set_contract_fee_id(std::string&& value);
  void set_contract_fee_id(const char* value);
  void set_contract_fee_id(const char* value, size_t size);
  std::string* mutable_contract_fee_id();
  std::string* release_contract_fee_id();
  void set_allocated_contract_fee_id(std::string* contract_fee_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contract_fee_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contract_fee_id(
      std::string* contract_fee_id);
  private:
  const std::string& _internal_contract_fee_id() const;
  void _internal_set_contract_fee_id(const std::string& value);
  std::string* _internal_mutable_contract_fee_id();
  public:

  // .zera_txn.BaseTXN base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::zera_txn::BaseTXN& base() const;
  ::zera_txn::BaseTXN* release_base();
  ::zera_txn::BaseTXN* mutable_base();
  void set_allocated_base(::zera_txn::BaseTXN* base);
  private:
  const ::zera_txn::BaseTXN& _internal_base() const;
  ::zera_txn::BaseTXN* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::zera_txn::BaseTXN* base);
  ::zera_txn::BaseTXN* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:zera_txn.NFTTXN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recipient_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_fee_amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_fee_id_;
  ::zera_txn::BaseTXN* base_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class ItemizedMintTXN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.ItemizedMintTXN) */ {
 public:
  inline ItemizedMintTXN() : ItemizedMintTXN(nullptr) {};
  virtual ~ItemizedMintTXN();

  ItemizedMintTXN(const ItemizedMintTXN& from);
  ItemizedMintTXN(ItemizedMintTXN&& from) noexcept
    : ItemizedMintTXN() {
    *this = ::std::move(from);
  }

  inline ItemizedMintTXN& operator=(const ItemizedMintTXN& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemizedMintTXN& operator=(ItemizedMintTXN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ItemizedMintTXN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ItemizedMintTXN* internal_default_instance() {
    return reinterpret_cast<const ItemizedMintTXN*>(
               &_ItemizedMintTXN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(ItemizedMintTXN& a, ItemizedMintTXN& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemizedMintTXN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ItemizedMintTXN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ItemizedMintTXN* New() const final {
    return CreateMaybeMessage<ItemizedMintTXN>(nullptr);
  }

  ItemizedMintTXN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ItemizedMintTXN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ItemizedMintTXN& from);
  void MergeFrom(const ItemizedMintTXN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemizedMintTXN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.ItemizedMintTXN";
  }
  protected:
  explicit ItemizedMintTXN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 6,
    kContractIdFieldNumber = 2,
    kItemIdFieldNumber = 3,
    kRecipientAddressFieldNumber = 4,
    kVotingWeightFieldNumber = 5,
    kBaseFieldNumber = 1,
    kContractFeesFieldNumber = 8,
    kExpiryFieldNumber = 7,
    kValidFromFieldNumber = 9,
  };
  // repeated .zera_txn.KeyValuePair parameters = 6;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  ::zera_txn::KeyValuePair* mutable_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::KeyValuePair >*
      mutable_parameters();
  private:
  const ::zera_txn::KeyValuePair& _internal_parameters(int index) const;
  ::zera_txn::KeyValuePair* _internal_add_parameters();
  public:
  const ::zera_txn::KeyValuePair& parameters(int index) const;
  ::zera_txn::KeyValuePair* add_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::KeyValuePair >&
      parameters() const;

  // string contract_id = 2;
  void clear_contract_id();
  const std::string& contract_id() const;
  void set_contract_id(const std::string& value);
  void set_contract_id(std::string&& value);
  void set_contract_id(const char* value);
  void set_contract_id(const char* value, size_t size);
  std::string* mutable_contract_id();
  std::string* release_contract_id();
  void set_allocated_contract_id(std::string* contract_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contract_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contract_id(
      std::string* contract_id);
  private:
  const std::string& _internal_contract_id() const;
  void _internal_set_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_id();
  public:

  // string item_id = 3;
  void clear_item_id();
  const std::string& item_id() const;
  void set_item_id(const std::string& value);
  void set_item_id(std::string&& value);
  void set_item_id(const char* value);
  void set_item_id(const char* value, size_t size);
  std::string* mutable_item_id();
  std::string* release_item_id();
  void set_allocated_item_id(std::string* item_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_item_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_item_id(
      std::string* item_id);
  private:
  const std::string& _internal_item_id() const;
  void _internal_set_item_id(const std::string& value);
  std::string* _internal_mutable_item_id();
  public:

  // bytes recipient_address = 4;
  void clear_recipient_address();
  const std::string& recipient_address() const;
  void set_recipient_address(const std::string& value);
  void set_recipient_address(std::string&& value);
  void set_recipient_address(const char* value);
  void set_recipient_address(const void* value, size_t size);
  std::string* mutable_recipient_address();
  std::string* release_recipient_address();
  void set_allocated_recipient_address(std::string* recipient_address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_recipient_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_recipient_address(
      std::string* recipient_address);
  private:
  const std::string& _internal_recipient_address() const;
  void _internal_set_recipient_address(const std::string& value);
  std::string* _internal_mutable_recipient_address();
  public:

  // string voting_weight = 5;
  bool has_voting_weight() const;
  private:
  bool _internal_has_voting_weight() const;
  public:
  void clear_voting_weight();
  const std::string& voting_weight() const;
  void set_voting_weight(const std::string& value);
  void set_voting_weight(std::string&& value);
  void set_voting_weight(const char* value);
  void set_voting_weight(const char* value, size_t size);
  std::string* mutable_voting_weight();
  std::string* release_voting_weight();
  void set_allocated_voting_weight(std::string* voting_weight);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_voting_weight();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_voting_weight(
      std::string* voting_weight);
  private:
  const std::string& _internal_voting_weight() const;
  void _internal_set_voting_weight(const std::string& value);
  std::string* _internal_mutable_voting_weight();
  public:

  // .zera_txn.BaseTXN base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::zera_txn::BaseTXN& base() const;
  ::zera_txn::BaseTXN* release_base();
  ::zera_txn::BaseTXN* mutable_base();
  void set_allocated_base(::zera_txn::BaseTXN* base);
  private:
  const ::zera_txn::BaseTXN& _internal_base() const;
  ::zera_txn::BaseTXN* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::zera_txn::BaseTXN* base);
  ::zera_txn::BaseTXN* unsafe_arena_release_base();

  // .zera_txn.ItemContractFees contract_fees = 8;
  bool has_contract_fees() const;
  private:
  bool _internal_has_contract_fees() const;
  public:
  void clear_contract_fees();
  const ::zera_txn::ItemContractFees& contract_fees() const;
  ::zera_txn::ItemContractFees* release_contract_fees();
  ::zera_txn::ItemContractFees* mutable_contract_fees();
  void set_allocated_contract_fees(::zera_txn::ItemContractFees* contract_fees);
  private:
  const ::zera_txn::ItemContractFees& _internal_contract_fees() const;
  ::zera_txn::ItemContractFees* _internal_mutable_contract_fees();
  public:
  void unsafe_arena_set_allocated_contract_fees(
      ::zera_txn::ItemContractFees* contract_fees);
  ::zera_txn::ItemContractFees* unsafe_arena_release_contract_fees();

  // uint64 expiry = 7;
  bool has_expiry() const;
  private:
  bool _internal_has_expiry() const;
  public:
  void clear_expiry();
  ::PROTOBUF_NAMESPACE_ID::uint64 expiry() const;
  void set_expiry(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_expiry() const;
  void _internal_set_expiry(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 valid_from = 9;
  bool has_valid_from() const;
  private:
  bool _internal_has_valid_from() const;
  public:
  void clear_valid_from();
  ::PROTOBUF_NAMESPACE_ID::uint64 valid_from() const;
  void set_valid_from(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_valid_from() const;
  void _internal_set_valid_from(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.ItemizedMintTXN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::KeyValuePair > parameters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recipient_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr voting_weight_;
  ::zera_txn::BaseTXN* base_;
  ::zera_txn::ItemContractFees* contract_fees_;
  ::PROTOBUF_NAMESPACE_ID::uint64 expiry_;
  ::PROTOBUF_NAMESPACE_ID::uint64 valid_from_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class ContractUpdateTXN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.ContractUpdateTXN) */ {
 public:
  inline ContractUpdateTXN() : ContractUpdateTXN(nullptr) {};
  virtual ~ContractUpdateTXN();

  ContractUpdateTXN(const ContractUpdateTXN& from);
  ContractUpdateTXN(ContractUpdateTXN&& from) noexcept
    : ContractUpdateTXN() {
    *this = ::std::move(from);
  }

  inline ContractUpdateTXN& operator=(const ContractUpdateTXN& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContractUpdateTXN& operator=(ContractUpdateTXN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContractUpdateTXN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContractUpdateTXN* internal_default_instance() {
    return reinterpret_cast<const ContractUpdateTXN*>(
               &_ContractUpdateTXN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(ContractUpdateTXN& a, ContractUpdateTXN& b) {
    a.Swap(&b);
  }
  inline void Swap(ContractUpdateTXN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContractUpdateTXN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContractUpdateTXN* New() const final {
    return CreateMaybeMessage<ContractUpdateTXN>(nullptr);
  }

  ContractUpdateTXN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContractUpdateTXN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContractUpdateTXN& from);
  void MergeFrom(const ContractUpdateTXN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContractUpdateTXN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.ContractUpdateTXN";
  }
  protected:
  explicit ContractUpdateTXN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRestrictedKeysFieldNumber = 6,
    kCustomParametersFieldNumber = 8,
    kExpenseRatioFieldNumber = 9,
    kContractIdFieldNumber = 2,
    kNameFieldNumber = 4,
    kBaseFieldNumber = 1,
    kGovernanceFieldNumber = 5,
    kContractFeesFieldNumber = 7,
    kContractVersionFieldNumber = 3,
  };
  // repeated .zera_txn.RestrictedKey restricted_keys = 6;
  int restricted_keys_size() const;
  private:
  int _internal_restricted_keys_size() const;
  public:
  void clear_restricted_keys();
  ::zera_txn::RestrictedKey* mutable_restricted_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::RestrictedKey >*
      mutable_restricted_keys();
  private:
  const ::zera_txn::RestrictedKey& _internal_restricted_keys(int index) const;
  ::zera_txn::RestrictedKey* _internal_add_restricted_keys();
  public:
  const ::zera_txn::RestrictedKey& restricted_keys(int index) const;
  ::zera_txn::RestrictedKey* add_restricted_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::RestrictedKey >&
      restricted_keys() const;

  // repeated .zera_txn.KeyValuePair custom_parameters = 8;
  int custom_parameters_size() const;
  private:
  int _internal_custom_parameters_size() const;
  public:
  void clear_custom_parameters();
  ::zera_txn::KeyValuePair* mutable_custom_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::KeyValuePair >*
      mutable_custom_parameters();
  private:
  const ::zera_txn::KeyValuePair& _internal_custom_parameters(int index) const;
  ::zera_txn::KeyValuePair* _internal_add_custom_parameters();
  public:
  const ::zera_txn::KeyValuePair& custom_parameters(int index) const;
  ::zera_txn::KeyValuePair* add_custom_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::KeyValuePair >&
      custom_parameters() const;

  // repeated .zera_txn.ExpenseRatio expense_ratio = 9;
  int expense_ratio_size() const;
  private:
  int _internal_expense_ratio_size() const;
  public:
  void clear_expense_ratio();
  ::zera_txn::ExpenseRatio* mutable_expense_ratio(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ExpenseRatio >*
      mutable_expense_ratio();
  private:
  const ::zera_txn::ExpenseRatio& _internal_expense_ratio(int index) const;
  ::zera_txn::ExpenseRatio* _internal_add_expense_ratio();
  public:
  const ::zera_txn::ExpenseRatio& expense_ratio(int index) const;
  ::zera_txn::ExpenseRatio* add_expense_ratio();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ExpenseRatio >&
      expense_ratio() const;

  // string contract_id = 2;
  void clear_contract_id();
  const std::string& contract_id() const;
  void set_contract_id(const std::string& value);
  void set_contract_id(std::string&& value);
  void set_contract_id(const char* value);
  void set_contract_id(const char* value, size_t size);
  std::string* mutable_contract_id();
  std::string* release_contract_id();
  void set_allocated_contract_id(std::string* contract_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contract_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contract_id(
      std::string* contract_id);
  private:
  const std::string& _internal_contract_id() const;
  void _internal_set_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_id();
  public:

  // string name = 4;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .zera_txn.BaseTXN base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::zera_txn::BaseTXN& base() const;
  ::zera_txn::BaseTXN* release_base();
  ::zera_txn::BaseTXN* mutable_base();
  void set_allocated_base(::zera_txn::BaseTXN* base);
  private:
  const ::zera_txn::BaseTXN& _internal_base() const;
  ::zera_txn::BaseTXN* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::zera_txn::BaseTXN* base);
  ::zera_txn::BaseTXN* unsafe_arena_release_base();

  // .zera_txn.Governance governance = 5;
  bool has_governance() const;
  private:
  bool _internal_has_governance() const;
  public:
  void clear_governance();
  const ::zera_txn::Governance& governance() const;
  ::zera_txn::Governance* release_governance();
  ::zera_txn::Governance* mutable_governance();
  void set_allocated_governance(::zera_txn::Governance* governance);
  private:
  const ::zera_txn::Governance& _internal_governance() const;
  ::zera_txn::Governance* _internal_mutable_governance();
  public:
  void unsafe_arena_set_allocated_governance(
      ::zera_txn::Governance* governance);
  ::zera_txn::Governance* unsafe_arena_release_governance();

  // .zera_txn.ContractFees contract_fees = 7;
  bool has_contract_fees() const;
  private:
  bool _internal_has_contract_fees() const;
  public:
  void clear_contract_fees();
  const ::zera_txn::ContractFees& contract_fees() const;
  ::zera_txn::ContractFees* release_contract_fees();
  ::zera_txn::ContractFees* mutable_contract_fees();
  void set_allocated_contract_fees(::zera_txn::ContractFees* contract_fees);
  private:
  const ::zera_txn::ContractFees& _internal_contract_fees() const;
  ::zera_txn::ContractFees* _internal_mutable_contract_fees();
  public:
  void unsafe_arena_set_allocated_contract_fees(
      ::zera_txn::ContractFees* contract_fees);
  ::zera_txn::ContractFees* unsafe_arena_release_contract_fees();

  // uint64 contract_version = 3;
  void clear_contract_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 contract_version() const;
  void set_contract_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_contract_version() const;
  void _internal_set_contract_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.ContractUpdateTXN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::RestrictedKey > restricted_keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::KeyValuePair > custom_parameters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ExpenseRatio > expense_ratio_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::zera_txn::BaseTXN* base_;
  ::zera_txn::Governance* governance_;
  ::zera_txn::ContractFees* contract_fees_;
  ::PROTOBUF_NAMESPACE_ID::uint64 contract_version_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class InstrumentContract PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.InstrumentContract) */ {
 public:
  inline InstrumentContract() : InstrumentContract(nullptr) {};
  virtual ~InstrumentContract();

  InstrumentContract(const InstrumentContract& from);
  InstrumentContract(InstrumentContract&& from) noexcept
    : InstrumentContract() {
    *this = ::std::move(from);
  }

  inline InstrumentContract& operator=(const InstrumentContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstrumentContract& operator=(InstrumentContract&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstrumentContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstrumentContract* internal_default_instance() {
    return reinterpret_cast<const InstrumentContract*>(
               &_InstrumentContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(InstrumentContract& a, InstrumentContract& b) {
    a.Swap(&b);
  }
  inline void Swap(InstrumentContract* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstrumentContract* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstrumentContract* New() const final {
    return CreateMaybeMessage<InstrumentContract>(nullptr);
  }

  InstrumentContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstrumentContract>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstrumentContract& from);
  void MergeFrom(const InstrumentContract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstrumentContract* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.InstrumentContract";
  }
  protected:
  explicit InstrumentContract(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRestrictedKeysFieldNumber = 6,
    kPremintWalletsFieldNumber = 9,
    kCustomParametersFieldNumber = 11,
    kExpenseRatioFieldNumber = 13,
    kTokenComplianceFieldNumber = 18,
    kSymbolFieldNumber = 3,
    kNameFieldNumber = 4,
    kMaxSupplyFieldNumber = 7,
    kContractIdFieldNumber = 12,
    kCurEquivStartFieldNumber = 21,
    kBaseFieldNumber = 1,
    kGovernanceFieldNumber = 5,
    kContractFeesFieldNumber = 8,
    kCoinDenominationFieldNumber = 10,
    kContractVersionFieldNumber = 2,
    kTypeFieldNumber = 14,
    kQuashThresholdFieldNumber = 17,
    kUpdateContractFeesFieldNumber = 15,
    kUpdateExpenseRatioFieldNumber = 16,
    kKycStatusFieldNumber = 19,
    kImmutableKycStatusFieldNumber = 20,
  };
  // repeated .zera_txn.RestrictedKey restricted_keys = 6;
  int restricted_keys_size() const;
  private:
  int _internal_restricted_keys_size() const;
  public:
  void clear_restricted_keys();
  ::zera_txn::RestrictedKey* mutable_restricted_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::RestrictedKey >*
      mutable_restricted_keys();
  private:
  const ::zera_txn::RestrictedKey& _internal_restricted_keys(int index) const;
  ::zera_txn::RestrictedKey* _internal_add_restricted_keys();
  public:
  const ::zera_txn::RestrictedKey& restricted_keys(int index) const;
  ::zera_txn::RestrictedKey* add_restricted_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::RestrictedKey >&
      restricted_keys() const;

  // repeated .zera_txn.PreMintWallet premint_wallets = 9;
  int premint_wallets_size() const;
  private:
  int _internal_premint_wallets_size() const;
  public:
  void clear_premint_wallets();
  ::zera_txn::PreMintWallet* mutable_premint_wallets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::PreMintWallet >*
      mutable_premint_wallets();
  private:
  const ::zera_txn::PreMintWallet& _internal_premint_wallets(int index) const;
  ::zera_txn::PreMintWallet* _internal_add_premint_wallets();
  public:
  const ::zera_txn::PreMintWallet& premint_wallets(int index) const;
  ::zera_txn::PreMintWallet* add_premint_wallets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::PreMintWallet >&
      premint_wallets() const;

  // repeated .zera_txn.KeyValuePair custom_parameters = 11;
  int custom_parameters_size() const;
  private:
  int _internal_custom_parameters_size() const;
  public:
  void clear_custom_parameters();
  ::zera_txn::KeyValuePair* mutable_custom_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::KeyValuePair >*
      mutable_custom_parameters();
  private:
  const ::zera_txn::KeyValuePair& _internal_custom_parameters(int index) const;
  ::zera_txn::KeyValuePair* _internal_add_custom_parameters();
  public:
  const ::zera_txn::KeyValuePair& custom_parameters(int index) const;
  ::zera_txn::KeyValuePair* add_custom_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::KeyValuePair >&
      custom_parameters() const;

  // repeated .zera_txn.ExpenseRatio expense_ratio = 13;
  int expense_ratio_size() const;
  private:
  int _internal_expense_ratio_size() const;
  public:
  void clear_expense_ratio();
  ::zera_txn::ExpenseRatio* mutable_expense_ratio(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ExpenseRatio >*
      mutable_expense_ratio();
  private:
  const ::zera_txn::ExpenseRatio& _internal_expense_ratio(int index) const;
  ::zera_txn::ExpenseRatio* _internal_add_expense_ratio();
  public:
  const ::zera_txn::ExpenseRatio& expense_ratio(int index) const;
  ::zera_txn::ExpenseRatio* add_expense_ratio();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ExpenseRatio >&
      expense_ratio() const;

  // repeated .zera_txn.TokenCompliance token_compliance = 18;
  int token_compliance_size() const;
  private:
  int _internal_token_compliance_size() const;
  public:
  void clear_token_compliance();
  ::zera_txn::TokenCompliance* mutable_token_compliance(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::TokenCompliance >*
      mutable_token_compliance();
  private:
  const ::zera_txn::TokenCompliance& _internal_token_compliance(int index) const;
  ::zera_txn::TokenCompliance* _internal_add_token_compliance();
  public:
  const ::zera_txn::TokenCompliance& token_compliance(int index) const;
  ::zera_txn::TokenCompliance* add_token_compliance();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::TokenCompliance >&
      token_compliance() const;

  // string symbol = 3;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_symbol();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_symbol(
      std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string max_supply = 7;
  bool has_max_supply() const;
  private:
  bool _internal_has_max_supply() const;
  public:
  void clear_max_supply();
  const std::string& max_supply() const;
  void set_max_supply(const std::string& value);
  void set_max_supply(std::string&& value);
  void set_max_supply(const char* value);
  void set_max_supply(const char* value, size_t size);
  std::string* mutable_max_supply();
  std::string* release_max_supply();
  void set_allocated_max_supply(std::string* max_supply);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_max_supply();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_max_supply(
      std::string* max_supply);
  private:
  const std::string& _internal_max_supply() const;
  void _internal_set_max_supply(const std::string& value);
  std::string* _internal_mutable_max_supply();
  public:

  // string contract_id = 12;
  void clear_contract_id();
  const std::string& contract_id() const;
  void set_contract_id(const std::string& value);
  void set_contract_id(std::string&& value);
  void set_contract_id(const char* value);
  void set_contract_id(const char* value, size_t size);
  std::string* mutable_contract_id();
  std::string* release_contract_id();
  void set_allocated_contract_id(std::string* contract_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contract_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contract_id(
      std::string* contract_id);
  private:
  const std::string& _internal_contract_id() const;
  void _internal_set_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_id();
  public:

  // string cur_equiv_start = 21;
  bool has_cur_equiv_start() const;
  private:
  bool _internal_has_cur_equiv_start() const;
  public:
  void clear_cur_equiv_start();
  const std::string& cur_equiv_start() const;
  void set_cur_equiv_start(const std::string& value);
  void set_cur_equiv_start(std::string&& value);
  void set_cur_equiv_start(const char* value);
  void set_cur_equiv_start(const char* value, size_t size);
  std::string* mutable_cur_equiv_start();
  std::string* release_cur_equiv_start();
  void set_allocated_cur_equiv_start(std::string* cur_equiv_start);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cur_equiv_start();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cur_equiv_start(
      std::string* cur_equiv_start);
  private:
  const std::string& _internal_cur_equiv_start() const;
  void _internal_set_cur_equiv_start(const std::string& value);
  std::string* _internal_mutable_cur_equiv_start();
  public:

  // .zera_txn.BaseTXN base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::zera_txn::BaseTXN& base() const;
  ::zera_txn::BaseTXN* release_base();
  ::zera_txn::BaseTXN* mutable_base();
  void set_allocated_base(::zera_txn::BaseTXN* base);
  private:
  const ::zera_txn::BaseTXN& _internal_base() const;
  ::zera_txn::BaseTXN* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::zera_txn::BaseTXN* base);
  ::zera_txn::BaseTXN* unsafe_arena_release_base();

  // .zera_txn.Governance governance = 5;
  bool has_governance() const;
  private:
  bool _internal_has_governance() const;
  public:
  void clear_governance();
  const ::zera_txn::Governance& governance() const;
  ::zera_txn::Governance* release_governance();
  ::zera_txn::Governance* mutable_governance();
  void set_allocated_governance(::zera_txn::Governance* governance);
  private:
  const ::zera_txn::Governance& _internal_governance() const;
  ::zera_txn::Governance* _internal_mutable_governance();
  public:
  void unsafe_arena_set_allocated_governance(
      ::zera_txn::Governance* governance);
  ::zera_txn::Governance* unsafe_arena_release_governance();

  // .zera_txn.ContractFees contract_fees = 8;
  bool has_contract_fees() const;
  private:
  bool _internal_has_contract_fees() const;
  public:
  void clear_contract_fees();
  const ::zera_txn::ContractFees& contract_fees() const;
  ::zera_txn::ContractFees* release_contract_fees();
  ::zera_txn::ContractFees* mutable_contract_fees();
  void set_allocated_contract_fees(::zera_txn::ContractFees* contract_fees);
  private:
  const ::zera_txn::ContractFees& _internal_contract_fees() const;
  ::zera_txn::ContractFees* _internal_mutable_contract_fees();
  public:
  void unsafe_arena_set_allocated_contract_fees(
      ::zera_txn::ContractFees* contract_fees);
  ::zera_txn::ContractFees* unsafe_arena_release_contract_fees();

  // .zera_txn.CoinDenomination coin_denomination = 10;
  bool has_coin_denomination() const;
  private:
  bool _internal_has_coin_denomination() const;
  public:
  void clear_coin_denomination();
  const ::zera_txn::CoinDenomination& coin_denomination() const;
  ::zera_txn::CoinDenomination* release_coin_denomination();
  ::zera_txn::CoinDenomination* mutable_coin_denomination();
  void set_allocated_coin_denomination(::zera_txn::CoinDenomination* coin_denomination);
  private:
  const ::zera_txn::CoinDenomination& _internal_coin_denomination() const;
  ::zera_txn::CoinDenomination* _internal_mutable_coin_denomination();
  public:
  void unsafe_arena_set_allocated_coin_denomination(
      ::zera_txn::CoinDenomination* coin_denomination);
  ::zera_txn::CoinDenomination* unsafe_arena_release_coin_denomination();

  // uint64 contract_version = 2;
  void clear_contract_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 contract_version() const;
  void set_contract_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_contract_version() const;
  void _internal_set_contract_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .zera_txn.CONTRACT_TYPE type = 14;
  void clear_type();
  ::zera_txn::CONTRACT_TYPE type() const;
  void set_type(::zera_txn::CONTRACT_TYPE value);
  private:
  ::zera_txn::CONTRACT_TYPE _internal_type() const;
  void _internal_set_type(::zera_txn::CONTRACT_TYPE value);
  public:

  // uint32 quash_threshold = 17;
  bool has_quash_threshold() const;
  private:
  bool _internal_has_quash_threshold() const;
  public:
  void clear_quash_threshold();
  ::PROTOBUF_NAMESPACE_ID::uint32 quash_threshold() const;
  void set_quash_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_quash_threshold() const;
  void _internal_set_quash_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool update_contract_fees = 15;
  void clear_update_contract_fees();
  bool update_contract_fees() const;
  void set_update_contract_fees(bool value);
  private:
  bool _internal_update_contract_fees() const;
  void _internal_set_update_contract_fees(bool value);
  public:

  // bool update_expense_ratio = 16;
  void clear_update_expense_ratio();
  bool update_expense_ratio() const;
  void set_update_expense_ratio(bool value);
  private:
  bool _internal_update_expense_ratio() const;
  void _internal_set_update_expense_ratio(bool value);
  public:

  // bool kyc_status = 19;
  void clear_kyc_status();
  bool kyc_status() const;
  void set_kyc_status(bool value);
  private:
  bool _internal_kyc_status() const;
  void _internal_set_kyc_status(bool value);
  public:

  // bool immutable_kyc_status = 20;
  void clear_immutable_kyc_status();
  bool immutable_kyc_status() const;
  void set_immutable_kyc_status(bool value);
  private:
  bool _internal_immutable_kyc_status() const;
  void _internal_set_immutable_kyc_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.InstrumentContract)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::RestrictedKey > restricted_keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::PreMintWallet > premint_wallets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::KeyValuePair > custom_parameters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ExpenseRatio > expense_ratio_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::TokenCompliance > token_compliance_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr max_supply_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cur_equiv_start_;
  ::zera_txn::BaseTXN* base_;
  ::zera_txn::Governance* governance_;
  ::zera_txn::ContractFees* contract_fees_;
  ::zera_txn::CoinDenomination* coin_denomination_;
  ::PROTOBUF_NAMESPACE_ID::uint64 contract_version_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 quash_threshold_;
  bool update_contract_fees_;
  bool update_expense_ratio_;
  bool kyc_status_;
  bool immutable_kyc_status_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class GovernanceVote PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.GovernanceVote) */ {
 public:
  inline GovernanceVote() : GovernanceVote(nullptr) {};
  virtual ~GovernanceVote();

  GovernanceVote(const GovernanceVote& from);
  GovernanceVote(GovernanceVote&& from) noexcept
    : GovernanceVote() {
    *this = ::std::move(from);
  }

  inline GovernanceVote& operator=(const GovernanceVote& from) {
    CopyFrom(from);
    return *this;
  }
  inline GovernanceVote& operator=(GovernanceVote&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GovernanceVote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GovernanceVote* internal_default_instance() {
    return reinterpret_cast<const GovernanceVote*>(
               &_GovernanceVote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(GovernanceVote& a, GovernanceVote& b) {
    a.Swap(&b);
  }
  inline void Swap(GovernanceVote* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GovernanceVote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GovernanceVote* New() const final {
    return CreateMaybeMessage<GovernanceVote>(nullptr);
  }

  GovernanceVote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GovernanceVote>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GovernanceVote& from);
  void MergeFrom(const GovernanceVote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GovernanceVote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.GovernanceVote";
  }
  protected:
  explicit GovernanceVote(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractIdFieldNumber = 2,
    kProposalIdFieldNumber = 3,
    kBaseFieldNumber = 1,
    kSupportFieldNumber = 4,
    kSupportOptionFieldNumber = 5,
  };
  // string contract_id = 2;
  void clear_contract_id();
  const std::string& contract_id() const;
  void set_contract_id(const std::string& value);
  void set_contract_id(std::string&& value);
  void set_contract_id(const char* value);
  void set_contract_id(const char* value, size_t size);
  std::string* mutable_contract_id();
  std::string* release_contract_id();
  void set_allocated_contract_id(std::string* contract_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contract_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contract_id(
      std::string* contract_id);
  private:
  const std::string& _internal_contract_id() const;
  void _internal_set_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_id();
  public:

  // bytes proposal_id = 3;
  void clear_proposal_id();
  const std::string& proposal_id() const;
  void set_proposal_id(const std::string& value);
  void set_proposal_id(std::string&& value);
  void set_proposal_id(const char* value);
  void set_proposal_id(const void* value, size_t size);
  std::string* mutable_proposal_id();
  std::string* release_proposal_id();
  void set_allocated_proposal_id(std::string* proposal_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_proposal_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_proposal_id(
      std::string* proposal_id);
  private:
  const std::string& _internal_proposal_id() const;
  void _internal_set_proposal_id(const std::string& value);
  std::string* _internal_mutable_proposal_id();
  public:

  // .zera_txn.BaseTXN base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::zera_txn::BaseTXN& base() const;
  ::zera_txn::BaseTXN* release_base();
  ::zera_txn::BaseTXN* mutable_base();
  void set_allocated_base(::zera_txn::BaseTXN* base);
  private:
  const ::zera_txn::BaseTXN& _internal_base() const;
  ::zera_txn::BaseTXN* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::zera_txn::BaseTXN* base);
  ::zera_txn::BaseTXN* unsafe_arena_release_base();

  // bool support = 4;
  bool has_support() const;
  private:
  bool _internal_has_support() const;
  public:
  void clear_support();
  bool support() const;
  void set_support(bool value);
  private:
  bool _internal_support() const;
  void _internal_set_support(bool value);
  public:

  // uint32 support_option = 5;
  bool has_support_option() const;
  private:
  bool _internal_has_support_option() const;
  public:
  void clear_support_option();
  ::PROTOBUF_NAMESPACE_ID::uint32 support_option() const;
  void set_support_option(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_support_option() const;
  void _internal_set_support_option(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.GovernanceVote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proposal_id_;
  ::zera_txn::BaseTXN* base_;
  bool support_;
  ::PROTOBUF_NAMESPACE_ID::uint32 support_option_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class GovernanceProposal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.GovernanceProposal) */ {
 public:
  inline GovernanceProposal() : GovernanceProposal(nullptr) {};
  virtual ~GovernanceProposal();

  GovernanceProposal(const GovernanceProposal& from);
  GovernanceProposal(GovernanceProposal&& from) noexcept
    : GovernanceProposal() {
    *this = ::std::move(from);
  }

  inline GovernanceProposal& operator=(const GovernanceProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline GovernanceProposal& operator=(GovernanceProposal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GovernanceProposal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GovernanceProposal* internal_default_instance() {
    return reinterpret_cast<const GovernanceProposal*>(
               &_GovernanceProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(GovernanceProposal& a, GovernanceProposal& b) {
    a.Swap(&b);
  }
  inline void Swap(GovernanceProposal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GovernanceProposal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GovernanceProposal* New() const final {
    return CreateMaybeMessage<GovernanceProposal>(nullptr);
  }

  GovernanceProposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GovernanceProposal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GovernanceProposal& from);
  void MergeFrom(const GovernanceProposal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GovernanceProposal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.GovernanceProposal";
  }
  protected:
  explicit GovernanceProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 6,
    kGovernanceTxnFieldNumber = 9,
    kContractIdFieldNumber = 2,
    kTitleFieldNumber = 3,
    kSynopsisFieldNumber = 4,
    kBodyFieldNumber = 5,
    kBaseFieldNumber = 1,
    kStartTimestampFieldNumber = 7,
    kEndTimestampFieldNumber = 8,
  };
  // repeated string options = 6;
  int options_size() const;
  private:
  int _internal_options_size() const;
  public:
  void clear_options();
  const std::string& options(int index) const;
  std::string* mutable_options(int index);
  void set_options(int index, const std::string& value);
  void set_options(int index, std::string&& value);
  void set_options(int index, const char* value);
  void set_options(int index, const char* value, size_t size);
  std::string* add_options();
  void add_options(const std::string& value);
  void add_options(std::string&& value);
  void add_options(const char* value);
  void add_options(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& options() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_options();
  private:
  const std::string& _internal_options(int index) const;
  std::string* _internal_add_options();
  public:

  // repeated .zera_txn.GovernanceTXN governance_txn = 9;
  int governance_txn_size() const;
  private:
  int _internal_governance_txn_size() const;
  public:
  void clear_governance_txn();
  ::zera_txn::GovernanceTXN* mutable_governance_txn(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::GovernanceTXN >*
      mutable_governance_txn();
  private:
  const ::zera_txn::GovernanceTXN& _internal_governance_txn(int index) const;
  ::zera_txn::GovernanceTXN* _internal_add_governance_txn();
  public:
  const ::zera_txn::GovernanceTXN& governance_txn(int index) const;
  ::zera_txn::GovernanceTXN* add_governance_txn();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::GovernanceTXN >&
      governance_txn() const;

  // string contract_id = 2;
  void clear_contract_id();
  const std::string& contract_id() const;
  void set_contract_id(const std::string& value);
  void set_contract_id(std::string&& value);
  void set_contract_id(const char* value);
  void set_contract_id(const char* value, size_t size);
  std::string* mutable_contract_id();
  std::string* release_contract_id();
  void set_allocated_contract_id(std::string* contract_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contract_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contract_id(
      std::string* contract_id);
  private:
  const std::string& _internal_contract_id() const;
  void _internal_set_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_id();
  public:

  // string title = 3;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_title();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_title(
      std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string synopsis = 4;
  void clear_synopsis();
  const std::string& synopsis() const;
  void set_synopsis(const std::string& value);
  void set_synopsis(std::string&& value);
  void set_synopsis(const char* value);
  void set_synopsis(const char* value, size_t size);
  std::string* mutable_synopsis();
  std::string* release_synopsis();
  void set_allocated_synopsis(std::string* synopsis);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_synopsis();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_synopsis(
      std::string* synopsis);
  private:
  const std::string& _internal_synopsis() const;
  void _internal_set_synopsis(const std::string& value);
  std::string* _internal_mutable_synopsis();
  public:

  // string body = 5;
  void clear_body();
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_body();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_body(
      std::string* body);
  private:
  const std::string& _internal_body() const;
  void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // .zera_txn.BaseTXN base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::zera_txn::BaseTXN& base() const;
  ::zera_txn::BaseTXN* release_base();
  ::zera_txn::BaseTXN* mutable_base();
  void set_allocated_base(::zera_txn::BaseTXN* base);
  private:
  const ::zera_txn::BaseTXN& _internal_base() const;
  ::zera_txn::BaseTXN* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::zera_txn::BaseTXN* base);
  ::zera_txn::BaseTXN* unsafe_arena_release_base();

  // .google.protobuf.Timestamp start_timestamp = 7;
  bool has_start_timestamp() const;
  private:
  bool _internal_has_start_timestamp() const;
  public:
  void clear_start_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_timestamp();
  void set_allocated_start_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* start_timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_timestamp();
  public:
  void unsafe_arena_set_allocated_start_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* start_timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_timestamp();

  // .google.protobuf.Timestamp end_timestamp = 8;
  bool has_end_timestamp() const;
  private:
  bool _internal_has_end_timestamp() const;
  public:
  void clear_end_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_timestamp();
  void set_allocated_end_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* end_timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_timestamp();
  public:
  void unsafe_arena_set_allocated_end_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* end_timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_timestamp();

  // @@protoc_insertion_point(class_scope:zera_txn.GovernanceProposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> options_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::GovernanceTXN > governance_txn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr synopsis_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::zera_txn::BaseTXN* base_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_timestamp_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_timestamp_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class GovernanceTXN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.GovernanceTXN) */ {
 public:
  inline GovernanceTXN() : GovernanceTXN(nullptr) {};
  virtual ~GovernanceTXN();

  GovernanceTXN(const GovernanceTXN& from);
  GovernanceTXN(GovernanceTXN&& from) noexcept
    : GovernanceTXN() {
    *this = ::std::move(from);
  }

  inline GovernanceTXN& operator=(const GovernanceTXN& from) {
    CopyFrom(from);
    return *this;
  }
  inline GovernanceTXN& operator=(GovernanceTXN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GovernanceTXN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GovernanceTXN* internal_default_instance() {
    return reinterpret_cast<const GovernanceTXN*>(
               &_GovernanceTXN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(GovernanceTXN& a, GovernanceTXN& b) {
    a.Swap(&b);
  }
  inline void Swap(GovernanceTXN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GovernanceTXN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GovernanceTXN* New() const final {
    return CreateMaybeMessage<GovernanceTXN>(nullptr);
  }

  GovernanceTXN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GovernanceTXN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GovernanceTXN& from);
  void MergeFrom(const GovernanceTXN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GovernanceTXN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.GovernanceTXN";
  }
  protected:
  explicit GovernanceTXN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerializedTxnFieldNumber = 2,
    kTxnHashFieldNumber = 3,
    kTxnTypeFieldNumber = 1,
  };
  // bytes serialized_txn = 2;
  void clear_serialized_txn();
  const std::string& serialized_txn() const;
  void set_serialized_txn(const std::string& value);
  void set_serialized_txn(std::string&& value);
  void set_serialized_txn(const char* value);
  void set_serialized_txn(const void* value, size_t size);
  std::string* mutable_serialized_txn();
  std::string* release_serialized_txn();
  void set_allocated_serialized_txn(std::string* serialized_txn);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_serialized_txn();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_serialized_txn(
      std::string* serialized_txn);
  private:
  const std::string& _internal_serialized_txn() const;
  void _internal_set_serialized_txn(const std::string& value);
  std::string* _internal_mutable_serialized_txn();
  public:

  // bytes txn_hash = 3;
  void clear_txn_hash();
  const std::string& txn_hash() const;
  void set_txn_hash(const std::string& value);
  void set_txn_hash(std::string&& value);
  void set_txn_hash(const char* value);
  void set_txn_hash(const void* value, size_t size);
  std::string* mutable_txn_hash();
  std::string* release_txn_hash();
  void set_allocated_txn_hash(std::string* txn_hash);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_txn_hash();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_txn_hash(
      std::string* txn_hash);
  private:
  const std::string& _internal_txn_hash() const;
  void _internal_set_txn_hash(const std::string& value);
  std::string* _internal_mutable_txn_hash();
  public:

  // .zera_txn.TRANSACTION_TYPE txn_type = 1;
  void clear_txn_type();
  ::zera_txn::TRANSACTION_TYPE txn_type() const;
  void set_txn_type(::zera_txn::TRANSACTION_TYPE value);
  private:
  ::zera_txn::TRANSACTION_TYPE _internal_txn_type() const;
  void _internal_set_txn_type(::zera_txn::TRANSACTION_TYPE value);
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.GovernanceTXN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialized_txn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txn_hash_;
  int txn_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class SmartContractTXN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.SmartContractTXN) */ {
 public:
  inline SmartContractTXN() : SmartContractTXN(nullptr) {};
  virtual ~SmartContractTXN();

  SmartContractTXN(const SmartContractTXN& from);
  SmartContractTXN(SmartContractTXN&& from) noexcept
    : SmartContractTXN() {
    *this = ::std::move(from);
  }

  inline SmartContractTXN& operator=(const SmartContractTXN& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmartContractTXN& operator=(SmartContractTXN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SmartContractTXN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SmartContractTXN* internal_default_instance() {
    return reinterpret_cast<const SmartContractTXN*>(
               &_SmartContractTXN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(SmartContractTXN& a, SmartContractTXN& b) {
    a.Swap(&b);
  }
  inline void Swap(SmartContractTXN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SmartContractTXN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SmartContractTXN* New() const final {
    return CreateMaybeMessage<SmartContractTXN>(nullptr);
  }

  SmartContractTXN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SmartContractTXN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SmartContractTXN& from);
  void MergeFrom(const SmartContractTXN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SmartContractTXN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.SmartContractTXN";
  }
  protected:
  explicit SmartContractTXN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariableTypeFieldNumber = 4,
    kRawCodeFieldNumber = 2,
    kBaseFieldNumber = 1,
    kLanguageFieldNumber = 3,
  };
  // repeated .zera_txn.SmartContractParameter variable_type = 4;
  int variable_type_size() const;
  private:
  int _internal_variable_type_size() const;
  public:
  void clear_variable_type();
  ::zera_txn::SmartContractParameter* mutable_variable_type(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::SmartContractParameter >*
      mutable_variable_type();
  private:
  const ::zera_txn::SmartContractParameter& _internal_variable_type(int index) const;
  ::zera_txn::SmartContractParameter* _internal_add_variable_type();
  public:
  const ::zera_txn::SmartContractParameter& variable_type(int index) const;
  ::zera_txn::SmartContractParameter* add_variable_type();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::SmartContractParameter >&
      variable_type() const;

  // string raw_code = 2;
  void clear_raw_code();
  const std::string& raw_code() const;
  void set_raw_code(const std::string& value);
  void set_raw_code(std::string&& value);
  void set_raw_code(const char* value);
  void set_raw_code(const char* value, size_t size);
  std::string* mutable_raw_code();
  std::string* release_raw_code();
  void set_allocated_raw_code(std::string* raw_code);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_raw_code();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_raw_code(
      std::string* raw_code);
  private:
  const std::string& _internal_raw_code() const;
  void _internal_set_raw_code(const std::string& value);
  std::string* _internal_mutable_raw_code();
  public:

  // .zera_txn.BaseTXN base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::zera_txn::BaseTXN& base() const;
  ::zera_txn::BaseTXN* release_base();
  ::zera_txn::BaseTXN* mutable_base();
  void set_allocated_base(::zera_txn::BaseTXN* base);
  private:
  const ::zera_txn::BaseTXN& _internal_base() const;
  ::zera_txn::BaseTXN* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::zera_txn::BaseTXN* base);
  ::zera_txn::BaseTXN* unsafe_arena_release_base();

  // .zera_txn.LANGUAGE language = 3;
  void clear_language();
  ::zera_txn::LANGUAGE language() const;
  void set_language(::zera_txn::LANGUAGE value);
  private:
  ::zera_txn::LANGUAGE _internal_language() const;
  void _internal_set_language(::zera_txn::LANGUAGE value);
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.SmartContractTXN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::SmartContractParameter > variable_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_code_;
  ::zera_txn::BaseTXN* base_;
  int language_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class SmartContractExecuteTXN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.SmartContractExecuteTXN) */ {
 public:
  inline SmartContractExecuteTXN() : SmartContractExecuteTXN(nullptr) {};
  virtual ~SmartContractExecuteTXN();

  SmartContractExecuteTXN(const SmartContractExecuteTXN& from);
  SmartContractExecuteTXN(SmartContractExecuteTXN&& from) noexcept
    : SmartContractExecuteTXN() {
    *this = ::std::move(from);
  }

  inline SmartContractExecuteTXN& operator=(const SmartContractExecuteTXN& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmartContractExecuteTXN& operator=(SmartContractExecuteTXN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SmartContractExecuteTXN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SmartContractExecuteTXN* internal_default_instance() {
    return reinterpret_cast<const SmartContractExecuteTXN*>(
               &_SmartContractExecuteTXN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(SmartContractExecuteTXN& a, SmartContractExecuteTXN& b) {
    a.Swap(&b);
  }
  inline void Swap(SmartContractExecuteTXN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SmartContractExecuteTXN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SmartContractExecuteTXN* New() const final {
    return CreateMaybeMessage<SmartContractExecuteTXN>(nullptr);
  }

  SmartContractExecuteTXN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SmartContractExecuteTXN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SmartContractExecuteTXN& from);
  void MergeFrom(const SmartContractExecuteTXN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SmartContractExecuteTXN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.SmartContractExecuteTXN";
  }
  protected:
  explicit SmartContractExecuteTXN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 3,
    kSmartContractIdFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // repeated .zera_txn.SmartContractParameter parameters = 3;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  ::zera_txn::SmartContractParameter* mutable_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::SmartContractParameter >*
      mutable_parameters();
  private:
  const ::zera_txn::SmartContractParameter& _internal_parameters(int index) const;
  ::zera_txn::SmartContractParameter* _internal_add_parameters();
  public:
  const ::zera_txn::SmartContractParameter& parameters(int index) const;
  ::zera_txn::SmartContractParameter* add_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::SmartContractParameter >&
      parameters() const;

  // bytes smart_contract_id = 2;
  void clear_smart_contract_id();
  const std::string& smart_contract_id() const;
  void set_smart_contract_id(const std::string& value);
  void set_smart_contract_id(std::string&& value);
  void set_smart_contract_id(const char* value);
  void set_smart_contract_id(const void* value, size_t size);
  std::string* mutable_smart_contract_id();
  std::string* release_smart_contract_id();
  void set_allocated_smart_contract_id(std::string* smart_contract_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_smart_contract_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_smart_contract_id(
      std::string* smart_contract_id);
  private:
  const std::string& _internal_smart_contract_id() const;
  void _internal_set_smart_contract_id(const std::string& value);
  std::string* _internal_mutable_smart_contract_id();
  public:

  // .zera_txn.BaseTXN base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::zera_txn::BaseTXN& base() const;
  ::zera_txn::BaseTXN* release_base();
  ::zera_txn::BaseTXN* mutable_base();
  void set_allocated_base(::zera_txn::BaseTXN* base);
  private:
  const ::zera_txn::BaseTXN& _internal_base() const;
  ::zera_txn::BaseTXN* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::zera_txn::BaseTXN* base);
  ::zera_txn::BaseTXN* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:zera_txn.SmartContractExecuteTXN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::SmartContractParameter > parameters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr smart_contract_id_;
  ::zera_txn::BaseTXN* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class Validator PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.Validator) */ {
 public:
  inline Validator() : Validator(nullptr) {};
  virtual ~Validator();

  Validator(const Validator& from);
  Validator(Validator&& from) noexcept
    : Validator() {
    *this = ::std::move(from);
  }

  inline Validator& operator=(const Validator& from) {
    CopyFrom(from);
    return *this;
  }
  inline Validator& operator=(Validator&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Validator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Validator* internal_default_instance() {
    return reinterpret_cast<const Validator*>(
               &_Validator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(Validator& a, Validator& b) {
    a.Swap(&b);
  }
  inline void Swap(Validator* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Validator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Validator* New() const final {
    return CreateMaybeMessage<Validator>(nullptr);
  }

  Validator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Validator>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Validator& from);
  void MergeFrom(const Validator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Validator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.Validator";
  }
  protected:
  explicit Validator(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStakedContractIdsFieldNumber = 5,
    kHostFieldNumber = 2,
    kClientPortFieldNumber = 3,
    kValidatorPortFieldNumber = 4,
    kPublicKeyFieldNumber = 1,
    kTimestampFieldNumber = 7,
    kBenchmarkFieldNumber = 6,
    kLiteFieldNumber = 8,
    kOnlineFieldNumber = 9,
  };
  // repeated string staked_contract_ids = 5;
  int staked_contract_ids_size() const;
  private:
  int _internal_staked_contract_ids_size() const;
  public:
  void clear_staked_contract_ids();
  const std::string& staked_contract_ids(int index) const;
  std::string* mutable_staked_contract_ids(int index);
  void set_staked_contract_ids(int index, const std::string& value);
  void set_staked_contract_ids(int index, std::string&& value);
  void set_staked_contract_ids(int index, const char* value);
  void set_staked_contract_ids(int index, const char* value, size_t size);
  std::string* add_staked_contract_ids();
  void add_staked_contract_ids(const std::string& value);
  void add_staked_contract_ids(std::string&& value);
  void add_staked_contract_ids(const char* value);
  void add_staked_contract_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& staked_contract_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_staked_contract_ids();
  private:
  const std::string& _internal_staked_contract_ids(int index) const;
  std::string* _internal_add_staked_contract_ids();
  public:

  // string host = 2;
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_host();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_host(
      std::string* host);
  private:
  const std::string& _internal_host() const;
  void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // string client_port = 3;
  void clear_client_port();
  const std::string& client_port() const;
  void set_client_port(const std::string& value);
  void set_client_port(std::string&& value);
  void set_client_port(const char* value);
  void set_client_port(const char* value, size_t size);
  std::string* mutable_client_port();
  std::string* release_client_port();
  void set_allocated_client_port(std::string* client_port);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_client_port();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_client_port(
      std::string* client_port);
  private:
  const std::string& _internal_client_port() const;
  void _internal_set_client_port(const std::string& value);
  std::string* _internal_mutable_client_port();
  public:

  // string validator_port = 4;
  void clear_validator_port();
  const std::string& validator_port() const;
  void set_validator_port(const std::string& value);
  void set_validator_port(std::string&& value);
  void set_validator_port(const char* value);
  void set_validator_port(const char* value, size_t size);
  std::string* mutable_validator_port();
  std::string* release_validator_port();
  void set_allocated_validator_port(std::string* validator_port);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_validator_port();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_validator_port(
      std::string* validator_port);
  private:
  const std::string& _internal_validator_port() const;
  void _internal_set_validator_port(const std::string& value);
  std::string* _internal_mutable_validator_port();
  public:

  // .zera_txn.PublicKey public_key = 1;
  bool has_public_key() const;
  private:
  bool _internal_has_public_key() const;
  public:
  void clear_public_key();
  const ::zera_txn::PublicKey& public_key() const;
  ::zera_txn::PublicKey* release_public_key();
  ::zera_txn::PublicKey* mutable_public_key();
  void set_allocated_public_key(::zera_txn::PublicKey* public_key);
  private:
  const ::zera_txn::PublicKey& _internal_public_key() const;
  ::zera_txn::PublicKey* _internal_mutable_public_key();
  public:
  void unsafe_arena_set_allocated_public_key(
      ::zera_txn::PublicKey* public_key);
  ::zera_txn::PublicKey* unsafe_arena_release_public_key();

  // .google.protobuf.Timestamp timestamp = 7;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // uint64 benchmark = 6;
  void clear_benchmark();
  ::PROTOBUF_NAMESPACE_ID::uint64 benchmark() const;
  void set_benchmark(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_benchmark() const;
  void _internal_set_benchmark(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool lite = 8;
  void clear_lite();
  bool lite() const;
  void set_lite(bool value);
  private:
  bool _internal_lite() const;
  void _internal_set_lite(bool value);
  public:

  // bool online = 9;
  void clear_online();
  bool online() const;
  void set_online(bool value);
  private:
  bool _internal_online() const;
  void _internal_set_online(bool value);
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.Validator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> staked_contract_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_port_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_port_;
  ::zera_txn::PublicKey* public_key_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 benchmark_;
  bool lite_;
  bool online_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class ValidatorRegistration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.ValidatorRegistration) */ {
 public:
  inline ValidatorRegistration() : ValidatorRegistration(nullptr) {};
  virtual ~ValidatorRegistration();

  ValidatorRegistration(const ValidatorRegistration& from);
  ValidatorRegistration(ValidatorRegistration&& from) noexcept
    : ValidatorRegistration() {
    *this = ::std::move(from);
  }

  inline ValidatorRegistration& operator=(const ValidatorRegistration& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidatorRegistration& operator=(ValidatorRegistration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidatorRegistration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidatorRegistration* internal_default_instance() {
    return reinterpret_cast<const ValidatorRegistration*>(
               &_ValidatorRegistration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(ValidatorRegistration& a, ValidatorRegistration& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidatorRegistration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidatorRegistration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidatorRegistration* New() const final {
    return CreateMaybeMessage<ValidatorRegistration>(nullptr);
  }

  ValidatorRegistration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidatorRegistration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidatorRegistration& from);
  void MergeFrom(const ValidatorRegistration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidatorRegistration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.ValidatorRegistration";
  }
  protected:
  explicit ValidatorRegistration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kValidatorFieldNumber = 2,
    kRegisterFieldNumber = 3,
  };
  // .zera_txn.BaseTXN base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::zera_txn::BaseTXN& base() const;
  ::zera_txn::BaseTXN* release_base();
  ::zera_txn::BaseTXN* mutable_base();
  void set_allocated_base(::zera_txn::BaseTXN* base);
  private:
  const ::zera_txn::BaseTXN& _internal_base() const;
  ::zera_txn::BaseTXN* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::zera_txn::BaseTXN* base);
  ::zera_txn::BaseTXN* unsafe_arena_release_base();

  // .zera_txn.Validator validator = 2;
  bool has_validator() const;
  private:
  bool _internal_has_validator() const;
  public:
  void clear_validator();
  const ::zera_txn::Validator& validator() const;
  ::zera_txn::Validator* release_validator();
  ::zera_txn::Validator* mutable_validator();
  void set_allocated_validator(::zera_txn::Validator* validator);
  private:
  const ::zera_txn::Validator& _internal_validator() const;
  ::zera_txn::Validator* _internal_mutable_validator();
  public:
  void unsafe_arena_set_allocated_validator(
      ::zera_txn::Validator* validator);
  ::zera_txn::Validator* unsafe_arena_release_validator();

  // bool register = 3;
  void clear_register_();
  bool register_() const;
  void set_register_(bool value);
  private:
  bool _internal_register_() const;
  void _internal_set_register_(bool value);
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.ValidatorRegistration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zera_txn::BaseTXN* base_;
  ::zera_txn::Validator* validator_;
  bool register__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class ValidatorHeartbeat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.ValidatorHeartbeat) */ {
 public:
  inline ValidatorHeartbeat() : ValidatorHeartbeat(nullptr) {};
  virtual ~ValidatorHeartbeat();

  ValidatorHeartbeat(const ValidatorHeartbeat& from);
  ValidatorHeartbeat(ValidatorHeartbeat&& from) noexcept
    : ValidatorHeartbeat() {
    *this = ::std::move(from);
  }

  inline ValidatorHeartbeat& operator=(const ValidatorHeartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidatorHeartbeat& operator=(ValidatorHeartbeat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidatorHeartbeat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidatorHeartbeat* internal_default_instance() {
    return reinterpret_cast<const ValidatorHeartbeat*>(
               &_ValidatorHeartbeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(ValidatorHeartbeat& a, ValidatorHeartbeat& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidatorHeartbeat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidatorHeartbeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidatorHeartbeat* New() const final {
    return CreateMaybeMessage<ValidatorHeartbeat>(nullptr);
  }

  ValidatorHeartbeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidatorHeartbeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidatorHeartbeat& from);
  void MergeFrom(const ValidatorHeartbeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidatorHeartbeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.ValidatorHeartbeat";
  }
  protected:
  explicit ValidatorHeartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kOnlineFieldNumber = 2,
  };
  // .zera_txn.BaseTXN base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::zera_txn::BaseTXN& base() const;
  ::zera_txn::BaseTXN* release_base();
  ::zera_txn::BaseTXN* mutable_base();
  void set_allocated_base(::zera_txn::BaseTXN* base);
  private:
  const ::zera_txn::BaseTXN& _internal_base() const;
  ::zera_txn::BaseTXN* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::zera_txn::BaseTXN* base);
  ::zera_txn::BaseTXN* unsafe_arena_release_base();

  // bool online = 2;
  void clear_online();
  bool online() const;
  void set_online(bool value);
  private:
  bool _internal_online() const;
  void _internal_set_online(bool value);
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.ValidatorHeartbeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zera_txn::BaseTXN* base_;
  bool online_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class SmartContractParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.SmartContractParameter) */ {
 public:
  inline SmartContractParameter() : SmartContractParameter(nullptr) {};
  virtual ~SmartContractParameter();

  SmartContractParameter(const SmartContractParameter& from);
  SmartContractParameter(SmartContractParameter&& from) noexcept
    : SmartContractParameter() {
    *this = ::std::move(from);
  }

  inline SmartContractParameter& operator=(const SmartContractParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmartContractParameter& operator=(SmartContractParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SmartContractParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SmartContractParameter* internal_default_instance() {
    return reinterpret_cast<const SmartContractParameter*>(
               &_SmartContractParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(SmartContractParameter& a, SmartContractParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(SmartContractParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SmartContractParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SmartContractParameter* New() const final {
    return CreateMaybeMessage<SmartContractParameter>(nullptr);
  }

  SmartContractParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SmartContractParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SmartContractParameter& from);
  void MergeFrom(const SmartContractParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SmartContractParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.SmartContractParameter";
  }
  protected:
  explicit SmartContractParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 77,
    kIndexFieldNumber = 75,
    kTypeFieldNumber = 76,
  };
  // string value = 77;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // uint32 index = 75;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .zera_txn.VARIABLE_TYPE type = 76;
  void clear_type();
  ::zera_txn::VARIABLE_TYPE type() const;
  void set_type(::zera_txn::VARIABLE_TYPE value);
  private:
  ::zera_txn::VARIABLE_TYPE _internal_type() const;
  void _internal_set_type(::zera_txn::VARIABLE_TYPE value);
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.SmartContractParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  int type_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class Votes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.Votes) */ {
 public:
  inline Votes() : Votes(nullptr) {};
  virtual ~Votes();

  Votes(const Votes& from);
  Votes(Votes&& from) noexcept
    : Votes() {
    *this = ::std::move(from);
  }

  inline Votes& operator=(const Votes& from) {
    CopyFrom(from);
    return *this;
  }
  inline Votes& operator=(Votes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Votes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Votes* internal_default_instance() {
    return reinterpret_cast<const Votes*>(
               &_Votes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(Votes& a, Votes& b) {
    a.Swap(&b);
  }
  inline void Swap(Votes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Votes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Votes* New() const final {
    return CreateMaybeMessage<Votes>(nullptr);
  }

  Votes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Votes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Votes& from);
  void MergeFrom(const Votes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Votes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.Votes";
  }
  protected:
  explicit Votes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVotesFieldNumber = 1,
  };
  // repeated .zera_txn.VotePair votes = 1;
  int votes_size() const;
  private:
  int _internal_votes_size() const;
  public:
  void clear_votes();
  ::zera_txn::VotePair* mutable_votes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::VotePair >*
      mutable_votes();
  private:
  const ::zera_txn::VotePair& _internal_votes(int index) const;
  ::zera_txn::VotePair* _internal_add_votes();
  public:
  const ::zera_txn::VotePair& votes(int index) const;
  ::zera_txn::VotePair* add_votes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::VotePair >&
      votes() const;

  // @@protoc_insertion_point(class_scope:zera_txn.Votes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::VotePair > votes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class VotePair PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.VotePair) */ {
 public:
  inline VotePair() : VotePair(nullptr) {};
  virtual ~VotePair();

  VotePair(const VotePair& from);
  VotePair(VotePair&& from) noexcept
    : VotePair() {
    *this = ::std::move(from);
  }

  inline VotePair& operator=(const VotePair& from) {
    CopyFrom(from);
    return *this;
  }
  inline VotePair& operator=(VotePair&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VotePair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VotePair* internal_default_instance() {
    return reinterpret_cast<const VotePair*>(
               &_VotePair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(VotePair& a, VotePair& b) {
    a.Swap(&b);
  }
  inline void Swap(VotePair* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VotePair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VotePair* New() const final {
    return CreateMaybeMessage<VotePair>(nullptr);
  }

  VotePair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VotePair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VotePair& from);
  void MergeFrom(const VotePair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VotePair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.VotePair";
  }
  protected:
  explicit VotePair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractIdFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string contract_id = 1;
  void clear_contract_id();
  const std::string& contract_id() const;
  void set_contract_id(const std::string& value);
  void set_contract_id(std::string&& value);
  void set_contract_id(const char* value);
  void set_contract_id(const char* value, size_t size);
  std::string* mutable_contract_id();
  std::string* release_contract_id();
  void set_allocated_contract_id(std::string* contract_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contract_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contract_id(
      std::string* contract_id);
  private:
  const std::string& _internal_contract_id() const;
  void _internal_set_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_id();
  public:

  // string amount = 2;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_amount();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_amount(
      std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.VotePair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class ProposalResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.ProposalResult) */ {
 public:
  inline ProposalResult() : ProposalResult(nullptr) {};
  virtual ~ProposalResult();

  ProposalResult(const ProposalResult& from);
  ProposalResult(ProposalResult&& from) noexcept
    : ProposalResult() {
    *this = ::std::move(from);
  }

  inline ProposalResult& operator=(const ProposalResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProposalResult& operator=(ProposalResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProposalResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProposalResult* internal_default_instance() {
    return reinterpret_cast<const ProposalResult*>(
               &_ProposalResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(ProposalResult& a, ProposalResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ProposalResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProposalResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProposalResult* New() const final {
    return CreateMaybeMessage<ProposalResult>(nullptr);
  }

  ProposalResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProposalResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProposalResult& from);
  void MergeFrom(const ProposalResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProposalResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.ProposalResult";
  }
  protected:
  explicit ProposalResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionCurEquivFieldNumber = 6,
    kOptionVotesFieldNumber = 9,
    kContractIdFieldNumber = 2,
    kProposalIdFieldNumber = 3,
    kSupportCurEquivFieldNumber = 4,
    kAgainstCurEquivFieldNumber = 5,
    kBaseFieldNumber = 1,
    kSupportVotesFieldNumber = 7,
    kAgainstVotesFieldNumber = 8,
    kPassedFieldNumber = 10,
    kFinalStageFieldNumber = 11,
    kFastQuorumFieldNumber = 13,
    kStageFieldNumber = 12,
  };
  // repeated string option_cur_equiv = 6;
  int option_cur_equiv_size() const;
  private:
  int _internal_option_cur_equiv_size() const;
  public:
  void clear_option_cur_equiv();
  const std::string& option_cur_equiv(int index) const;
  std::string* mutable_option_cur_equiv(int index);
  void set_option_cur_equiv(int index, const std::string& value);
  void set_option_cur_equiv(int index, std::string&& value);
  void set_option_cur_equiv(int index, const char* value);
  void set_option_cur_equiv(int index, const char* value, size_t size);
  std::string* add_option_cur_equiv();
  void add_option_cur_equiv(const std::string& value);
  void add_option_cur_equiv(std::string&& value);
  void add_option_cur_equiv(const char* value);
  void add_option_cur_equiv(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& option_cur_equiv() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_option_cur_equiv();
  private:
  const std::string& _internal_option_cur_equiv(int index) const;
  std::string* _internal_add_option_cur_equiv();
  public:

  // repeated .zera_txn.Votes option_votes = 9;
  int option_votes_size() const;
  private:
  int _internal_option_votes_size() const;
  public:
  void clear_option_votes();
  ::zera_txn::Votes* mutable_option_votes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::Votes >*
      mutable_option_votes();
  private:
  const ::zera_txn::Votes& _internal_option_votes(int index) const;
  ::zera_txn::Votes* _internal_add_option_votes();
  public:
  const ::zera_txn::Votes& option_votes(int index) const;
  ::zera_txn::Votes* add_option_votes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::Votes >&
      option_votes() const;

  // string contract_id = 2;
  void clear_contract_id();
  const std::string& contract_id() const;
  void set_contract_id(const std::string& value);
  void set_contract_id(std::string&& value);
  void set_contract_id(const char* value);
  void set_contract_id(const char* value, size_t size);
  std::string* mutable_contract_id();
  std::string* release_contract_id();
  void set_allocated_contract_id(std::string* contract_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contract_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contract_id(
      std::string* contract_id);
  private:
  const std::string& _internal_contract_id() const;
  void _internal_set_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_id();
  public:

  // bytes proposal_id = 3;
  void clear_proposal_id();
  const std::string& proposal_id() const;
  void set_proposal_id(const std::string& value);
  void set_proposal_id(std::string&& value);
  void set_proposal_id(const char* value);
  void set_proposal_id(const void* value, size_t size);
  std::string* mutable_proposal_id();
  std::string* release_proposal_id();
  void set_allocated_proposal_id(std::string* proposal_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_proposal_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_proposal_id(
      std::string* proposal_id);
  private:
  const std::string& _internal_proposal_id() const;
  void _internal_set_proposal_id(const std::string& value);
  std::string* _internal_mutable_proposal_id();
  public:

  // string support_cur_equiv = 4;
  bool has_support_cur_equiv() const;
  private:
  bool _internal_has_support_cur_equiv() const;
  public:
  void clear_support_cur_equiv();
  const std::string& support_cur_equiv() const;
  void set_support_cur_equiv(const std::string& value);
  void set_support_cur_equiv(std::string&& value);
  void set_support_cur_equiv(const char* value);
  void set_support_cur_equiv(const char* value, size_t size);
  std::string* mutable_support_cur_equiv();
  std::string* release_support_cur_equiv();
  void set_allocated_support_cur_equiv(std::string* support_cur_equiv);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_support_cur_equiv();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_support_cur_equiv(
      std::string* support_cur_equiv);
  private:
  const std::string& _internal_support_cur_equiv() const;
  void _internal_set_support_cur_equiv(const std::string& value);
  std::string* _internal_mutable_support_cur_equiv();
  public:

  // string against_cur_equiv = 5;
  bool has_against_cur_equiv() const;
  private:
  bool _internal_has_against_cur_equiv() const;
  public:
  void clear_against_cur_equiv();
  const std::string& against_cur_equiv() const;
  void set_against_cur_equiv(const std::string& value);
  void set_against_cur_equiv(std::string&& value);
  void set_against_cur_equiv(const char* value);
  void set_against_cur_equiv(const char* value, size_t size);
  std::string* mutable_against_cur_equiv();
  std::string* release_against_cur_equiv();
  void set_allocated_against_cur_equiv(std::string* against_cur_equiv);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_against_cur_equiv();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_against_cur_equiv(
      std::string* against_cur_equiv);
  private:
  const std::string& _internal_against_cur_equiv() const;
  void _internal_set_against_cur_equiv(const std::string& value);
  std::string* _internal_mutable_against_cur_equiv();
  public:

  // .zera_txn.BaseTXN base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::zera_txn::BaseTXN& base() const;
  ::zera_txn::BaseTXN* release_base();
  ::zera_txn::BaseTXN* mutable_base();
  void set_allocated_base(::zera_txn::BaseTXN* base);
  private:
  const ::zera_txn::BaseTXN& _internal_base() const;
  ::zera_txn::BaseTXN* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::zera_txn::BaseTXN* base);
  ::zera_txn::BaseTXN* unsafe_arena_release_base();

  // .zera_txn.Votes support_votes = 7;
  bool has_support_votes() const;
  private:
  bool _internal_has_support_votes() const;
  public:
  void clear_support_votes();
  const ::zera_txn::Votes& support_votes() const;
  ::zera_txn::Votes* release_support_votes();
  ::zera_txn::Votes* mutable_support_votes();
  void set_allocated_support_votes(::zera_txn::Votes* support_votes);
  private:
  const ::zera_txn::Votes& _internal_support_votes() const;
  ::zera_txn::Votes* _internal_mutable_support_votes();
  public:
  void unsafe_arena_set_allocated_support_votes(
      ::zera_txn::Votes* support_votes);
  ::zera_txn::Votes* unsafe_arena_release_support_votes();

  // .zera_txn.Votes against_votes = 8;
  bool has_against_votes() const;
  private:
  bool _internal_has_against_votes() const;
  public:
  void clear_against_votes();
  const ::zera_txn::Votes& against_votes() const;
  ::zera_txn::Votes* release_against_votes();
  ::zera_txn::Votes* mutable_against_votes();
  void set_allocated_against_votes(::zera_txn::Votes* against_votes);
  private:
  const ::zera_txn::Votes& _internal_against_votes() const;
  ::zera_txn::Votes* _internal_mutable_against_votes();
  public:
  void unsafe_arena_set_allocated_against_votes(
      ::zera_txn::Votes* against_votes);
  ::zera_txn::Votes* unsafe_arena_release_against_votes();

  // bool passed = 10;
  void clear_passed();
  bool passed() const;
  void set_passed(bool value);
  private:
  bool _internal_passed() const;
  void _internal_set_passed(bool value);
  public:

  // bool final_stage = 11;
  void clear_final_stage();
  bool final_stage() const;
  void set_final_stage(bool value);
  private:
  bool _internal_final_stage() const;
  void _internal_set_final_stage(bool value);
  public:

  // bool fast_quorum = 13;
  void clear_fast_quorum();
  bool fast_quorum() const;
  void set_fast_quorum(bool value);
  private:
  bool _internal_fast_quorum() const;
  void _internal_set_fast_quorum(bool value);
  public:

  // uint32 stage = 12;
  void clear_stage();
  ::PROTOBUF_NAMESPACE_ID::uint32 stage() const;
  void set_stage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stage() const;
  void _internal_set_stage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.ProposalResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> option_cur_equiv_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::Votes > option_votes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proposal_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr support_cur_equiv_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr against_cur_equiv_;
  ::zera_txn::BaseTXN* base_;
  ::zera_txn::Votes* support_votes_;
  ::zera_txn::Votes* against_votes_;
  bool passed_;
  bool final_stage_;
  bool fast_quorum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stage_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class TXNS PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.TXNS) */ {
 public:
  inline TXNS() : TXNS(nullptr) {};
  virtual ~TXNS();

  TXNS(const TXNS& from);
  TXNS(TXNS&& from) noexcept
    : TXNS() {
    *this = ::std::move(from);
  }

  inline TXNS& operator=(const TXNS& from) {
    CopyFrom(from);
    return *this;
  }
  inline TXNS& operator=(TXNS&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TXNS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TXNS* internal_default_instance() {
    return reinterpret_cast<const TXNS*>(
               &_TXNS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(TXNS& a, TXNS& b) {
    a.Swap(&b);
  }
  inline void Swap(TXNS* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TXNS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TXNS* New() const final {
    return CreateMaybeMessage<TXNS>(nullptr);
  }

  TXNS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TXNS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TXNS& from);
  void MergeFrom(const TXNS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TXNS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.TXNS";
  }
  protected:
  explicit TXNS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoinTxnsFieldNumber = 1,
    kMintTxnsFieldNumber = 2,
    kItemMintTxnsFieldNumber = 3,
    kContractTxnsFieldNumber = 4,
    kGovernanceVotesFieldNumber = 5,
    kGovernanceProposalsFieldNumber = 6,
    kSmartContractsFieldNumber = 7,
    kSmartContractExecutesFieldNumber = 8,
    kSelfCurEquivsFieldNumber = 9,
    kAuthCurEquivsFieldNumber = 10,
    kExpenseRatiosFieldNumber = 11,
    kTxnFeesAndStatusFieldNumber = 12,
    kTokenFeesFieldNumber = 13,
    kNftTxnsFieldNumber = 14,
    kContractUpdateTxnsFieldNumber = 15,
    kValidatorRegistrationTxnsFieldNumber = 16,
    kValidatorHeartbeatTxnsFieldNumber = 17,
    kProposalResultTxnsFieldNumber = 18,
    kExpenseRatioResultTxnsFieldNumber = 19,
    kFoundationTxnsFieldNumber = 20,
    kDelegatedVotingTxnsFieldNumber = 21,
    kQuashTxnsFieldNumber = 22,
    kFastQuorumTxnsFieldNumber = 23,
    kQuashResultsFieldNumber = 24,
    kRevokeTxnsFieldNumber = 25,
    kComplianceTxnsFieldNumber = 26,
    kBurnSbtTxnsFieldNumber = 27,
    kNewCoinTxnsFieldNumber = 28,
  };
  // repeated .zera_txn.CoinTXN coin_txns = 1;
  int coin_txns_size() const;
  private:
  int _internal_coin_txns_size() const;
  public:
  void clear_coin_txns();
  ::zera_txn::CoinTXN* mutable_coin_txns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::CoinTXN >*
      mutable_coin_txns();
  private:
  const ::zera_txn::CoinTXN& _internal_coin_txns(int index) const;
  ::zera_txn::CoinTXN* _internal_add_coin_txns();
  public:
  const ::zera_txn::CoinTXN& coin_txns(int index) const;
  ::zera_txn::CoinTXN* add_coin_txns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::CoinTXN >&
      coin_txns() const;

  // repeated .zera_txn.MintTXN mint_txns = 2;
  int mint_txns_size() const;
  private:
  int _internal_mint_txns_size() const;
  public:
  void clear_mint_txns();
  ::zera_txn::MintTXN* mutable_mint_txns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::MintTXN >*
      mutable_mint_txns();
  private:
  const ::zera_txn::MintTXN& _internal_mint_txns(int index) const;
  ::zera_txn::MintTXN* _internal_add_mint_txns();
  public:
  const ::zera_txn::MintTXN& mint_txns(int index) const;
  ::zera_txn::MintTXN* add_mint_txns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::MintTXN >&
      mint_txns() const;

  // repeated .zera_txn.ItemizedMintTXN item_mint_txns = 3;
  int item_mint_txns_size() const;
  private:
  int _internal_item_mint_txns_size() const;
  public:
  void clear_item_mint_txns();
  ::zera_txn::ItemizedMintTXN* mutable_item_mint_txns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ItemizedMintTXN >*
      mutable_item_mint_txns();
  private:
  const ::zera_txn::ItemizedMintTXN& _internal_item_mint_txns(int index) const;
  ::zera_txn::ItemizedMintTXN* _internal_add_item_mint_txns();
  public:
  const ::zera_txn::ItemizedMintTXN& item_mint_txns(int index) const;
  ::zera_txn::ItemizedMintTXN* add_item_mint_txns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ItemizedMintTXN >&
      item_mint_txns() const;

  // repeated .zera_txn.InstrumentContract contract_txns = 4;
  int contract_txns_size() const;
  private:
  int _internal_contract_txns_size() const;
  public:
  void clear_contract_txns();
  ::zera_txn::InstrumentContract* mutable_contract_txns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::InstrumentContract >*
      mutable_contract_txns();
  private:
  const ::zera_txn::InstrumentContract& _internal_contract_txns(int index) const;
  ::zera_txn::InstrumentContract* _internal_add_contract_txns();
  public:
  const ::zera_txn::InstrumentContract& contract_txns(int index) const;
  ::zera_txn::InstrumentContract* add_contract_txns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::InstrumentContract >&
      contract_txns() const;

  // repeated .zera_txn.GovernanceVote governance_votes = 5;
  int governance_votes_size() const;
  private:
  int _internal_governance_votes_size() const;
  public:
  void clear_governance_votes();
  ::zera_txn::GovernanceVote* mutable_governance_votes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::GovernanceVote >*
      mutable_governance_votes();
  private:
  const ::zera_txn::GovernanceVote& _internal_governance_votes(int index) const;
  ::zera_txn::GovernanceVote* _internal_add_governance_votes();
  public:
  const ::zera_txn::GovernanceVote& governance_votes(int index) const;
  ::zera_txn::GovernanceVote* add_governance_votes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::GovernanceVote >&
      governance_votes() const;

  // repeated .zera_txn.GovernanceProposal governance_proposals = 6;
  int governance_proposals_size() const;
  private:
  int _internal_governance_proposals_size() const;
  public:
  void clear_governance_proposals();
  ::zera_txn::GovernanceProposal* mutable_governance_proposals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::GovernanceProposal >*
      mutable_governance_proposals();
  private:
  const ::zera_txn::GovernanceProposal& _internal_governance_proposals(int index) const;
  ::zera_txn::GovernanceProposal* _internal_add_governance_proposals();
  public:
  const ::zera_txn::GovernanceProposal& governance_proposals(int index) const;
  ::zera_txn::GovernanceProposal* add_governance_proposals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::GovernanceProposal >&
      governance_proposals() const;

  // repeated .zera_txn.SmartContractTXN smart_contracts = 7;
  int smart_contracts_size() const;
  private:
  int _internal_smart_contracts_size() const;
  public:
  void clear_smart_contracts();
  ::zera_txn::SmartContractTXN* mutable_smart_contracts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::SmartContractTXN >*
      mutable_smart_contracts();
  private:
  const ::zera_txn::SmartContractTXN& _internal_smart_contracts(int index) const;
  ::zera_txn::SmartContractTXN* _internal_add_smart_contracts();
  public:
  const ::zera_txn::SmartContractTXN& smart_contracts(int index) const;
  ::zera_txn::SmartContractTXN* add_smart_contracts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::SmartContractTXN >&
      smart_contracts() const;

  // repeated .zera_txn.SmartContractExecuteTXN smart_contract_executes = 8;
  int smart_contract_executes_size() const;
  private:
  int _internal_smart_contract_executes_size() const;
  public:
  void clear_smart_contract_executes();
  ::zera_txn::SmartContractExecuteTXN* mutable_smart_contract_executes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::SmartContractExecuteTXN >*
      mutable_smart_contract_executes();
  private:
  const ::zera_txn::SmartContractExecuteTXN& _internal_smart_contract_executes(int index) const;
  ::zera_txn::SmartContractExecuteTXN* _internal_add_smart_contract_executes();
  public:
  const ::zera_txn::SmartContractExecuteTXN& smart_contract_executes(int index) const;
  ::zera_txn::SmartContractExecuteTXN* add_smart_contract_executes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::SmartContractExecuteTXN >&
      smart_contract_executes() const;

  // repeated .zera_txn.SelfCurrencyEquiv self_cur_equivs = 9;
  int self_cur_equivs_size() const;
  private:
  int _internal_self_cur_equivs_size() const;
  public:
  void clear_self_cur_equivs();
  ::zera_txn::SelfCurrencyEquiv* mutable_self_cur_equivs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::SelfCurrencyEquiv >*
      mutable_self_cur_equivs();
  private:
  const ::zera_txn::SelfCurrencyEquiv& _internal_self_cur_equivs(int index) const;
  ::zera_txn::SelfCurrencyEquiv* _internal_add_self_cur_equivs();
  public:
  const ::zera_txn::SelfCurrencyEquiv& self_cur_equivs(int index) const;
  ::zera_txn::SelfCurrencyEquiv* add_self_cur_equivs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::SelfCurrencyEquiv >&
      self_cur_equivs() const;

  // repeated .zera_txn.AuthorizedCurrencyEquiv auth_cur_equivs = 10;
  int auth_cur_equivs_size() const;
  private:
  int _internal_auth_cur_equivs_size() const;
  public:
  void clear_auth_cur_equivs();
  ::zera_txn::AuthorizedCurrencyEquiv* mutable_auth_cur_equivs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::AuthorizedCurrencyEquiv >*
      mutable_auth_cur_equivs();
  private:
  const ::zera_txn::AuthorizedCurrencyEquiv& _internal_auth_cur_equivs(int index) const;
  ::zera_txn::AuthorizedCurrencyEquiv* _internal_add_auth_cur_equivs();
  public:
  const ::zera_txn::AuthorizedCurrencyEquiv& auth_cur_equivs(int index) const;
  ::zera_txn::AuthorizedCurrencyEquiv* add_auth_cur_equivs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::AuthorizedCurrencyEquiv >&
      auth_cur_equivs() const;

  // repeated .zera_txn.ExpenseRatioTXN expense_ratios = 11;
  int expense_ratios_size() const;
  private:
  int _internal_expense_ratios_size() const;
  public:
  void clear_expense_ratios();
  ::zera_txn::ExpenseRatioTXN* mutable_expense_ratios(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ExpenseRatioTXN >*
      mutable_expense_ratios();
  private:
  const ::zera_txn::ExpenseRatioTXN& _internal_expense_ratios(int index) const;
  ::zera_txn::ExpenseRatioTXN* _internal_add_expense_ratios();
  public:
  const ::zera_txn::ExpenseRatioTXN& expense_ratios(int index) const;
  ::zera_txn::ExpenseRatioTXN* add_expense_ratios();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ExpenseRatioTXN >&
      expense_ratios() const;

  // repeated .zera_txn.TXNStatusFees txn_fees_and_status = 12;
  int txn_fees_and_status_size() const;
  private:
  int _internal_txn_fees_and_status_size() const;
  public:
  void clear_txn_fees_and_status();
  ::zera_txn::TXNStatusFees* mutable_txn_fees_and_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::TXNStatusFees >*
      mutable_txn_fees_and_status();
  private:
  const ::zera_txn::TXNStatusFees& _internal_txn_fees_and_status(int index) const;
  ::zera_txn::TXNStatusFees* _internal_add_txn_fees_and_status();
  public:
  const ::zera_txn::TXNStatusFees& txn_fees_and_status(int index) const;
  ::zera_txn::TXNStatusFees* add_txn_fees_and_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::TXNStatusFees >&
      txn_fees_and_status() const;

  // repeated .zera_txn.TokenFees token_fees = 13;
  int token_fees_size() const;
  private:
  int _internal_token_fees_size() const;
  public:
  void clear_token_fees();
  ::zera_txn::TokenFees* mutable_token_fees(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::TokenFees >*
      mutable_token_fees();
  private:
  const ::zera_txn::TokenFees& _internal_token_fees(int index) const;
  ::zera_txn::TokenFees* _internal_add_token_fees();
  public:
  const ::zera_txn::TokenFees& token_fees(int index) const;
  ::zera_txn::TokenFees* add_token_fees();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::TokenFees >&
      token_fees() const;

  // repeated .zera_txn.NFTTXN nft_txns = 14;
  int nft_txns_size() const;
  private:
  int _internal_nft_txns_size() const;
  public:
  void clear_nft_txns();
  ::zera_txn::NFTTXN* mutable_nft_txns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::NFTTXN >*
      mutable_nft_txns();
  private:
  const ::zera_txn::NFTTXN& _internal_nft_txns(int index) const;
  ::zera_txn::NFTTXN* _internal_add_nft_txns();
  public:
  const ::zera_txn::NFTTXN& nft_txns(int index) const;
  ::zera_txn::NFTTXN* add_nft_txns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::NFTTXN >&
      nft_txns() const;

  // repeated .zera_txn.ContractUpdateTXN contract_update_txns = 15;
  int contract_update_txns_size() const;
  private:
  int _internal_contract_update_txns_size() const;
  public:
  void clear_contract_update_txns();
  ::zera_txn::ContractUpdateTXN* mutable_contract_update_txns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ContractUpdateTXN >*
      mutable_contract_update_txns();
  private:
  const ::zera_txn::ContractUpdateTXN& _internal_contract_update_txns(int index) const;
  ::zera_txn::ContractUpdateTXN* _internal_add_contract_update_txns();
  public:
  const ::zera_txn::ContractUpdateTXN& contract_update_txns(int index) const;
  ::zera_txn::ContractUpdateTXN* add_contract_update_txns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ContractUpdateTXN >&
      contract_update_txns() const;

  // repeated .zera_txn.ValidatorRegistration validator_registration_txns = 16;
  int validator_registration_txns_size() const;
  private:
  int _internal_validator_registration_txns_size() const;
  public:
  void clear_validator_registration_txns();
  ::zera_txn::ValidatorRegistration* mutable_validator_registration_txns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ValidatorRegistration >*
      mutable_validator_registration_txns();
  private:
  const ::zera_txn::ValidatorRegistration& _internal_validator_registration_txns(int index) const;
  ::zera_txn::ValidatorRegistration* _internal_add_validator_registration_txns();
  public:
  const ::zera_txn::ValidatorRegistration& validator_registration_txns(int index) const;
  ::zera_txn::ValidatorRegistration* add_validator_registration_txns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ValidatorRegistration >&
      validator_registration_txns() const;

  // repeated .zera_txn.ValidatorHeartbeat validator_heartbeat_txns = 17;
  int validator_heartbeat_txns_size() const;
  private:
  int _internal_validator_heartbeat_txns_size() const;
  public:
  void clear_validator_heartbeat_txns();
  ::zera_txn::ValidatorHeartbeat* mutable_validator_heartbeat_txns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ValidatorHeartbeat >*
      mutable_validator_heartbeat_txns();
  private:
  const ::zera_txn::ValidatorHeartbeat& _internal_validator_heartbeat_txns(int index) const;
  ::zera_txn::ValidatorHeartbeat* _internal_add_validator_heartbeat_txns();
  public:
  const ::zera_txn::ValidatorHeartbeat& validator_heartbeat_txns(int index) const;
  ::zera_txn::ValidatorHeartbeat* add_validator_heartbeat_txns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ValidatorHeartbeat >&
      validator_heartbeat_txns() const;

  // repeated .zera_txn.ProposalResult proposal_result_txns = 18;
  int proposal_result_txns_size() const;
  private:
  int _internal_proposal_result_txns_size() const;
  public:
  void clear_proposal_result_txns();
  ::zera_txn::ProposalResult* mutable_proposal_result_txns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ProposalResult >*
      mutable_proposal_result_txns();
  private:
  const ::zera_txn::ProposalResult& _internal_proposal_result_txns(int index) const;
  ::zera_txn::ProposalResult* _internal_add_proposal_result_txns();
  public:
  const ::zera_txn::ProposalResult& proposal_result_txns(int index) const;
  ::zera_txn::ProposalResult* add_proposal_result_txns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ProposalResult >&
      proposal_result_txns() const;

  // repeated .zera_txn.ExpenseRatioResult expense_ratio_result_txns = 19;
  int expense_ratio_result_txns_size() const;
  private:
  int _internal_expense_ratio_result_txns_size() const;
  public:
  void clear_expense_ratio_result_txns();
  ::zera_txn::ExpenseRatioResult* mutable_expense_ratio_result_txns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ExpenseRatioResult >*
      mutable_expense_ratio_result_txns();
  private:
  const ::zera_txn::ExpenseRatioResult& _internal_expense_ratio_result_txns(int index) const;
  ::zera_txn::ExpenseRatioResult* _internal_add_expense_ratio_result_txns();
  public:
  const ::zera_txn::ExpenseRatioResult& expense_ratio_result_txns(int index) const;
  ::zera_txn::ExpenseRatioResult* add_expense_ratio_result_txns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ExpenseRatioResult >&
      expense_ratio_result_txns() const;

  // repeated .zera_txn.FoundationTXN foundation_txns = 20;
  int foundation_txns_size() const;
  private:
  int _internal_foundation_txns_size() const;
  public:
  void clear_foundation_txns();
  ::zera_txn::FoundationTXN* mutable_foundation_txns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::FoundationTXN >*
      mutable_foundation_txns();
  private:
  const ::zera_txn::FoundationTXN& _internal_foundation_txns(int index) const;
  ::zera_txn::FoundationTXN* _internal_add_foundation_txns();
  public:
  const ::zera_txn::FoundationTXN& foundation_txns(int index) const;
  ::zera_txn::FoundationTXN* add_foundation_txns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::FoundationTXN >&
      foundation_txns() const;

  // repeated .zera_txn.DelegatedVotingTXN delegated_voting_txns = 21;
  int delegated_voting_txns_size() const;
  private:
  int _internal_delegated_voting_txns_size() const;
  public:
  void clear_delegated_voting_txns();
  ::zera_txn::DelegatedVotingTXN* mutable_delegated_voting_txns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::DelegatedVotingTXN >*
      mutable_delegated_voting_txns();
  private:
  const ::zera_txn::DelegatedVotingTXN& _internal_delegated_voting_txns(int index) const;
  ::zera_txn::DelegatedVotingTXN* _internal_add_delegated_voting_txns();
  public:
  const ::zera_txn::DelegatedVotingTXN& delegated_voting_txns(int index) const;
  ::zera_txn::DelegatedVotingTXN* add_delegated_voting_txns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::DelegatedVotingTXN >&
      delegated_voting_txns() const;

  // repeated .zera_txn.QuashTXN quash_txns = 22;
  int quash_txns_size() const;
  private:
  int _internal_quash_txns_size() const;
  public:
  void clear_quash_txns();
  ::zera_txn::QuashTXN* mutable_quash_txns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::QuashTXN >*
      mutable_quash_txns();
  private:
  const ::zera_txn::QuashTXN& _internal_quash_txns(int index) const;
  ::zera_txn::QuashTXN* _internal_add_quash_txns();
  public:
  const ::zera_txn::QuashTXN& quash_txns(int index) const;
  ::zera_txn::QuashTXN* add_quash_txns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::QuashTXN >&
      quash_txns() const;

  // repeated .zera_txn.FastQuorumTXN fast_quorum_txns = 23;
  int fast_quorum_txns_size() const;
  private:
  int _internal_fast_quorum_txns_size() const;
  public:
  void clear_fast_quorum_txns();
  ::zera_txn::FastQuorumTXN* mutable_fast_quorum_txns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::FastQuorumTXN >*
      mutable_fast_quorum_txns();
  private:
  const ::zera_txn::FastQuorumTXN& _internal_fast_quorum_txns(int index) const;
  ::zera_txn::FastQuorumTXN* _internal_add_fast_quorum_txns();
  public:
  const ::zera_txn::FastQuorumTXN& fast_quorum_txns(int index) const;
  ::zera_txn::FastQuorumTXN* add_fast_quorum_txns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::FastQuorumTXN >&
      fast_quorum_txns() const;

  // repeated .zera_txn.QuashResult quash_results = 24;
  int quash_results_size() const;
  private:
  int _internal_quash_results_size() const;
  public:
  void clear_quash_results();
  ::zera_txn::QuashResult* mutable_quash_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::QuashResult >*
      mutable_quash_results();
  private:
  const ::zera_txn::QuashResult& _internal_quash_results(int index) const;
  ::zera_txn::QuashResult* _internal_add_quash_results();
  public:
  const ::zera_txn::QuashResult& quash_results(int index) const;
  ::zera_txn::QuashResult* add_quash_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::QuashResult >&
      quash_results() const;

  // repeated .zera_txn.RevokeTXN revoke_txns = 25;
  int revoke_txns_size() const;
  private:
  int _internal_revoke_txns_size() const;
  public:
  void clear_revoke_txns();
  ::zera_txn::RevokeTXN* mutable_revoke_txns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::RevokeTXN >*
      mutable_revoke_txns();
  private:
  const ::zera_txn::RevokeTXN& _internal_revoke_txns(int index) const;
  ::zera_txn::RevokeTXN* _internal_add_revoke_txns();
  public:
  const ::zera_txn::RevokeTXN& revoke_txns(int index) const;
  ::zera_txn::RevokeTXN* add_revoke_txns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::RevokeTXN >&
      revoke_txns() const;

  // repeated .zera_txn.ComplianceTXN compliance_txns = 26;
  int compliance_txns_size() const;
  private:
  int _internal_compliance_txns_size() const;
  public:
  void clear_compliance_txns();
  ::zera_txn::ComplianceTXN* mutable_compliance_txns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ComplianceTXN >*
      mutable_compliance_txns();
  private:
  const ::zera_txn::ComplianceTXN& _internal_compliance_txns(int index) const;
  ::zera_txn::ComplianceTXN* _internal_add_compliance_txns();
  public:
  const ::zera_txn::ComplianceTXN& compliance_txns(int index) const;
  ::zera_txn::ComplianceTXN* add_compliance_txns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ComplianceTXN >&
      compliance_txns() const;

  // repeated .zera_txn.BurnSBTTXN burn_sbt_txns = 27;
  int burn_sbt_txns_size() const;
  private:
  int _internal_burn_sbt_txns_size() const;
  public:
  void clear_burn_sbt_txns();
  ::zera_txn::BurnSBTTXN* mutable_burn_sbt_txns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::BurnSBTTXN >*
      mutable_burn_sbt_txns();
  private:
  const ::zera_txn::BurnSBTTXN& _internal_burn_sbt_txns(int index) const;
  ::zera_txn::BurnSBTTXN* _internal_add_burn_sbt_txns();
  public:
  const ::zera_txn::BurnSBTTXN& burn_sbt_txns(int index) const;
  ::zera_txn::BurnSBTTXN* add_burn_sbt_txns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::BurnSBTTXN >&
      burn_sbt_txns() const;

  // repeated .zera_txn.NewCoinTXN new_coin_txns = 28;
  int new_coin_txns_size() const;
  private:
  int _internal_new_coin_txns_size() const;
  public:
  void clear_new_coin_txns();
  ::zera_txn::NewCoinTXN* mutable_new_coin_txns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::NewCoinTXN >*
      mutable_new_coin_txns();
  private:
  const ::zera_txn::NewCoinTXN& _internal_new_coin_txns(int index) const;
  ::zera_txn::NewCoinTXN* _internal_add_new_coin_txns();
  public:
  const ::zera_txn::NewCoinTXN& new_coin_txns(int index) const;
  ::zera_txn::NewCoinTXN* add_new_coin_txns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::NewCoinTXN >&
      new_coin_txns() const;

  // @@protoc_insertion_point(class_scope:zera_txn.TXNS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::CoinTXN > coin_txns_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::MintTXN > mint_txns_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ItemizedMintTXN > item_mint_txns_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::InstrumentContract > contract_txns_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::GovernanceVote > governance_votes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::GovernanceProposal > governance_proposals_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::SmartContractTXN > smart_contracts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::SmartContractExecuteTXN > smart_contract_executes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::SelfCurrencyEquiv > self_cur_equivs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::AuthorizedCurrencyEquiv > auth_cur_equivs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ExpenseRatioTXN > expense_ratios_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::TXNStatusFees > txn_fees_and_status_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::TokenFees > token_fees_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::NFTTXN > nft_txns_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ContractUpdateTXN > contract_update_txns_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ValidatorRegistration > validator_registration_txns_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ValidatorHeartbeat > validator_heartbeat_txns_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ProposalResult > proposal_result_txns_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ExpenseRatioResult > expense_ratio_result_txns_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::FoundationTXN > foundation_txns_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::DelegatedVotingTXN > delegated_voting_txns_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::QuashTXN > quash_txns_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::FastQuorumTXN > fast_quorum_txns_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::QuashResult > quash_results_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::RevokeTXN > revoke_txns_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ComplianceTXN > compliance_txns_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::BurnSBTTXN > burn_sbt_txns_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::NewCoinTXN > new_coin_txns_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class Token PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.Token) */ {
 public:
  inline Token() : Token(nullptr) {};
  virtual ~Token();

  Token(const Token& from);
  Token(Token&& from) noexcept
    : Token() {
    *this = ::std::move(from);
  }

  inline Token& operator=(const Token& from) {
    CopyFrom(from);
    return *this;
  }
  inline Token& operator=(Token&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Token& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Token* internal_default_instance() {
    return reinterpret_cast<const Token*>(
               &_Token_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(Token& a, Token& b) {
    a.Swap(&b);
  }
  inline void Swap(Token* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Token* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Token* New() const final {
    return CreateMaybeMessage<Token>(nullptr);
  }

  Token* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Token>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Token& from);
  void MergeFrom(const Token& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Token* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.Token";
  }
  protected:
  explicit Token(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractIdFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string contract_id = 1;
  void clear_contract_id();
  const std::string& contract_id() const;
  void set_contract_id(const std::string& value);
  void set_contract_id(std::string&& value);
  void set_contract_id(const char* value);
  void set_contract_id(const char* value, size_t size);
  std::string* mutable_contract_id();
  std::string* release_contract_id();
  void set_allocated_contract_id(std::string* contract_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contract_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contract_id(
      std::string* contract_id);
  private:
  const std::string& _internal_contract_id() const;
  void _internal_set_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_id();
  public:

  // string amount = 2;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_amount();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_amount(
      std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.Token)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class TokenFees PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.TokenFees) */ {
 public:
  inline TokenFees() : TokenFees(nullptr) {};
  virtual ~TokenFees();

  TokenFees(const TokenFees& from);
  TokenFees(TokenFees&& from) noexcept
    : TokenFees() {
    *this = ::std::move(from);
  }

  inline TokenFees& operator=(const TokenFees& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenFees& operator=(TokenFees&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TokenFees& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TokenFees* internal_default_instance() {
    return reinterpret_cast<const TokenFees*>(
               &_TokenFees_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(TokenFees& a, TokenFees& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenFees* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenFees* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TokenFees* New() const final {
    return CreateMaybeMessage<TokenFees>(nullptr);
  }

  TokenFees* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TokenFees>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TokenFees& from);
  void MergeFrom(const TokenFees& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenFees* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.TokenFees";
  }
  protected:
  explicit TokenFees(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokensFieldNumber = 2,
    kAddressFieldNumber = 1,
  };
  // repeated .zera_txn.Token tokens = 2;
  int tokens_size() const;
  private:
  int _internal_tokens_size() const;
  public:
  void clear_tokens();
  ::zera_txn::Token* mutable_tokens(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::Token >*
      mutable_tokens();
  private:
  const ::zera_txn::Token& _internal_tokens(int index) const;
  ::zera_txn::Token* _internal_add_tokens();
  public:
  const ::zera_txn::Token& tokens(int index) const;
  ::zera_txn::Token* add_tokens();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::Token >&
      tokens() const;

  // bytes address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_address(
      std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.TokenFees)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::Token > tokens_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class TXNStatusFees PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.TXNStatusFees) */ {
 public:
  inline TXNStatusFees() : TXNStatusFees(nullptr) {};
  virtual ~TXNStatusFees();

  TXNStatusFees(const TXNStatusFees& from);
  TXNStatusFees(TXNStatusFees&& from) noexcept
    : TXNStatusFees() {
    *this = ::std::move(from);
  }

  inline TXNStatusFees& operator=(const TXNStatusFees& from) {
    CopyFrom(from);
    return *this;
  }
  inline TXNStatusFees& operator=(TXNStatusFees&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TXNStatusFees& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TXNStatusFees* internal_default_instance() {
    return reinterpret_cast<const TXNStatusFees*>(
               &_TXNStatusFees_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(TXNStatusFees& a, TXNStatusFees& b) {
    a.Swap(&b);
  }
  inline void Swap(TXNStatusFees* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TXNStatusFees* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TXNStatusFees* New() const final {
    return CreateMaybeMessage<TXNStatusFees>(nullptr);
  }

  TXNStatusFees* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TXNStatusFees>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TXNStatusFees& from);
  void MergeFrom(const TXNStatusFees& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TXNStatusFees* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.TXNStatusFees";
  }
  protected:
  explicit TXNStatusFees(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFeesFieldNumber = 3,
    kBaseContractIdFieldNumber = 4,
    kSmarContractResultFieldNumber = 10,
    kTxnHashFieldNumber = 1,
    kContractFeesFieldNumber = 5,
    kContractContractIdFieldNumber = 6,
    kApprovedVotesFieldNumber = 7,
    kAgainstVotesFieldNumber = 8,
    kStatusFieldNumber = 2,
    kSmartContractFieldNumber = 9,
  };
  // repeated string base_fees = 3;
  int base_fees_size() const;
  private:
  int _internal_base_fees_size() const;
  public:
  void clear_base_fees();
  const std::string& base_fees(int index) const;
  std::string* mutable_base_fees(int index);
  void set_base_fees(int index, const std::string& value);
  void set_base_fees(int index, std::string&& value);
  void set_base_fees(int index, const char* value);
  void set_base_fees(int index, const char* value, size_t size);
  std::string* add_base_fees();
  void add_base_fees(const std::string& value);
  void add_base_fees(std::string&& value);
  void add_base_fees(const char* value);
  void add_base_fees(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& base_fees() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_base_fees();
  private:
  const std::string& _internal_base_fees(int index) const;
  std::string* _internal_add_base_fees();
  public:

  // repeated string base_contract_id = 4;
  int base_contract_id_size() const;
  private:
  int _internal_base_contract_id_size() const;
  public:
  void clear_base_contract_id();
  const std::string& base_contract_id(int index) const;
  std::string* mutable_base_contract_id(int index);
  void set_base_contract_id(int index, const std::string& value);
  void set_base_contract_id(int index, std::string&& value);
  void set_base_contract_id(int index, const char* value);
  void set_base_contract_id(int index, const char* value, size_t size);
  std::string* add_base_contract_id();
  void add_base_contract_id(const std::string& value);
  void add_base_contract_id(std::string&& value);
  void add_base_contract_id(const char* value);
  void add_base_contract_id(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& base_contract_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_base_contract_id();
  private:
  const std::string& _internal_base_contract_id(int index) const;
  std::string* _internal_add_base_contract_id();
  public:

  // repeated bytes smar_contract_result = 10;
  int smar_contract_result_size() const;
  private:
  int _internal_smar_contract_result_size() const;
  public:
  void clear_smar_contract_result();
  const std::string& smar_contract_result(int index) const;
  std::string* mutable_smar_contract_result(int index);
  void set_smar_contract_result(int index, const std::string& value);
  void set_smar_contract_result(int index, std::string&& value);
  void set_smar_contract_result(int index, const char* value);
  void set_smar_contract_result(int index, const void* value, size_t size);
  std::string* add_smar_contract_result();
  void add_smar_contract_result(const std::string& value);
  void add_smar_contract_result(std::string&& value);
  void add_smar_contract_result(const char* value);
  void add_smar_contract_result(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& smar_contract_result() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_smar_contract_result();
  private:
  const std::string& _internal_smar_contract_result(int index) const;
  std::string* _internal_add_smar_contract_result();
  public:

  // bytes txn_hash = 1;
  void clear_txn_hash();
  const std::string& txn_hash() const;
  void set_txn_hash(const std::string& value);
  void set_txn_hash(std::string&& value);
  void set_txn_hash(const char* value);
  void set_txn_hash(const void* value, size_t size);
  std::string* mutable_txn_hash();
  std::string* release_txn_hash();
  void set_allocated_txn_hash(std::string* txn_hash);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_txn_hash();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_txn_hash(
      std::string* txn_hash);
  private:
  const std::string& _internal_txn_hash() const;
  void _internal_set_txn_hash(const std::string& value);
  std::string* _internal_mutable_txn_hash();
  public:

  // string contract_fees = 5;
  void clear_contract_fees();
  const std::string& contract_fees() const;
  void set_contract_fees(const std::string& value);
  void set_contract_fees(std::string&& value);
  void set_contract_fees(const char* value);
  void set_contract_fees(const char* value, size_t size);
  std::string* mutable_contract_fees();
  std::string* release_contract_fees();
  void set_allocated_contract_fees(std::string* contract_fees);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contract_fees();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contract_fees(
      std::string* contract_fees);
  private:
  const std::string& _internal_contract_fees() const;
  void _internal_set_contract_fees(const std::string& value);
  std::string* _internal_mutable_contract_fees();
  public:

  // string contract_contract_id = 6;
  void clear_contract_contract_id();
  const std::string& contract_contract_id() const;
  void set_contract_contract_id(const std::string& value);
  void set_contract_contract_id(std::string&& value);
  void set_contract_contract_id(const char* value);
  void set_contract_contract_id(const char* value, size_t size);
  std::string* mutable_contract_contract_id();
  std::string* release_contract_contract_id();
  void set_allocated_contract_contract_id(std::string* contract_contract_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contract_contract_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contract_contract_id(
      std::string* contract_contract_id);
  private:
  const std::string& _internal_contract_contract_id() const;
  void _internal_set_contract_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_contract_id();
  public:

  // string approved_votes = 7;
  bool has_approved_votes() const;
  private:
  bool _internal_has_approved_votes() const;
  public:
  void clear_approved_votes();
  const std::string& approved_votes() const;
  void set_approved_votes(const std::string& value);
  void set_approved_votes(std::string&& value);
  void set_approved_votes(const char* value);
  void set_approved_votes(const char* value, size_t size);
  std::string* mutable_approved_votes();
  std::string* release_approved_votes();
  void set_allocated_approved_votes(std::string* approved_votes);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_approved_votes();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_approved_votes(
      std::string* approved_votes);
  private:
  const std::string& _internal_approved_votes() const;
  void _internal_set_approved_votes(const std::string& value);
  std::string* _internal_mutable_approved_votes();
  public:

  // string against_votes = 8;
  bool has_against_votes() const;
  private:
  bool _internal_has_against_votes() const;
  public:
  void clear_against_votes();
  const std::string& against_votes() const;
  void set_against_votes(const std::string& value);
  void set_against_votes(std::string&& value);
  void set_against_votes(const char* value);
  void set_against_votes(const char* value, size_t size);
  std::string* mutable_against_votes();
  std::string* release_against_votes();
  void set_allocated_against_votes(std::string* against_votes);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_against_votes();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_against_votes(
      std::string* against_votes);
  private:
  const std::string& _internal_against_votes() const;
  void _internal_set_against_votes(const std::string& value);
  std::string* _internal_mutable_against_votes();
  public:

  // .zera_txn.TXN_STATUS status = 2;
  void clear_status();
  ::zera_txn::TXN_STATUS status() const;
  void set_status(::zera_txn::TXN_STATUS value);
  private:
  ::zera_txn::TXN_STATUS _internal_status() const;
  void _internal_set_status(::zera_txn::TXN_STATUS value);
  public:

  // bool smart_contract = 9;
  void clear_smart_contract();
  bool smart_contract() const;
  void set_smart_contract(bool value);
  private:
  bool _internal_smart_contract() const;
  void _internal_set_smart_contract(bool value);
  public:

  // @@protoc_insertion_point(class_scope:zera_txn.TXNStatusFees)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> base_fees_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> base_contract_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> smar_contract_result_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txn_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_fees_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_contract_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr approved_votes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr against_votes_;
  int status_;
  bool smart_contract_;
  friend struct ::TableStruct_txn_2eproto;
};
// -------------------------------------------------------------------

class TXNWrapper PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zera_txn.TXNWrapper) */ {
 public:
  inline TXNWrapper() : TXNWrapper(nullptr) {};
  virtual ~TXNWrapper();

  TXNWrapper(const TXNWrapper& from);
  TXNWrapper(TXNWrapper&& from) noexcept
    : TXNWrapper() {
    *this = ::std::move(from);
  }

  inline TXNWrapper& operator=(const TXNWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline TXNWrapper& operator=(TXNWrapper&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TXNWrapper& default_instance();

  enum PayloadCase {
    kCoinTxn = 1,
    kMintTxn = 2,
    kItemMintTxn = 3,
    kContractTxn = 4,
    kGovernanceVote = 5,
    kGovernanceProposal = 6,
    kSmartContract = 7,
    kSmartContractExecute = 8,
    kSelfCurEquivs = 9,
    kAuthCurEquivs = 10,
    kExpenseRatios = 11,
    kNftTxn = 12,
    kContractUpdateTxn = 13,
    kValidatorRegistrationTxn = 14,
    kValidatorHeartbeatTxn = 15,
    kFoundationTxn = 16,
    kDelegatedVotingTxn = 17,
    kQuashTxn = 18,
    kFastQuorumTxn = 19,
    kRevokeTxn = 20,
    kComplianceTxn = 21,
    kProposalResultTxn = 22,
    kBurnSbtTxn = 23,
    kNewCoinTxn = 24,
    PAYLOAD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TXNWrapper* internal_default_instance() {
    return reinterpret_cast<const TXNWrapper*>(
               &_TXNWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(TXNWrapper& a, TXNWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(TXNWrapper* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TXNWrapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TXNWrapper* New() const final {
    return CreateMaybeMessage<TXNWrapper>(nullptr);
  }

  TXNWrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TXNWrapper>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TXNWrapper& from);
  void MergeFrom(const TXNWrapper& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TXNWrapper* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zera_txn.TXNWrapper";
  }
  protected:
  explicit TXNWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_txn_2eproto);
    return ::descriptor_table_txn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxnTypeFieldNumber = 25,
    kCoinTxnFieldNumber = 1,
    kMintTxnFieldNumber = 2,
    kItemMintTxnFieldNumber = 3,
    kContractTxnFieldNumber = 4,
    kGovernanceVoteFieldNumber = 5,
    kGovernanceProposalFieldNumber = 6,
    kSmartContractFieldNumber = 7,
    kSmartContractExecuteFieldNumber = 8,
    kSelfCurEquivsFieldNumber = 9,
    kAuthCurEquivsFieldNumber = 10,
    kExpenseRatiosFieldNumber = 11,
    kNftTxnFieldNumber = 12,
    kContractUpdateTxnFieldNumber = 13,
    kValidatorRegistrationTxnFieldNumber = 14,
    kValidatorHeartbeatTxnFieldNumber = 15,
    kFoundationTxnFieldNumber = 16,
    kDelegatedVotingTxnFieldNumber = 17,
    kQuashTxnFieldNumber = 18,
    kFastQuorumTxnFieldNumber = 19,
    kRevokeTxnFieldNumber = 20,
    kComplianceTxnFieldNumber = 21,
    kProposalResultTxnFieldNumber = 22,
    kBurnSbtTxnFieldNumber = 23,
    kNewCoinTxnFieldNumber = 24,
  };
  // .zera_txn.TRANSACTION_TYPE txn_type = 25;
  void clear_txn_type();
  ::zera_txn::TRANSACTION_TYPE txn_type() const;
  void set_txn_type(::zera_txn::TRANSACTION_TYPE value);
  private:
  ::zera_txn::TRANSACTION_TYPE _internal_txn_type() const;
  void _internal_set_txn_type(::zera_txn::TRANSACTION_TYPE value);
  public:

  // .zera_txn.CoinTXN coin_txn = 1;
  bool has_coin_txn() const;
  private:
  bool _internal_has_coin_txn() const;
  public:
  void clear_coin_txn();
  const ::zera_txn::CoinTXN& coin_txn() const;
  ::zera_txn::CoinTXN* release_coin_txn();
  ::zera_txn::CoinTXN* mutable_coin_txn();
  void set_allocated_coin_txn(::zera_txn::CoinTXN* coin_txn);
  private:
  const ::zera_txn::CoinTXN& _internal_coin_txn() const;
  ::zera_txn::CoinTXN* _internal_mutable_coin_txn();
  public:
  void unsafe_arena_set_allocated_coin_txn(
      ::zera_txn::CoinTXN* coin_txn);
  ::zera_txn::CoinTXN* unsafe_arena_release_coin_txn();

  // .zera_txn.MintTXN mint_txn = 2;
  bool has_mint_txn() const;
  private:
  bool _internal_has_mint_txn() const;
  public:
  void clear_mint_txn();
  const ::zera_txn::MintTXN& mint_txn() const;
  ::zera_txn::MintTXN* release_mint_txn();
  ::zera_txn::MintTXN* mutable_mint_txn();
  void set_allocated_mint_txn(::zera_txn::MintTXN* mint_txn);
  private:
  const ::zera_txn::MintTXN& _internal_mint_txn() const;
  ::zera_txn::MintTXN* _internal_mutable_mint_txn();
  public:
  void unsafe_arena_set_allocated_mint_txn(
      ::zera_txn::MintTXN* mint_txn);
  ::zera_txn::MintTXN* unsafe_arena_release_mint_txn();

  // .zera_txn.ItemizedMintTXN item_mint_txn = 3;
  bool has_item_mint_txn() const;
  private:
  bool _internal_has_item_mint_txn() const;
  public:
  void clear_item_mint_txn();
  const ::zera_txn::ItemizedMintTXN& item_mint_txn() const;
  ::zera_txn::ItemizedMintTXN* release_item_mint_txn();
  ::zera_txn::ItemizedMintTXN* mutable_item_mint_txn();
  void set_allocated_item_mint_txn(::zera_txn::ItemizedMintTXN* item_mint_txn);
  private:
  const ::zera_txn::ItemizedMintTXN& _internal_item_mint_txn() const;
  ::zera_txn::ItemizedMintTXN* _internal_mutable_item_mint_txn();
  public:
  void unsafe_arena_set_allocated_item_mint_txn(
      ::zera_txn::ItemizedMintTXN* item_mint_txn);
  ::zera_txn::ItemizedMintTXN* unsafe_arena_release_item_mint_txn();

  // .zera_txn.InstrumentContract contract_txn = 4;
  bool has_contract_txn() const;
  private:
  bool _internal_has_contract_txn() const;
  public:
  void clear_contract_txn();
  const ::zera_txn::InstrumentContract& contract_txn() const;
  ::zera_txn::InstrumentContract* release_contract_txn();
  ::zera_txn::InstrumentContract* mutable_contract_txn();
  void set_allocated_contract_txn(::zera_txn::InstrumentContract* contract_txn);
  private:
  const ::zera_txn::InstrumentContract& _internal_contract_txn() const;
  ::zera_txn::InstrumentContract* _internal_mutable_contract_txn();
  public:
  void unsafe_arena_set_allocated_contract_txn(
      ::zera_txn::InstrumentContract* contract_txn);
  ::zera_txn::InstrumentContract* unsafe_arena_release_contract_txn();

  // .zera_txn.GovernanceVote governance_vote = 5;
  bool has_governance_vote() const;
  private:
  bool _internal_has_governance_vote() const;
  public:
  void clear_governance_vote();
  const ::zera_txn::GovernanceVote& governance_vote() const;
  ::zera_txn::GovernanceVote* release_governance_vote();
  ::zera_txn::GovernanceVote* mutable_governance_vote();
  void set_allocated_governance_vote(::zera_txn::GovernanceVote* governance_vote);
  private:
  const ::zera_txn::GovernanceVote& _internal_governance_vote() const;
  ::zera_txn::GovernanceVote* _internal_mutable_governance_vote();
  public:
  void unsafe_arena_set_allocated_governance_vote(
      ::zera_txn::GovernanceVote* governance_vote);
  ::zera_txn::GovernanceVote* unsafe_arena_release_governance_vote();

  // .zera_txn.GovernanceProposal governance_proposal = 6;
  bool has_governance_proposal() const;
  private:
  bool _internal_has_governance_proposal() const;
  public:
  void clear_governance_proposal();
  const ::zera_txn::GovernanceProposal& governance_proposal() const;
  ::zera_txn::GovernanceProposal* release_governance_proposal();
  ::zera_txn::GovernanceProposal* mutable_governance_proposal();
  void set_allocated_governance_proposal(::zera_txn::GovernanceProposal* governance_proposal);
  private:
  const ::zera_txn::GovernanceProposal& _internal_governance_proposal() const;
  ::zera_txn::GovernanceProposal* _internal_mutable_governance_proposal();
  public:
  void unsafe_arena_set_allocated_governance_proposal(
      ::zera_txn::GovernanceProposal* governance_proposal);
  ::zera_txn::GovernanceProposal* unsafe_arena_release_governance_proposal();

  // .zera_txn.SmartContractTXN smart_contract = 7;
  bool has_smart_contract() const;
  private:
  bool _internal_has_smart_contract() const;
  public:
  void clear_smart_contract();
  const ::zera_txn::SmartContractTXN& smart_contract() const;
  ::zera_txn::SmartContractTXN* release_smart_contract();
  ::zera_txn::SmartContractTXN* mutable_smart_contract();
  void set_allocated_smart_contract(::zera_txn::SmartContractTXN* smart_contract);
  private:
  const ::zera_txn::SmartContractTXN& _internal_smart_contract() const;
  ::zera_txn::SmartContractTXN* _internal_mutable_smart_contract();
  public:
  void unsafe_arena_set_allocated_smart_contract(
      ::zera_txn::SmartContractTXN* smart_contract);
  ::zera_txn::SmartContractTXN* unsafe_arena_release_smart_contract();

  // .zera_txn.SmartContractExecuteTXN smart_contract_execute = 8;
  bool has_smart_contract_execute() const;
  private:
  bool _internal_has_smart_contract_execute() const;
  public:
  void clear_smart_contract_execute();
  const ::zera_txn::SmartContractExecuteTXN& smart_contract_execute() const;
  ::zera_txn::SmartContractExecuteTXN* release_smart_contract_execute();
  ::zera_txn::SmartContractExecuteTXN* mutable_smart_contract_execute();
  void set_allocated_smart_contract_execute(::zera_txn::SmartContractExecuteTXN* smart_contract_execute);
  private:
  const ::zera_txn::SmartContractExecuteTXN& _internal_smart_contract_execute() const;
  ::zera_txn::SmartContractExecuteTXN* _internal_mutable_smart_contract_execute();
  public:
  void unsafe_arena_set_allocated_smart_contract_execute(
      ::zera_txn::SmartContractExecuteTXN* smart_contract_execute);
  ::zera_txn::SmartContractExecuteTXN* unsafe_arena_release_smart_contract_execute();

  // .zera_txn.SelfCurrencyEquiv self_cur_equivs = 9;
  bool has_self_cur_equivs() const;
  private:
  bool _internal_has_self_cur_equivs() const;
  public:
  void clear_self_cur_equivs();
  const ::zera_txn::SelfCurrencyEquiv& self_cur_equivs() const;
  ::zera_txn::SelfCurrencyEquiv* release_self_cur_equivs();
  ::zera_txn::SelfCurrencyEquiv* mutable_self_cur_equivs();
  void set_allocated_self_cur_equivs(::zera_txn::SelfCurrencyEquiv* self_cur_equivs);
  private:
  const ::zera_txn::SelfCurrencyEquiv& _internal_self_cur_equivs() const;
  ::zera_txn::SelfCurrencyEquiv* _internal_mutable_self_cur_equivs();
  public:
  void unsafe_arena_set_allocated_self_cur_equivs(
      ::zera_txn::SelfCurrencyEquiv* self_cur_equivs);
  ::zera_txn::SelfCurrencyEquiv* unsafe_arena_release_self_cur_equivs();

  // .zera_txn.AuthorizedCurrencyEquiv auth_cur_equivs = 10;
  bool has_auth_cur_equivs() const;
  private:
  bool _internal_has_auth_cur_equivs() const;
  public:
  void clear_auth_cur_equivs();
  const ::zera_txn::AuthorizedCurrencyEquiv& auth_cur_equivs() const;
  ::zera_txn::AuthorizedCurrencyEquiv* release_auth_cur_equivs();
  ::zera_txn::AuthorizedCurrencyEquiv* mutable_auth_cur_equivs();
  void set_allocated_auth_cur_equivs(::zera_txn::AuthorizedCurrencyEquiv* auth_cur_equivs);
  private:
  const ::zera_txn::AuthorizedCurrencyEquiv& _internal_auth_cur_equivs() const;
  ::zera_txn::AuthorizedCurrencyEquiv* _internal_mutable_auth_cur_equivs();
  public:
  void unsafe_arena_set_allocated_auth_cur_equivs(
      ::zera_txn::AuthorizedCurrencyEquiv* auth_cur_equivs);
  ::zera_txn::AuthorizedCurrencyEquiv* unsafe_arena_release_auth_cur_equivs();

  // .zera_txn.ExpenseRatioTXN expense_ratios = 11;
  bool has_expense_ratios() const;
  private:
  bool _internal_has_expense_ratios() const;
  public:
  void clear_expense_ratios();
  const ::zera_txn::ExpenseRatioTXN& expense_ratios() const;
  ::zera_txn::ExpenseRatioTXN* release_expense_ratios();
  ::zera_txn::ExpenseRatioTXN* mutable_expense_ratios();
  void set_allocated_expense_ratios(::zera_txn::ExpenseRatioTXN* expense_ratios);
  private:
  const ::zera_txn::ExpenseRatioTXN& _internal_expense_ratios() const;
  ::zera_txn::ExpenseRatioTXN* _internal_mutable_expense_ratios();
  public:
  void unsafe_arena_set_allocated_expense_ratios(
      ::zera_txn::ExpenseRatioTXN* expense_ratios);
  ::zera_txn::ExpenseRatioTXN* unsafe_arena_release_expense_ratios();

  // .zera_txn.NFTTXN nft_txn = 12;
  bool has_nft_txn() const;
  private:
  bool _internal_has_nft_txn() const;
  public:
  void clear_nft_txn();
  const ::zera_txn::NFTTXN& nft_txn() const;
  ::zera_txn::NFTTXN* release_nft_txn();
  ::zera_txn::NFTTXN* mutable_nft_txn();
  void set_allocated_nft_txn(::zera_txn::NFTTXN* nft_txn);
  private:
  const ::zera_txn::NFTTXN& _internal_nft_txn() const;
  ::zera_txn::NFTTXN* _internal_mutable_nft_txn();
  public:
  void unsafe_arena_set_allocated_nft_txn(
      ::zera_txn::NFTTXN* nft_txn);
  ::zera_txn::NFTTXN* unsafe_arena_release_nft_txn();

  // .zera_txn.ContractUpdateTXN contract_update_txn = 13;
  bool has_contract_update_txn() const;
  private:
  bool _internal_has_contract_update_txn() const;
  public:
  void clear_contract_update_txn();
  const ::zera_txn::ContractUpdateTXN& contract_update_txn() const;
  ::zera_txn::ContractUpdateTXN* release_contract_update_txn();
  ::zera_txn::ContractUpdateTXN* mutable_contract_update_txn();
  void set_allocated_contract_update_txn(::zera_txn::ContractUpdateTXN* contract_update_txn);
  private:
  const ::zera_txn::ContractUpdateTXN& _internal_contract_update_txn() const;
  ::zera_txn::ContractUpdateTXN* _internal_mutable_contract_update_txn();
  public:
  void unsafe_arena_set_allocated_contract_update_txn(
      ::zera_txn::ContractUpdateTXN* contract_update_txn);
  ::zera_txn::ContractUpdateTXN* unsafe_arena_release_contract_update_txn();

  // .zera_txn.ValidatorRegistration validator_registration_txn = 14;
  bool has_validator_registration_txn() const;
  private:
  bool _internal_has_validator_registration_txn() const;
  public:
  void clear_validator_registration_txn();
  const ::zera_txn::ValidatorRegistration& validator_registration_txn() const;
  ::zera_txn::ValidatorRegistration* release_validator_registration_txn();
  ::zera_txn::ValidatorRegistration* mutable_validator_registration_txn();
  void set_allocated_validator_registration_txn(::zera_txn::ValidatorRegistration* validator_registration_txn);
  private:
  const ::zera_txn::ValidatorRegistration& _internal_validator_registration_txn() const;
  ::zera_txn::ValidatorRegistration* _internal_mutable_validator_registration_txn();
  public:
  void unsafe_arena_set_allocated_validator_registration_txn(
      ::zera_txn::ValidatorRegistration* validator_registration_txn);
  ::zera_txn::ValidatorRegistration* unsafe_arena_release_validator_registration_txn();

  // .zera_txn.ValidatorHeartbeat validator_heartbeat_txn = 15;
  bool has_validator_heartbeat_txn() const;
  private:
  bool _internal_has_validator_heartbeat_txn() const;
  public:
  void clear_validator_heartbeat_txn();
  const ::zera_txn::ValidatorHeartbeat& validator_heartbeat_txn() const;
  ::zera_txn::ValidatorHeartbeat* release_validator_heartbeat_txn();
  ::zera_txn::ValidatorHeartbeat* mutable_validator_heartbeat_txn();
  void set_allocated_validator_heartbeat_txn(::zera_txn::ValidatorHeartbeat* validator_heartbeat_txn);
  private:
  const ::zera_txn::ValidatorHeartbeat& _internal_validator_heartbeat_txn() const;
  ::zera_txn::ValidatorHeartbeat* _internal_mutable_validator_heartbeat_txn();
  public:
  void unsafe_arena_set_allocated_validator_heartbeat_txn(
      ::zera_txn::ValidatorHeartbeat* validator_heartbeat_txn);
  ::zera_txn::ValidatorHeartbeat* unsafe_arena_release_validator_heartbeat_txn();

  // .zera_txn.FoundationTXN foundation_txn = 16;
  bool has_foundation_txn() const;
  private:
  bool _internal_has_foundation_txn() const;
  public:
  void clear_foundation_txn();
  const ::zera_txn::FoundationTXN& foundation_txn() const;
  ::zera_txn::FoundationTXN* release_foundation_txn();
  ::zera_txn::FoundationTXN* mutable_foundation_txn();
  void set_allocated_foundation_txn(::zera_txn::FoundationTXN* foundation_txn);
  private:
  const ::zera_txn::FoundationTXN& _internal_foundation_txn() const;
  ::zera_txn::FoundationTXN* _internal_mutable_foundation_txn();
  public:
  void unsafe_arena_set_allocated_foundation_txn(
      ::zera_txn::FoundationTXN* foundation_txn);
  ::zera_txn::FoundationTXN* unsafe_arena_release_foundation_txn();

  // .zera_txn.DelegatedVotingTXN delegated_voting_txn = 17;
  bool has_delegated_voting_txn() const;
  private:
  bool _internal_has_delegated_voting_txn() const;
  public:
  void clear_delegated_voting_txn();
  const ::zera_txn::DelegatedVotingTXN& delegated_voting_txn() const;
  ::zera_txn::DelegatedVotingTXN* release_delegated_voting_txn();
  ::zera_txn::DelegatedVotingTXN* mutable_delegated_voting_txn();
  void set_allocated_delegated_voting_txn(::zera_txn::DelegatedVotingTXN* delegated_voting_txn);
  private:
  const ::zera_txn::DelegatedVotingTXN& _internal_delegated_voting_txn() const;
  ::zera_txn::DelegatedVotingTXN* _internal_mutable_delegated_voting_txn();
  public:
  void unsafe_arena_set_allocated_delegated_voting_txn(
      ::zera_txn::DelegatedVotingTXN* delegated_voting_txn);
  ::zera_txn::DelegatedVotingTXN* unsafe_arena_release_delegated_voting_txn();

  // .zera_txn.QuashTXN quash_txn = 18;
  bool has_quash_txn() const;
  private:
  bool _internal_has_quash_txn() const;
  public:
  void clear_quash_txn();
  const ::zera_txn::QuashTXN& quash_txn() const;
  ::zera_txn::QuashTXN* release_quash_txn();
  ::zera_txn::QuashTXN* mutable_quash_txn();
  void set_allocated_quash_txn(::zera_txn::QuashTXN* quash_txn);
  private:
  const ::zera_txn::QuashTXN& _internal_quash_txn() const;
  ::zera_txn::QuashTXN* _internal_mutable_quash_txn();
  public:
  void unsafe_arena_set_allocated_quash_txn(
      ::zera_txn::QuashTXN* quash_txn);
  ::zera_txn::QuashTXN* unsafe_arena_release_quash_txn();

  // .zera_txn.FastQuorumTXN fast_quorum_txn = 19;
  bool has_fast_quorum_txn() const;
  private:
  bool _internal_has_fast_quorum_txn() const;
  public:
  void clear_fast_quorum_txn();
  const ::zera_txn::FastQuorumTXN& fast_quorum_txn() const;
  ::zera_txn::FastQuorumTXN* release_fast_quorum_txn();
  ::zera_txn::FastQuorumTXN* mutable_fast_quorum_txn();
  void set_allocated_fast_quorum_txn(::zera_txn::FastQuorumTXN* fast_quorum_txn);
  private:
  const ::zera_txn::FastQuorumTXN& _internal_fast_quorum_txn() const;
  ::zera_txn::FastQuorumTXN* _internal_mutable_fast_quorum_txn();
  public:
  void unsafe_arena_set_allocated_fast_quorum_txn(
      ::zera_txn::FastQuorumTXN* fast_quorum_txn);
  ::zera_txn::FastQuorumTXN* unsafe_arena_release_fast_quorum_txn();

  // .zera_txn.RevokeTXN revoke_txn = 20;
  bool has_revoke_txn() const;
  private:
  bool _internal_has_revoke_txn() const;
  public:
  void clear_revoke_txn();
  const ::zera_txn::RevokeTXN& revoke_txn() const;
  ::zera_txn::RevokeTXN* release_revoke_txn();
  ::zera_txn::RevokeTXN* mutable_revoke_txn();
  void set_allocated_revoke_txn(::zera_txn::RevokeTXN* revoke_txn);
  private:
  const ::zera_txn::RevokeTXN& _internal_revoke_txn() const;
  ::zera_txn::RevokeTXN* _internal_mutable_revoke_txn();
  public:
  void unsafe_arena_set_allocated_revoke_txn(
      ::zera_txn::RevokeTXN* revoke_txn);
  ::zera_txn::RevokeTXN* unsafe_arena_release_revoke_txn();

  // .zera_txn.ComplianceTXN compliance_txn = 21;
  bool has_compliance_txn() const;
  private:
  bool _internal_has_compliance_txn() const;
  public:
  void clear_compliance_txn();
  const ::zera_txn::ComplianceTXN& compliance_txn() const;
  ::zera_txn::ComplianceTXN* release_compliance_txn();
  ::zera_txn::ComplianceTXN* mutable_compliance_txn();
  void set_allocated_compliance_txn(::zera_txn::ComplianceTXN* compliance_txn);
  private:
  const ::zera_txn::ComplianceTXN& _internal_compliance_txn() const;
  ::zera_txn::ComplianceTXN* _internal_mutable_compliance_txn();
  public:
  void unsafe_arena_set_allocated_compliance_txn(
      ::zera_txn::ComplianceTXN* compliance_txn);
  ::zera_txn::ComplianceTXN* unsafe_arena_release_compliance_txn();

  // bool proposal_result_txn = 22;
  private:
  bool _internal_has_proposal_result_txn() const;
  public:
  void clear_proposal_result_txn();
  bool proposal_result_txn() const;
  void set_proposal_result_txn(bool value);
  private:
  bool _internal_proposal_result_txn() const;
  void _internal_set_proposal_result_txn(bool value);
  public:

  // .zera_txn.BurnSBTTXN burn_sbt_txn = 23;
  bool has_burn_sbt_txn() const;
  private:
  bool _internal_has_burn_sbt_txn() const;
  public:
  void clear_burn_sbt_txn();
  const ::zera_txn::BurnSBTTXN& burn_sbt_txn() const;
  ::zera_txn::BurnSBTTXN* release_burn_sbt_txn();
  ::zera_txn::BurnSBTTXN* mutable_burn_sbt_txn();
  void set_allocated_burn_sbt_txn(::zera_txn::BurnSBTTXN* burn_sbt_txn);
  private:
  const ::zera_txn::BurnSBTTXN& _internal_burn_sbt_txn() const;
  ::zera_txn::BurnSBTTXN* _internal_mutable_burn_sbt_txn();
  public:
  void unsafe_arena_set_allocated_burn_sbt_txn(
      ::zera_txn::BurnSBTTXN* burn_sbt_txn);
  ::zera_txn::BurnSBTTXN* unsafe_arena_release_burn_sbt_txn();

  // .zera_txn.NewCoinTXN new_coin_txn = 24;
  bool has_new_coin_txn() const;
  private:
  bool _internal_has_new_coin_txn() const;
  public:
  void clear_new_coin_txn();
  const ::zera_txn::NewCoinTXN& new_coin_txn() const;
  ::zera_txn::NewCoinTXN* release_new_coin_txn();
  ::zera_txn::NewCoinTXN* mutable_new_coin_txn();
  void set_allocated_new_coin_txn(::zera_txn::NewCoinTXN* new_coin_txn);
  private:
  const ::zera_txn::NewCoinTXN& _internal_new_coin_txn() const;
  ::zera_txn::NewCoinTXN* _internal_mutable_new_coin_txn();
  public:
  void unsafe_arena_set_allocated_new_coin_txn(
      ::zera_txn::NewCoinTXN* new_coin_txn);
  ::zera_txn::NewCoinTXN* unsafe_arena_release_new_coin_txn();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:zera_txn.TXNWrapper)
 private:
  class _Internal;
  void set_has_coin_txn();
  void set_has_mint_txn();
  void set_has_item_mint_txn();
  void set_has_contract_txn();
  void set_has_governance_vote();
  void set_has_governance_proposal();
  void set_has_smart_contract();
  void set_has_smart_contract_execute();
  void set_has_self_cur_equivs();
  void set_has_auth_cur_equivs();
  void set_has_expense_ratios();
  void set_has_nft_txn();
  void set_has_contract_update_txn();
  void set_has_validator_registration_txn();
  void set_has_validator_heartbeat_txn();
  void set_has_foundation_txn();
  void set_has_delegated_voting_txn();
  void set_has_quash_txn();
  void set_has_fast_quorum_txn();
  void set_has_revoke_txn();
  void set_has_compliance_txn();
  void set_has_proposal_result_txn();
  void set_has_burn_sbt_txn();
  void set_has_new_coin_txn();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int txn_type_;
  union PayloadUnion {
    PayloadUnion() {}
    ::zera_txn::CoinTXN* coin_txn_;
    ::zera_txn::MintTXN* mint_txn_;
    ::zera_txn::ItemizedMintTXN* item_mint_txn_;
    ::zera_txn::InstrumentContract* contract_txn_;
    ::zera_txn::GovernanceVote* governance_vote_;
    ::zera_txn::GovernanceProposal* governance_proposal_;
    ::zera_txn::SmartContractTXN* smart_contract_;
    ::zera_txn::SmartContractExecuteTXN* smart_contract_execute_;
    ::zera_txn::SelfCurrencyEquiv* self_cur_equivs_;
    ::zera_txn::AuthorizedCurrencyEquiv* auth_cur_equivs_;
    ::zera_txn::ExpenseRatioTXN* expense_ratios_;
    ::zera_txn::NFTTXN* nft_txn_;
    ::zera_txn::ContractUpdateTXN* contract_update_txn_;
    ::zera_txn::ValidatorRegistration* validator_registration_txn_;
    ::zera_txn::ValidatorHeartbeat* validator_heartbeat_txn_;
    ::zera_txn::FoundationTXN* foundation_txn_;
    ::zera_txn::DelegatedVotingTXN* delegated_voting_txn_;
    ::zera_txn::QuashTXN* quash_txn_;
    ::zera_txn::FastQuorumTXN* fast_quorum_txn_;
    ::zera_txn::RevokeTXN* revoke_txn_;
    ::zera_txn::ComplianceTXN* compliance_txn_;
    bool proposal_result_txn_;
    ::zera_txn::BurnSBTTXN* burn_sbt_txn_;
    ::zera_txn::NewCoinTXN* new_coin_txn_;
  } payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_txn_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DelegateContract

// int32 priority = 1;
inline void DelegateContract::clear_priority() {
  priority_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DelegateContract::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DelegateContract::priority() const {
  // @@protoc_insertion_point(field_get:zera_txn.DelegateContract.priority)
  return _internal_priority();
}
inline void DelegateContract::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  priority_ = value;
}
inline void DelegateContract::set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:zera_txn.DelegateContract.priority)
}

// string contract_id = 2;
inline void DelegateContract::clear_contract_id() {
  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DelegateContract::contract_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.DelegateContract.contract_id)
  return _internal_contract_id();
}
inline void DelegateContract::set_contract_id(const std::string& value) {
  _internal_set_contract_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.DelegateContract.contract_id)
}
inline std::string* DelegateContract::mutable_contract_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.DelegateContract.contract_id)
  return _internal_mutable_contract_id();
}
inline const std::string& DelegateContract::_internal_contract_id() const {
  return contract_id_.Get();
}
inline void DelegateContract::_internal_set_contract_id(const std::string& value) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DelegateContract::set_contract_id(std::string&& value) {
  
  contract_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.DelegateContract.contract_id)
}
inline void DelegateContract::set_contract_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.DelegateContract.contract_id)
}
inline void DelegateContract::set_contract_id(const char* value,
    size_t size) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.DelegateContract.contract_id)
}
inline std::string* DelegateContract::_internal_mutable_contract_id() {
  
  return contract_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DelegateContract::release_contract_id() {
  // @@protoc_insertion_point(field_release:zera_txn.DelegateContract.contract_id)
  return contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DelegateContract::set_allocated_contract_id(std::string* contract_id) {
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.DelegateContract.contract_id)
}
inline std::string* DelegateContract::unsafe_arena_release_contract_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.DelegateContract.contract_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contract_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DelegateContract::unsafe_arena_set_allocated_contract_id(
    std::string* contract_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contract_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.DelegateContract.contract_id)
}

// -------------------------------------------------------------------

// DelegatedVotingTXN

// .zera_txn.BaseTXN base = 1;
inline bool DelegatedVotingTXN::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool DelegatedVotingTXN::has_base() const {
  return _internal_has_base();
}
inline void DelegatedVotingTXN::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::zera_txn::BaseTXN& DelegatedVotingTXN::_internal_base() const {
  const ::zera_txn::BaseTXN* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::BaseTXN*>(
      &::zera_txn::_BaseTXN_default_instance_);
}
inline const ::zera_txn::BaseTXN& DelegatedVotingTXN::base() const {
  // @@protoc_insertion_point(field_get:zera_txn.DelegatedVotingTXN.base)
  return _internal_base();
}
inline void DelegatedVotingTXN::unsafe_arena_set_allocated_base(
    ::zera_txn::BaseTXN* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.DelegatedVotingTXN.base)
}
inline ::zera_txn::BaseTXN* DelegatedVotingTXN::release_base() {
  auto temp = unsafe_arena_release_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::BaseTXN* DelegatedVotingTXN::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:zera_txn.DelegatedVotingTXN.base)
  
  ::zera_txn::BaseTXN* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::zera_txn::BaseTXN* DelegatedVotingTXN::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::BaseTXN>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::zera_txn::BaseTXN* DelegatedVotingTXN::mutable_base() {
  // @@protoc_insertion_point(field_mutable:zera_txn.DelegatedVotingTXN.base)
  return _internal_mutable_base();
}
inline void DelegatedVotingTXN::set_allocated_base(::zera_txn::BaseTXN* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.DelegatedVotingTXN.base)
}

// repeated .zera_txn.DelegateVote delegate_votes = 2;
inline int DelegatedVotingTXN::_internal_delegate_votes_size() const {
  return delegate_votes_.size();
}
inline int DelegatedVotingTXN::delegate_votes_size() const {
  return _internal_delegate_votes_size();
}
inline void DelegatedVotingTXN::clear_delegate_votes() {
  delegate_votes_.Clear();
}
inline ::zera_txn::DelegateVote* DelegatedVotingTXN::mutable_delegate_votes(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.DelegatedVotingTXN.delegate_votes)
  return delegate_votes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::DelegateVote >*
DelegatedVotingTXN::mutable_delegate_votes() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.DelegatedVotingTXN.delegate_votes)
  return &delegate_votes_;
}
inline const ::zera_txn::DelegateVote& DelegatedVotingTXN::_internal_delegate_votes(int index) const {
  return delegate_votes_.Get(index);
}
inline const ::zera_txn::DelegateVote& DelegatedVotingTXN::delegate_votes(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.DelegatedVotingTXN.delegate_votes)
  return _internal_delegate_votes(index);
}
inline ::zera_txn::DelegateVote* DelegatedVotingTXN::_internal_add_delegate_votes() {
  return delegate_votes_.Add();
}
inline ::zera_txn::DelegateVote* DelegatedVotingTXN::add_delegate_votes() {
  // @@protoc_insertion_point(field_add:zera_txn.DelegatedVotingTXN.delegate_votes)
  return _internal_add_delegate_votes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::DelegateVote >&
DelegatedVotingTXN::delegate_votes() const {
  // @@protoc_insertion_point(field_list:zera_txn.DelegatedVotingTXN.delegate_votes)
  return delegate_votes_;
}

// repeated .zera_txn.DelegateFees delegate_fees = 3;
inline int DelegatedVotingTXN::_internal_delegate_fees_size() const {
  return delegate_fees_.size();
}
inline int DelegatedVotingTXN::delegate_fees_size() const {
  return _internal_delegate_fees_size();
}
inline void DelegatedVotingTXN::clear_delegate_fees() {
  delegate_fees_.Clear();
}
inline ::zera_txn::DelegateFees* DelegatedVotingTXN::mutable_delegate_fees(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.DelegatedVotingTXN.delegate_fees)
  return delegate_fees_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::DelegateFees >*
DelegatedVotingTXN::mutable_delegate_fees() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.DelegatedVotingTXN.delegate_fees)
  return &delegate_fees_;
}
inline const ::zera_txn::DelegateFees& DelegatedVotingTXN::_internal_delegate_fees(int index) const {
  return delegate_fees_.Get(index);
}
inline const ::zera_txn::DelegateFees& DelegatedVotingTXN::delegate_fees(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.DelegatedVotingTXN.delegate_fees)
  return _internal_delegate_fees(index);
}
inline ::zera_txn::DelegateFees* DelegatedVotingTXN::_internal_add_delegate_fees() {
  return delegate_fees_.Add();
}
inline ::zera_txn::DelegateFees* DelegatedVotingTXN::add_delegate_fees() {
  // @@protoc_insertion_point(field_add:zera_txn.DelegatedVotingTXN.delegate_fees)
  return _internal_add_delegate_fees();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::DelegateFees >&
DelegatedVotingTXN::delegate_fees() const {
  // @@protoc_insertion_point(field_list:zera_txn.DelegatedVotingTXN.delegate_fees)
  return delegate_fees_;
}

// -------------------------------------------------------------------

// DelegateVote

// bytes address = 1;
inline void DelegateVote::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DelegateVote::address() const {
  // @@protoc_insertion_point(field_get:zera_txn.DelegateVote.address)
  return _internal_address();
}
inline void DelegateVote::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:zera_txn.DelegateVote.address)
}
inline std::string* DelegateVote::mutable_address() {
  // @@protoc_insertion_point(field_mutable:zera_txn.DelegateVote.address)
  return _internal_mutable_address();
}
inline const std::string& DelegateVote::_internal_address() const {
  return address_.Get();
}
inline void DelegateVote::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DelegateVote::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.DelegateVote.address)
}
inline void DelegateVote::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.DelegateVote.address)
}
inline void DelegateVote::set_address(const void* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.DelegateVote.address)
}
inline std::string* DelegateVote::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DelegateVote::release_address() {
  // @@protoc_insertion_point(field_release:zera_txn.DelegateVote.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DelegateVote::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.DelegateVote.address)
}
inline std::string* DelegateVote::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.DelegateVote.address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DelegateVote::unsafe_arena_set_allocated_address(
    std::string* address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (address != nullptr) {
    
  } else {
    
  }
  address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.DelegateVote.address)
}

// repeated .zera_txn.DelegateContract contracts = 2;
inline int DelegateVote::_internal_contracts_size() const {
  return contracts_.size();
}
inline int DelegateVote::contracts_size() const {
  return _internal_contracts_size();
}
inline void DelegateVote::clear_contracts() {
  contracts_.Clear();
}
inline ::zera_txn::DelegateContract* DelegateVote::mutable_contracts(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.DelegateVote.contracts)
  return contracts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::DelegateContract >*
DelegateVote::mutable_contracts() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.DelegateVote.contracts)
  return &contracts_;
}
inline const ::zera_txn::DelegateContract& DelegateVote::_internal_contracts(int index) const {
  return contracts_.Get(index);
}
inline const ::zera_txn::DelegateContract& DelegateVote::contracts(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.DelegateVote.contracts)
  return _internal_contracts(index);
}
inline ::zera_txn::DelegateContract* DelegateVote::_internal_add_contracts() {
  return contracts_.Add();
}
inline ::zera_txn::DelegateContract* DelegateVote::add_contracts() {
  // @@protoc_insertion_point(field_add:zera_txn.DelegateVote.contracts)
  return _internal_add_contracts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::DelegateContract >&
DelegateVote::contracts() const {
  // @@protoc_insertion_point(field_list:zera_txn.DelegateVote.contracts)
  return contracts_;
}

// -------------------------------------------------------------------

// DelegateFees

// string contract_id = 1;
inline void DelegateFees::clear_contract_id() {
  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DelegateFees::contract_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.DelegateFees.contract_id)
  return _internal_contract_id();
}
inline void DelegateFees::set_contract_id(const std::string& value) {
  _internal_set_contract_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.DelegateFees.contract_id)
}
inline std::string* DelegateFees::mutable_contract_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.DelegateFees.contract_id)
  return _internal_mutable_contract_id();
}
inline const std::string& DelegateFees::_internal_contract_id() const {
  return contract_id_.Get();
}
inline void DelegateFees::_internal_set_contract_id(const std::string& value) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DelegateFees::set_contract_id(std::string&& value) {
  
  contract_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.DelegateFees.contract_id)
}
inline void DelegateFees::set_contract_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.DelegateFees.contract_id)
}
inline void DelegateFees::set_contract_id(const char* value,
    size_t size) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.DelegateFees.contract_id)
}
inline std::string* DelegateFees::_internal_mutable_contract_id() {
  
  return contract_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DelegateFees::release_contract_id() {
  // @@protoc_insertion_point(field_release:zera_txn.DelegateFees.contract_id)
  return contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DelegateFees::set_allocated_contract_id(std::string* contract_id) {
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.DelegateFees.contract_id)
}
inline std::string* DelegateFees::unsafe_arena_release_contract_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.DelegateFees.contract_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contract_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DelegateFees::unsafe_arena_set_allocated_contract_id(
    std::string* contract_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contract_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.DelegateFees.contract_id)
}

// string auth_amount = 2;
inline void DelegateFees::clear_auth_amount() {
  auth_amount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DelegateFees::auth_amount() const {
  // @@protoc_insertion_point(field_get:zera_txn.DelegateFees.auth_amount)
  return _internal_auth_amount();
}
inline void DelegateFees::set_auth_amount(const std::string& value) {
  _internal_set_auth_amount(value);
  // @@protoc_insertion_point(field_set:zera_txn.DelegateFees.auth_amount)
}
inline std::string* DelegateFees::mutable_auth_amount() {
  // @@protoc_insertion_point(field_mutable:zera_txn.DelegateFees.auth_amount)
  return _internal_mutable_auth_amount();
}
inline const std::string& DelegateFees::_internal_auth_amount() const {
  return auth_amount_.Get();
}
inline void DelegateFees::_internal_set_auth_amount(const std::string& value) {
  
  auth_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DelegateFees::set_auth_amount(std::string&& value) {
  
  auth_amount_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.DelegateFees.auth_amount)
}
inline void DelegateFees::set_auth_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auth_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.DelegateFees.auth_amount)
}
inline void DelegateFees::set_auth_amount(const char* value,
    size_t size) {
  
  auth_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.DelegateFees.auth_amount)
}
inline std::string* DelegateFees::_internal_mutable_auth_amount() {
  
  return auth_amount_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DelegateFees::release_auth_amount() {
  // @@protoc_insertion_point(field_release:zera_txn.DelegateFees.auth_amount)
  return auth_amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DelegateFees::set_allocated_auth_amount(std::string* auth_amount) {
  if (auth_amount != nullptr) {
    
  } else {
    
  }
  auth_amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth_amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.DelegateFees.auth_amount)
}
inline std::string* DelegateFees::unsafe_arena_release_auth_amount() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.DelegateFees.auth_amount)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return auth_amount_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DelegateFees::unsafe_arena_set_allocated_auth_amount(
    std::string* auth_amount) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (auth_amount != nullptr) {
    
  } else {
    
  }
  auth_amount_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      auth_amount, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.DelegateFees.auth_amount)
}

// -------------------------------------------------------------------

// Compliance

// string contract_id = 1;
inline void Compliance::clear_contract_id() {
  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Compliance::contract_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.Compliance.contract_id)
  return _internal_contract_id();
}
inline void Compliance::set_contract_id(const std::string& value) {
  _internal_set_contract_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.Compliance.contract_id)
}
inline std::string* Compliance::mutable_contract_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.Compliance.contract_id)
  return _internal_mutable_contract_id();
}
inline const std::string& Compliance::_internal_contract_id() const {
  return contract_id_.Get();
}
inline void Compliance::_internal_set_contract_id(const std::string& value) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Compliance::set_contract_id(std::string&& value) {
  
  contract_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.Compliance.contract_id)
}
inline void Compliance::set_contract_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.Compliance.contract_id)
}
inline void Compliance::set_contract_id(const char* value,
    size_t size) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.Compliance.contract_id)
}
inline std::string* Compliance::_internal_mutable_contract_id() {
  
  return contract_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Compliance::release_contract_id() {
  // @@protoc_insertion_point(field_release:zera_txn.Compliance.contract_id)
  return contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Compliance::set_allocated_contract_id(std::string* contract_id) {
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.Compliance.contract_id)
}
inline std::string* Compliance::unsafe_arena_release_contract_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.Compliance.contract_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contract_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Compliance::unsafe_arena_set_allocated_contract_id(
    std::string* contract_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contract_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.Compliance.contract_id)
}

// uint32 compliance_level = 2;
inline void Compliance::clear_compliance_level() {
  compliance_level_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Compliance::_internal_compliance_level() const {
  return compliance_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Compliance::compliance_level() const {
  // @@protoc_insertion_point(field_get:zera_txn.Compliance.compliance_level)
  return _internal_compliance_level();
}
inline void Compliance::_internal_set_compliance_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  compliance_level_ = value;
}
inline void Compliance::set_compliance_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_compliance_level(value);
  // @@protoc_insertion_point(field_set:zera_txn.Compliance.compliance_level)
}

// .google.protobuf.Timestamp expiry = 3;
inline bool Compliance::_internal_has_expiry() const {
  return this != internal_default_instance() && expiry_ != nullptr;
}
inline bool Compliance::has_expiry() const {
  return _internal_has_expiry();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Compliance::_internal_expiry() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = expiry_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Compliance::expiry() const {
  // @@protoc_insertion_point(field_get:zera_txn.Compliance.expiry)
  return _internal_expiry();
}
inline void Compliance::unsafe_arena_set_allocated_expiry(
    PROTOBUF_NAMESPACE_ID::Timestamp* expiry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiry_);
  }
  expiry_ = expiry;
  if (expiry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.Compliance.expiry)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Compliance::release_expiry() {
  auto temp = unsafe_arena_release_expiry();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Compliance::unsafe_arena_release_expiry() {
  // @@protoc_insertion_point(field_release:zera_txn.Compliance.expiry)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expiry_;
  expiry_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Compliance::_internal_mutable_expiry() {
  
  if (expiry_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    expiry_ = p;
  }
  return expiry_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Compliance::mutable_expiry() {
  // @@protoc_insertion_point(field_mutable:zera_txn.Compliance.expiry)
  return _internal_mutable_expiry();
}
inline void Compliance::set_allocated_expiry(PROTOBUF_NAMESPACE_ID::Timestamp* expiry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiry_);
  }
  if (expiry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiry)->GetArena();
    if (message_arena != submessage_arena) {
      expiry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiry, submessage_arena);
    }
    
  } else {
    
  }
  expiry_ = expiry;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.Compliance.expiry)
}

// -------------------------------------------------------------------

// TokenCompliance

// repeated .zera_txn.Compliance compliance = 1;
inline int TokenCompliance::_internal_compliance_size() const {
  return compliance_.size();
}
inline int TokenCompliance::compliance_size() const {
  return _internal_compliance_size();
}
inline void TokenCompliance::clear_compliance() {
  compliance_.Clear();
}
inline ::zera_txn::Compliance* TokenCompliance::mutable_compliance(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.TokenCompliance.compliance)
  return compliance_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::Compliance >*
TokenCompliance::mutable_compliance() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.TokenCompliance.compliance)
  return &compliance_;
}
inline const ::zera_txn::Compliance& TokenCompliance::_internal_compliance(int index) const {
  return compliance_.Get(index);
}
inline const ::zera_txn::Compliance& TokenCompliance::compliance(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.TokenCompliance.compliance)
  return _internal_compliance(index);
}
inline ::zera_txn::Compliance* TokenCompliance::_internal_add_compliance() {
  return compliance_.Add();
}
inline ::zera_txn::Compliance* TokenCompliance::add_compliance() {
  // @@protoc_insertion_point(field_add:zera_txn.TokenCompliance.compliance)
  return _internal_add_compliance();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::Compliance >&
TokenCompliance::compliance() const {
  // @@protoc_insertion_point(field_list:zera_txn.TokenCompliance.compliance)
  return compliance_;
}

// -------------------------------------------------------------------

// ExpenseRatio

// uint32 day = 1;
inline void ExpenseRatio::clear_day() {
  day_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExpenseRatio::_internal_day() const {
  return day_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExpenseRatio::day() const {
  // @@protoc_insertion_point(field_get:zera_txn.ExpenseRatio.day)
  return _internal_day();
}
inline void ExpenseRatio::_internal_set_day(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  day_ = value;
}
inline void ExpenseRatio::set_day(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:zera_txn.ExpenseRatio.day)
}

// uint32 month = 2;
inline void ExpenseRatio::clear_month() {
  month_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExpenseRatio::_internal_month() const {
  return month_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExpenseRatio::month() const {
  // @@protoc_insertion_point(field_get:zera_txn.ExpenseRatio.month)
  return _internal_month();
}
inline void ExpenseRatio::_internal_set_month(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  month_ = value;
}
inline void ExpenseRatio::set_month(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_month(value);
  // @@protoc_insertion_point(field_set:zera_txn.ExpenseRatio.month)
}

// uint32 percent = 3;
inline void ExpenseRatio::clear_percent() {
  percent_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExpenseRatio::_internal_percent() const {
  return percent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExpenseRatio::percent() const {
  // @@protoc_insertion_point(field_get:zera_txn.ExpenseRatio.percent)
  return _internal_percent();
}
inline void ExpenseRatio::_internal_set_percent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  percent_ = value;
}
inline void ExpenseRatio::set_percent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_percent(value);
  // @@protoc_insertion_point(field_set:zera_txn.ExpenseRatio.percent)
}

// -------------------------------------------------------------------

// KeyValuePair

// string key = 1;
inline void KeyValuePair::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KeyValuePair::key() const {
  // @@protoc_insertion_point(field_get:zera_txn.KeyValuePair.key)
  return _internal_key();
}
inline void KeyValuePair::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:zera_txn.KeyValuePair.key)
}
inline std::string* KeyValuePair::mutable_key() {
  // @@protoc_insertion_point(field_mutable:zera_txn.KeyValuePair.key)
  return _internal_mutable_key();
}
inline const std::string& KeyValuePair::_internal_key() const {
  return key_.Get();
}
inline void KeyValuePair::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KeyValuePair::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.KeyValuePair.key)
}
inline void KeyValuePair::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.KeyValuePair.key)
}
inline void KeyValuePair::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.KeyValuePair.key)
}
inline std::string* KeyValuePair::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KeyValuePair::release_key() {
  // @@protoc_insertion_point(field_release:zera_txn.KeyValuePair.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyValuePair::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.KeyValuePair.key)
}
inline std::string* KeyValuePair::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.KeyValuePair.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KeyValuePair::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.KeyValuePair.key)
}

// string value = 2;
inline void KeyValuePair::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KeyValuePair::value() const {
  // @@protoc_insertion_point(field_get:zera_txn.KeyValuePair.value)
  return _internal_value();
}
inline void KeyValuePair::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:zera_txn.KeyValuePair.value)
}
inline std::string* KeyValuePair::mutable_value() {
  // @@protoc_insertion_point(field_mutable:zera_txn.KeyValuePair.value)
  return _internal_mutable_value();
}
inline const std::string& KeyValuePair::_internal_value() const {
  return value_.Get();
}
inline void KeyValuePair::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KeyValuePair::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.KeyValuePair.value)
}
inline void KeyValuePair::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.KeyValuePair.value)
}
inline void KeyValuePair::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.KeyValuePair.value)
}
inline std::string* KeyValuePair::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KeyValuePair::release_value() {
  // @@protoc_insertion_point(field_release:zera_txn.KeyValuePair.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyValuePair::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.KeyValuePair.value)
}
inline std::string* KeyValuePair::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.KeyValuePair.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KeyValuePair::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.KeyValuePair.value)
}

// -------------------------------------------------------------------

// ByteMultiplier

// .zera_txn.TRANSACTION_TYPE txn_type = 1;
inline void ByteMultiplier::clear_txn_type() {
  txn_type_ = 0;
}
inline ::zera_txn::TRANSACTION_TYPE ByteMultiplier::_internal_txn_type() const {
  return static_cast< ::zera_txn::TRANSACTION_TYPE >(txn_type_);
}
inline ::zera_txn::TRANSACTION_TYPE ByteMultiplier::txn_type() const {
  // @@protoc_insertion_point(field_get:zera_txn.ByteMultiplier.txn_type)
  return _internal_txn_type();
}
inline void ByteMultiplier::_internal_set_txn_type(::zera_txn::TRANSACTION_TYPE value) {
  
  txn_type_ = value;
}
inline void ByteMultiplier::set_txn_type(::zera_txn::TRANSACTION_TYPE value) {
  _internal_set_txn_type(value);
  // @@protoc_insertion_point(field_set:zera_txn.ByteMultiplier.txn_type)
}

// string multiplier = 2;
inline void ByteMultiplier::clear_multiplier() {
  multiplier_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ByteMultiplier::multiplier() const {
  // @@protoc_insertion_point(field_get:zera_txn.ByteMultiplier.multiplier)
  return _internal_multiplier();
}
inline void ByteMultiplier::set_multiplier(const std::string& value) {
  _internal_set_multiplier(value);
  // @@protoc_insertion_point(field_set:zera_txn.ByteMultiplier.multiplier)
}
inline std::string* ByteMultiplier::mutable_multiplier() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ByteMultiplier.multiplier)
  return _internal_mutable_multiplier();
}
inline const std::string& ByteMultiplier::_internal_multiplier() const {
  return multiplier_.Get();
}
inline void ByteMultiplier::_internal_set_multiplier(const std::string& value) {
  
  multiplier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ByteMultiplier::set_multiplier(std::string&& value) {
  
  multiplier_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.ByteMultiplier.multiplier)
}
inline void ByteMultiplier::set_multiplier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  multiplier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.ByteMultiplier.multiplier)
}
inline void ByteMultiplier::set_multiplier(const char* value,
    size_t size) {
  
  multiplier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.ByteMultiplier.multiplier)
}
inline std::string* ByteMultiplier::_internal_mutable_multiplier() {
  
  return multiplier_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ByteMultiplier::release_multiplier() {
  // @@protoc_insertion_point(field_release:zera_txn.ByteMultiplier.multiplier)
  return multiplier_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ByteMultiplier::set_allocated_multiplier(std::string* multiplier) {
  if (multiplier != nullptr) {
    
  } else {
    
  }
  multiplier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), multiplier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ByteMultiplier.multiplier)
}
inline std::string* ByteMultiplier::unsafe_arena_release_multiplier() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.ByteMultiplier.multiplier)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return multiplier_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ByteMultiplier::unsafe_arena_set_allocated_multiplier(
    std::string* multiplier) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (multiplier != nullptr) {
    
  } else {
    
  }
  multiplier_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      multiplier, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ByteMultiplier.multiplier)
}

// -------------------------------------------------------------------

// FoundationTXN

// .zera_txn.BaseTXN base = 1;
inline bool FoundationTXN::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool FoundationTXN::has_base() const {
  return _internal_has_base();
}
inline void FoundationTXN::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::zera_txn::BaseTXN& FoundationTXN::_internal_base() const {
  const ::zera_txn::BaseTXN* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::BaseTXN*>(
      &::zera_txn::_BaseTXN_default_instance_);
}
inline const ::zera_txn::BaseTXN& FoundationTXN::base() const {
  // @@protoc_insertion_point(field_get:zera_txn.FoundationTXN.base)
  return _internal_base();
}
inline void FoundationTXN::unsafe_arena_set_allocated_base(
    ::zera_txn::BaseTXN* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.FoundationTXN.base)
}
inline ::zera_txn::BaseTXN* FoundationTXN::release_base() {
  auto temp = unsafe_arena_release_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::BaseTXN* FoundationTXN::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:zera_txn.FoundationTXN.base)
  
  ::zera_txn::BaseTXN* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::zera_txn::BaseTXN* FoundationTXN::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::BaseTXN>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::zera_txn::BaseTXN* FoundationTXN::mutable_base() {
  // @@protoc_insertion_point(field_mutable:zera_txn.FoundationTXN.base)
  return _internal_mutable_base();
}
inline void FoundationTXN::set_allocated_base(::zera_txn::BaseTXN* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.FoundationTXN.base)
}

// repeated string restricted_symbols = 2;
inline int FoundationTXN::_internal_restricted_symbols_size() const {
  return restricted_symbols_.size();
}
inline int FoundationTXN::restricted_symbols_size() const {
  return _internal_restricted_symbols_size();
}
inline void FoundationTXN::clear_restricted_symbols() {
  restricted_symbols_.Clear();
}
inline std::string* FoundationTXN::add_restricted_symbols() {
  // @@protoc_insertion_point(field_add_mutable:zera_txn.FoundationTXN.restricted_symbols)
  return _internal_add_restricted_symbols();
}
inline const std::string& FoundationTXN::_internal_restricted_symbols(int index) const {
  return restricted_symbols_.Get(index);
}
inline const std::string& FoundationTXN::restricted_symbols(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.FoundationTXN.restricted_symbols)
  return _internal_restricted_symbols(index);
}
inline std::string* FoundationTXN::mutable_restricted_symbols(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.FoundationTXN.restricted_symbols)
  return restricted_symbols_.Mutable(index);
}
inline void FoundationTXN::set_restricted_symbols(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:zera_txn.FoundationTXN.restricted_symbols)
  restricted_symbols_.Mutable(index)->assign(value);
}
inline void FoundationTXN::set_restricted_symbols(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:zera_txn.FoundationTXN.restricted_symbols)
  restricted_symbols_.Mutable(index)->assign(std::move(value));
}
inline void FoundationTXN::set_restricted_symbols(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  restricted_symbols_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zera_txn.FoundationTXN.restricted_symbols)
}
inline void FoundationTXN::set_restricted_symbols(int index, const char* value, size_t size) {
  restricted_symbols_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zera_txn.FoundationTXN.restricted_symbols)
}
inline std::string* FoundationTXN::_internal_add_restricted_symbols() {
  return restricted_symbols_.Add();
}
inline void FoundationTXN::add_restricted_symbols(const std::string& value) {
  restricted_symbols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zera_txn.FoundationTXN.restricted_symbols)
}
inline void FoundationTXN::add_restricted_symbols(std::string&& value) {
  restricted_symbols_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zera_txn.FoundationTXN.restricted_symbols)
}
inline void FoundationTXN::add_restricted_symbols(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  restricted_symbols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zera_txn.FoundationTXN.restricted_symbols)
}
inline void FoundationTXN::add_restricted_symbols(const char* value, size_t size) {
  restricted_symbols_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zera_txn.FoundationTXN.restricted_symbols)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FoundationTXN::restricted_symbols() const {
  // @@protoc_insertion_point(field_list:zera_txn.FoundationTXN.restricted_symbols)
  return restricted_symbols_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FoundationTXN::mutable_restricted_symbols() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.FoundationTXN.restricted_symbols)
  return &restricted_symbols_;
}

// repeated .zera_txn.ByteMultiplier byte_multiplier = 3;
inline int FoundationTXN::_internal_byte_multiplier_size() const {
  return byte_multiplier_.size();
}
inline int FoundationTXN::byte_multiplier_size() const {
  return _internal_byte_multiplier_size();
}
inline void FoundationTXN::clear_byte_multiplier() {
  byte_multiplier_.Clear();
}
inline ::zera_txn::ByteMultiplier* FoundationTXN::mutable_byte_multiplier(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.FoundationTXN.byte_multiplier)
  return byte_multiplier_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ByteMultiplier >*
FoundationTXN::mutable_byte_multiplier() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.FoundationTXN.byte_multiplier)
  return &byte_multiplier_;
}
inline const ::zera_txn::ByteMultiplier& FoundationTXN::_internal_byte_multiplier(int index) const {
  return byte_multiplier_.Get(index);
}
inline const ::zera_txn::ByteMultiplier& FoundationTXN::byte_multiplier(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.FoundationTXN.byte_multiplier)
  return _internal_byte_multiplier(index);
}
inline ::zera_txn::ByteMultiplier* FoundationTXN::_internal_add_byte_multiplier() {
  return byte_multiplier_.Add();
}
inline ::zera_txn::ByteMultiplier* FoundationTXN::add_byte_multiplier() {
  // @@protoc_insertion_point(field_add:zera_txn.FoundationTXN.byte_multiplier)
  return _internal_add_byte_multiplier();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ByteMultiplier >&
FoundationTXN::byte_multiplier() const {
  // @@protoc_insertion_point(field_list:zera_txn.FoundationTXN.byte_multiplier)
  return byte_multiplier_;
}

// string fee_ISO4217 = 4;
inline bool FoundationTXN::_internal_has_fee_iso4217() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FoundationTXN::has_fee_iso4217() const {
  return _internal_has_fee_iso4217();
}
inline void FoundationTXN::clear_fee_iso4217() {
  fee_iso4217_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FoundationTXN::fee_iso4217() const {
  // @@protoc_insertion_point(field_get:zera_txn.FoundationTXN.fee_ISO4217)
  return _internal_fee_iso4217();
}
inline void FoundationTXN::set_fee_iso4217(const std::string& value) {
  _internal_set_fee_iso4217(value);
  // @@protoc_insertion_point(field_set:zera_txn.FoundationTXN.fee_ISO4217)
}
inline std::string* FoundationTXN::mutable_fee_iso4217() {
  // @@protoc_insertion_point(field_mutable:zera_txn.FoundationTXN.fee_ISO4217)
  return _internal_mutable_fee_iso4217();
}
inline const std::string& FoundationTXN::_internal_fee_iso4217() const {
  return fee_iso4217_.Get();
}
inline void FoundationTXN::_internal_set_fee_iso4217(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  fee_iso4217_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FoundationTXN::set_fee_iso4217(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  fee_iso4217_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.FoundationTXN.fee_ISO4217)
}
inline void FoundationTXN::set_fee_iso4217(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  fee_iso4217_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.FoundationTXN.fee_ISO4217)
}
inline void FoundationTXN::set_fee_iso4217(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  fee_iso4217_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.FoundationTXN.fee_ISO4217)
}
inline std::string* FoundationTXN::_internal_mutable_fee_iso4217() {
  _has_bits_[0] |= 0x00000001u;
  return fee_iso4217_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FoundationTXN::release_fee_iso4217() {
  // @@protoc_insertion_point(field_release:zera_txn.FoundationTXN.fee_ISO4217)
  if (!_internal_has_fee_iso4217()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return fee_iso4217_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FoundationTXN::set_allocated_fee_iso4217(std::string* fee_iso4217) {
  if (fee_iso4217 != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fee_iso4217_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fee_iso4217,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.FoundationTXN.fee_ISO4217)
}
inline std::string* FoundationTXN::unsafe_arena_release_fee_iso4217() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.FoundationTXN.fee_ISO4217)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return fee_iso4217_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FoundationTXN::unsafe_arena_set_allocated_fee_iso4217(
    std::string* fee_iso4217) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fee_iso4217 != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fee_iso4217_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fee_iso4217, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.FoundationTXN.fee_ISO4217)
}

// -------------------------------------------------------------------

// RevokeTXN

// .zera_txn.BaseTXN base = 1;
inline bool RevokeTXN::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool RevokeTXN::has_base() const {
  return _internal_has_base();
}
inline void RevokeTXN::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::zera_txn::BaseTXN& RevokeTXN::_internal_base() const {
  const ::zera_txn::BaseTXN* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::BaseTXN*>(
      &::zera_txn::_BaseTXN_default_instance_);
}
inline const ::zera_txn::BaseTXN& RevokeTXN::base() const {
  // @@protoc_insertion_point(field_get:zera_txn.RevokeTXN.base)
  return _internal_base();
}
inline void RevokeTXN::unsafe_arena_set_allocated_base(
    ::zera_txn::BaseTXN* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.RevokeTXN.base)
}
inline ::zera_txn::BaseTXN* RevokeTXN::release_base() {
  auto temp = unsafe_arena_release_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::BaseTXN* RevokeTXN::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:zera_txn.RevokeTXN.base)
  
  ::zera_txn::BaseTXN* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::zera_txn::BaseTXN* RevokeTXN::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::BaseTXN>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::zera_txn::BaseTXN* RevokeTXN::mutable_base() {
  // @@protoc_insertion_point(field_mutable:zera_txn.RevokeTXN.base)
  return _internal_mutable_base();
}
inline void RevokeTXN::set_allocated_base(::zera_txn::BaseTXN* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.RevokeTXN.base)
}

// string contract_id = 2;
inline void RevokeTXN::clear_contract_id() {
  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RevokeTXN::contract_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.RevokeTXN.contract_id)
  return _internal_contract_id();
}
inline void RevokeTXN::set_contract_id(const std::string& value) {
  _internal_set_contract_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.RevokeTXN.contract_id)
}
inline std::string* RevokeTXN::mutable_contract_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.RevokeTXN.contract_id)
  return _internal_mutable_contract_id();
}
inline const std::string& RevokeTXN::_internal_contract_id() const {
  return contract_id_.Get();
}
inline void RevokeTXN::_internal_set_contract_id(const std::string& value) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RevokeTXN::set_contract_id(std::string&& value) {
  
  contract_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.RevokeTXN.contract_id)
}
inline void RevokeTXN::set_contract_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.RevokeTXN.contract_id)
}
inline void RevokeTXN::set_contract_id(const char* value,
    size_t size) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.RevokeTXN.contract_id)
}
inline std::string* RevokeTXN::_internal_mutable_contract_id() {
  
  return contract_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RevokeTXN::release_contract_id() {
  // @@protoc_insertion_point(field_release:zera_txn.RevokeTXN.contract_id)
  return contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RevokeTXN::set_allocated_contract_id(std::string* contract_id) {
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.RevokeTXN.contract_id)
}
inline std::string* RevokeTXN::unsafe_arena_release_contract_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.RevokeTXN.contract_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contract_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RevokeTXN::unsafe_arena_set_allocated_contract_id(
    std::string* contract_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contract_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.RevokeTXN.contract_id)
}

// bytes recipient_address = 3;
inline void RevokeTXN::clear_recipient_address() {
  recipient_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RevokeTXN::recipient_address() const {
  // @@protoc_insertion_point(field_get:zera_txn.RevokeTXN.recipient_address)
  return _internal_recipient_address();
}
inline void RevokeTXN::set_recipient_address(const std::string& value) {
  _internal_set_recipient_address(value);
  // @@protoc_insertion_point(field_set:zera_txn.RevokeTXN.recipient_address)
}
inline std::string* RevokeTXN::mutable_recipient_address() {
  // @@protoc_insertion_point(field_mutable:zera_txn.RevokeTXN.recipient_address)
  return _internal_mutable_recipient_address();
}
inline const std::string& RevokeTXN::_internal_recipient_address() const {
  return recipient_address_.Get();
}
inline void RevokeTXN::_internal_set_recipient_address(const std::string& value) {
  
  recipient_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RevokeTXN::set_recipient_address(std::string&& value) {
  
  recipient_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.RevokeTXN.recipient_address)
}
inline void RevokeTXN::set_recipient_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recipient_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.RevokeTXN.recipient_address)
}
inline void RevokeTXN::set_recipient_address(const void* value,
    size_t size) {
  
  recipient_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.RevokeTXN.recipient_address)
}
inline std::string* RevokeTXN::_internal_mutable_recipient_address() {
  
  return recipient_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RevokeTXN::release_recipient_address() {
  // @@protoc_insertion_point(field_release:zera_txn.RevokeTXN.recipient_address)
  return recipient_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RevokeTXN::set_allocated_recipient_address(std::string* recipient_address) {
  if (recipient_address != nullptr) {
    
  } else {
    
  }
  recipient_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recipient_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.RevokeTXN.recipient_address)
}
inline std::string* RevokeTXN::unsafe_arena_release_recipient_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.RevokeTXN.recipient_address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return recipient_address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RevokeTXN::unsafe_arena_set_allocated_recipient_address(
    std::string* recipient_address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (recipient_address != nullptr) {
    
  } else {
    
  }
  recipient_address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      recipient_address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.RevokeTXN.recipient_address)
}

// string item_id = 4;
inline void RevokeTXN::clear_item_id() {
  item_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RevokeTXN::item_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.RevokeTXN.item_id)
  return _internal_item_id();
}
inline void RevokeTXN::set_item_id(const std::string& value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.RevokeTXN.item_id)
}
inline std::string* RevokeTXN::mutable_item_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.RevokeTXN.item_id)
  return _internal_mutable_item_id();
}
inline const std::string& RevokeTXN::_internal_item_id() const {
  return item_id_.Get();
}
inline void RevokeTXN::_internal_set_item_id(const std::string& value) {
  
  item_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RevokeTXN::set_item_id(std::string&& value) {
  
  item_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.RevokeTXN.item_id)
}
inline void RevokeTXN::set_item_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  item_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.RevokeTXN.item_id)
}
inline void RevokeTXN::set_item_id(const char* value,
    size_t size) {
  
  item_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.RevokeTXN.item_id)
}
inline std::string* RevokeTXN::_internal_mutable_item_id() {
  
  return item_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RevokeTXN::release_item_id() {
  // @@protoc_insertion_point(field_release:zera_txn.RevokeTXN.item_id)
  return item_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RevokeTXN::set_allocated_item_id(std::string* item_id) {
  if (item_id != nullptr) {
    
  } else {
    
  }
  item_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), item_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.RevokeTXN.item_id)
}
inline std::string* RevokeTXN::unsafe_arena_release_item_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.RevokeTXN.item_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return item_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RevokeTXN::unsafe_arena_set_allocated_item_id(
    std::string* item_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (item_id != nullptr) {
    
  } else {
    
  }
  item_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      item_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.RevokeTXN.item_id)
}

// -------------------------------------------------------------------

// FastQuorumTXN

// .zera_txn.BaseTXN base = 1;
inline bool FastQuorumTXN::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool FastQuorumTXN::has_base() const {
  return _internal_has_base();
}
inline void FastQuorumTXN::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::zera_txn::BaseTXN& FastQuorumTXN::_internal_base() const {
  const ::zera_txn::BaseTXN* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::BaseTXN*>(
      &::zera_txn::_BaseTXN_default_instance_);
}
inline const ::zera_txn::BaseTXN& FastQuorumTXN::base() const {
  // @@protoc_insertion_point(field_get:zera_txn.FastQuorumTXN.base)
  return _internal_base();
}
inline void FastQuorumTXN::unsafe_arena_set_allocated_base(
    ::zera_txn::BaseTXN* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.FastQuorumTXN.base)
}
inline ::zera_txn::BaseTXN* FastQuorumTXN::release_base() {
  auto temp = unsafe_arena_release_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::BaseTXN* FastQuorumTXN::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:zera_txn.FastQuorumTXN.base)
  
  ::zera_txn::BaseTXN* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::zera_txn::BaseTXN* FastQuorumTXN::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::BaseTXN>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::zera_txn::BaseTXN* FastQuorumTXN::mutable_base() {
  // @@protoc_insertion_point(field_mutable:zera_txn.FastQuorumTXN.base)
  return _internal_mutable_base();
}
inline void FastQuorumTXN::set_allocated_base(::zera_txn::BaseTXN* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.FastQuorumTXN.base)
}

// bytes proposal_id = 2;
inline void FastQuorumTXN::clear_proposal_id() {
  proposal_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FastQuorumTXN::proposal_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.FastQuorumTXN.proposal_id)
  return _internal_proposal_id();
}
inline void FastQuorumTXN::set_proposal_id(const std::string& value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.FastQuorumTXN.proposal_id)
}
inline std::string* FastQuorumTXN::mutable_proposal_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.FastQuorumTXN.proposal_id)
  return _internal_mutable_proposal_id();
}
inline const std::string& FastQuorumTXN::_internal_proposal_id() const {
  return proposal_id_.Get();
}
inline void FastQuorumTXN::_internal_set_proposal_id(const std::string& value) {
  
  proposal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FastQuorumTXN::set_proposal_id(std::string&& value) {
  
  proposal_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.FastQuorumTXN.proposal_id)
}
inline void FastQuorumTXN::set_proposal_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proposal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.FastQuorumTXN.proposal_id)
}
inline void FastQuorumTXN::set_proposal_id(const void* value,
    size_t size) {
  
  proposal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.FastQuorumTXN.proposal_id)
}
inline std::string* FastQuorumTXN::_internal_mutable_proposal_id() {
  
  return proposal_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FastQuorumTXN::release_proposal_id() {
  // @@protoc_insertion_point(field_release:zera_txn.FastQuorumTXN.proposal_id)
  return proposal_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FastQuorumTXN::set_allocated_proposal_id(std::string* proposal_id) {
  if (proposal_id != nullptr) {
    
  } else {
    
  }
  proposal_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proposal_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.FastQuorumTXN.proposal_id)
}
inline std::string* FastQuorumTXN::unsafe_arena_release_proposal_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.FastQuorumTXN.proposal_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return proposal_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FastQuorumTXN::unsafe_arena_set_allocated_proposal_id(
    std::string* proposal_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (proposal_id != nullptr) {
    
  } else {
    
  }
  proposal_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      proposal_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.FastQuorumTXN.proposal_id)
}

// -------------------------------------------------------------------

// Governance

// .zera_txn.GOVERNANCE_TYPE type = 1;
inline void Governance::clear_type() {
  type_ = 0;
}
inline ::zera_txn::GOVERNANCE_TYPE Governance::_internal_type() const {
  return static_cast< ::zera_txn::GOVERNANCE_TYPE >(type_);
}
inline ::zera_txn::GOVERNANCE_TYPE Governance::type() const {
  // @@protoc_insertion_point(field_get:zera_txn.Governance.type)
  return _internal_type();
}
inline void Governance::_internal_set_type(::zera_txn::GOVERNANCE_TYPE value) {
  
  type_ = value;
}
inline void Governance::set_type(::zera_txn::GOVERNANCE_TYPE value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:zera_txn.Governance.type)
}

// uint32 regular_quorum = 2;
inline void Governance::clear_regular_quorum() {
  regular_quorum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Governance::_internal_regular_quorum() const {
  return regular_quorum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Governance::regular_quorum() const {
  // @@protoc_insertion_point(field_get:zera_txn.Governance.regular_quorum)
  return _internal_regular_quorum();
}
inline void Governance::_internal_set_regular_quorum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  regular_quorum_ = value;
}
inline void Governance::set_regular_quorum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_regular_quorum(value);
  // @@protoc_insertion_point(field_set:zera_txn.Governance.regular_quorum)
}

// uint32 fast_quorum = 3;
inline bool Governance::_internal_has_fast_quorum() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Governance::has_fast_quorum() const {
  return _internal_has_fast_quorum();
}
inline void Governance::clear_fast_quorum() {
  fast_quorum_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Governance::_internal_fast_quorum() const {
  return fast_quorum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Governance::fast_quorum() const {
  // @@protoc_insertion_point(field_get:zera_txn.Governance.fast_quorum)
  return _internal_fast_quorum();
}
inline void Governance::_internal_set_fast_quorum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  fast_quorum_ = value;
}
inline void Governance::set_fast_quorum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fast_quorum(value);
  // @@protoc_insertion_point(field_set:zera_txn.Governance.fast_quorum)
}

// repeated string voting_instrument = 4;
inline int Governance::_internal_voting_instrument_size() const {
  return voting_instrument_.size();
}
inline int Governance::voting_instrument_size() const {
  return _internal_voting_instrument_size();
}
inline void Governance::clear_voting_instrument() {
  voting_instrument_.Clear();
}
inline std::string* Governance::add_voting_instrument() {
  // @@protoc_insertion_point(field_add_mutable:zera_txn.Governance.voting_instrument)
  return _internal_add_voting_instrument();
}
inline const std::string& Governance::_internal_voting_instrument(int index) const {
  return voting_instrument_.Get(index);
}
inline const std::string& Governance::voting_instrument(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.Governance.voting_instrument)
  return _internal_voting_instrument(index);
}
inline std::string* Governance::mutable_voting_instrument(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.Governance.voting_instrument)
  return voting_instrument_.Mutable(index);
}
inline void Governance::set_voting_instrument(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:zera_txn.Governance.voting_instrument)
  voting_instrument_.Mutable(index)->assign(value);
}
inline void Governance::set_voting_instrument(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:zera_txn.Governance.voting_instrument)
  voting_instrument_.Mutable(index)->assign(std::move(value));
}
inline void Governance::set_voting_instrument(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  voting_instrument_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zera_txn.Governance.voting_instrument)
}
inline void Governance::set_voting_instrument(int index, const char* value, size_t size) {
  voting_instrument_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zera_txn.Governance.voting_instrument)
}
inline std::string* Governance::_internal_add_voting_instrument() {
  return voting_instrument_.Add();
}
inline void Governance::add_voting_instrument(const std::string& value) {
  voting_instrument_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zera_txn.Governance.voting_instrument)
}
inline void Governance::add_voting_instrument(std::string&& value) {
  voting_instrument_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zera_txn.Governance.voting_instrument)
}
inline void Governance::add_voting_instrument(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  voting_instrument_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zera_txn.Governance.voting_instrument)
}
inline void Governance::add_voting_instrument(const char* value, size_t size) {
  voting_instrument_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zera_txn.Governance.voting_instrument)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Governance::voting_instrument() const {
  // @@protoc_insertion_point(field_list:zera_txn.Governance.voting_instrument)
  return voting_instrument_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Governance::mutable_voting_instrument() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.Governance.voting_instrument)
  return &voting_instrument_;
}

// uint32 threshold = 5;
inline void Governance::clear_threshold() {
  threshold_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Governance::_internal_threshold() const {
  return threshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Governance::threshold() const {
  // @@protoc_insertion_point(field_get:zera_txn.Governance.threshold)
  return _internal_threshold();
}
inline void Governance::_internal_set_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  threshold_ = value;
}
inline void Governance::set_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_threshold(value);
  // @@protoc_insertion_point(field_set:zera_txn.Governance.threshold)
}

// bool chicken_dinner = 6;
inline bool Governance::_internal_has_chicken_dinner() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Governance::has_chicken_dinner() const {
  return _internal_has_chicken_dinner();
}
inline void Governance::clear_chicken_dinner() {
  chicken_dinner_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Governance::_internal_chicken_dinner() const {
  return chicken_dinner_;
}
inline bool Governance::chicken_dinner() const {
  // @@protoc_insertion_point(field_get:zera_txn.Governance.chicken_dinner)
  return _internal_chicken_dinner();
}
inline void Governance::_internal_set_chicken_dinner(bool value) {
  _has_bits_[0] |= 0x00000002u;
  chicken_dinner_ = value;
}
inline void Governance::set_chicken_dinner(bool value) {
  _internal_set_chicken_dinner(value);
  // @@protoc_insertion_point(field_set:zera_txn.Governance.chicken_dinner)
}

// bool allow_multi = 7;
inline void Governance::clear_allow_multi() {
  allow_multi_ = false;
}
inline bool Governance::_internal_allow_multi() const {
  return allow_multi_;
}
inline bool Governance::allow_multi() const {
  // @@protoc_insertion_point(field_get:zera_txn.Governance.allow_multi)
  return _internal_allow_multi();
}
inline void Governance::_internal_set_allow_multi(bool value) {
  
  allow_multi_ = value;
}
inline void Governance::set_allow_multi(bool value) {
  _internal_set_allow_multi(value);
  // @@protoc_insertion_point(field_set:zera_txn.Governance.allow_multi)
}

// uint32 voting_period = 8;
inline bool Governance::_internal_has_voting_period() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Governance::has_voting_period() const {
  return _internal_has_voting_period();
}
inline void Governance::clear_voting_period() {
  voting_period_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Governance::_internal_voting_period() const {
  return voting_period_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Governance::voting_period() const {
  // @@protoc_insertion_point(field_get:zera_txn.Governance.voting_period)
  return _internal_voting_period();
}
inline void Governance::_internal_set_voting_period(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  voting_period_ = value;
}
inline void Governance::set_voting_period(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_voting_period(value);
  // @@protoc_insertion_point(field_set:zera_txn.Governance.voting_period)
}

// repeated string allowed_proposal_instrument = 9;
inline int Governance::_internal_allowed_proposal_instrument_size() const {
  return allowed_proposal_instrument_.size();
}
inline int Governance::allowed_proposal_instrument_size() const {
  return _internal_allowed_proposal_instrument_size();
}
inline void Governance::clear_allowed_proposal_instrument() {
  allowed_proposal_instrument_.Clear();
}
inline std::string* Governance::add_allowed_proposal_instrument() {
  // @@protoc_insertion_point(field_add_mutable:zera_txn.Governance.allowed_proposal_instrument)
  return _internal_add_allowed_proposal_instrument();
}
inline const std::string& Governance::_internal_allowed_proposal_instrument(int index) const {
  return allowed_proposal_instrument_.Get(index);
}
inline const std::string& Governance::allowed_proposal_instrument(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.Governance.allowed_proposal_instrument)
  return _internal_allowed_proposal_instrument(index);
}
inline std::string* Governance::mutable_allowed_proposal_instrument(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.Governance.allowed_proposal_instrument)
  return allowed_proposal_instrument_.Mutable(index);
}
inline void Governance::set_allowed_proposal_instrument(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:zera_txn.Governance.allowed_proposal_instrument)
  allowed_proposal_instrument_.Mutable(index)->assign(value);
}
inline void Governance::set_allowed_proposal_instrument(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:zera_txn.Governance.allowed_proposal_instrument)
  allowed_proposal_instrument_.Mutable(index)->assign(std::move(value));
}
inline void Governance::set_allowed_proposal_instrument(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  allowed_proposal_instrument_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zera_txn.Governance.allowed_proposal_instrument)
}
inline void Governance::set_allowed_proposal_instrument(int index, const char* value, size_t size) {
  allowed_proposal_instrument_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zera_txn.Governance.allowed_proposal_instrument)
}
inline std::string* Governance::_internal_add_allowed_proposal_instrument() {
  return allowed_proposal_instrument_.Add();
}
inline void Governance::add_allowed_proposal_instrument(const std::string& value) {
  allowed_proposal_instrument_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zera_txn.Governance.allowed_proposal_instrument)
}
inline void Governance::add_allowed_proposal_instrument(std::string&& value) {
  allowed_proposal_instrument_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zera_txn.Governance.allowed_proposal_instrument)
}
inline void Governance::add_allowed_proposal_instrument(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  allowed_proposal_instrument_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zera_txn.Governance.allowed_proposal_instrument)
}
inline void Governance::add_allowed_proposal_instrument(const char* value, size_t size) {
  allowed_proposal_instrument_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zera_txn.Governance.allowed_proposal_instrument)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Governance::allowed_proposal_instrument() const {
  // @@protoc_insertion_point(field_list:zera_txn.Governance.allowed_proposal_instrument)
  return allowed_proposal_instrument_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Governance::mutable_allowed_proposal_instrument() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.Governance.allowed_proposal_instrument)
  return &allowed_proposal_instrument_;
}

// .zera_txn.PROPOSAL_PERIOD proposal_period = 10;
inline bool Governance::_internal_has_proposal_period() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Governance::has_proposal_period() const {
  return _internal_has_proposal_period();
}
inline void Governance::clear_proposal_period() {
  proposal_period_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::zera_txn::PROPOSAL_PERIOD Governance::_internal_proposal_period() const {
  return static_cast< ::zera_txn::PROPOSAL_PERIOD >(proposal_period_);
}
inline ::zera_txn::PROPOSAL_PERIOD Governance::proposal_period() const {
  // @@protoc_insertion_point(field_get:zera_txn.Governance.proposal_period)
  return _internal_proposal_period();
}
inline void Governance::_internal_set_proposal_period(::zera_txn::PROPOSAL_PERIOD value) {
  _has_bits_[0] |= 0x00000008u;
  proposal_period_ = value;
}
inline void Governance::set_proposal_period(::zera_txn::PROPOSAL_PERIOD value) {
  _internal_set_proposal_period(value);
  // @@protoc_insertion_point(field_set:zera_txn.Governance.proposal_period)
}

// repeated .zera_txn.Stage stage_length = 11;
inline int Governance::_internal_stage_length_size() const {
  return stage_length_.size();
}
inline int Governance::stage_length_size() const {
  return _internal_stage_length_size();
}
inline void Governance::clear_stage_length() {
  stage_length_.Clear();
}
inline ::zera_txn::Stage* Governance::mutable_stage_length(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.Governance.stage_length)
  return stage_length_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::Stage >*
Governance::mutable_stage_length() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.Governance.stage_length)
  return &stage_length_;
}
inline const ::zera_txn::Stage& Governance::_internal_stage_length(int index) const {
  return stage_length_.Get(index);
}
inline const ::zera_txn::Stage& Governance::stage_length(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.Governance.stage_length)
  return _internal_stage_length(index);
}
inline ::zera_txn::Stage* Governance::_internal_add_stage_length() {
  return stage_length_.Add();
}
inline ::zera_txn::Stage* Governance::add_stage_length() {
  // @@protoc_insertion_point(field_add:zera_txn.Governance.stage_length)
  return _internal_add_stage_length();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::Stage >&
Governance::stage_length() const {
  // @@protoc_insertion_point(field_list:zera_txn.Governance.stage_length)
  return stage_length_;
}

// .google.protobuf.Timestamp start_timestamp = 12;
inline bool Governance::_internal_has_start_timestamp() const {
  return this != internal_default_instance() && start_timestamp_ != nullptr;
}
inline bool Governance::has_start_timestamp() const {
  return _internal_has_start_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Governance::_internal_start_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Governance::start_timestamp() const {
  // @@protoc_insertion_point(field_get:zera_txn.Governance.start_timestamp)
  return _internal_start_timestamp();
}
inline void Governance::unsafe_arena_set_allocated_start_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* start_timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_timestamp_);
  }
  start_timestamp_ = start_timestamp;
  if (start_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.Governance.start_timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Governance::release_start_timestamp() {
  auto temp = unsafe_arena_release_start_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Governance::unsafe_arena_release_start_timestamp() {
  // @@protoc_insertion_point(field_release:zera_txn.Governance.start_timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_timestamp_;
  start_timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Governance::_internal_mutable_start_timestamp() {
  
  if (start_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    start_timestamp_ = p;
  }
  return start_timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Governance::mutable_start_timestamp() {
  // @@protoc_insertion_point(field_mutable:zera_txn.Governance.start_timestamp)
  return _internal_mutable_start_timestamp();
}
inline void Governance::set_allocated_start_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* start_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_timestamp_);
  }
  if (start_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      start_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  start_timestamp_ = start_timestamp;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.Governance.start_timestamp)
}

// -------------------------------------------------------------------

// Stage

// uint32 length = 1;
inline void Stage::clear_length() {
  length_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Stage::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Stage::length() const {
  // @@protoc_insertion_point(field_get:zera_txn.Stage.length)
  return _internal_length();
}
inline void Stage::_internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  length_ = value;
}
inline void Stage::set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:zera_txn.Stage.length)
}

// .zera_txn.PROPOSAL_PERIOD period = 2;
inline void Stage::clear_period() {
  period_ = 0;
}
inline ::zera_txn::PROPOSAL_PERIOD Stage::_internal_period() const {
  return static_cast< ::zera_txn::PROPOSAL_PERIOD >(period_);
}
inline ::zera_txn::PROPOSAL_PERIOD Stage::period() const {
  // @@protoc_insertion_point(field_get:zera_txn.Stage.period)
  return _internal_period();
}
inline void Stage::_internal_set_period(::zera_txn::PROPOSAL_PERIOD value) {
  
  period_ = value;
}
inline void Stage::set_period(::zera_txn::PROPOSAL_PERIOD value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:zera_txn.Stage.period)
}

// bool break = 3;
inline void Stage::clear_break_() {
  break__ = false;
}
inline bool Stage::_internal_break_() const {
  return break__;
}
inline bool Stage::break_() const {
  // @@protoc_insertion_point(field_get:zera_txn.Stage.break)
  return _internal_break_();
}
inline void Stage::_internal_set_break_(bool value) {
  
  break__ = value;
}
inline void Stage::set_break_(bool value) {
  _internal_set_break_(value);
  // @@protoc_insertion_point(field_set:zera_txn.Stage.break)
}

// -------------------------------------------------------------------

// CoinDenomination

// string denomination_name = 5;
inline void CoinDenomination::clear_denomination_name() {
  denomination_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CoinDenomination::denomination_name() const {
  // @@protoc_insertion_point(field_get:zera_txn.CoinDenomination.denomination_name)
  return _internal_denomination_name();
}
inline void CoinDenomination::set_denomination_name(const std::string& value) {
  _internal_set_denomination_name(value);
  // @@protoc_insertion_point(field_set:zera_txn.CoinDenomination.denomination_name)
}
inline std::string* CoinDenomination::mutable_denomination_name() {
  // @@protoc_insertion_point(field_mutable:zera_txn.CoinDenomination.denomination_name)
  return _internal_mutable_denomination_name();
}
inline const std::string& CoinDenomination::_internal_denomination_name() const {
  return denomination_name_.Get();
}
inline void CoinDenomination::_internal_set_denomination_name(const std::string& value) {
  
  denomination_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CoinDenomination::set_denomination_name(std::string&& value) {
  
  denomination_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.CoinDenomination.denomination_name)
}
inline void CoinDenomination::set_denomination_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  denomination_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.CoinDenomination.denomination_name)
}
inline void CoinDenomination::set_denomination_name(const char* value,
    size_t size) {
  
  denomination_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.CoinDenomination.denomination_name)
}
inline std::string* CoinDenomination::_internal_mutable_denomination_name() {
  
  return denomination_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CoinDenomination::release_denomination_name() {
  // @@protoc_insertion_point(field_release:zera_txn.CoinDenomination.denomination_name)
  return denomination_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CoinDenomination::set_allocated_denomination_name(std::string* denomination_name) {
  if (denomination_name != nullptr) {
    
  } else {
    
  }
  denomination_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), denomination_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.CoinDenomination.denomination_name)
}
inline std::string* CoinDenomination::unsafe_arena_release_denomination_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.CoinDenomination.denomination_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return denomination_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CoinDenomination::unsafe_arena_set_allocated_denomination_name(
    std::string* denomination_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (denomination_name != nullptr) {
    
  } else {
    
  }
  denomination_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      denomination_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.CoinDenomination.denomination_name)
}

// string amount = 6;
inline void CoinDenomination::clear_amount() {
  amount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CoinDenomination::amount() const {
  // @@protoc_insertion_point(field_get:zera_txn.CoinDenomination.amount)
  return _internal_amount();
}
inline void CoinDenomination::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:zera_txn.CoinDenomination.amount)
}
inline std::string* CoinDenomination::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:zera_txn.CoinDenomination.amount)
  return _internal_mutable_amount();
}
inline const std::string& CoinDenomination::_internal_amount() const {
  return amount_.Get();
}
inline void CoinDenomination::_internal_set_amount(const std::string& value) {
  
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CoinDenomination::set_amount(std::string&& value) {
  
  amount_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.CoinDenomination.amount)
}
inline void CoinDenomination::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.CoinDenomination.amount)
}
inline void CoinDenomination::set_amount(const char* value,
    size_t size) {
  
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.CoinDenomination.amount)
}
inline std::string* CoinDenomination::_internal_mutable_amount() {
  
  return amount_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CoinDenomination::release_amount() {
  // @@protoc_insertion_point(field_release:zera_txn.CoinDenomination.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CoinDenomination::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.CoinDenomination.amount)
}
inline std::string* CoinDenomination::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.CoinDenomination.amount)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return amount_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CoinDenomination::unsafe_arena_set_allocated_amount(
    std::string* amount) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      amount, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.CoinDenomination.amount)
}

// -------------------------------------------------------------------

// ContractFees

// string fee = 1;
inline void ContractFees::clear_fee() {
  fee_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContractFees::fee() const {
  // @@protoc_insertion_point(field_get:zera_txn.ContractFees.fee)
  return _internal_fee();
}
inline void ContractFees::set_fee(const std::string& value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:zera_txn.ContractFees.fee)
}
inline std::string* ContractFees::mutable_fee() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ContractFees.fee)
  return _internal_mutable_fee();
}
inline const std::string& ContractFees::_internal_fee() const {
  return fee_.Get();
}
inline void ContractFees::_internal_set_fee(const std::string& value) {
  
  fee_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractFees::set_fee(std::string&& value) {
  
  fee_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.ContractFees.fee)
}
inline void ContractFees::set_fee(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fee_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.ContractFees.fee)
}
inline void ContractFees::set_fee(const char* value,
    size_t size) {
  
  fee_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.ContractFees.fee)
}
inline std::string* ContractFees::_internal_mutable_fee() {
  
  return fee_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractFees::release_fee() {
  // @@protoc_insertion_point(field_release:zera_txn.ContractFees.fee)
  return fee_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractFees::set_allocated_fee(std::string* fee) {
  if (fee != nullptr) {
    
  } else {
    
  }
  fee_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fee,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ContractFees.fee)
}
inline std::string* ContractFees::unsafe_arena_release_fee() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.ContractFees.fee)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return fee_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractFees::unsafe_arena_set_allocated_fee(
    std::string* fee) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fee != nullptr) {
    
  } else {
    
  }
  fee_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fee, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ContractFees.fee)
}

// bytes fee_address = 2;
inline bool ContractFees::_internal_has_fee_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContractFees::has_fee_address() const {
  return _internal_has_fee_address();
}
inline void ContractFees::clear_fee_address() {
  fee_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContractFees::fee_address() const {
  // @@protoc_insertion_point(field_get:zera_txn.ContractFees.fee_address)
  return _internal_fee_address();
}
inline void ContractFees::set_fee_address(const std::string& value) {
  _internal_set_fee_address(value);
  // @@protoc_insertion_point(field_set:zera_txn.ContractFees.fee_address)
}
inline std::string* ContractFees::mutable_fee_address() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ContractFees.fee_address)
  return _internal_mutable_fee_address();
}
inline const std::string& ContractFees::_internal_fee_address() const {
  return fee_address_.Get();
}
inline void ContractFees::_internal_set_fee_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  fee_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractFees::set_fee_address(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  fee_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.ContractFees.fee_address)
}
inline void ContractFees::set_fee_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  fee_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.ContractFees.fee_address)
}
inline void ContractFees::set_fee_address(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  fee_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.ContractFees.fee_address)
}
inline std::string* ContractFees::_internal_mutable_fee_address() {
  _has_bits_[0] |= 0x00000001u;
  return fee_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractFees::release_fee_address() {
  // @@protoc_insertion_point(field_release:zera_txn.ContractFees.fee_address)
  if (!_internal_has_fee_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return fee_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractFees::set_allocated_fee_address(std::string* fee_address) {
  if (fee_address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fee_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fee_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ContractFees.fee_address)
}
inline std::string* ContractFees::unsafe_arena_release_fee_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.ContractFees.fee_address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return fee_address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractFees::unsafe_arena_set_allocated_fee_address(
    std::string* fee_address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fee_address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fee_address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fee_address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ContractFees.fee_address)
}

// string burn = 3;
inline void ContractFees::clear_burn() {
  burn_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContractFees::burn() const {
  // @@protoc_insertion_point(field_get:zera_txn.ContractFees.burn)
  return _internal_burn();
}
inline void ContractFees::set_burn(const std::string& value) {
  _internal_set_burn(value);
  // @@protoc_insertion_point(field_set:zera_txn.ContractFees.burn)
}
inline std::string* ContractFees::mutable_burn() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ContractFees.burn)
  return _internal_mutable_burn();
}
inline const std::string& ContractFees::_internal_burn() const {
  return burn_.Get();
}
inline void ContractFees::_internal_set_burn(const std::string& value) {
  
  burn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractFees::set_burn(std::string&& value) {
  
  burn_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.ContractFees.burn)
}
inline void ContractFees::set_burn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  burn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.ContractFees.burn)
}
inline void ContractFees::set_burn(const char* value,
    size_t size) {
  
  burn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.ContractFees.burn)
}
inline std::string* ContractFees::_internal_mutable_burn() {
  
  return burn_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractFees::release_burn() {
  // @@protoc_insertion_point(field_release:zera_txn.ContractFees.burn)
  return burn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractFees::set_allocated_burn(std::string* burn) {
  if (burn != nullptr) {
    
  } else {
    
  }
  burn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), burn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ContractFees.burn)
}
inline std::string* ContractFees::unsafe_arena_release_burn() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.ContractFees.burn)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return burn_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractFees::unsafe_arena_set_allocated_burn(
    std::string* burn) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (burn != nullptr) {
    
  } else {
    
  }
  burn_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      burn, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ContractFees.burn)
}

// string validator = 4;
inline void ContractFees::clear_validator() {
  validator_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContractFees::validator() const {
  // @@protoc_insertion_point(field_get:zera_txn.ContractFees.validator)
  return _internal_validator();
}
inline void ContractFees::set_validator(const std::string& value) {
  _internal_set_validator(value);
  // @@protoc_insertion_point(field_set:zera_txn.ContractFees.validator)
}
inline std::string* ContractFees::mutable_validator() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ContractFees.validator)
  return _internal_mutable_validator();
}
inline const std::string& ContractFees::_internal_validator() const {
  return validator_.Get();
}
inline void ContractFees::_internal_set_validator(const std::string& value) {
  
  validator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractFees::set_validator(std::string&& value) {
  
  validator_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.ContractFees.validator)
}
inline void ContractFees::set_validator(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  validator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.ContractFees.validator)
}
inline void ContractFees::set_validator(const char* value,
    size_t size) {
  
  validator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.ContractFees.validator)
}
inline std::string* ContractFees::_internal_mutable_validator() {
  
  return validator_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractFees::release_validator() {
  // @@protoc_insertion_point(field_release:zera_txn.ContractFees.validator)
  return validator_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractFees::set_allocated_validator(std::string* validator) {
  if (validator != nullptr) {
    
  } else {
    
  }
  validator_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validator,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ContractFees.validator)
}
inline std::string* ContractFees::unsafe_arena_release_validator() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.ContractFees.validator)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return validator_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractFees::unsafe_arena_set_allocated_validator(
    std::string* validator) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (validator != nullptr) {
    
  } else {
    
  }
  validator_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      validator, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ContractFees.validator)
}

// repeated string allowed_fee_instrument = 5;
inline int ContractFees::_internal_allowed_fee_instrument_size() const {
  return allowed_fee_instrument_.size();
}
inline int ContractFees::allowed_fee_instrument_size() const {
  return _internal_allowed_fee_instrument_size();
}
inline void ContractFees::clear_allowed_fee_instrument() {
  allowed_fee_instrument_.Clear();
}
inline std::string* ContractFees::add_allowed_fee_instrument() {
  // @@protoc_insertion_point(field_add_mutable:zera_txn.ContractFees.allowed_fee_instrument)
  return _internal_add_allowed_fee_instrument();
}
inline const std::string& ContractFees::_internal_allowed_fee_instrument(int index) const {
  return allowed_fee_instrument_.Get(index);
}
inline const std::string& ContractFees::allowed_fee_instrument(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.ContractFees.allowed_fee_instrument)
  return _internal_allowed_fee_instrument(index);
}
inline std::string* ContractFees::mutable_allowed_fee_instrument(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.ContractFees.allowed_fee_instrument)
  return allowed_fee_instrument_.Mutable(index);
}
inline void ContractFees::set_allowed_fee_instrument(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:zera_txn.ContractFees.allowed_fee_instrument)
  allowed_fee_instrument_.Mutable(index)->assign(value);
}
inline void ContractFees::set_allowed_fee_instrument(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:zera_txn.ContractFees.allowed_fee_instrument)
  allowed_fee_instrument_.Mutable(index)->assign(std::move(value));
}
inline void ContractFees::set_allowed_fee_instrument(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  allowed_fee_instrument_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zera_txn.ContractFees.allowed_fee_instrument)
}
inline void ContractFees::set_allowed_fee_instrument(int index, const char* value, size_t size) {
  allowed_fee_instrument_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zera_txn.ContractFees.allowed_fee_instrument)
}
inline std::string* ContractFees::_internal_add_allowed_fee_instrument() {
  return allowed_fee_instrument_.Add();
}
inline void ContractFees::add_allowed_fee_instrument(const std::string& value) {
  allowed_fee_instrument_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zera_txn.ContractFees.allowed_fee_instrument)
}
inline void ContractFees::add_allowed_fee_instrument(std::string&& value) {
  allowed_fee_instrument_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zera_txn.ContractFees.allowed_fee_instrument)
}
inline void ContractFees::add_allowed_fee_instrument(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  allowed_fee_instrument_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zera_txn.ContractFees.allowed_fee_instrument)
}
inline void ContractFees::add_allowed_fee_instrument(const char* value, size_t size) {
  allowed_fee_instrument_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zera_txn.ContractFees.allowed_fee_instrument)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ContractFees::allowed_fee_instrument() const {
  // @@protoc_insertion_point(field_list:zera_txn.ContractFees.allowed_fee_instrument)
  return allowed_fee_instrument_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ContractFees::mutable_allowed_fee_instrument() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.ContractFees.allowed_fee_instrument)
  return &allowed_fee_instrument_;
}

// .zera_txn.CONTRACT_FEE_TYPE contract_fee_type = 6;
inline void ContractFees::clear_contract_fee_type() {
  contract_fee_type_ = 0;
}
inline ::zera_txn::CONTRACT_FEE_TYPE ContractFees::_internal_contract_fee_type() const {
  return static_cast< ::zera_txn::CONTRACT_FEE_TYPE >(contract_fee_type_);
}
inline ::zera_txn::CONTRACT_FEE_TYPE ContractFees::contract_fee_type() const {
  // @@protoc_insertion_point(field_get:zera_txn.ContractFees.contract_fee_type)
  return _internal_contract_fee_type();
}
inline void ContractFees::_internal_set_contract_fee_type(::zera_txn::CONTRACT_FEE_TYPE value) {
  
  contract_fee_type_ = value;
}
inline void ContractFees::set_contract_fee_type(::zera_txn::CONTRACT_FEE_TYPE value) {
  _internal_set_contract_fee_type(value);
  // @@protoc_insertion_point(field_set:zera_txn.ContractFees.contract_fee_type)
}

// -------------------------------------------------------------------

// ItemContractFees

// string fee = 1;
inline void ItemContractFees::clear_fee() {
  fee_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ItemContractFees::fee() const {
  // @@protoc_insertion_point(field_get:zera_txn.ItemContractFees.fee)
  return _internal_fee();
}
inline void ItemContractFees::set_fee(const std::string& value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:zera_txn.ItemContractFees.fee)
}
inline std::string* ItemContractFees::mutable_fee() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ItemContractFees.fee)
  return _internal_mutable_fee();
}
inline const std::string& ItemContractFees::_internal_fee() const {
  return fee_.Get();
}
inline void ItemContractFees::_internal_set_fee(const std::string& value) {
  
  fee_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ItemContractFees::set_fee(std::string&& value) {
  
  fee_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.ItemContractFees.fee)
}
inline void ItemContractFees::set_fee(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fee_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.ItemContractFees.fee)
}
inline void ItemContractFees::set_fee(const char* value,
    size_t size) {
  
  fee_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.ItemContractFees.fee)
}
inline std::string* ItemContractFees::_internal_mutable_fee() {
  
  return fee_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ItemContractFees::release_fee() {
  // @@protoc_insertion_point(field_release:zera_txn.ItemContractFees.fee)
  return fee_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ItemContractFees::set_allocated_fee(std::string* fee) {
  if (fee != nullptr) {
    
  } else {
    
  }
  fee_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fee,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ItemContractFees.fee)
}
inline std::string* ItemContractFees::unsafe_arena_release_fee() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.ItemContractFees.fee)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return fee_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ItemContractFees::unsafe_arena_set_allocated_fee(
    std::string* fee) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fee != nullptr) {
    
  } else {
    
  }
  fee_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fee, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ItemContractFees.fee)
}

// bytes fee_address = 2;
inline bool ItemContractFees::_internal_has_fee_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ItemContractFees::has_fee_address() const {
  return _internal_has_fee_address();
}
inline void ItemContractFees::clear_fee_address() {
  fee_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ItemContractFees::fee_address() const {
  // @@protoc_insertion_point(field_get:zera_txn.ItemContractFees.fee_address)
  return _internal_fee_address();
}
inline void ItemContractFees::set_fee_address(const std::string& value) {
  _internal_set_fee_address(value);
  // @@protoc_insertion_point(field_set:zera_txn.ItemContractFees.fee_address)
}
inline std::string* ItemContractFees::mutable_fee_address() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ItemContractFees.fee_address)
  return _internal_mutable_fee_address();
}
inline const std::string& ItemContractFees::_internal_fee_address() const {
  return fee_address_.Get();
}
inline void ItemContractFees::_internal_set_fee_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  fee_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ItemContractFees::set_fee_address(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  fee_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.ItemContractFees.fee_address)
}
inline void ItemContractFees::set_fee_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  fee_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.ItemContractFees.fee_address)
}
inline void ItemContractFees::set_fee_address(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  fee_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.ItemContractFees.fee_address)
}
inline std::string* ItemContractFees::_internal_mutable_fee_address() {
  _has_bits_[0] |= 0x00000001u;
  return fee_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ItemContractFees::release_fee_address() {
  // @@protoc_insertion_point(field_release:zera_txn.ItemContractFees.fee_address)
  if (!_internal_has_fee_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return fee_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ItemContractFees::set_allocated_fee_address(std::string* fee_address) {
  if (fee_address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fee_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fee_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ItemContractFees.fee_address)
}
inline std::string* ItemContractFees::unsafe_arena_release_fee_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.ItemContractFees.fee_address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return fee_address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ItemContractFees::unsafe_arena_set_allocated_fee_address(
    std::string* fee_address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fee_address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fee_address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fee_address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ItemContractFees.fee_address)
}

// string burn = 3;
inline void ItemContractFees::clear_burn() {
  burn_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ItemContractFees::burn() const {
  // @@protoc_insertion_point(field_get:zera_txn.ItemContractFees.burn)
  return _internal_burn();
}
inline void ItemContractFees::set_burn(const std::string& value) {
  _internal_set_burn(value);
  // @@protoc_insertion_point(field_set:zera_txn.ItemContractFees.burn)
}
inline std::string* ItemContractFees::mutable_burn() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ItemContractFees.burn)
  return _internal_mutable_burn();
}
inline const std::string& ItemContractFees::_internal_burn() const {
  return burn_.Get();
}
inline void ItemContractFees::_internal_set_burn(const std::string& value) {
  
  burn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ItemContractFees::set_burn(std::string&& value) {
  
  burn_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.ItemContractFees.burn)
}
inline void ItemContractFees::set_burn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  burn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.ItemContractFees.burn)
}
inline void ItemContractFees::set_burn(const char* value,
    size_t size) {
  
  burn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.ItemContractFees.burn)
}
inline std::string* ItemContractFees::_internal_mutable_burn() {
  
  return burn_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ItemContractFees::release_burn() {
  // @@protoc_insertion_point(field_release:zera_txn.ItemContractFees.burn)
  return burn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ItemContractFees::set_allocated_burn(std::string* burn) {
  if (burn != nullptr) {
    
  } else {
    
  }
  burn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), burn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ItemContractFees.burn)
}
inline std::string* ItemContractFees::unsafe_arena_release_burn() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.ItemContractFees.burn)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return burn_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ItemContractFees::unsafe_arena_set_allocated_burn(
    std::string* burn) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (burn != nullptr) {
    
  } else {
    
  }
  burn_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      burn, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ItemContractFees.burn)
}

// string validator = 4;
inline void ItemContractFees::clear_validator() {
  validator_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ItemContractFees::validator() const {
  // @@protoc_insertion_point(field_get:zera_txn.ItemContractFees.validator)
  return _internal_validator();
}
inline void ItemContractFees::set_validator(const std::string& value) {
  _internal_set_validator(value);
  // @@protoc_insertion_point(field_set:zera_txn.ItemContractFees.validator)
}
inline std::string* ItemContractFees::mutable_validator() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ItemContractFees.validator)
  return _internal_mutable_validator();
}
inline const std::string& ItemContractFees::_internal_validator() const {
  return validator_.Get();
}
inline void ItemContractFees::_internal_set_validator(const std::string& value) {
  
  validator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ItemContractFees::set_validator(std::string&& value) {
  
  validator_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.ItemContractFees.validator)
}
inline void ItemContractFees::set_validator(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  validator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.ItemContractFees.validator)
}
inline void ItemContractFees::set_validator(const char* value,
    size_t size) {
  
  validator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.ItemContractFees.validator)
}
inline std::string* ItemContractFees::_internal_mutable_validator() {
  
  return validator_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ItemContractFees::release_validator() {
  // @@protoc_insertion_point(field_release:zera_txn.ItemContractFees.validator)
  return validator_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ItemContractFees::set_allocated_validator(std::string* validator) {
  if (validator != nullptr) {
    
  } else {
    
  }
  validator_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validator,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ItemContractFees.validator)
}
inline std::string* ItemContractFees::unsafe_arena_release_validator() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.ItemContractFees.validator)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return validator_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ItemContractFees::unsafe_arena_set_allocated_validator(
    std::string* validator) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (validator != nullptr) {
    
  } else {
    
  }
  validator_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      validator, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ItemContractFees.validator)
}

// repeated string allowed_fee_instrument = 5;
inline int ItemContractFees::_internal_allowed_fee_instrument_size() const {
  return allowed_fee_instrument_.size();
}
inline int ItemContractFees::allowed_fee_instrument_size() const {
  return _internal_allowed_fee_instrument_size();
}
inline void ItemContractFees::clear_allowed_fee_instrument() {
  allowed_fee_instrument_.Clear();
}
inline std::string* ItemContractFees::add_allowed_fee_instrument() {
  // @@protoc_insertion_point(field_add_mutable:zera_txn.ItemContractFees.allowed_fee_instrument)
  return _internal_add_allowed_fee_instrument();
}
inline const std::string& ItemContractFees::_internal_allowed_fee_instrument(int index) const {
  return allowed_fee_instrument_.Get(index);
}
inline const std::string& ItemContractFees::allowed_fee_instrument(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.ItemContractFees.allowed_fee_instrument)
  return _internal_allowed_fee_instrument(index);
}
inline std::string* ItemContractFees::mutable_allowed_fee_instrument(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.ItemContractFees.allowed_fee_instrument)
  return allowed_fee_instrument_.Mutable(index);
}
inline void ItemContractFees::set_allowed_fee_instrument(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:zera_txn.ItemContractFees.allowed_fee_instrument)
  allowed_fee_instrument_.Mutable(index)->assign(value);
}
inline void ItemContractFees::set_allowed_fee_instrument(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:zera_txn.ItemContractFees.allowed_fee_instrument)
  allowed_fee_instrument_.Mutable(index)->assign(std::move(value));
}
inline void ItemContractFees::set_allowed_fee_instrument(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  allowed_fee_instrument_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zera_txn.ItemContractFees.allowed_fee_instrument)
}
inline void ItemContractFees::set_allowed_fee_instrument(int index, const char* value, size_t size) {
  allowed_fee_instrument_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zera_txn.ItemContractFees.allowed_fee_instrument)
}
inline std::string* ItemContractFees::_internal_add_allowed_fee_instrument() {
  return allowed_fee_instrument_.Add();
}
inline void ItemContractFees::add_allowed_fee_instrument(const std::string& value) {
  allowed_fee_instrument_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zera_txn.ItemContractFees.allowed_fee_instrument)
}
inline void ItemContractFees::add_allowed_fee_instrument(std::string&& value) {
  allowed_fee_instrument_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zera_txn.ItemContractFees.allowed_fee_instrument)
}
inline void ItemContractFees::add_allowed_fee_instrument(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  allowed_fee_instrument_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zera_txn.ItemContractFees.allowed_fee_instrument)
}
inline void ItemContractFees::add_allowed_fee_instrument(const char* value, size_t size) {
  allowed_fee_instrument_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zera_txn.ItemContractFees.allowed_fee_instrument)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ItemContractFees::allowed_fee_instrument() const {
  // @@protoc_insertion_point(field_list:zera_txn.ItemContractFees.allowed_fee_instrument)
  return allowed_fee_instrument_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ItemContractFees::mutable_allowed_fee_instrument() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.ItemContractFees.allowed_fee_instrument)
  return &allowed_fee_instrument_;
}

// -------------------------------------------------------------------

// RestrictedKey

// .zera_txn.PublicKey public_key = 1;
inline bool RestrictedKey::_internal_has_public_key() const {
  return this != internal_default_instance() && public_key_ != nullptr;
}
inline bool RestrictedKey::has_public_key() const {
  return _internal_has_public_key();
}
inline void RestrictedKey::clear_public_key() {
  if (GetArena() == nullptr && public_key_ != nullptr) {
    delete public_key_;
  }
  public_key_ = nullptr;
}
inline const ::zera_txn::PublicKey& RestrictedKey::_internal_public_key() const {
  const ::zera_txn::PublicKey* p = public_key_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::PublicKey*>(
      &::zera_txn::_PublicKey_default_instance_);
}
inline const ::zera_txn::PublicKey& RestrictedKey::public_key() const {
  // @@protoc_insertion_point(field_get:zera_txn.RestrictedKey.public_key)
  return _internal_public_key();
}
inline void RestrictedKey::unsafe_arena_set_allocated_public_key(
    ::zera_txn::PublicKey* public_key) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_key_);
  }
  public_key_ = public_key;
  if (public_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.RestrictedKey.public_key)
}
inline ::zera_txn::PublicKey* RestrictedKey::release_public_key() {
  auto temp = unsafe_arena_release_public_key();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::PublicKey* RestrictedKey::unsafe_arena_release_public_key() {
  // @@protoc_insertion_point(field_release:zera_txn.RestrictedKey.public_key)
  
  ::zera_txn::PublicKey* temp = public_key_;
  public_key_ = nullptr;
  return temp;
}
inline ::zera_txn::PublicKey* RestrictedKey::_internal_mutable_public_key() {
  
  if (public_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::PublicKey>(GetArena());
    public_key_ = p;
  }
  return public_key_;
}
inline ::zera_txn::PublicKey* RestrictedKey::mutable_public_key() {
  // @@protoc_insertion_point(field_mutable:zera_txn.RestrictedKey.public_key)
  return _internal_mutable_public_key();
}
inline void RestrictedKey::set_allocated_public_key(::zera_txn::PublicKey* public_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete public_key_;
  }
  if (public_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(public_key);
    if (message_arena != submessage_arena) {
      public_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, public_key, submessage_arena);
    }
    
  } else {
    
  }
  public_key_ = public_key;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.RestrictedKey.public_key)
}

// int64 time_delay = 2;
inline void RestrictedKey::clear_time_delay() {
  time_delay_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RestrictedKey::_internal_time_delay() const {
  return time_delay_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RestrictedKey::time_delay() const {
  // @@protoc_insertion_point(field_get:zera_txn.RestrictedKey.time_delay)
  return _internal_time_delay();
}
inline void RestrictedKey::_internal_set_time_delay(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_delay_ = value;
}
inline void RestrictedKey::set_time_delay(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_delay(value);
  // @@protoc_insertion_point(field_set:zera_txn.RestrictedKey.time_delay)
}

// bool global = 3;
inline void RestrictedKey::clear_global() {
  global_ = false;
}
inline bool RestrictedKey::_internal_global() const {
  return global_;
}
inline bool RestrictedKey::global() const {
  // @@protoc_insertion_point(field_get:zera_txn.RestrictedKey.global)
  return _internal_global();
}
inline void RestrictedKey::_internal_set_global(bool value) {
  
  global_ = value;
}
inline void RestrictedKey::set_global(bool value) {
  _internal_set_global(value);
  // @@protoc_insertion_point(field_set:zera_txn.RestrictedKey.global)
}

// bool update_contract = 4;
inline void RestrictedKey::clear_update_contract() {
  update_contract_ = false;
}
inline bool RestrictedKey::_internal_update_contract() const {
  return update_contract_;
}
inline bool RestrictedKey::update_contract() const {
  // @@protoc_insertion_point(field_get:zera_txn.RestrictedKey.update_contract)
  return _internal_update_contract();
}
inline void RestrictedKey::_internal_set_update_contract(bool value) {
  
  update_contract_ = value;
}
inline void RestrictedKey::set_update_contract(bool value) {
  _internal_set_update_contract(value);
  // @@protoc_insertion_point(field_set:zera_txn.RestrictedKey.update_contract)
}

// bool transfer = 5;
inline void RestrictedKey::clear_transfer() {
  transfer_ = false;
}
inline bool RestrictedKey::_internal_transfer() const {
  return transfer_;
}
inline bool RestrictedKey::transfer() const {
  // @@protoc_insertion_point(field_get:zera_txn.RestrictedKey.transfer)
  return _internal_transfer();
}
inline void RestrictedKey::_internal_set_transfer(bool value) {
  
  transfer_ = value;
}
inline void RestrictedKey::set_transfer(bool value) {
  _internal_set_transfer(value);
  // @@protoc_insertion_point(field_set:zera_txn.RestrictedKey.transfer)
}

// bool quash = 6;
inline void RestrictedKey::clear_quash() {
  quash_ = false;
}
inline bool RestrictedKey::_internal_quash() const {
  return quash_;
}
inline bool RestrictedKey::quash() const {
  // @@protoc_insertion_point(field_get:zera_txn.RestrictedKey.quash)
  return _internal_quash();
}
inline void RestrictedKey::_internal_set_quash(bool value) {
  
  quash_ = value;
}
inline void RestrictedKey::set_quash(bool value) {
  _internal_set_quash(value);
  // @@protoc_insertion_point(field_set:zera_txn.RestrictedKey.quash)
}

// bool mint = 7;
inline void RestrictedKey::clear_mint() {
  mint_ = false;
}
inline bool RestrictedKey::_internal_mint() const {
  return mint_;
}
inline bool RestrictedKey::mint() const {
  // @@protoc_insertion_point(field_get:zera_txn.RestrictedKey.mint)
  return _internal_mint();
}
inline void RestrictedKey::_internal_set_mint(bool value) {
  
  mint_ = value;
}
inline void RestrictedKey::set_mint(bool value) {
  _internal_set_mint(value);
  // @@protoc_insertion_point(field_set:zera_txn.RestrictedKey.mint)
}

// bool vote = 8;
inline void RestrictedKey::clear_vote() {
  vote_ = false;
}
inline bool RestrictedKey::_internal_vote() const {
  return vote_;
}
inline bool RestrictedKey::vote() const {
  // @@protoc_insertion_point(field_get:zera_txn.RestrictedKey.vote)
  return _internal_vote();
}
inline void RestrictedKey::_internal_set_vote(bool value) {
  
  vote_ = value;
}
inline void RestrictedKey::set_vote(bool value) {
  _internal_set_vote(value);
  // @@protoc_insertion_point(field_set:zera_txn.RestrictedKey.vote)
}

// bool propose = 9;
inline void RestrictedKey::clear_propose() {
  propose_ = false;
}
inline bool RestrictedKey::_internal_propose() const {
  return propose_;
}
inline bool RestrictedKey::propose() const {
  // @@protoc_insertion_point(field_get:zera_txn.RestrictedKey.propose)
  return _internal_propose();
}
inline void RestrictedKey::_internal_set_propose(bool value) {
  
  propose_ = value;
}
inline void RestrictedKey::set_propose(bool value) {
  _internal_set_propose(value);
  // @@protoc_insertion_point(field_set:zera_txn.RestrictedKey.propose)
}

// bool compliance = 10;
inline void RestrictedKey::clear_compliance() {
  compliance_ = false;
}
inline bool RestrictedKey::_internal_compliance() const {
  return compliance_;
}
inline bool RestrictedKey::compliance() const {
  // @@protoc_insertion_point(field_get:zera_txn.RestrictedKey.compliance)
  return _internal_compliance();
}
inline void RestrictedKey::_internal_set_compliance(bool value) {
  
  compliance_ = value;
}
inline void RestrictedKey::set_compliance(bool value) {
  _internal_set_compliance(value);
  // @@protoc_insertion_point(field_set:zera_txn.RestrictedKey.compliance)
}

// bool expense_ratio = 11;
inline void RestrictedKey::clear_expense_ratio() {
  expense_ratio_ = false;
}
inline bool RestrictedKey::_internal_expense_ratio() const {
  return expense_ratio_;
}
inline bool RestrictedKey::expense_ratio() const {
  // @@protoc_insertion_point(field_get:zera_txn.RestrictedKey.expense_ratio)
  return _internal_expense_ratio();
}
inline void RestrictedKey::_internal_set_expense_ratio(bool value) {
  
  expense_ratio_ = value;
}
inline void RestrictedKey::set_expense_ratio(bool value) {
  _internal_set_expense_ratio(value);
  // @@protoc_insertion_point(field_set:zera_txn.RestrictedKey.expense_ratio)
}

// bool cur_equiv = 12;
inline void RestrictedKey::clear_cur_equiv() {
  cur_equiv_ = false;
}
inline bool RestrictedKey::_internal_cur_equiv() const {
  return cur_equiv_;
}
inline bool RestrictedKey::cur_equiv() const {
  // @@protoc_insertion_point(field_get:zera_txn.RestrictedKey.cur_equiv)
  return _internal_cur_equiv();
}
inline void RestrictedKey::_internal_set_cur_equiv(bool value) {
  
  cur_equiv_ = value;
}
inline void RestrictedKey::set_cur_equiv(bool value) {
  _internal_set_cur_equiv(value);
  // @@protoc_insertion_point(field_set:zera_txn.RestrictedKey.cur_equiv)
}

// bool revoke = 13;
inline void RestrictedKey::clear_revoke() {
  revoke_ = false;
}
inline bool RestrictedKey::_internal_revoke() const {
  return revoke_;
}
inline bool RestrictedKey::revoke() const {
  // @@protoc_insertion_point(field_get:zera_txn.RestrictedKey.revoke)
  return _internal_revoke();
}
inline void RestrictedKey::_internal_set_revoke(bool value) {
  
  revoke_ = value;
}
inline void RestrictedKey::set_revoke(bool value) {
  _internal_set_revoke(value);
  // @@protoc_insertion_point(field_set:zera_txn.RestrictedKey.revoke)
}

// uint32 key_weight = 14;
inline void RestrictedKey::clear_key_weight() {
  key_weight_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RestrictedKey::_internal_key_weight() const {
  return key_weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RestrictedKey::key_weight() const {
  // @@protoc_insertion_point(field_get:zera_txn.RestrictedKey.key_weight)
  return _internal_key_weight();
}
inline void RestrictedKey::_internal_set_key_weight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  key_weight_ = value;
}
inline void RestrictedKey::set_key_weight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_key_weight(value);
  // @@protoc_insertion_point(field_set:zera_txn.RestrictedKey.key_weight)
}

// -------------------------------------------------------------------

// ExpenseRatioTXN

// .zera_txn.BaseTXN base = 1;
inline bool ExpenseRatioTXN::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool ExpenseRatioTXN::has_base() const {
  return _internal_has_base();
}
inline void ExpenseRatioTXN::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::zera_txn::BaseTXN& ExpenseRatioTXN::_internal_base() const {
  const ::zera_txn::BaseTXN* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::BaseTXN*>(
      &::zera_txn::_BaseTXN_default_instance_);
}
inline const ::zera_txn::BaseTXN& ExpenseRatioTXN::base() const {
  // @@protoc_insertion_point(field_get:zera_txn.ExpenseRatioTXN.base)
  return _internal_base();
}
inline void ExpenseRatioTXN::unsafe_arena_set_allocated_base(
    ::zera_txn::BaseTXN* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ExpenseRatioTXN.base)
}
inline ::zera_txn::BaseTXN* ExpenseRatioTXN::release_base() {
  auto temp = unsafe_arena_release_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::BaseTXN* ExpenseRatioTXN::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:zera_txn.ExpenseRatioTXN.base)
  
  ::zera_txn::BaseTXN* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::zera_txn::BaseTXN* ExpenseRatioTXN::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::BaseTXN>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::zera_txn::BaseTXN* ExpenseRatioTXN::mutable_base() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ExpenseRatioTXN.base)
  return _internal_mutable_base();
}
inline void ExpenseRatioTXN::set_allocated_base(::zera_txn::BaseTXN* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ExpenseRatioTXN.base)
}

// string contract_id = 2;
inline void ExpenseRatioTXN::clear_contract_id() {
  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExpenseRatioTXN::contract_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.ExpenseRatioTXN.contract_id)
  return _internal_contract_id();
}
inline void ExpenseRatioTXN::set_contract_id(const std::string& value) {
  _internal_set_contract_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.ExpenseRatioTXN.contract_id)
}
inline std::string* ExpenseRatioTXN::mutable_contract_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ExpenseRatioTXN.contract_id)
  return _internal_mutable_contract_id();
}
inline const std::string& ExpenseRatioTXN::_internal_contract_id() const {
  return contract_id_.Get();
}
inline void ExpenseRatioTXN::_internal_set_contract_id(const std::string& value) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExpenseRatioTXN::set_contract_id(std::string&& value) {
  
  contract_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.ExpenseRatioTXN.contract_id)
}
inline void ExpenseRatioTXN::set_contract_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.ExpenseRatioTXN.contract_id)
}
inline void ExpenseRatioTXN::set_contract_id(const char* value,
    size_t size) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.ExpenseRatioTXN.contract_id)
}
inline std::string* ExpenseRatioTXN::_internal_mutable_contract_id() {
  
  return contract_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExpenseRatioTXN::release_contract_id() {
  // @@protoc_insertion_point(field_release:zera_txn.ExpenseRatioTXN.contract_id)
  return contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExpenseRatioTXN::set_allocated_contract_id(std::string* contract_id) {
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ExpenseRatioTXN.contract_id)
}
inline std::string* ExpenseRatioTXN::unsafe_arena_release_contract_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.ExpenseRatioTXN.contract_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contract_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExpenseRatioTXN::unsafe_arena_set_allocated_contract_id(
    std::string* contract_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contract_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ExpenseRatioTXN.contract_id)
}

// repeated bytes addresses = 3;
inline int ExpenseRatioTXN::_internal_addresses_size() const {
  return addresses_.size();
}
inline int ExpenseRatioTXN::addresses_size() const {
  return _internal_addresses_size();
}
inline void ExpenseRatioTXN::clear_addresses() {
  addresses_.Clear();
}
inline std::string* ExpenseRatioTXN::add_addresses() {
  // @@protoc_insertion_point(field_add_mutable:zera_txn.ExpenseRatioTXN.addresses)
  return _internal_add_addresses();
}
inline const std::string& ExpenseRatioTXN::_internal_addresses(int index) const {
  return addresses_.Get(index);
}
inline const std::string& ExpenseRatioTXN::addresses(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.ExpenseRatioTXN.addresses)
  return _internal_addresses(index);
}
inline std::string* ExpenseRatioTXN::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.ExpenseRatioTXN.addresses)
  return addresses_.Mutable(index);
}
inline void ExpenseRatioTXN::set_addresses(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:zera_txn.ExpenseRatioTXN.addresses)
  addresses_.Mutable(index)->assign(value);
}
inline void ExpenseRatioTXN::set_addresses(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:zera_txn.ExpenseRatioTXN.addresses)
  addresses_.Mutable(index)->assign(std::move(value));
}
inline void ExpenseRatioTXN::set_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zera_txn.ExpenseRatioTXN.addresses)
}
inline void ExpenseRatioTXN::set_addresses(int index, const void* value, size_t size) {
  addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zera_txn.ExpenseRatioTXN.addresses)
}
inline std::string* ExpenseRatioTXN::_internal_add_addresses() {
  return addresses_.Add();
}
inline void ExpenseRatioTXN::add_addresses(const std::string& value) {
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zera_txn.ExpenseRatioTXN.addresses)
}
inline void ExpenseRatioTXN::add_addresses(std::string&& value) {
  addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zera_txn.ExpenseRatioTXN.addresses)
}
inline void ExpenseRatioTXN::add_addresses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zera_txn.ExpenseRatioTXN.addresses)
}
inline void ExpenseRatioTXN::add_addresses(const void* value, size_t size) {
  addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zera_txn.ExpenseRatioTXN.addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ExpenseRatioTXN::addresses() const {
  // @@protoc_insertion_point(field_list:zera_txn.ExpenseRatioTXN.addresses)
  return addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ExpenseRatioTXN::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.ExpenseRatioTXN.addresses)
  return &addresses_;
}

// -------------------------------------------------------------------

// PreMintWallet

// bytes address = 1;
inline void PreMintWallet::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PreMintWallet::address() const {
  // @@protoc_insertion_point(field_get:zera_txn.PreMintWallet.address)
  return _internal_address();
}
inline void PreMintWallet::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:zera_txn.PreMintWallet.address)
}
inline std::string* PreMintWallet::mutable_address() {
  // @@protoc_insertion_point(field_mutable:zera_txn.PreMintWallet.address)
  return _internal_mutable_address();
}
inline const std::string& PreMintWallet::_internal_address() const {
  return address_.Get();
}
inline void PreMintWallet::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PreMintWallet::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.PreMintWallet.address)
}
inline void PreMintWallet::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.PreMintWallet.address)
}
inline void PreMintWallet::set_address(const void* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.PreMintWallet.address)
}
inline std::string* PreMintWallet::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PreMintWallet::release_address() {
  // @@protoc_insertion_point(field_release:zera_txn.PreMintWallet.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PreMintWallet::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.PreMintWallet.address)
}
inline std::string* PreMintWallet::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.PreMintWallet.address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PreMintWallet::unsafe_arena_set_allocated_address(
    std::string* address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (address != nullptr) {
    
  } else {
    
  }
  address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.PreMintWallet.address)
}

// string amount = 2;
inline void PreMintWallet::clear_amount() {
  amount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PreMintWallet::amount() const {
  // @@protoc_insertion_point(field_get:zera_txn.PreMintWallet.amount)
  return _internal_amount();
}
inline void PreMintWallet::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:zera_txn.PreMintWallet.amount)
}
inline std::string* PreMintWallet::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:zera_txn.PreMintWallet.amount)
  return _internal_mutable_amount();
}
inline const std::string& PreMintWallet::_internal_amount() const {
  return amount_.Get();
}
inline void PreMintWallet::_internal_set_amount(const std::string& value) {
  
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PreMintWallet::set_amount(std::string&& value) {
  
  amount_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.PreMintWallet.amount)
}
inline void PreMintWallet::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.PreMintWallet.amount)
}
inline void PreMintWallet::set_amount(const char* value,
    size_t size) {
  
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.PreMintWallet.amount)
}
inline std::string* PreMintWallet::_internal_mutable_amount() {
  
  return amount_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PreMintWallet::release_amount() {
  // @@protoc_insertion_point(field_release:zera_txn.PreMintWallet.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PreMintWallet::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.PreMintWallet.amount)
}
inline std::string* PreMintWallet::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.PreMintWallet.amount)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return amount_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PreMintWallet::unsafe_arena_set_allocated_amount(
    std::string* amount) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      amount, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.PreMintWallet.amount)
}

// -------------------------------------------------------------------

// Transfer

// bytes recipient_address = 1;
inline void Transfer::clear_recipient_address() {
  recipient_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Transfer::recipient_address() const {
  // @@protoc_insertion_point(field_get:zera_txn.Transfer.recipient_address)
  return _internal_recipient_address();
}
inline void Transfer::set_recipient_address(const std::string& value) {
  _internal_set_recipient_address(value);
  // @@protoc_insertion_point(field_set:zera_txn.Transfer.recipient_address)
}
inline std::string* Transfer::mutable_recipient_address() {
  // @@protoc_insertion_point(field_mutable:zera_txn.Transfer.recipient_address)
  return _internal_mutable_recipient_address();
}
inline const std::string& Transfer::_internal_recipient_address() const {
  return recipient_address_.Get();
}
inline void Transfer::_internal_set_recipient_address(const std::string& value) {
  
  recipient_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transfer::set_recipient_address(std::string&& value) {
  
  recipient_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.Transfer.recipient_address)
}
inline void Transfer::set_recipient_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recipient_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.Transfer.recipient_address)
}
inline void Transfer::set_recipient_address(const void* value,
    size_t size) {
  
  recipient_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.Transfer.recipient_address)
}
inline std::string* Transfer::_internal_mutable_recipient_address() {
  
  return recipient_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transfer::release_recipient_address() {
  // @@protoc_insertion_point(field_release:zera_txn.Transfer.recipient_address)
  return recipient_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transfer::set_allocated_recipient_address(std::string* recipient_address) {
  if (recipient_address != nullptr) {
    
  } else {
    
  }
  recipient_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recipient_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.Transfer.recipient_address)
}
inline std::string* Transfer::unsafe_arena_release_recipient_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.Transfer.recipient_address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return recipient_address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Transfer::unsafe_arena_set_allocated_recipient_address(
    std::string* recipient_address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (recipient_address != nullptr) {
    
  } else {
    
  }
  recipient_address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      recipient_address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.Transfer.recipient_address)
}

// string amount = 2;
inline void Transfer::clear_amount() {
  amount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Transfer::amount() const {
  // @@protoc_insertion_point(field_get:zera_txn.Transfer.amount)
  return _internal_amount();
}
inline void Transfer::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:zera_txn.Transfer.amount)
}
inline std::string* Transfer::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:zera_txn.Transfer.amount)
  return _internal_mutable_amount();
}
inline const std::string& Transfer::_internal_amount() const {
  return amount_.Get();
}
inline void Transfer::_internal_set_amount(const std::string& value) {
  
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transfer::set_amount(std::string&& value) {
  
  amount_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.Transfer.amount)
}
inline void Transfer::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.Transfer.amount)
}
inline void Transfer::set_amount(const char* value,
    size_t size) {
  
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.Transfer.amount)
}
inline std::string* Transfer::_internal_mutable_amount() {
  
  return amount_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transfer::release_amount() {
  // @@protoc_insertion_point(field_release:zera_txn.Transfer.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transfer::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.Transfer.amount)
}
inline std::string* Transfer::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.Transfer.amount)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return amount_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Transfer::unsafe_arena_set_allocated_amount(
    std::string* amount) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      amount, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.Transfer.amount)
}

// string contract_id = 3;
inline void Transfer::clear_contract_id() {
  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Transfer::contract_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.Transfer.contract_id)
  return _internal_contract_id();
}
inline void Transfer::set_contract_id(const std::string& value) {
  _internal_set_contract_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.Transfer.contract_id)
}
inline std::string* Transfer::mutable_contract_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.Transfer.contract_id)
  return _internal_mutable_contract_id();
}
inline const std::string& Transfer::_internal_contract_id() const {
  return contract_id_.Get();
}
inline void Transfer::_internal_set_contract_id(const std::string& value) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transfer::set_contract_id(std::string&& value) {
  
  contract_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.Transfer.contract_id)
}
inline void Transfer::set_contract_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.Transfer.contract_id)
}
inline void Transfer::set_contract_id(const char* value,
    size_t size) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.Transfer.contract_id)
}
inline std::string* Transfer::_internal_mutable_contract_id() {
  
  return contract_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transfer::release_contract_id() {
  // @@protoc_insertion_point(field_release:zera_txn.Transfer.contract_id)
  return contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transfer::set_allocated_contract_id(std::string* contract_id) {
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.Transfer.contract_id)
}
inline std::string* Transfer::unsafe_arena_release_contract_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.Transfer.contract_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contract_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Transfer::unsafe_arena_set_allocated_contract_id(
    std::string* contract_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contract_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.Transfer.contract_id)
}

// string contract_fee_amount = 4;
inline bool Transfer::_internal_has_contract_fee_amount() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Transfer::has_contract_fee_amount() const {
  return _internal_has_contract_fee_amount();
}
inline void Transfer::clear_contract_fee_amount() {
  contract_fee_amount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Transfer::contract_fee_amount() const {
  // @@protoc_insertion_point(field_get:zera_txn.Transfer.contract_fee_amount)
  return _internal_contract_fee_amount();
}
inline void Transfer::set_contract_fee_amount(const std::string& value) {
  _internal_set_contract_fee_amount(value);
  // @@protoc_insertion_point(field_set:zera_txn.Transfer.contract_fee_amount)
}
inline std::string* Transfer::mutable_contract_fee_amount() {
  // @@protoc_insertion_point(field_mutable:zera_txn.Transfer.contract_fee_amount)
  return _internal_mutable_contract_fee_amount();
}
inline const std::string& Transfer::_internal_contract_fee_amount() const {
  return contract_fee_amount_.Get();
}
inline void Transfer::_internal_set_contract_fee_amount(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  contract_fee_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transfer::set_contract_fee_amount(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  contract_fee_amount_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.Transfer.contract_fee_amount)
}
inline void Transfer::set_contract_fee_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  contract_fee_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.Transfer.contract_fee_amount)
}
inline void Transfer::set_contract_fee_amount(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  contract_fee_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.Transfer.contract_fee_amount)
}
inline std::string* Transfer::_internal_mutable_contract_fee_amount() {
  _has_bits_[0] |= 0x00000001u;
  return contract_fee_amount_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transfer::release_contract_fee_amount() {
  // @@protoc_insertion_point(field_release:zera_txn.Transfer.contract_fee_amount)
  if (!_internal_has_contract_fee_amount()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return contract_fee_amount_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transfer::set_allocated_contract_fee_amount(std::string* contract_fee_amount) {
  if (contract_fee_amount != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  contract_fee_amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_fee_amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.Transfer.contract_fee_amount)
}
inline std::string* Transfer::unsafe_arena_release_contract_fee_amount() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.Transfer.contract_fee_amount)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return contract_fee_amount_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Transfer::unsafe_arena_set_allocated_contract_fee_amount(
    std::string* contract_fee_amount) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contract_fee_amount != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  contract_fee_amount_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contract_fee_amount, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.Transfer.contract_fee_amount)
}

// string contract_fee_id = 5;
inline bool Transfer::_internal_has_contract_fee_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Transfer::has_contract_fee_id() const {
  return _internal_has_contract_fee_id();
}
inline void Transfer::clear_contract_fee_id() {
  contract_fee_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Transfer::contract_fee_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.Transfer.contract_fee_id)
  return _internal_contract_fee_id();
}
inline void Transfer::set_contract_fee_id(const std::string& value) {
  _internal_set_contract_fee_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.Transfer.contract_fee_id)
}
inline std::string* Transfer::mutable_contract_fee_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.Transfer.contract_fee_id)
  return _internal_mutable_contract_fee_id();
}
inline const std::string& Transfer::_internal_contract_fee_id() const {
  return contract_fee_id_.Get();
}
inline void Transfer::_internal_set_contract_fee_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  contract_fee_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transfer::set_contract_fee_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  contract_fee_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.Transfer.contract_fee_id)
}
inline void Transfer::set_contract_fee_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  contract_fee_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.Transfer.contract_fee_id)
}
inline void Transfer::set_contract_fee_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  contract_fee_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.Transfer.contract_fee_id)
}
inline std::string* Transfer::_internal_mutable_contract_fee_id() {
  _has_bits_[0] |= 0x00000002u;
  return contract_fee_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transfer::release_contract_fee_id() {
  // @@protoc_insertion_point(field_release:zera_txn.Transfer.contract_fee_id)
  if (!_internal_has_contract_fee_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return contract_fee_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transfer::set_allocated_contract_fee_id(std::string* contract_fee_id) {
  if (contract_fee_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  contract_fee_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_fee_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.Transfer.contract_fee_id)
}
inline std::string* Transfer::unsafe_arena_release_contract_fee_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.Transfer.contract_fee_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return contract_fee_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Transfer::unsafe_arena_set_allocated_contract_fee_id(
    std::string* contract_fee_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contract_fee_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  contract_fee_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contract_fee_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.Transfer.contract_fee_id)
}

// string base_fee_amount = 6;
inline void Transfer::clear_base_fee_amount() {
  base_fee_amount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Transfer::base_fee_amount() const {
  // @@protoc_insertion_point(field_get:zera_txn.Transfer.base_fee_amount)
  return _internal_base_fee_amount();
}
inline void Transfer::set_base_fee_amount(const std::string& value) {
  _internal_set_base_fee_amount(value);
  // @@protoc_insertion_point(field_set:zera_txn.Transfer.base_fee_amount)
}
inline std::string* Transfer::mutable_base_fee_amount() {
  // @@protoc_insertion_point(field_mutable:zera_txn.Transfer.base_fee_amount)
  return _internal_mutable_base_fee_amount();
}
inline const std::string& Transfer::_internal_base_fee_amount() const {
  return base_fee_amount_.Get();
}
inline void Transfer::_internal_set_base_fee_amount(const std::string& value) {
  
  base_fee_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transfer::set_base_fee_amount(std::string&& value) {
  
  base_fee_amount_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.Transfer.base_fee_amount)
}
inline void Transfer::set_base_fee_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  base_fee_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.Transfer.base_fee_amount)
}
inline void Transfer::set_base_fee_amount(const char* value,
    size_t size) {
  
  base_fee_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.Transfer.base_fee_amount)
}
inline std::string* Transfer::_internal_mutable_base_fee_amount() {
  
  return base_fee_amount_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transfer::release_base_fee_amount() {
  // @@protoc_insertion_point(field_release:zera_txn.Transfer.base_fee_amount)
  return base_fee_amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transfer::set_allocated_base_fee_amount(std::string* base_fee_amount) {
  if (base_fee_amount != nullptr) {
    
  } else {
    
  }
  base_fee_amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base_fee_amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.Transfer.base_fee_amount)
}
inline std::string* Transfer::unsafe_arena_release_base_fee_amount() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.Transfer.base_fee_amount)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return base_fee_amount_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Transfer::unsafe_arena_set_allocated_base_fee_amount(
    std::string* base_fee_amount) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (base_fee_amount != nullptr) {
    
  } else {
    
  }
  base_fee_amount_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      base_fee_amount, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.Transfer.base_fee_amount)
}

// string base_fee_id = 7;
inline void Transfer::clear_base_fee_id() {
  base_fee_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Transfer::base_fee_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.Transfer.base_fee_id)
  return _internal_base_fee_id();
}
inline void Transfer::set_base_fee_id(const std::string& value) {
  _internal_set_base_fee_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.Transfer.base_fee_id)
}
inline std::string* Transfer::mutable_base_fee_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.Transfer.base_fee_id)
  return _internal_mutable_base_fee_id();
}
inline const std::string& Transfer::_internal_base_fee_id() const {
  return base_fee_id_.Get();
}
inline void Transfer::_internal_set_base_fee_id(const std::string& value) {
  
  base_fee_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transfer::set_base_fee_id(std::string&& value) {
  
  base_fee_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.Transfer.base_fee_id)
}
inline void Transfer::set_base_fee_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  base_fee_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.Transfer.base_fee_id)
}
inline void Transfer::set_base_fee_id(const char* value,
    size_t size) {
  
  base_fee_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.Transfer.base_fee_id)
}
inline std::string* Transfer::_internal_mutable_base_fee_id() {
  
  return base_fee_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transfer::release_base_fee_id() {
  // @@protoc_insertion_point(field_release:zera_txn.Transfer.base_fee_id)
  return base_fee_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transfer::set_allocated_base_fee_id(std::string* base_fee_id) {
  if (base_fee_id != nullptr) {
    
  } else {
    
  }
  base_fee_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base_fee_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.Transfer.base_fee_id)
}
inline std::string* Transfer::unsafe_arena_release_base_fee_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.Transfer.base_fee_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return base_fee_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Transfer::unsafe_arena_set_allocated_base_fee_id(
    std::string* base_fee_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (base_fee_id != nullptr) {
    
  } else {
    
  }
  base_fee_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      base_fee_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.Transfer.base_fee_id)
}

// string memo = 8;
inline bool Transfer::_internal_has_memo() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Transfer::has_memo() const {
  return _internal_has_memo();
}
inline void Transfer::clear_memo() {
  memo_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Transfer::memo() const {
  // @@protoc_insertion_point(field_get:zera_txn.Transfer.memo)
  return _internal_memo();
}
inline void Transfer::set_memo(const std::string& value) {
  _internal_set_memo(value);
  // @@protoc_insertion_point(field_set:zera_txn.Transfer.memo)
}
inline std::string* Transfer::mutable_memo() {
  // @@protoc_insertion_point(field_mutable:zera_txn.Transfer.memo)
  return _internal_mutable_memo();
}
inline const std::string& Transfer::_internal_memo() const {
  return memo_.Get();
}
inline void Transfer::_internal_set_memo(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transfer::set_memo(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  memo_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.Transfer.memo)
}
inline void Transfer::set_memo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.Transfer.memo)
}
inline void Transfer::set_memo(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.Transfer.memo)
}
inline std::string* Transfer::_internal_mutable_memo() {
  _has_bits_[0] |= 0x00000004u;
  return memo_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transfer::release_memo() {
  // @@protoc_insertion_point(field_release:zera_txn.Transfer.memo)
  if (!_internal_has_memo()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return memo_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transfer::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  memo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.Transfer.memo)
}
inline std::string* Transfer::unsafe_arena_release_memo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.Transfer.memo)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return memo_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Transfer::unsafe_arena_set_allocated_memo(
    std::string* memo) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (memo != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  memo_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      memo, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.Transfer.memo)
}

// -------------------------------------------------------------------

// BurnSBTTXN

// .zera_txn.BaseTXN base = 1;
inline bool BurnSBTTXN::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool BurnSBTTXN::has_base() const {
  return _internal_has_base();
}
inline void BurnSBTTXN::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::zera_txn::BaseTXN& BurnSBTTXN::_internal_base() const {
  const ::zera_txn::BaseTXN* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::BaseTXN*>(
      &::zera_txn::_BaseTXN_default_instance_);
}
inline const ::zera_txn::BaseTXN& BurnSBTTXN::base() const {
  // @@protoc_insertion_point(field_get:zera_txn.BurnSBTTXN.base)
  return _internal_base();
}
inline void BurnSBTTXN::unsafe_arena_set_allocated_base(
    ::zera_txn::BaseTXN* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.BurnSBTTXN.base)
}
inline ::zera_txn::BaseTXN* BurnSBTTXN::release_base() {
  auto temp = unsafe_arena_release_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::BaseTXN* BurnSBTTXN::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:zera_txn.BurnSBTTXN.base)
  
  ::zera_txn::BaseTXN* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::zera_txn::BaseTXN* BurnSBTTXN::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::BaseTXN>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::zera_txn::BaseTXN* BurnSBTTXN::mutable_base() {
  // @@protoc_insertion_point(field_mutable:zera_txn.BurnSBTTXN.base)
  return _internal_mutable_base();
}
inline void BurnSBTTXN::set_allocated_base(::zera_txn::BaseTXN* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.BurnSBTTXN.base)
}

// string contract_id = 2;
inline void BurnSBTTXN::clear_contract_id() {
  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BurnSBTTXN::contract_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.BurnSBTTXN.contract_id)
  return _internal_contract_id();
}
inline void BurnSBTTXN::set_contract_id(const std::string& value) {
  _internal_set_contract_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.BurnSBTTXN.contract_id)
}
inline std::string* BurnSBTTXN::mutable_contract_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.BurnSBTTXN.contract_id)
  return _internal_mutable_contract_id();
}
inline const std::string& BurnSBTTXN::_internal_contract_id() const {
  return contract_id_.Get();
}
inline void BurnSBTTXN::_internal_set_contract_id(const std::string& value) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BurnSBTTXN::set_contract_id(std::string&& value) {
  
  contract_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.BurnSBTTXN.contract_id)
}
inline void BurnSBTTXN::set_contract_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.BurnSBTTXN.contract_id)
}
inline void BurnSBTTXN::set_contract_id(const char* value,
    size_t size) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.BurnSBTTXN.contract_id)
}
inline std::string* BurnSBTTXN::_internal_mutable_contract_id() {
  
  return contract_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BurnSBTTXN::release_contract_id() {
  // @@protoc_insertion_point(field_release:zera_txn.BurnSBTTXN.contract_id)
  return contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BurnSBTTXN::set_allocated_contract_id(std::string* contract_id) {
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.BurnSBTTXN.contract_id)
}
inline std::string* BurnSBTTXN::unsafe_arena_release_contract_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.BurnSBTTXN.contract_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contract_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BurnSBTTXN::unsafe_arena_set_allocated_contract_id(
    std::string* contract_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contract_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.BurnSBTTXN.contract_id)
}

// string item_id = 3;
inline void BurnSBTTXN::clear_item_id() {
  item_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BurnSBTTXN::item_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.BurnSBTTXN.item_id)
  return _internal_item_id();
}
inline void BurnSBTTXN::set_item_id(const std::string& value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.BurnSBTTXN.item_id)
}
inline std::string* BurnSBTTXN::mutable_item_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.BurnSBTTXN.item_id)
  return _internal_mutable_item_id();
}
inline const std::string& BurnSBTTXN::_internal_item_id() const {
  return item_id_.Get();
}
inline void BurnSBTTXN::_internal_set_item_id(const std::string& value) {
  
  item_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BurnSBTTXN::set_item_id(std::string&& value) {
  
  item_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.BurnSBTTXN.item_id)
}
inline void BurnSBTTXN::set_item_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  item_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.BurnSBTTXN.item_id)
}
inline void BurnSBTTXN::set_item_id(const char* value,
    size_t size) {
  
  item_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.BurnSBTTXN.item_id)
}
inline std::string* BurnSBTTXN::_internal_mutable_item_id() {
  
  return item_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BurnSBTTXN::release_item_id() {
  // @@protoc_insertion_point(field_release:zera_txn.BurnSBTTXN.item_id)
  return item_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BurnSBTTXN::set_allocated_item_id(std::string* item_id) {
  if (item_id != nullptr) {
    
  } else {
    
  }
  item_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), item_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.BurnSBTTXN.item_id)
}
inline std::string* BurnSBTTXN::unsafe_arena_release_item_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.BurnSBTTXN.item_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return item_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BurnSBTTXN::unsafe_arena_set_allocated_item_id(
    std::string* item_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (item_id != nullptr) {
    
  } else {
    
  }
  item_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      item_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.BurnSBTTXN.item_id)
}

// -------------------------------------------------------------------

// BaseTXN

// .zera_txn.PublicKey public_key = 1;
inline bool BaseTXN::_internal_has_public_key() const {
  return this != internal_default_instance() && public_key_ != nullptr;
}
inline bool BaseTXN::has_public_key() const {
  return _internal_has_public_key();
}
inline void BaseTXN::clear_public_key() {
  if (GetArena() == nullptr && public_key_ != nullptr) {
    delete public_key_;
  }
  public_key_ = nullptr;
}
inline const ::zera_txn::PublicKey& BaseTXN::_internal_public_key() const {
  const ::zera_txn::PublicKey* p = public_key_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::PublicKey*>(
      &::zera_txn::_PublicKey_default_instance_);
}
inline const ::zera_txn::PublicKey& BaseTXN::public_key() const {
  // @@protoc_insertion_point(field_get:zera_txn.BaseTXN.public_key)
  return _internal_public_key();
}
inline void BaseTXN::unsafe_arena_set_allocated_public_key(
    ::zera_txn::PublicKey* public_key) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_key_);
  }
  public_key_ = public_key;
  if (public_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.BaseTXN.public_key)
}
inline ::zera_txn::PublicKey* BaseTXN::release_public_key() {
  auto temp = unsafe_arena_release_public_key();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::PublicKey* BaseTXN::unsafe_arena_release_public_key() {
  // @@protoc_insertion_point(field_release:zera_txn.BaseTXN.public_key)
  
  ::zera_txn::PublicKey* temp = public_key_;
  public_key_ = nullptr;
  return temp;
}
inline ::zera_txn::PublicKey* BaseTXN::_internal_mutable_public_key() {
  
  if (public_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::PublicKey>(GetArena());
    public_key_ = p;
  }
  return public_key_;
}
inline ::zera_txn::PublicKey* BaseTXN::mutable_public_key() {
  // @@protoc_insertion_point(field_mutable:zera_txn.BaseTXN.public_key)
  return _internal_mutable_public_key();
}
inline void BaseTXN::set_allocated_public_key(::zera_txn::PublicKey* public_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete public_key_;
  }
  if (public_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(public_key);
    if (message_arena != submessage_arena) {
      public_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, public_key, submessage_arena);
    }
    
  } else {
    
  }
  public_key_ = public_key;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.BaseTXN.public_key)
}

// .google.protobuf.Timestamp timestamp = 3;
inline bool BaseTXN::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool BaseTXN::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BaseTXN::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BaseTXN::timestamp() const {
  // @@protoc_insertion_point(field_get:zera_txn.BaseTXN.timestamp)
  return _internal_timestamp();
}
inline void BaseTXN::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.BaseTXN.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BaseTXN::release_timestamp() {
  auto temp = unsafe_arena_release_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BaseTXN::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:zera_txn.BaseTXN.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BaseTXN::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BaseTXN::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:zera_txn.BaseTXN.timestamp)
  return _internal_mutable_timestamp();
}
inline void BaseTXN::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.BaseTXN.timestamp)
}

// string fee_amount = 4;
inline void BaseTXN::clear_fee_amount() {
  fee_amount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BaseTXN::fee_amount() const {
  // @@protoc_insertion_point(field_get:zera_txn.BaseTXN.fee_amount)
  return _internal_fee_amount();
}
inline void BaseTXN::set_fee_amount(const std::string& value) {
  _internal_set_fee_amount(value);
  // @@protoc_insertion_point(field_set:zera_txn.BaseTXN.fee_amount)
}
inline std::string* BaseTXN::mutable_fee_amount() {
  // @@protoc_insertion_point(field_mutable:zera_txn.BaseTXN.fee_amount)
  return _internal_mutable_fee_amount();
}
inline const std::string& BaseTXN::_internal_fee_amount() const {
  return fee_amount_.Get();
}
inline void BaseTXN::_internal_set_fee_amount(const std::string& value) {
  
  fee_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BaseTXN::set_fee_amount(std::string&& value) {
  
  fee_amount_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.BaseTXN.fee_amount)
}
inline void BaseTXN::set_fee_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fee_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.BaseTXN.fee_amount)
}
inline void BaseTXN::set_fee_amount(const char* value,
    size_t size) {
  
  fee_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.BaseTXN.fee_amount)
}
inline std::string* BaseTXN::_internal_mutable_fee_amount() {
  
  return fee_amount_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BaseTXN::release_fee_amount() {
  // @@protoc_insertion_point(field_release:zera_txn.BaseTXN.fee_amount)
  return fee_amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BaseTXN::set_allocated_fee_amount(std::string* fee_amount) {
  if (fee_amount != nullptr) {
    
  } else {
    
  }
  fee_amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fee_amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.BaseTXN.fee_amount)
}
inline std::string* BaseTXN::unsafe_arena_release_fee_amount() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.BaseTXN.fee_amount)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return fee_amount_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BaseTXN::unsafe_arena_set_allocated_fee_amount(
    std::string* fee_amount) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fee_amount != nullptr) {
    
  } else {
    
  }
  fee_amount_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fee_amount, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.BaseTXN.fee_amount)
}

// string fee_id = 5;
inline void BaseTXN::clear_fee_id() {
  fee_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BaseTXN::fee_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.BaseTXN.fee_id)
  return _internal_fee_id();
}
inline void BaseTXN::set_fee_id(const std::string& value) {
  _internal_set_fee_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.BaseTXN.fee_id)
}
inline std::string* BaseTXN::mutable_fee_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.BaseTXN.fee_id)
  return _internal_mutable_fee_id();
}
inline const std::string& BaseTXN::_internal_fee_id() const {
  return fee_id_.Get();
}
inline void BaseTXN::_internal_set_fee_id(const std::string& value) {
  
  fee_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BaseTXN::set_fee_id(std::string&& value) {
  
  fee_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.BaseTXN.fee_id)
}
inline void BaseTXN::set_fee_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fee_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.BaseTXN.fee_id)
}
inline void BaseTXN::set_fee_id(const char* value,
    size_t size) {
  
  fee_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.BaseTXN.fee_id)
}
inline std::string* BaseTXN::_internal_mutable_fee_id() {
  
  return fee_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BaseTXN::release_fee_id() {
  // @@protoc_insertion_point(field_release:zera_txn.BaseTXN.fee_id)
  return fee_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BaseTXN::set_allocated_fee_id(std::string* fee_id) {
  if (fee_id != nullptr) {
    
  } else {
    
  }
  fee_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fee_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.BaseTXN.fee_id)
}
inline std::string* BaseTXN::unsafe_arena_release_fee_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.BaseTXN.fee_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return fee_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BaseTXN::unsafe_arena_set_allocated_fee_id(
    std::string* fee_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fee_id != nullptr) {
    
  } else {
    
  }
  fee_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fee_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.BaseTXN.fee_id)
}

// bytes signature = 6;
inline bool BaseTXN::_internal_has_signature() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BaseTXN::has_signature() const {
  return _internal_has_signature();
}
inline void BaseTXN::clear_signature() {
  signature_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BaseTXN::signature() const {
  // @@protoc_insertion_point(field_get:zera_txn.BaseTXN.signature)
  return _internal_signature();
}
inline void BaseTXN::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:zera_txn.BaseTXN.signature)
}
inline std::string* BaseTXN::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:zera_txn.BaseTXN.signature)
  return _internal_mutable_signature();
}
inline const std::string& BaseTXN::_internal_signature() const {
  return signature_.Get();
}
inline void BaseTXN::_internal_set_signature(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BaseTXN::set_signature(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  signature_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.BaseTXN.signature)
}
inline void BaseTXN::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.BaseTXN.signature)
}
inline void BaseTXN::set_signature(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.BaseTXN.signature)
}
inline std::string* BaseTXN::_internal_mutable_signature() {
  _has_bits_[0] |= 0x00000001u;
  return signature_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BaseTXN::release_signature() {
  // @@protoc_insertion_point(field_release:zera_txn.BaseTXN.signature)
  if (!_internal_has_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return signature_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BaseTXN::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.BaseTXN.signature)
}
inline std::string* BaseTXN::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.BaseTXN.signature)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return signature_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BaseTXN::unsafe_arena_set_allocated_signature(
    std::string* signature) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (signature != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  signature_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      signature, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.BaseTXN.signature)
}

// bytes hash = 7;
inline bool BaseTXN::_internal_has_hash() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BaseTXN::has_hash() const {
  return _internal_has_hash();
}
inline void BaseTXN::clear_hash() {
  hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BaseTXN::hash() const {
  // @@protoc_insertion_point(field_get:zera_txn.BaseTXN.hash)
  return _internal_hash();
}
inline void BaseTXN::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:zera_txn.BaseTXN.hash)
}
inline std::string* BaseTXN::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:zera_txn.BaseTXN.hash)
  return _internal_mutable_hash();
}
inline const std::string& BaseTXN::_internal_hash() const {
  return hash_.Get();
}
inline void BaseTXN::_internal_set_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BaseTXN::set_hash(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.BaseTXN.hash)
}
inline void BaseTXN::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.BaseTXN.hash)
}
inline void BaseTXN::set_hash(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.BaseTXN.hash)
}
inline std::string* BaseTXN::_internal_mutable_hash() {
  _has_bits_[0] |= 0x00000002u;
  return hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BaseTXN::release_hash() {
  // @@protoc_insertion_point(field_release:zera_txn.BaseTXN.hash)
  if (!_internal_has_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return hash_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BaseTXN::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.BaseTXN.hash)
}
inline std::string* BaseTXN::unsafe_arena_release_hash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.BaseTXN.hash)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return hash_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BaseTXN::unsafe_arena_set_allocated_hash(
    std::string* hash) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (hash != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  hash_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      hash, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.BaseTXN.hash)
}

// string memo = 8;
inline bool BaseTXN::_internal_has_memo() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BaseTXN::has_memo() const {
  return _internal_has_memo();
}
inline void BaseTXN::clear_memo() {
  memo_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BaseTXN::memo() const {
  // @@protoc_insertion_point(field_get:zera_txn.BaseTXN.memo)
  return _internal_memo();
}
inline void BaseTXN::set_memo(const std::string& value) {
  _internal_set_memo(value);
  // @@protoc_insertion_point(field_set:zera_txn.BaseTXN.memo)
}
inline std::string* BaseTXN::mutable_memo() {
  // @@protoc_insertion_point(field_mutable:zera_txn.BaseTXN.memo)
  return _internal_mutable_memo();
}
inline const std::string& BaseTXN::_internal_memo() const {
  return memo_.Get();
}
inline void BaseTXN::_internal_set_memo(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BaseTXN::set_memo(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  memo_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.BaseTXN.memo)
}
inline void BaseTXN::set_memo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.BaseTXN.memo)
}
inline void BaseTXN::set_memo(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.BaseTXN.memo)
}
inline std::string* BaseTXN::_internal_mutable_memo() {
  _has_bits_[0] |= 0x00000004u;
  return memo_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BaseTXN::release_memo() {
  // @@protoc_insertion_point(field_release:zera_txn.BaseTXN.memo)
  if (!_internal_has_memo()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return memo_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BaseTXN::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  memo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.BaseTXN.memo)
}
inline std::string* BaseTXN::unsafe_arena_release_memo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.BaseTXN.memo)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return memo_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BaseTXN::unsafe_arena_set_allocated_memo(
    std::string* memo) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (memo != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  memo_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      memo, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.BaseTXN.memo)
}

// bool safe_send = 9;
inline bool BaseTXN::_internal_has_safe_send() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BaseTXN::has_safe_send() const {
  return _internal_has_safe_send();
}
inline void BaseTXN::clear_safe_send() {
  safe_send_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool BaseTXN::_internal_safe_send() const {
  return safe_send_;
}
inline bool BaseTXN::safe_send() const {
  // @@protoc_insertion_point(field_get:zera_txn.BaseTXN.safe_send)
  return _internal_safe_send();
}
inline void BaseTXN::_internal_set_safe_send(bool value) {
  _has_bits_[0] |= 0x00000008u;
  safe_send_ = value;
}
inline void BaseTXN::set_safe_send(bool value) {
  _internal_set_safe_send(value);
  // @@protoc_insertion_point(field_set:zera_txn.BaseTXN.safe_send)
}

// uint64 nonce = 10;
inline void BaseTXN::clear_nonce() {
  nonce_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BaseTXN::_internal_nonce() const {
  return nonce_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BaseTXN::nonce() const {
  // @@protoc_insertion_point(field_get:zera_txn.BaseTXN.nonce)
  return _internal_nonce();
}
inline void BaseTXN::_internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  nonce_ = value;
}
inline void BaseTXN::set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:zera_txn.BaseTXN.nonce)
}

// -------------------------------------------------------------------

// PublicKey

// bytes single = 1;
inline void PublicKey::clear_single() {
  single_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PublicKey::single() const {
  // @@protoc_insertion_point(field_get:zera_txn.PublicKey.single)
  return _internal_single();
}
inline void PublicKey::set_single(const std::string& value) {
  _internal_set_single(value);
  // @@protoc_insertion_point(field_set:zera_txn.PublicKey.single)
}
inline std::string* PublicKey::mutable_single() {
  // @@protoc_insertion_point(field_mutable:zera_txn.PublicKey.single)
  return _internal_mutable_single();
}
inline const std::string& PublicKey::_internal_single() const {
  return single_.Get();
}
inline void PublicKey::_internal_set_single(const std::string& value) {
  
  single_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PublicKey::set_single(std::string&& value) {
  
  single_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.PublicKey.single)
}
inline void PublicKey::set_single(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  single_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.PublicKey.single)
}
inline void PublicKey::set_single(const void* value,
    size_t size) {
  
  single_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.PublicKey.single)
}
inline std::string* PublicKey::_internal_mutable_single() {
  
  return single_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PublicKey::release_single() {
  // @@protoc_insertion_point(field_release:zera_txn.PublicKey.single)
  return single_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublicKey::set_allocated_single(std::string* single) {
  if (single != nullptr) {
    
  } else {
    
  }
  single_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), single,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.PublicKey.single)
}
inline std::string* PublicKey::unsafe_arena_release_single() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.PublicKey.single)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return single_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PublicKey::unsafe_arena_set_allocated_single(
    std::string* single) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (single != nullptr) {
    
  } else {
    
  }
  single_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      single, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.PublicKey.single)
}

// .zera_txn.MultiKey multi = 2;
inline bool PublicKey::_internal_has_multi() const {
  return this != internal_default_instance() && multi_ != nullptr;
}
inline bool PublicKey::has_multi() const {
  return _internal_has_multi();
}
inline void PublicKey::clear_multi() {
  if (GetArena() == nullptr && multi_ != nullptr) {
    delete multi_;
  }
  multi_ = nullptr;
}
inline const ::zera_txn::MultiKey& PublicKey::_internal_multi() const {
  const ::zera_txn::MultiKey* p = multi_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::MultiKey*>(
      &::zera_txn::_MultiKey_default_instance_);
}
inline const ::zera_txn::MultiKey& PublicKey::multi() const {
  // @@protoc_insertion_point(field_get:zera_txn.PublicKey.multi)
  return _internal_multi();
}
inline void PublicKey::unsafe_arena_set_allocated_multi(
    ::zera_txn::MultiKey* multi) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(multi_);
  }
  multi_ = multi;
  if (multi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.PublicKey.multi)
}
inline ::zera_txn::MultiKey* PublicKey::release_multi() {
  auto temp = unsafe_arena_release_multi();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::MultiKey* PublicKey::unsafe_arena_release_multi() {
  // @@protoc_insertion_point(field_release:zera_txn.PublicKey.multi)
  
  ::zera_txn::MultiKey* temp = multi_;
  multi_ = nullptr;
  return temp;
}
inline ::zera_txn::MultiKey* PublicKey::_internal_mutable_multi() {
  
  if (multi_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::MultiKey>(GetArena());
    multi_ = p;
  }
  return multi_;
}
inline ::zera_txn::MultiKey* PublicKey::mutable_multi() {
  // @@protoc_insertion_point(field_mutable:zera_txn.PublicKey.multi)
  return _internal_mutable_multi();
}
inline void PublicKey::set_allocated_multi(::zera_txn::MultiKey* multi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete multi_;
  }
  if (multi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(multi);
    if (message_arena != submessage_arena) {
      multi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multi, submessage_arena);
    }
    
  } else {
    
  }
  multi_ = multi;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.PublicKey.multi)
}

// bytes sc_wallet_adr = 3;
inline bool PublicKey::_internal_has_sc_wallet_adr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PublicKey::has_sc_wallet_adr() const {
  return _internal_has_sc_wallet_adr();
}
inline void PublicKey::clear_sc_wallet_adr() {
  sc_wallet_adr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PublicKey::sc_wallet_adr() const {
  // @@protoc_insertion_point(field_get:zera_txn.PublicKey.sc_wallet_adr)
  return _internal_sc_wallet_adr();
}
inline void PublicKey::set_sc_wallet_adr(const std::string& value) {
  _internal_set_sc_wallet_adr(value);
  // @@protoc_insertion_point(field_set:zera_txn.PublicKey.sc_wallet_adr)
}
inline std::string* PublicKey::mutable_sc_wallet_adr() {
  // @@protoc_insertion_point(field_mutable:zera_txn.PublicKey.sc_wallet_adr)
  return _internal_mutable_sc_wallet_adr();
}
inline const std::string& PublicKey::_internal_sc_wallet_adr() const {
  return sc_wallet_adr_.Get();
}
inline void PublicKey::_internal_set_sc_wallet_adr(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sc_wallet_adr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PublicKey::set_sc_wallet_adr(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sc_wallet_adr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.PublicKey.sc_wallet_adr)
}
inline void PublicKey::set_sc_wallet_adr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sc_wallet_adr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.PublicKey.sc_wallet_adr)
}
inline void PublicKey::set_sc_wallet_adr(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sc_wallet_adr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.PublicKey.sc_wallet_adr)
}
inline std::string* PublicKey::_internal_mutable_sc_wallet_adr() {
  _has_bits_[0] |= 0x00000001u;
  return sc_wallet_adr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PublicKey::release_sc_wallet_adr() {
  // @@protoc_insertion_point(field_release:zera_txn.PublicKey.sc_wallet_adr)
  if (!_internal_has_sc_wallet_adr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sc_wallet_adr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublicKey::set_allocated_sc_wallet_adr(std::string* sc_wallet_adr) {
  if (sc_wallet_adr != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sc_wallet_adr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sc_wallet_adr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.PublicKey.sc_wallet_adr)
}
inline std::string* PublicKey::unsafe_arena_release_sc_wallet_adr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.PublicKey.sc_wallet_adr)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return sc_wallet_adr_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PublicKey::unsafe_arena_set_allocated_sc_wallet_adr(
    std::string* sc_wallet_adr) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sc_wallet_adr != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sc_wallet_adr_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sc_wallet_adr, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.PublicKey.sc_wallet_adr)
}

// .zera_txn.GovernanceAuth governance_auth = 4;
inline bool PublicKey::_internal_has_governance_auth() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || governance_auth_ != nullptr);
  return value;
}
inline bool PublicKey::has_governance_auth() const {
  return _internal_has_governance_auth();
}
inline void PublicKey::clear_governance_auth() {
  if (GetArena() == nullptr && governance_auth_ != nullptr) {
    delete governance_auth_;
  }
  governance_auth_ = nullptr;
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zera_txn::GovernanceAuth& PublicKey::_internal_governance_auth() const {
  const ::zera_txn::GovernanceAuth* p = governance_auth_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::GovernanceAuth*>(
      &::zera_txn::_GovernanceAuth_default_instance_);
}
inline const ::zera_txn::GovernanceAuth& PublicKey::governance_auth() const {
  // @@protoc_insertion_point(field_get:zera_txn.PublicKey.governance_auth)
  return _internal_governance_auth();
}
inline void PublicKey::unsafe_arena_set_allocated_governance_auth(
    ::zera_txn::GovernanceAuth* governance_auth) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(governance_auth_);
  }
  governance_auth_ = governance_auth;
  if (governance_auth) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.PublicKey.governance_auth)
}
inline ::zera_txn::GovernanceAuth* PublicKey::release_governance_auth() {
  auto temp = unsafe_arena_release_governance_auth();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::GovernanceAuth* PublicKey::unsafe_arena_release_governance_auth() {
  // @@protoc_insertion_point(field_release:zera_txn.PublicKey.governance_auth)
  _has_bits_[0] &= ~0x00000002u;
  ::zera_txn::GovernanceAuth* temp = governance_auth_;
  governance_auth_ = nullptr;
  return temp;
}
inline ::zera_txn::GovernanceAuth* PublicKey::_internal_mutable_governance_auth() {
  _has_bits_[0] |= 0x00000002u;
  if (governance_auth_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::GovernanceAuth>(GetArena());
    governance_auth_ = p;
  }
  return governance_auth_;
}
inline ::zera_txn::GovernanceAuth* PublicKey::mutable_governance_auth() {
  // @@protoc_insertion_point(field_mutable:zera_txn.PublicKey.governance_auth)
  return _internal_mutable_governance_auth();
}
inline void PublicKey::set_allocated_governance_auth(::zera_txn::GovernanceAuth* governance_auth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete governance_auth_;
  }
  if (governance_auth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(governance_auth);
    if (message_arena != submessage_arena) {
      governance_auth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, governance_auth, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  governance_auth_ = governance_auth;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.PublicKey.governance_auth)
}

// -------------------------------------------------------------------

// GovernanceAuth

// bytes auth = 1;
inline void GovernanceAuth::clear_auth() {
  auth_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GovernanceAuth::auth() const {
  // @@protoc_insertion_point(field_get:zera_txn.GovernanceAuth.auth)
  return _internal_auth();
}
inline void GovernanceAuth::set_auth(const std::string& value) {
  _internal_set_auth(value);
  // @@protoc_insertion_point(field_set:zera_txn.GovernanceAuth.auth)
}
inline std::string* GovernanceAuth::mutable_auth() {
  // @@protoc_insertion_point(field_mutable:zera_txn.GovernanceAuth.auth)
  return _internal_mutable_auth();
}
inline const std::string& GovernanceAuth::_internal_auth() const {
  return auth_.Get();
}
inline void GovernanceAuth::_internal_set_auth(const std::string& value) {
  
  auth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GovernanceAuth::set_auth(std::string&& value) {
  
  auth_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.GovernanceAuth.auth)
}
inline void GovernanceAuth::set_auth(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.GovernanceAuth.auth)
}
inline void GovernanceAuth::set_auth(const void* value,
    size_t size) {
  
  auth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.GovernanceAuth.auth)
}
inline std::string* GovernanceAuth::_internal_mutable_auth() {
  
  return auth_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GovernanceAuth::release_auth() {
  // @@protoc_insertion_point(field_release:zera_txn.GovernanceAuth.auth)
  return auth_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GovernanceAuth::set_allocated_auth(std::string* auth) {
  if (auth != nullptr) {
    
  } else {
    
  }
  auth_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.GovernanceAuth.auth)
}
inline std::string* GovernanceAuth::unsafe_arena_release_auth() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.GovernanceAuth.auth)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return auth_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GovernanceAuth::unsafe_arena_set_allocated_auth(
    std::string* auth) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (auth != nullptr) {
    
  } else {
    
  }
  auth_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      auth, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.GovernanceAuth.auth)
}

// bytes proposal_id = 2;
inline void GovernanceAuth::clear_proposal_id() {
  proposal_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GovernanceAuth::proposal_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.GovernanceAuth.proposal_id)
  return _internal_proposal_id();
}
inline void GovernanceAuth::set_proposal_id(const std::string& value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.GovernanceAuth.proposal_id)
}
inline std::string* GovernanceAuth::mutable_proposal_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.GovernanceAuth.proposal_id)
  return _internal_mutable_proposal_id();
}
inline const std::string& GovernanceAuth::_internal_proposal_id() const {
  return proposal_id_.Get();
}
inline void GovernanceAuth::_internal_set_proposal_id(const std::string& value) {
  
  proposal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GovernanceAuth::set_proposal_id(std::string&& value) {
  
  proposal_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.GovernanceAuth.proposal_id)
}
inline void GovernanceAuth::set_proposal_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proposal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.GovernanceAuth.proposal_id)
}
inline void GovernanceAuth::set_proposal_id(const void* value,
    size_t size) {
  
  proposal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.GovernanceAuth.proposal_id)
}
inline std::string* GovernanceAuth::_internal_mutable_proposal_id() {
  
  return proposal_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GovernanceAuth::release_proposal_id() {
  // @@protoc_insertion_point(field_release:zera_txn.GovernanceAuth.proposal_id)
  return proposal_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GovernanceAuth::set_allocated_proposal_id(std::string* proposal_id) {
  if (proposal_id != nullptr) {
    
  } else {
    
  }
  proposal_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proposal_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.GovernanceAuth.proposal_id)
}
inline std::string* GovernanceAuth::unsafe_arena_release_proposal_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.GovernanceAuth.proposal_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return proposal_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GovernanceAuth::unsafe_arena_set_allocated_proposal_id(
    std::string* proposal_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (proposal_id != nullptr) {
    
  } else {
    
  }
  proposal_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      proposal_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.GovernanceAuth.proposal_id)
}

// -------------------------------------------------------------------

// MultiKey

// repeated bytes public_keys = 1;
inline int MultiKey::_internal_public_keys_size() const {
  return public_keys_.size();
}
inline int MultiKey::public_keys_size() const {
  return _internal_public_keys_size();
}
inline void MultiKey::clear_public_keys() {
  public_keys_.Clear();
}
inline std::string* MultiKey::add_public_keys() {
  // @@protoc_insertion_point(field_add_mutable:zera_txn.MultiKey.public_keys)
  return _internal_add_public_keys();
}
inline const std::string& MultiKey::_internal_public_keys(int index) const {
  return public_keys_.Get(index);
}
inline const std::string& MultiKey::public_keys(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.MultiKey.public_keys)
  return _internal_public_keys(index);
}
inline std::string* MultiKey::mutable_public_keys(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.MultiKey.public_keys)
  return public_keys_.Mutable(index);
}
inline void MultiKey::set_public_keys(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:zera_txn.MultiKey.public_keys)
  public_keys_.Mutable(index)->assign(value);
}
inline void MultiKey::set_public_keys(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:zera_txn.MultiKey.public_keys)
  public_keys_.Mutable(index)->assign(std::move(value));
}
inline void MultiKey::set_public_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  public_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zera_txn.MultiKey.public_keys)
}
inline void MultiKey::set_public_keys(int index, const void* value, size_t size) {
  public_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zera_txn.MultiKey.public_keys)
}
inline std::string* MultiKey::_internal_add_public_keys() {
  return public_keys_.Add();
}
inline void MultiKey::add_public_keys(const std::string& value) {
  public_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zera_txn.MultiKey.public_keys)
}
inline void MultiKey::add_public_keys(std::string&& value) {
  public_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zera_txn.MultiKey.public_keys)
}
inline void MultiKey::add_public_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  public_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zera_txn.MultiKey.public_keys)
}
inline void MultiKey::add_public_keys(const void* value, size_t size) {
  public_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zera_txn.MultiKey.public_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MultiKey::public_keys() const {
  // @@protoc_insertion_point(field_list:zera_txn.MultiKey.public_keys)
  return public_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MultiKey::mutable_public_keys() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.MultiKey.public_keys)
  return &public_keys_;
}

// repeated bytes signatures = 2;
inline int MultiKey::_internal_signatures_size() const {
  return signatures_.size();
}
inline int MultiKey::signatures_size() const {
  return _internal_signatures_size();
}
inline void MultiKey::clear_signatures() {
  signatures_.Clear();
}
inline std::string* MultiKey::add_signatures() {
  // @@protoc_insertion_point(field_add_mutable:zera_txn.MultiKey.signatures)
  return _internal_add_signatures();
}
inline const std::string& MultiKey::_internal_signatures(int index) const {
  return signatures_.Get(index);
}
inline const std::string& MultiKey::signatures(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.MultiKey.signatures)
  return _internal_signatures(index);
}
inline std::string* MultiKey::mutable_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.MultiKey.signatures)
  return signatures_.Mutable(index);
}
inline void MultiKey::set_signatures(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:zera_txn.MultiKey.signatures)
  signatures_.Mutable(index)->assign(value);
}
inline void MultiKey::set_signatures(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:zera_txn.MultiKey.signatures)
  signatures_.Mutable(index)->assign(std::move(value));
}
inline void MultiKey::set_signatures(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signatures_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zera_txn.MultiKey.signatures)
}
inline void MultiKey::set_signatures(int index, const void* value, size_t size) {
  signatures_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zera_txn.MultiKey.signatures)
}
inline std::string* MultiKey::_internal_add_signatures() {
  return signatures_.Add();
}
inline void MultiKey::add_signatures(const std::string& value) {
  signatures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zera_txn.MultiKey.signatures)
}
inline void MultiKey::add_signatures(std::string&& value) {
  signatures_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zera_txn.MultiKey.signatures)
}
inline void MultiKey::add_signatures(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signatures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zera_txn.MultiKey.signatures)
}
inline void MultiKey::add_signatures(const void* value, size_t size) {
  signatures_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zera_txn.MultiKey.signatures)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MultiKey::signatures() const {
  // @@protoc_insertion_point(field_list:zera_txn.MultiKey.signatures)
  return signatures_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MultiKey::mutable_signatures() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.MultiKey.signatures)
  return &signatures_;
}

// repeated .zera_txn.MultiPatterns multi_patterns = 3;
inline int MultiKey::_internal_multi_patterns_size() const {
  return multi_patterns_.size();
}
inline int MultiKey::multi_patterns_size() const {
  return _internal_multi_patterns_size();
}
inline void MultiKey::clear_multi_patterns() {
  multi_patterns_.Clear();
}
inline ::zera_txn::MultiPatterns* MultiKey::mutable_multi_patterns(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.MultiKey.multi_patterns)
  return multi_patterns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::MultiPatterns >*
MultiKey::mutable_multi_patterns() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.MultiKey.multi_patterns)
  return &multi_patterns_;
}
inline const ::zera_txn::MultiPatterns& MultiKey::_internal_multi_patterns(int index) const {
  return multi_patterns_.Get(index);
}
inline const ::zera_txn::MultiPatterns& MultiKey::multi_patterns(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.MultiKey.multi_patterns)
  return _internal_multi_patterns(index);
}
inline ::zera_txn::MultiPatterns* MultiKey::_internal_add_multi_patterns() {
  return multi_patterns_.Add();
}
inline ::zera_txn::MultiPatterns* MultiKey::add_multi_patterns() {
  // @@protoc_insertion_point(field_add:zera_txn.MultiKey.multi_patterns)
  return _internal_add_multi_patterns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::MultiPatterns >&
MultiKey::multi_patterns() const {
  // @@protoc_insertion_point(field_list:zera_txn.MultiKey.multi_patterns)
  return multi_patterns_;
}

// repeated string hash_tokens = 4;
inline int MultiKey::_internal_hash_tokens_size() const {
  return hash_tokens_.size();
}
inline int MultiKey::hash_tokens_size() const {
  return _internal_hash_tokens_size();
}
inline void MultiKey::clear_hash_tokens() {
  hash_tokens_.Clear();
}
inline std::string* MultiKey::add_hash_tokens() {
  // @@protoc_insertion_point(field_add_mutable:zera_txn.MultiKey.hash_tokens)
  return _internal_add_hash_tokens();
}
inline const std::string& MultiKey::_internal_hash_tokens(int index) const {
  return hash_tokens_.Get(index);
}
inline const std::string& MultiKey::hash_tokens(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.MultiKey.hash_tokens)
  return _internal_hash_tokens(index);
}
inline std::string* MultiKey::mutable_hash_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.MultiKey.hash_tokens)
  return hash_tokens_.Mutable(index);
}
inline void MultiKey::set_hash_tokens(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:zera_txn.MultiKey.hash_tokens)
  hash_tokens_.Mutable(index)->assign(value);
}
inline void MultiKey::set_hash_tokens(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:zera_txn.MultiKey.hash_tokens)
  hash_tokens_.Mutable(index)->assign(std::move(value));
}
inline void MultiKey::set_hash_tokens(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  hash_tokens_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zera_txn.MultiKey.hash_tokens)
}
inline void MultiKey::set_hash_tokens(int index, const char* value, size_t size) {
  hash_tokens_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zera_txn.MultiKey.hash_tokens)
}
inline std::string* MultiKey::_internal_add_hash_tokens() {
  return hash_tokens_.Add();
}
inline void MultiKey::add_hash_tokens(const std::string& value) {
  hash_tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zera_txn.MultiKey.hash_tokens)
}
inline void MultiKey::add_hash_tokens(std::string&& value) {
  hash_tokens_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zera_txn.MultiKey.hash_tokens)
}
inline void MultiKey::add_hash_tokens(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  hash_tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zera_txn.MultiKey.hash_tokens)
}
inline void MultiKey::add_hash_tokens(const char* value, size_t size) {
  hash_tokens_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zera_txn.MultiKey.hash_tokens)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MultiKey::hash_tokens() const {
  // @@protoc_insertion_point(field_list:zera_txn.MultiKey.hash_tokens)
  return hash_tokens_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MultiKey::mutable_hash_tokens() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.MultiKey.hash_tokens)
  return &hash_tokens_;
}

// -------------------------------------------------------------------

// MultiPatterns

// repeated int32 class = 1;
inline int MultiPatterns::_internal_class__size() const {
  return class__.size();
}
inline int MultiPatterns::class__size() const {
  return _internal_class__size();
}
inline void MultiPatterns::clear_class_() {
  class__.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultiPatterns::_internal_class_(int index) const {
  return class__.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultiPatterns::class_(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.MultiPatterns.class)
  return _internal_class_(index);
}
inline void MultiPatterns::set_class_(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  class__.Set(index, value);
  // @@protoc_insertion_point(field_set:zera_txn.MultiPatterns.class)
}
inline void MultiPatterns::_internal_add_class_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  class__.Add(value);
}
inline void MultiPatterns::add_class_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_class_(value);
  // @@protoc_insertion_point(field_add:zera_txn.MultiPatterns.class)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MultiPatterns::_internal_class_() const {
  return class__;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MultiPatterns::class_() const {
  // @@protoc_insertion_point(field_list:zera_txn.MultiPatterns.class)
  return _internal_class_();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MultiPatterns::_internal_mutable_class_() {
  return &class__;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MultiPatterns::mutable_class_() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.MultiPatterns.class)
  return _internal_mutable_class_();
}

// repeated int32 required = 2;
inline int MultiPatterns::_internal_required_size() const {
  return required_.size();
}
inline int MultiPatterns::required_size() const {
  return _internal_required_size();
}
inline void MultiPatterns::clear_required() {
  required_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultiPatterns::_internal_required(int index) const {
  return required_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultiPatterns::required(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.MultiPatterns.required)
  return _internal_required(index);
}
inline void MultiPatterns::set_required(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  required_.Set(index, value);
  // @@protoc_insertion_point(field_set:zera_txn.MultiPatterns.required)
}
inline void MultiPatterns::_internal_add_required(::PROTOBUF_NAMESPACE_ID::int32 value) {
  required_.Add(value);
}
inline void MultiPatterns::add_required(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_required(value);
  // @@protoc_insertion_point(field_add:zera_txn.MultiPatterns.required)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MultiPatterns::_internal_required() const {
  return required_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MultiPatterns::required() const {
  // @@protoc_insertion_point(field_list:zera_txn.MultiPatterns.required)
  return _internal_required();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MultiPatterns::_internal_mutable_required() {
  return &required_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MultiPatterns::mutable_required() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.MultiPatterns.required)
  return _internal_mutable_required();
}

// -------------------------------------------------------------------

// SelfCurrencyEquiv

// .zera_txn.BaseTXN base = 1;
inline bool SelfCurrencyEquiv::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool SelfCurrencyEquiv::has_base() const {
  return _internal_has_base();
}
inline void SelfCurrencyEquiv::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::zera_txn::BaseTXN& SelfCurrencyEquiv::_internal_base() const {
  const ::zera_txn::BaseTXN* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::BaseTXN*>(
      &::zera_txn::_BaseTXN_default_instance_);
}
inline const ::zera_txn::BaseTXN& SelfCurrencyEquiv::base() const {
  // @@protoc_insertion_point(field_get:zera_txn.SelfCurrencyEquiv.base)
  return _internal_base();
}
inline void SelfCurrencyEquiv::unsafe_arena_set_allocated_base(
    ::zera_txn::BaseTXN* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.SelfCurrencyEquiv.base)
}
inline ::zera_txn::BaseTXN* SelfCurrencyEquiv::release_base() {
  auto temp = unsafe_arena_release_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::BaseTXN* SelfCurrencyEquiv::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:zera_txn.SelfCurrencyEquiv.base)
  
  ::zera_txn::BaseTXN* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::zera_txn::BaseTXN* SelfCurrencyEquiv::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::BaseTXN>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::zera_txn::BaseTXN* SelfCurrencyEquiv::mutable_base() {
  // @@protoc_insertion_point(field_mutable:zera_txn.SelfCurrencyEquiv.base)
  return _internal_mutable_base();
}
inline void SelfCurrencyEquiv::set_allocated_base(::zera_txn::BaseTXN* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.SelfCurrencyEquiv.base)
}

// repeated .zera_txn.CurrencyEquiv cur_equiv = 2;
inline int SelfCurrencyEquiv::_internal_cur_equiv_size() const {
  return cur_equiv_.size();
}
inline int SelfCurrencyEquiv::cur_equiv_size() const {
  return _internal_cur_equiv_size();
}
inline void SelfCurrencyEquiv::clear_cur_equiv() {
  cur_equiv_.Clear();
}
inline ::zera_txn::CurrencyEquiv* SelfCurrencyEquiv::mutable_cur_equiv(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.SelfCurrencyEquiv.cur_equiv)
  return cur_equiv_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::CurrencyEquiv >*
SelfCurrencyEquiv::mutable_cur_equiv() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.SelfCurrencyEquiv.cur_equiv)
  return &cur_equiv_;
}
inline const ::zera_txn::CurrencyEquiv& SelfCurrencyEquiv::_internal_cur_equiv(int index) const {
  return cur_equiv_.Get(index);
}
inline const ::zera_txn::CurrencyEquiv& SelfCurrencyEquiv::cur_equiv(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.SelfCurrencyEquiv.cur_equiv)
  return _internal_cur_equiv(index);
}
inline ::zera_txn::CurrencyEquiv* SelfCurrencyEquiv::_internal_add_cur_equiv() {
  return cur_equiv_.Add();
}
inline ::zera_txn::CurrencyEquiv* SelfCurrencyEquiv::add_cur_equiv() {
  // @@protoc_insertion_point(field_add:zera_txn.SelfCurrencyEquiv.cur_equiv)
  return _internal_add_cur_equiv();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::CurrencyEquiv >&
SelfCurrencyEquiv::cur_equiv() const {
  // @@protoc_insertion_point(field_list:zera_txn.SelfCurrencyEquiv.cur_equiv)
  return cur_equiv_;
}

// -------------------------------------------------------------------

// AuthorizedCurrencyEquiv

// .zera_txn.BaseTXN base = 1;
inline bool AuthorizedCurrencyEquiv::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool AuthorizedCurrencyEquiv::has_base() const {
  return _internal_has_base();
}
inline void AuthorizedCurrencyEquiv::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::zera_txn::BaseTXN& AuthorizedCurrencyEquiv::_internal_base() const {
  const ::zera_txn::BaseTXN* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::BaseTXN*>(
      &::zera_txn::_BaseTXN_default_instance_);
}
inline const ::zera_txn::BaseTXN& AuthorizedCurrencyEquiv::base() const {
  // @@protoc_insertion_point(field_get:zera_txn.AuthorizedCurrencyEquiv.base)
  return _internal_base();
}
inline void AuthorizedCurrencyEquiv::unsafe_arena_set_allocated_base(
    ::zera_txn::BaseTXN* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.AuthorizedCurrencyEquiv.base)
}
inline ::zera_txn::BaseTXN* AuthorizedCurrencyEquiv::release_base() {
  auto temp = unsafe_arena_release_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::BaseTXN* AuthorizedCurrencyEquiv::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:zera_txn.AuthorizedCurrencyEquiv.base)
  
  ::zera_txn::BaseTXN* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::zera_txn::BaseTXN* AuthorizedCurrencyEquiv::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::BaseTXN>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::zera_txn::BaseTXN* AuthorizedCurrencyEquiv::mutable_base() {
  // @@protoc_insertion_point(field_mutable:zera_txn.AuthorizedCurrencyEquiv.base)
  return _internal_mutable_base();
}
inline void AuthorizedCurrencyEquiv::set_allocated_base(::zera_txn::BaseTXN* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.AuthorizedCurrencyEquiv.base)
}

// repeated .zera_txn.CurrencyEquiv cur_equiv = 2;
inline int AuthorizedCurrencyEquiv::_internal_cur_equiv_size() const {
  return cur_equiv_.size();
}
inline int AuthorizedCurrencyEquiv::cur_equiv_size() const {
  return _internal_cur_equiv_size();
}
inline void AuthorizedCurrencyEquiv::clear_cur_equiv() {
  cur_equiv_.Clear();
}
inline ::zera_txn::CurrencyEquiv* AuthorizedCurrencyEquiv::mutable_cur_equiv(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.AuthorizedCurrencyEquiv.cur_equiv)
  return cur_equiv_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::CurrencyEquiv >*
AuthorizedCurrencyEquiv::mutable_cur_equiv() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.AuthorizedCurrencyEquiv.cur_equiv)
  return &cur_equiv_;
}
inline const ::zera_txn::CurrencyEquiv& AuthorizedCurrencyEquiv::_internal_cur_equiv(int index) const {
  return cur_equiv_.Get(index);
}
inline const ::zera_txn::CurrencyEquiv& AuthorizedCurrencyEquiv::cur_equiv(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.AuthorizedCurrencyEquiv.cur_equiv)
  return _internal_cur_equiv(index);
}
inline ::zera_txn::CurrencyEquiv* AuthorizedCurrencyEquiv::_internal_add_cur_equiv() {
  return cur_equiv_.Add();
}
inline ::zera_txn::CurrencyEquiv* AuthorizedCurrencyEquiv::add_cur_equiv() {
  // @@protoc_insertion_point(field_add:zera_txn.AuthorizedCurrencyEquiv.cur_equiv)
  return _internal_add_cur_equiv();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::CurrencyEquiv >&
AuthorizedCurrencyEquiv::cur_equiv() const {
  // @@protoc_insertion_point(field_list:zera_txn.AuthorizedCurrencyEquiv.cur_equiv)
  return cur_equiv_;
}

// -------------------------------------------------------------------

// CurrencyEquiv

// string contract_id = 1;
inline void CurrencyEquiv::clear_contract_id() {
  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CurrencyEquiv::contract_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.CurrencyEquiv.contract_id)
  return _internal_contract_id();
}
inline void CurrencyEquiv::set_contract_id(const std::string& value) {
  _internal_set_contract_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.CurrencyEquiv.contract_id)
}
inline std::string* CurrencyEquiv::mutable_contract_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.CurrencyEquiv.contract_id)
  return _internal_mutable_contract_id();
}
inline const std::string& CurrencyEquiv::_internal_contract_id() const {
  return contract_id_.Get();
}
inline void CurrencyEquiv::_internal_set_contract_id(const std::string& value) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CurrencyEquiv::set_contract_id(std::string&& value) {
  
  contract_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.CurrencyEquiv.contract_id)
}
inline void CurrencyEquiv::set_contract_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.CurrencyEquiv.contract_id)
}
inline void CurrencyEquiv::set_contract_id(const char* value,
    size_t size) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.CurrencyEquiv.contract_id)
}
inline std::string* CurrencyEquiv::_internal_mutable_contract_id() {
  
  return contract_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CurrencyEquiv::release_contract_id() {
  // @@protoc_insertion_point(field_release:zera_txn.CurrencyEquiv.contract_id)
  return contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CurrencyEquiv::set_allocated_contract_id(std::string* contract_id) {
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.CurrencyEquiv.contract_id)
}
inline std::string* CurrencyEquiv::unsafe_arena_release_contract_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.CurrencyEquiv.contract_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contract_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CurrencyEquiv::unsafe_arena_set_allocated_contract_id(
    std::string* contract_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contract_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.CurrencyEquiv.contract_id)
}

// string rate = 2;
inline void CurrencyEquiv::clear_rate() {
  rate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CurrencyEquiv::rate() const {
  // @@protoc_insertion_point(field_get:zera_txn.CurrencyEquiv.rate)
  return _internal_rate();
}
inline void CurrencyEquiv::set_rate(const std::string& value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:zera_txn.CurrencyEquiv.rate)
}
inline std::string* CurrencyEquiv::mutable_rate() {
  // @@protoc_insertion_point(field_mutable:zera_txn.CurrencyEquiv.rate)
  return _internal_mutable_rate();
}
inline const std::string& CurrencyEquiv::_internal_rate() const {
  return rate_.Get();
}
inline void CurrencyEquiv::_internal_set_rate(const std::string& value) {
  
  rate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CurrencyEquiv::set_rate(std::string&& value) {
  
  rate_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.CurrencyEquiv.rate)
}
inline void CurrencyEquiv::set_rate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.CurrencyEquiv.rate)
}
inline void CurrencyEquiv::set_rate(const char* value,
    size_t size) {
  
  rate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.CurrencyEquiv.rate)
}
inline std::string* CurrencyEquiv::_internal_mutable_rate() {
  
  return rate_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CurrencyEquiv::release_rate() {
  // @@protoc_insertion_point(field_release:zera_txn.CurrencyEquiv.rate)
  return rate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CurrencyEquiv::set_allocated_rate(std::string* rate) {
  if (rate != nullptr) {
    
  } else {
    
  }
  rate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.CurrencyEquiv.rate)
}
inline std::string* CurrencyEquiv::unsafe_arena_release_rate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.CurrencyEquiv.rate)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return rate_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CurrencyEquiv::unsafe_arena_set_allocated_rate(
    std::string* rate) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (rate != nullptr) {
    
  } else {
    
  }
  rate_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      rate, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.CurrencyEquiv.rate)
}

// bool authorized = 3;
inline bool CurrencyEquiv::_internal_has_authorized() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CurrencyEquiv::has_authorized() const {
  return _internal_has_authorized();
}
inline void CurrencyEquiv::clear_authorized() {
  authorized_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CurrencyEquiv::_internal_authorized() const {
  return authorized_;
}
inline bool CurrencyEquiv::authorized() const {
  // @@protoc_insertion_point(field_get:zera_txn.CurrencyEquiv.authorized)
  return _internal_authorized();
}
inline void CurrencyEquiv::_internal_set_authorized(bool value) {
  _has_bits_[0] |= 0x00000002u;
  authorized_ = value;
}
inline void CurrencyEquiv::set_authorized(bool value) {
  _internal_set_authorized(value);
  // @@protoc_insertion_point(field_set:zera_txn.CurrencyEquiv.authorized)
}

// string max_stake = 4;
inline bool CurrencyEquiv::_internal_has_max_stake() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CurrencyEquiv::has_max_stake() const {
  return _internal_has_max_stake();
}
inline void CurrencyEquiv::clear_max_stake() {
  max_stake_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CurrencyEquiv::max_stake() const {
  // @@protoc_insertion_point(field_get:zera_txn.CurrencyEquiv.max_stake)
  return _internal_max_stake();
}
inline void CurrencyEquiv::set_max_stake(const std::string& value) {
  _internal_set_max_stake(value);
  // @@protoc_insertion_point(field_set:zera_txn.CurrencyEquiv.max_stake)
}
inline std::string* CurrencyEquiv::mutable_max_stake() {
  // @@protoc_insertion_point(field_mutable:zera_txn.CurrencyEquiv.max_stake)
  return _internal_mutable_max_stake();
}
inline const std::string& CurrencyEquiv::_internal_max_stake() const {
  return max_stake_.Get();
}
inline void CurrencyEquiv::_internal_set_max_stake(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  max_stake_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CurrencyEquiv::set_max_stake(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  max_stake_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.CurrencyEquiv.max_stake)
}
inline void CurrencyEquiv::set_max_stake(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  max_stake_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.CurrencyEquiv.max_stake)
}
inline void CurrencyEquiv::set_max_stake(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  max_stake_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.CurrencyEquiv.max_stake)
}
inline std::string* CurrencyEquiv::_internal_mutable_max_stake() {
  _has_bits_[0] |= 0x00000001u;
  return max_stake_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CurrencyEquiv::release_max_stake() {
  // @@protoc_insertion_point(field_release:zera_txn.CurrencyEquiv.max_stake)
  if (!_internal_has_max_stake()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return max_stake_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CurrencyEquiv::set_allocated_max_stake(std::string* max_stake) {
  if (max_stake != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  max_stake_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), max_stake,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.CurrencyEquiv.max_stake)
}
inline std::string* CurrencyEquiv::unsafe_arena_release_max_stake() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.CurrencyEquiv.max_stake)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return max_stake_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CurrencyEquiv::unsafe_arena_set_allocated_max_stake(
    std::string* max_stake) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (max_stake != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  max_stake_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      max_stake, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.CurrencyEquiv.max_stake)
}

// -------------------------------------------------------------------

// ExpenseRatioResult

// string contract_id = 1;
inline void ExpenseRatioResult::clear_contract_id() {
  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExpenseRatioResult::contract_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.ExpenseRatioResult.contract_id)
  return _internal_contract_id();
}
inline void ExpenseRatioResult::set_contract_id(const std::string& value) {
  _internal_set_contract_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.ExpenseRatioResult.contract_id)
}
inline std::string* ExpenseRatioResult::mutable_contract_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ExpenseRatioResult.contract_id)
  return _internal_mutable_contract_id();
}
inline const std::string& ExpenseRatioResult::_internal_contract_id() const {
  return contract_id_.Get();
}
inline void ExpenseRatioResult::_internal_set_contract_id(const std::string& value) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExpenseRatioResult::set_contract_id(std::string&& value) {
  
  contract_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.ExpenseRatioResult.contract_id)
}
inline void ExpenseRatioResult::set_contract_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.ExpenseRatioResult.contract_id)
}
inline void ExpenseRatioResult::set_contract_id(const char* value,
    size_t size) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.ExpenseRatioResult.contract_id)
}
inline std::string* ExpenseRatioResult::_internal_mutable_contract_id() {
  
  return contract_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExpenseRatioResult::release_contract_id() {
  // @@protoc_insertion_point(field_release:zera_txn.ExpenseRatioResult.contract_id)
  return contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExpenseRatioResult::set_allocated_contract_id(std::string* contract_id) {
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ExpenseRatioResult.contract_id)
}
inline std::string* ExpenseRatioResult::unsafe_arena_release_contract_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.ExpenseRatioResult.contract_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contract_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExpenseRatioResult::unsafe_arena_set_allocated_contract_id(
    std::string* contract_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contract_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ExpenseRatioResult.contract_id)
}

// repeated .zera_txn.Wallets wallets = 2;
inline int ExpenseRatioResult::_internal_wallets_size() const {
  return wallets_.size();
}
inline int ExpenseRatioResult::wallets_size() const {
  return _internal_wallets_size();
}
inline void ExpenseRatioResult::clear_wallets() {
  wallets_.Clear();
}
inline ::zera_txn::Wallets* ExpenseRatioResult::mutable_wallets(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.ExpenseRatioResult.wallets)
  return wallets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::Wallets >*
ExpenseRatioResult::mutable_wallets() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.ExpenseRatioResult.wallets)
  return &wallets_;
}
inline const ::zera_txn::Wallets& ExpenseRatioResult::_internal_wallets(int index) const {
  return wallets_.Get(index);
}
inline const ::zera_txn::Wallets& ExpenseRatioResult::wallets(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.ExpenseRatioResult.wallets)
  return _internal_wallets(index);
}
inline ::zera_txn::Wallets* ExpenseRatioResult::_internal_add_wallets() {
  return wallets_.Add();
}
inline ::zera_txn::Wallets* ExpenseRatioResult::add_wallets() {
  // @@protoc_insertion_point(field_add:zera_txn.ExpenseRatioResult.wallets)
  return _internal_add_wallets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::Wallets >&
ExpenseRatioResult::wallets() const {
  // @@protoc_insertion_point(field_list:zera_txn.ExpenseRatioResult.wallets)
  return wallets_;
}

// bytes hash = 3;
inline void ExpenseRatioResult::clear_hash() {
  hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExpenseRatioResult::hash() const {
  // @@protoc_insertion_point(field_get:zera_txn.ExpenseRatioResult.hash)
  return _internal_hash();
}
inline void ExpenseRatioResult::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:zera_txn.ExpenseRatioResult.hash)
}
inline std::string* ExpenseRatioResult::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ExpenseRatioResult.hash)
  return _internal_mutable_hash();
}
inline const std::string& ExpenseRatioResult::_internal_hash() const {
  return hash_.Get();
}
inline void ExpenseRatioResult::_internal_set_hash(const std::string& value) {
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExpenseRatioResult::set_hash(std::string&& value) {
  
  hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.ExpenseRatioResult.hash)
}
inline void ExpenseRatioResult::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.ExpenseRatioResult.hash)
}
inline void ExpenseRatioResult::set_hash(const void* value,
    size_t size) {
  
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.ExpenseRatioResult.hash)
}
inline std::string* ExpenseRatioResult::_internal_mutable_hash() {
  
  return hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExpenseRatioResult::release_hash() {
  // @@protoc_insertion_point(field_release:zera_txn.ExpenseRatioResult.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExpenseRatioResult::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ExpenseRatioResult.hash)
}
inline std::string* ExpenseRatioResult::unsafe_arena_release_hash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.ExpenseRatioResult.hash)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return hash_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExpenseRatioResult::unsafe_arena_set_allocated_hash(
    std::string* hash) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      hash, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ExpenseRatioResult.hash)
}

// bytes recipient_address = 4;
inline void ExpenseRatioResult::clear_recipient_address() {
  recipient_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExpenseRatioResult::recipient_address() const {
  // @@protoc_insertion_point(field_get:zera_txn.ExpenseRatioResult.recipient_address)
  return _internal_recipient_address();
}
inline void ExpenseRatioResult::set_recipient_address(const std::string& value) {
  _internal_set_recipient_address(value);
  // @@protoc_insertion_point(field_set:zera_txn.ExpenseRatioResult.recipient_address)
}
inline std::string* ExpenseRatioResult::mutable_recipient_address() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ExpenseRatioResult.recipient_address)
  return _internal_mutable_recipient_address();
}
inline const std::string& ExpenseRatioResult::_internal_recipient_address() const {
  return recipient_address_.Get();
}
inline void ExpenseRatioResult::_internal_set_recipient_address(const std::string& value) {
  
  recipient_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExpenseRatioResult::set_recipient_address(std::string&& value) {
  
  recipient_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.ExpenseRatioResult.recipient_address)
}
inline void ExpenseRatioResult::set_recipient_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recipient_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.ExpenseRatioResult.recipient_address)
}
inline void ExpenseRatioResult::set_recipient_address(const void* value,
    size_t size) {
  
  recipient_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.ExpenseRatioResult.recipient_address)
}
inline std::string* ExpenseRatioResult::_internal_mutable_recipient_address() {
  
  return recipient_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExpenseRatioResult::release_recipient_address() {
  // @@protoc_insertion_point(field_release:zera_txn.ExpenseRatioResult.recipient_address)
  return recipient_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExpenseRatioResult::set_allocated_recipient_address(std::string* recipient_address) {
  if (recipient_address != nullptr) {
    
  } else {
    
  }
  recipient_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recipient_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ExpenseRatioResult.recipient_address)
}
inline std::string* ExpenseRatioResult::unsafe_arena_release_recipient_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.ExpenseRatioResult.recipient_address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return recipient_address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExpenseRatioResult::unsafe_arena_set_allocated_recipient_address(
    std::string* recipient_address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (recipient_address != nullptr) {
    
  } else {
    
  }
  recipient_address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      recipient_address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ExpenseRatioResult.recipient_address)
}

// -------------------------------------------------------------------

// ComplianceAssign

// bytes recipient_address = 1;
inline void ComplianceAssign::clear_recipient_address() {
  recipient_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ComplianceAssign::recipient_address() const {
  // @@protoc_insertion_point(field_get:zera_txn.ComplianceAssign.recipient_address)
  return _internal_recipient_address();
}
inline void ComplianceAssign::set_recipient_address(const std::string& value) {
  _internal_set_recipient_address(value);
  // @@protoc_insertion_point(field_set:zera_txn.ComplianceAssign.recipient_address)
}
inline std::string* ComplianceAssign::mutable_recipient_address() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ComplianceAssign.recipient_address)
  return _internal_mutable_recipient_address();
}
inline const std::string& ComplianceAssign::_internal_recipient_address() const {
  return recipient_address_.Get();
}
inline void ComplianceAssign::_internal_set_recipient_address(const std::string& value) {
  
  recipient_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ComplianceAssign::set_recipient_address(std::string&& value) {
  
  recipient_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.ComplianceAssign.recipient_address)
}
inline void ComplianceAssign::set_recipient_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recipient_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.ComplianceAssign.recipient_address)
}
inline void ComplianceAssign::set_recipient_address(const void* value,
    size_t size) {
  
  recipient_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.ComplianceAssign.recipient_address)
}
inline std::string* ComplianceAssign::_internal_mutable_recipient_address() {
  
  return recipient_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ComplianceAssign::release_recipient_address() {
  // @@protoc_insertion_point(field_release:zera_txn.ComplianceAssign.recipient_address)
  return recipient_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ComplianceAssign::set_allocated_recipient_address(std::string* recipient_address) {
  if (recipient_address != nullptr) {
    
  } else {
    
  }
  recipient_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recipient_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ComplianceAssign.recipient_address)
}
inline std::string* ComplianceAssign::unsafe_arena_release_recipient_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.ComplianceAssign.recipient_address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return recipient_address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ComplianceAssign::unsafe_arena_set_allocated_recipient_address(
    std::string* recipient_address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (recipient_address != nullptr) {
    
  } else {
    
  }
  recipient_address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      recipient_address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ComplianceAssign.recipient_address)
}

// uint32 compliance_level = 2;
inline void ComplianceAssign::clear_compliance_level() {
  compliance_level_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ComplianceAssign::_internal_compliance_level() const {
  return compliance_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ComplianceAssign::compliance_level() const {
  // @@protoc_insertion_point(field_get:zera_txn.ComplianceAssign.compliance_level)
  return _internal_compliance_level();
}
inline void ComplianceAssign::_internal_set_compliance_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  compliance_level_ = value;
}
inline void ComplianceAssign::set_compliance_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_compliance_level(value);
  // @@protoc_insertion_point(field_set:zera_txn.ComplianceAssign.compliance_level)
}

// bool assign_revoke = 3;
inline void ComplianceAssign::clear_assign_revoke() {
  assign_revoke_ = false;
}
inline bool ComplianceAssign::_internal_assign_revoke() const {
  return assign_revoke_;
}
inline bool ComplianceAssign::assign_revoke() const {
  // @@protoc_insertion_point(field_get:zera_txn.ComplianceAssign.assign_revoke)
  return _internal_assign_revoke();
}
inline void ComplianceAssign::_internal_set_assign_revoke(bool value) {
  
  assign_revoke_ = value;
}
inline void ComplianceAssign::set_assign_revoke(bool value) {
  _internal_set_assign_revoke(value);
  // @@protoc_insertion_point(field_set:zera_txn.ComplianceAssign.assign_revoke)
}

// -------------------------------------------------------------------

// ComplianceTXN

// .zera_txn.BaseTXN base = 1;
inline bool ComplianceTXN::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool ComplianceTXN::has_base() const {
  return _internal_has_base();
}
inline void ComplianceTXN::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::zera_txn::BaseTXN& ComplianceTXN::_internal_base() const {
  const ::zera_txn::BaseTXN* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::BaseTXN*>(
      &::zera_txn::_BaseTXN_default_instance_);
}
inline const ::zera_txn::BaseTXN& ComplianceTXN::base() const {
  // @@protoc_insertion_point(field_get:zera_txn.ComplianceTXN.base)
  return _internal_base();
}
inline void ComplianceTXN::unsafe_arena_set_allocated_base(
    ::zera_txn::BaseTXN* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ComplianceTXN.base)
}
inline ::zera_txn::BaseTXN* ComplianceTXN::release_base() {
  auto temp = unsafe_arena_release_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::BaseTXN* ComplianceTXN::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:zera_txn.ComplianceTXN.base)
  
  ::zera_txn::BaseTXN* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::zera_txn::BaseTXN* ComplianceTXN::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::BaseTXN>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::zera_txn::BaseTXN* ComplianceTXN::mutable_base() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ComplianceTXN.base)
  return _internal_mutable_base();
}
inline void ComplianceTXN::set_allocated_base(::zera_txn::BaseTXN* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ComplianceTXN.base)
}

// string contract_id = 2;
inline void ComplianceTXN::clear_contract_id() {
  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ComplianceTXN::contract_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.ComplianceTXN.contract_id)
  return _internal_contract_id();
}
inline void ComplianceTXN::set_contract_id(const std::string& value) {
  _internal_set_contract_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.ComplianceTXN.contract_id)
}
inline std::string* ComplianceTXN::mutable_contract_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ComplianceTXN.contract_id)
  return _internal_mutable_contract_id();
}
inline const std::string& ComplianceTXN::_internal_contract_id() const {
  return contract_id_.Get();
}
inline void ComplianceTXN::_internal_set_contract_id(const std::string& value) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ComplianceTXN::set_contract_id(std::string&& value) {
  
  contract_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.ComplianceTXN.contract_id)
}
inline void ComplianceTXN::set_contract_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.ComplianceTXN.contract_id)
}
inline void ComplianceTXN::set_contract_id(const char* value,
    size_t size) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.ComplianceTXN.contract_id)
}
inline std::string* ComplianceTXN::_internal_mutable_contract_id() {
  
  return contract_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ComplianceTXN::release_contract_id() {
  // @@protoc_insertion_point(field_release:zera_txn.ComplianceTXN.contract_id)
  return contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ComplianceTXN::set_allocated_contract_id(std::string* contract_id) {
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ComplianceTXN.contract_id)
}
inline std::string* ComplianceTXN::unsafe_arena_release_contract_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.ComplianceTXN.contract_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contract_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ComplianceTXN::unsafe_arena_set_allocated_contract_id(
    std::string* contract_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contract_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ComplianceTXN.contract_id)
}

// repeated .zera_txn.ComplianceAssign compliance = 3;
inline int ComplianceTXN::_internal_compliance_size() const {
  return compliance_.size();
}
inline int ComplianceTXN::compliance_size() const {
  return _internal_compliance_size();
}
inline void ComplianceTXN::clear_compliance() {
  compliance_.Clear();
}
inline ::zera_txn::ComplianceAssign* ComplianceTXN::mutable_compliance(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.ComplianceTXN.compliance)
  return compliance_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ComplianceAssign >*
ComplianceTXN::mutable_compliance() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.ComplianceTXN.compliance)
  return &compliance_;
}
inline const ::zera_txn::ComplianceAssign& ComplianceTXN::_internal_compliance(int index) const {
  return compliance_.Get(index);
}
inline const ::zera_txn::ComplianceAssign& ComplianceTXN::compliance(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.ComplianceTXN.compliance)
  return _internal_compliance(index);
}
inline ::zera_txn::ComplianceAssign* ComplianceTXN::_internal_add_compliance() {
  return compliance_.Add();
}
inline ::zera_txn::ComplianceAssign* ComplianceTXN::add_compliance() {
  // @@protoc_insertion_point(field_add:zera_txn.ComplianceTXN.compliance)
  return _internal_add_compliance();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ComplianceAssign >&
ComplianceTXN::compliance() const {
  // @@protoc_insertion_point(field_list:zera_txn.ComplianceTXN.compliance)
  return compliance_;
}

// -------------------------------------------------------------------

// Wallets

// bytes address = 1;
inline void Wallets::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Wallets::address() const {
  // @@protoc_insertion_point(field_get:zera_txn.Wallets.address)
  return _internal_address();
}
inline void Wallets::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:zera_txn.Wallets.address)
}
inline std::string* Wallets::mutable_address() {
  // @@protoc_insertion_point(field_mutable:zera_txn.Wallets.address)
  return _internal_mutable_address();
}
inline const std::string& Wallets::_internal_address() const {
  return address_.Get();
}
inline void Wallets::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Wallets::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.Wallets.address)
}
inline void Wallets::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.Wallets.address)
}
inline void Wallets::set_address(const void* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.Wallets.address)
}
inline std::string* Wallets::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Wallets::release_address() {
  // @@protoc_insertion_point(field_release:zera_txn.Wallets.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Wallets::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.Wallets.address)
}
inline std::string* Wallets::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.Wallets.address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Wallets::unsafe_arena_set_allocated_address(
    std::string* address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (address != nullptr) {
    
  } else {
    
  }
  address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.Wallets.address)
}

// string amount = 2;
inline void Wallets::clear_amount() {
  amount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Wallets::amount() const {
  // @@protoc_insertion_point(field_get:zera_txn.Wallets.amount)
  return _internal_amount();
}
inline void Wallets::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:zera_txn.Wallets.amount)
}
inline std::string* Wallets::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:zera_txn.Wallets.amount)
  return _internal_mutable_amount();
}
inline const std::string& Wallets::_internal_amount() const {
  return amount_.Get();
}
inline void Wallets::_internal_set_amount(const std::string& value) {
  
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Wallets::set_amount(std::string&& value) {
  
  amount_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.Wallets.amount)
}
inline void Wallets::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.Wallets.amount)
}
inline void Wallets::set_amount(const char* value,
    size_t size) {
  
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.Wallets.amount)
}
inline std::string* Wallets::_internal_mutable_amount() {
  
  return amount_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Wallets::release_amount() {
  // @@protoc_insertion_point(field_release:zera_txn.Wallets.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Wallets::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.Wallets.amount)
}
inline std::string* Wallets::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.Wallets.amount)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return amount_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Wallets::unsafe_arena_set_allocated_amount(
    std::string* amount) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      amount, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.Wallets.amount)
}

// -------------------------------------------------------------------

// QuashTXN

// .zera_txn.BaseTXN base = 1;
inline bool QuashTXN::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool QuashTXN::has_base() const {
  return _internal_has_base();
}
inline void QuashTXN::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::zera_txn::BaseTXN& QuashTXN::_internal_base() const {
  const ::zera_txn::BaseTXN* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::BaseTXN*>(
      &::zera_txn::_BaseTXN_default_instance_);
}
inline const ::zera_txn::BaseTXN& QuashTXN::base() const {
  // @@protoc_insertion_point(field_get:zera_txn.QuashTXN.base)
  return _internal_base();
}
inline void QuashTXN::unsafe_arena_set_allocated_base(
    ::zera_txn::BaseTXN* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.QuashTXN.base)
}
inline ::zera_txn::BaseTXN* QuashTXN::release_base() {
  auto temp = unsafe_arena_release_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::BaseTXN* QuashTXN::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:zera_txn.QuashTXN.base)
  
  ::zera_txn::BaseTXN* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::zera_txn::BaseTXN* QuashTXN::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::BaseTXN>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::zera_txn::BaseTXN* QuashTXN::mutable_base() {
  // @@protoc_insertion_point(field_mutable:zera_txn.QuashTXN.base)
  return _internal_mutable_base();
}
inline void QuashTXN::set_allocated_base(::zera_txn::BaseTXN* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.QuashTXN.base)
}

// string contract_id = 2;
inline void QuashTXN::clear_contract_id() {
  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QuashTXN::contract_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.QuashTXN.contract_id)
  return _internal_contract_id();
}
inline void QuashTXN::set_contract_id(const std::string& value) {
  _internal_set_contract_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.QuashTXN.contract_id)
}
inline std::string* QuashTXN::mutable_contract_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.QuashTXN.contract_id)
  return _internal_mutable_contract_id();
}
inline const std::string& QuashTXN::_internal_contract_id() const {
  return contract_id_.Get();
}
inline void QuashTXN::_internal_set_contract_id(const std::string& value) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QuashTXN::set_contract_id(std::string&& value) {
  
  contract_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.QuashTXN.contract_id)
}
inline void QuashTXN::set_contract_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.QuashTXN.contract_id)
}
inline void QuashTXN::set_contract_id(const char* value,
    size_t size) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.QuashTXN.contract_id)
}
inline std::string* QuashTXN::_internal_mutable_contract_id() {
  
  return contract_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QuashTXN::release_contract_id() {
  // @@protoc_insertion_point(field_release:zera_txn.QuashTXN.contract_id)
  return contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QuashTXN::set_allocated_contract_id(std::string* contract_id) {
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.QuashTXN.contract_id)
}
inline std::string* QuashTXN::unsafe_arena_release_contract_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.QuashTXN.contract_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contract_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QuashTXN::unsafe_arena_set_allocated_contract_id(
    std::string* contract_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contract_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.QuashTXN.contract_id)
}

// bytes txn_hash = 3;
inline void QuashTXN::clear_txn_hash() {
  txn_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QuashTXN::txn_hash() const {
  // @@protoc_insertion_point(field_get:zera_txn.QuashTXN.txn_hash)
  return _internal_txn_hash();
}
inline void QuashTXN::set_txn_hash(const std::string& value) {
  _internal_set_txn_hash(value);
  // @@protoc_insertion_point(field_set:zera_txn.QuashTXN.txn_hash)
}
inline std::string* QuashTXN::mutable_txn_hash() {
  // @@protoc_insertion_point(field_mutable:zera_txn.QuashTXN.txn_hash)
  return _internal_mutable_txn_hash();
}
inline const std::string& QuashTXN::_internal_txn_hash() const {
  return txn_hash_.Get();
}
inline void QuashTXN::_internal_set_txn_hash(const std::string& value) {
  
  txn_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QuashTXN::set_txn_hash(std::string&& value) {
  
  txn_hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.QuashTXN.txn_hash)
}
inline void QuashTXN::set_txn_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txn_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.QuashTXN.txn_hash)
}
inline void QuashTXN::set_txn_hash(const void* value,
    size_t size) {
  
  txn_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.QuashTXN.txn_hash)
}
inline std::string* QuashTXN::_internal_mutable_txn_hash() {
  
  return txn_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QuashTXN::release_txn_hash() {
  // @@protoc_insertion_point(field_release:zera_txn.QuashTXN.txn_hash)
  return txn_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QuashTXN::set_allocated_txn_hash(std::string* txn_hash) {
  if (txn_hash != nullptr) {
    
  } else {
    
  }
  txn_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txn_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.QuashTXN.txn_hash)
}
inline std::string* QuashTXN::unsafe_arena_release_txn_hash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.QuashTXN.txn_hash)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return txn_hash_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QuashTXN::unsafe_arena_set_allocated_txn_hash(
    std::string* txn_hash) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (txn_hash != nullptr) {
    
  } else {
    
  }
  txn_hash_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      txn_hash, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.QuashTXN.txn_hash)
}

// -------------------------------------------------------------------

// QuashResult

// bytes txn_hash = 1;
inline void QuashResult::clear_txn_hash() {
  txn_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QuashResult::txn_hash() const {
  // @@protoc_insertion_point(field_get:zera_txn.QuashResult.txn_hash)
  return _internal_txn_hash();
}
inline void QuashResult::set_txn_hash(const std::string& value) {
  _internal_set_txn_hash(value);
  // @@protoc_insertion_point(field_set:zera_txn.QuashResult.txn_hash)
}
inline std::string* QuashResult::mutable_txn_hash() {
  // @@protoc_insertion_point(field_mutable:zera_txn.QuashResult.txn_hash)
  return _internal_mutable_txn_hash();
}
inline const std::string& QuashResult::_internal_txn_hash() const {
  return txn_hash_.Get();
}
inline void QuashResult::_internal_set_txn_hash(const std::string& value) {
  
  txn_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QuashResult::set_txn_hash(std::string&& value) {
  
  txn_hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.QuashResult.txn_hash)
}
inline void QuashResult::set_txn_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txn_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.QuashResult.txn_hash)
}
inline void QuashResult::set_txn_hash(const void* value,
    size_t size) {
  
  txn_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.QuashResult.txn_hash)
}
inline std::string* QuashResult::_internal_mutable_txn_hash() {
  
  return txn_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QuashResult::release_txn_hash() {
  // @@protoc_insertion_point(field_release:zera_txn.QuashResult.txn_hash)
  return txn_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QuashResult::set_allocated_txn_hash(std::string* txn_hash) {
  if (txn_hash != nullptr) {
    
  } else {
    
  }
  txn_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txn_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.QuashResult.txn_hash)
}
inline std::string* QuashResult::unsafe_arena_release_txn_hash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.QuashResult.txn_hash)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return txn_hash_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QuashResult::unsafe_arena_set_allocated_txn_hash(
    std::string* txn_hash) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (txn_hash != nullptr) {
    
  } else {
    
  }
  txn_hash_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      txn_hash, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.QuashResult.txn_hash)
}

// repeated .zera_txn.PublicKey public_keys = 2;
inline int QuashResult::_internal_public_keys_size() const {
  return public_keys_.size();
}
inline int QuashResult::public_keys_size() const {
  return _internal_public_keys_size();
}
inline void QuashResult::clear_public_keys() {
  public_keys_.Clear();
}
inline ::zera_txn::PublicKey* QuashResult::mutable_public_keys(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.QuashResult.public_keys)
  return public_keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::PublicKey >*
QuashResult::mutable_public_keys() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.QuashResult.public_keys)
  return &public_keys_;
}
inline const ::zera_txn::PublicKey& QuashResult::_internal_public_keys(int index) const {
  return public_keys_.Get(index);
}
inline const ::zera_txn::PublicKey& QuashResult::public_keys(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.QuashResult.public_keys)
  return _internal_public_keys(index);
}
inline ::zera_txn::PublicKey* QuashResult::_internal_add_public_keys() {
  return public_keys_.Add();
}
inline ::zera_txn::PublicKey* QuashResult::add_public_keys() {
  // @@protoc_insertion_point(field_add:zera_txn.QuashResult.public_keys)
  return _internal_add_public_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::PublicKey >&
QuashResult::public_keys() const {
  // @@protoc_insertion_point(field_list:zera_txn.QuashResult.public_keys)
  return public_keys_;
}

// -------------------------------------------------------------------

// CoinTXN

// .zera_txn.BaseTXN base = 1;
inline bool CoinTXN::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool CoinTXN::has_base() const {
  return _internal_has_base();
}
inline void CoinTXN::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::zera_txn::BaseTXN& CoinTXN::_internal_base() const {
  const ::zera_txn::BaseTXN* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::BaseTXN*>(
      &::zera_txn::_BaseTXN_default_instance_);
}
inline const ::zera_txn::BaseTXN& CoinTXN::base() const {
  // @@protoc_insertion_point(field_get:zera_txn.CoinTXN.base)
  return _internal_base();
}
inline void CoinTXN::unsafe_arena_set_allocated_base(
    ::zera_txn::BaseTXN* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.CoinTXN.base)
}
inline ::zera_txn::BaseTXN* CoinTXN::release_base() {
  auto temp = unsafe_arena_release_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::BaseTXN* CoinTXN::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:zera_txn.CoinTXN.base)
  
  ::zera_txn::BaseTXN* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::zera_txn::BaseTXN* CoinTXN::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::BaseTXN>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::zera_txn::BaseTXN* CoinTXN::mutable_base() {
  // @@protoc_insertion_point(field_mutable:zera_txn.CoinTXN.base)
  return _internal_mutable_base();
}
inline void CoinTXN::set_allocated_base(::zera_txn::BaseTXN* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.CoinTXN.base)
}

// repeated .zera_txn.Transfer transfers = 2;
inline int CoinTXN::_internal_transfers_size() const {
  return transfers_.size();
}
inline int CoinTXN::transfers_size() const {
  return _internal_transfers_size();
}
inline void CoinTXN::clear_transfers() {
  transfers_.Clear();
}
inline ::zera_txn::Transfer* CoinTXN::mutable_transfers(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.CoinTXN.transfers)
  return transfers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::Transfer >*
CoinTXN::mutable_transfers() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.CoinTXN.transfers)
  return &transfers_;
}
inline const ::zera_txn::Transfer& CoinTXN::_internal_transfers(int index) const {
  return transfers_.Get(index);
}
inline const ::zera_txn::Transfer& CoinTXN::transfers(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.CoinTXN.transfers)
  return _internal_transfers(index);
}
inline ::zera_txn::Transfer* CoinTXN::_internal_add_transfers() {
  return transfers_.Add();
}
inline ::zera_txn::Transfer* CoinTXN::add_transfers() {
  // @@protoc_insertion_point(field_add:zera_txn.CoinTXN.transfers)
  return _internal_add_transfers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::Transfer >&
CoinTXN::transfers() const {
  // @@protoc_insertion_point(field_list:zera_txn.CoinTXN.transfers)
  return transfers_;
}

// -------------------------------------------------------------------

// NewCoinTXN

// .zera_txn.BaseTXN base = 1;
inline bool NewCoinTXN::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool NewCoinTXN::has_base() const {
  return _internal_has_base();
}
inline void NewCoinTXN::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::zera_txn::BaseTXN& NewCoinTXN::_internal_base() const {
  const ::zera_txn::BaseTXN* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::BaseTXN*>(
      &::zera_txn::_BaseTXN_default_instance_);
}
inline const ::zera_txn::BaseTXN& NewCoinTXN::base() const {
  // @@protoc_insertion_point(field_get:zera_txn.NewCoinTXN.base)
  return _internal_base();
}
inline void NewCoinTXN::unsafe_arena_set_allocated_base(
    ::zera_txn::BaseTXN* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.NewCoinTXN.base)
}
inline ::zera_txn::BaseTXN* NewCoinTXN::release_base() {
  auto temp = unsafe_arena_release_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::BaseTXN* NewCoinTXN::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:zera_txn.NewCoinTXN.base)
  
  ::zera_txn::BaseTXN* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::zera_txn::BaseTXN* NewCoinTXN::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::BaseTXN>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::zera_txn::BaseTXN* NewCoinTXN::mutable_base() {
  // @@protoc_insertion_point(field_mutable:zera_txn.NewCoinTXN.base)
  return _internal_mutable_base();
}
inline void NewCoinTXN::set_allocated_base(::zera_txn::BaseTXN* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.NewCoinTXN.base)
}

// string contract_id = 2;
inline void NewCoinTXN::clear_contract_id() {
  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NewCoinTXN::contract_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.NewCoinTXN.contract_id)
  return _internal_contract_id();
}
inline void NewCoinTXN::set_contract_id(const std::string& value) {
  _internal_set_contract_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.NewCoinTXN.contract_id)
}
inline std::string* NewCoinTXN::mutable_contract_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.NewCoinTXN.contract_id)
  return _internal_mutable_contract_id();
}
inline const std::string& NewCoinTXN::_internal_contract_id() const {
  return contract_id_.Get();
}
inline void NewCoinTXN::_internal_set_contract_id(const std::string& value) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NewCoinTXN::set_contract_id(std::string&& value) {
  
  contract_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.NewCoinTXN.contract_id)
}
inline void NewCoinTXN::set_contract_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.NewCoinTXN.contract_id)
}
inline void NewCoinTXN::set_contract_id(const char* value,
    size_t size) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.NewCoinTXN.contract_id)
}
inline std::string* NewCoinTXN::_internal_mutable_contract_id() {
  
  return contract_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NewCoinTXN::release_contract_id() {
  // @@protoc_insertion_point(field_release:zera_txn.NewCoinTXN.contract_id)
  return contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewCoinTXN::set_allocated_contract_id(std::string* contract_id) {
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.NewCoinTXN.contract_id)
}
inline std::string* NewCoinTXN::unsafe_arena_release_contract_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.NewCoinTXN.contract_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contract_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NewCoinTXN::unsafe_arena_set_allocated_contract_id(
    std::string* contract_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contract_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.NewCoinTXN.contract_id)
}

// .zera_txn.TransferAuthentication auth = 3;
inline bool NewCoinTXN::_internal_has_auth() const {
  return this != internal_default_instance() && auth_ != nullptr;
}
inline bool NewCoinTXN::has_auth() const {
  return _internal_has_auth();
}
inline void NewCoinTXN::clear_auth() {
  if (GetArena() == nullptr && auth_ != nullptr) {
    delete auth_;
  }
  auth_ = nullptr;
}
inline const ::zera_txn::TransferAuthentication& NewCoinTXN::_internal_auth() const {
  const ::zera_txn::TransferAuthentication* p = auth_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::TransferAuthentication*>(
      &::zera_txn::_TransferAuthentication_default_instance_);
}
inline const ::zera_txn::TransferAuthentication& NewCoinTXN::auth() const {
  // @@protoc_insertion_point(field_get:zera_txn.NewCoinTXN.auth)
  return _internal_auth();
}
inline void NewCoinTXN::unsafe_arena_set_allocated_auth(
    ::zera_txn::TransferAuthentication* auth) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(auth_);
  }
  auth_ = auth;
  if (auth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.NewCoinTXN.auth)
}
inline ::zera_txn::TransferAuthentication* NewCoinTXN::release_auth() {
  auto temp = unsafe_arena_release_auth();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::TransferAuthentication* NewCoinTXN::unsafe_arena_release_auth() {
  // @@protoc_insertion_point(field_release:zera_txn.NewCoinTXN.auth)
  
  ::zera_txn::TransferAuthentication* temp = auth_;
  auth_ = nullptr;
  return temp;
}
inline ::zera_txn::TransferAuthentication* NewCoinTXN::_internal_mutable_auth() {
  
  if (auth_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::TransferAuthentication>(GetArena());
    auth_ = p;
  }
  return auth_;
}
inline ::zera_txn::TransferAuthentication* NewCoinTXN::mutable_auth() {
  // @@protoc_insertion_point(field_mutable:zera_txn.NewCoinTXN.auth)
  return _internal_mutable_auth();
}
inline void NewCoinTXN::set_allocated_auth(::zera_txn::TransferAuthentication* auth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete auth_;
  }
  if (auth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(auth);
    if (message_arena != submessage_arena) {
      auth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth, submessage_arena);
    }
    
  } else {
    
  }
  auth_ = auth;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.NewCoinTXN.auth)
}

// repeated .zera_txn.InputTransfers input_transfers = 4;
inline int NewCoinTXN::_internal_input_transfers_size() const {
  return input_transfers_.size();
}
inline int NewCoinTXN::input_transfers_size() const {
  return _internal_input_transfers_size();
}
inline void NewCoinTXN::clear_input_transfers() {
  input_transfers_.Clear();
}
inline ::zera_txn::InputTransfers* NewCoinTXN::mutable_input_transfers(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.NewCoinTXN.input_transfers)
  return input_transfers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::InputTransfers >*
NewCoinTXN::mutable_input_transfers() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.NewCoinTXN.input_transfers)
  return &input_transfers_;
}
inline const ::zera_txn::InputTransfers& NewCoinTXN::_internal_input_transfers(int index) const {
  return input_transfers_.Get(index);
}
inline const ::zera_txn::InputTransfers& NewCoinTXN::input_transfers(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.NewCoinTXN.input_transfers)
  return _internal_input_transfers(index);
}
inline ::zera_txn::InputTransfers* NewCoinTXN::_internal_add_input_transfers() {
  return input_transfers_.Add();
}
inline ::zera_txn::InputTransfers* NewCoinTXN::add_input_transfers() {
  // @@protoc_insertion_point(field_add:zera_txn.NewCoinTXN.input_transfers)
  return _internal_add_input_transfers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::InputTransfers >&
NewCoinTXN::input_transfers() const {
  // @@protoc_insertion_point(field_list:zera_txn.NewCoinTXN.input_transfers)
  return input_transfers_;
}

// repeated .zera_txn.OutputTransfers output_transfers = 5;
inline int NewCoinTXN::_internal_output_transfers_size() const {
  return output_transfers_.size();
}
inline int NewCoinTXN::output_transfers_size() const {
  return _internal_output_transfers_size();
}
inline void NewCoinTXN::clear_output_transfers() {
  output_transfers_.Clear();
}
inline ::zera_txn::OutputTransfers* NewCoinTXN::mutable_output_transfers(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.NewCoinTXN.output_transfers)
  return output_transfers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::OutputTransfers >*
NewCoinTXN::mutable_output_transfers() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.NewCoinTXN.output_transfers)
  return &output_transfers_;
}
inline const ::zera_txn::OutputTransfers& NewCoinTXN::_internal_output_transfers(int index) const {
  return output_transfers_.Get(index);
}
inline const ::zera_txn::OutputTransfers& NewCoinTXN::output_transfers(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.NewCoinTXN.output_transfers)
  return _internal_output_transfers(index);
}
inline ::zera_txn::OutputTransfers* NewCoinTXN::_internal_add_output_transfers() {
  return output_transfers_.Add();
}
inline ::zera_txn::OutputTransfers* NewCoinTXN::add_output_transfers() {
  // @@protoc_insertion_point(field_add:zera_txn.NewCoinTXN.output_transfers)
  return _internal_add_output_transfers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::OutputTransfers >&
NewCoinTXN::output_transfers() const {
  // @@protoc_insertion_point(field_list:zera_txn.NewCoinTXN.output_transfers)
  return output_transfers_;
}

// string contract_fee_id = 6;
inline bool NewCoinTXN::_internal_has_contract_fee_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NewCoinTXN::has_contract_fee_id() const {
  return _internal_has_contract_fee_id();
}
inline void NewCoinTXN::clear_contract_fee_id() {
  contract_fee_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NewCoinTXN::contract_fee_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.NewCoinTXN.contract_fee_id)
  return _internal_contract_fee_id();
}
inline void NewCoinTXN::set_contract_fee_id(const std::string& value) {
  _internal_set_contract_fee_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.NewCoinTXN.contract_fee_id)
}
inline std::string* NewCoinTXN::mutable_contract_fee_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.NewCoinTXN.contract_fee_id)
  return _internal_mutable_contract_fee_id();
}
inline const std::string& NewCoinTXN::_internal_contract_fee_id() const {
  return contract_fee_id_.Get();
}
inline void NewCoinTXN::_internal_set_contract_fee_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  contract_fee_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NewCoinTXN::set_contract_fee_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  contract_fee_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.NewCoinTXN.contract_fee_id)
}
inline void NewCoinTXN::set_contract_fee_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  contract_fee_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.NewCoinTXN.contract_fee_id)
}
inline void NewCoinTXN::set_contract_fee_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  contract_fee_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.NewCoinTXN.contract_fee_id)
}
inline std::string* NewCoinTXN::_internal_mutable_contract_fee_id() {
  _has_bits_[0] |= 0x00000001u;
  return contract_fee_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NewCoinTXN::release_contract_fee_id() {
  // @@protoc_insertion_point(field_release:zera_txn.NewCoinTXN.contract_fee_id)
  if (!_internal_has_contract_fee_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return contract_fee_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewCoinTXN::set_allocated_contract_fee_id(std::string* contract_fee_id) {
  if (contract_fee_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  contract_fee_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_fee_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.NewCoinTXN.contract_fee_id)
}
inline std::string* NewCoinTXN::unsafe_arena_release_contract_fee_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.NewCoinTXN.contract_fee_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return contract_fee_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NewCoinTXN::unsafe_arena_set_allocated_contract_fee_id(
    std::string* contract_fee_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contract_fee_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  contract_fee_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contract_fee_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.NewCoinTXN.contract_fee_id)
}

// string contract_fee_amount = 7;
inline bool NewCoinTXN::_internal_has_contract_fee_amount() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NewCoinTXN::has_contract_fee_amount() const {
  return _internal_has_contract_fee_amount();
}
inline void NewCoinTXN::clear_contract_fee_amount() {
  contract_fee_amount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NewCoinTXN::contract_fee_amount() const {
  // @@protoc_insertion_point(field_get:zera_txn.NewCoinTXN.contract_fee_amount)
  return _internal_contract_fee_amount();
}
inline void NewCoinTXN::set_contract_fee_amount(const std::string& value) {
  _internal_set_contract_fee_amount(value);
  // @@protoc_insertion_point(field_set:zera_txn.NewCoinTXN.contract_fee_amount)
}
inline std::string* NewCoinTXN::mutable_contract_fee_amount() {
  // @@protoc_insertion_point(field_mutable:zera_txn.NewCoinTXN.contract_fee_amount)
  return _internal_mutable_contract_fee_amount();
}
inline const std::string& NewCoinTXN::_internal_contract_fee_amount() const {
  return contract_fee_amount_.Get();
}
inline void NewCoinTXN::_internal_set_contract_fee_amount(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  contract_fee_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NewCoinTXN::set_contract_fee_amount(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  contract_fee_amount_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.NewCoinTXN.contract_fee_amount)
}
inline void NewCoinTXN::set_contract_fee_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  contract_fee_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.NewCoinTXN.contract_fee_amount)
}
inline void NewCoinTXN::set_contract_fee_amount(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  contract_fee_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.NewCoinTXN.contract_fee_amount)
}
inline std::string* NewCoinTXN::_internal_mutable_contract_fee_amount() {
  _has_bits_[0] |= 0x00000002u;
  return contract_fee_amount_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NewCoinTXN::release_contract_fee_amount() {
  // @@protoc_insertion_point(field_release:zera_txn.NewCoinTXN.contract_fee_amount)
  if (!_internal_has_contract_fee_amount()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return contract_fee_amount_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewCoinTXN::set_allocated_contract_fee_amount(std::string* contract_fee_amount) {
  if (contract_fee_amount != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  contract_fee_amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_fee_amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.NewCoinTXN.contract_fee_amount)
}
inline std::string* NewCoinTXN::unsafe_arena_release_contract_fee_amount() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.NewCoinTXN.contract_fee_amount)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return contract_fee_amount_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NewCoinTXN::unsafe_arena_set_allocated_contract_fee_amount(
    std::string* contract_fee_amount) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contract_fee_amount != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  contract_fee_amount_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contract_fee_amount, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.NewCoinTXN.contract_fee_amount)
}

// -------------------------------------------------------------------

// TransferAuthentication

// repeated .zera_txn.PublicKey public_key = 1;
inline int TransferAuthentication::_internal_public_key_size() const {
  return public_key_.size();
}
inline int TransferAuthentication::public_key_size() const {
  return _internal_public_key_size();
}
inline void TransferAuthentication::clear_public_key() {
  public_key_.Clear();
}
inline ::zera_txn::PublicKey* TransferAuthentication::mutable_public_key(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.TransferAuthentication.public_key)
  return public_key_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::PublicKey >*
TransferAuthentication::mutable_public_key() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.TransferAuthentication.public_key)
  return &public_key_;
}
inline const ::zera_txn::PublicKey& TransferAuthentication::_internal_public_key(int index) const {
  return public_key_.Get(index);
}
inline const ::zera_txn::PublicKey& TransferAuthentication::public_key(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.TransferAuthentication.public_key)
  return _internal_public_key(index);
}
inline ::zera_txn::PublicKey* TransferAuthentication::_internal_add_public_key() {
  return public_key_.Add();
}
inline ::zera_txn::PublicKey* TransferAuthentication::add_public_key() {
  // @@protoc_insertion_point(field_add:zera_txn.TransferAuthentication.public_key)
  return _internal_add_public_key();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::PublicKey >&
TransferAuthentication::public_key() const {
  // @@protoc_insertion_point(field_list:zera_txn.TransferAuthentication.public_key)
  return public_key_;
}

// repeated bytes signature = 2;
inline int TransferAuthentication::_internal_signature_size() const {
  return signature_.size();
}
inline int TransferAuthentication::signature_size() const {
  return _internal_signature_size();
}
inline void TransferAuthentication::clear_signature() {
  signature_.Clear();
}
inline std::string* TransferAuthentication::add_signature() {
  // @@protoc_insertion_point(field_add_mutable:zera_txn.TransferAuthentication.signature)
  return _internal_add_signature();
}
inline const std::string& TransferAuthentication::_internal_signature(int index) const {
  return signature_.Get(index);
}
inline const std::string& TransferAuthentication::signature(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.TransferAuthentication.signature)
  return _internal_signature(index);
}
inline std::string* TransferAuthentication::mutable_signature(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.TransferAuthentication.signature)
  return signature_.Mutable(index);
}
inline void TransferAuthentication::set_signature(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:zera_txn.TransferAuthentication.signature)
  signature_.Mutable(index)->assign(value);
}
inline void TransferAuthentication::set_signature(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:zera_txn.TransferAuthentication.signature)
  signature_.Mutable(index)->assign(std::move(value));
}
inline void TransferAuthentication::set_signature(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signature_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zera_txn.TransferAuthentication.signature)
}
inline void TransferAuthentication::set_signature(int index, const void* value, size_t size) {
  signature_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zera_txn.TransferAuthentication.signature)
}
inline std::string* TransferAuthentication::_internal_add_signature() {
  return signature_.Add();
}
inline void TransferAuthentication::add_signature(const std::string& value) {
  signature_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zera_txn.TransferAuthentication.signature)
}
inline void TransferAuthentication::add_signature(std::string&& value) {
  signature_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zera_txn.TransferAuthentication.signature)
}
inline void TransferAuthentication::add_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signature_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zera_txn.TransferAuthentication.signature)
}
inline void TransferAuthentication::add_signature(const void* value, size_t size) {
  signature_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zera_txn.TransferAuthentication.signature)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TransferAuthentication::signature() const {
  // @@protoc_insertion_point(field_list:zera_txn.TransferAuthentication.signature)
  return signature_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TransferAuthentication::mutable_signature() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.TransferAuthentication.signature)
  return &signature_;
}

// repeated uint64 nonce = 3;
inline int TransferAuthentication::_internal_nonce_size() const {
  return nonce_.size();
}
inline int TransferAuthentication::nonce_size() const {
  return _internal_nonce_size();
}
inline void TransferAuthentication::clear_nonce() {
  nonce_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferAuthentication::_internal_nonce(int index) const {
  return nonce_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferAuthentication::nonce(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.TransferAuthentication.nonce)
  return _internal_nonce(index);
}
inline void TransferAuthentication::set_nonce(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  nonce_.Set(index, value);
  // @@protoc_insertion_point(field_set:zera_txn.TransferAuthentication.nonce)
}
inline void TransferAuthentication::_internal_add_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  nonce_.Add(value);
}
inline void TransferAuthentication::add_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_nonce(value);
  // @@protoc_insertion_point(field_add:zera_txn.TransferAuthentication.nonce)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
TransferAuthentication::_internal_nonce() const {
  return nonce_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
TransferAuthentication::nonce() const {
  // @@protoc_insertion_point(field_list:zera_txn.TransferAuthentication.nonce)
  return _internal_nonce();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
TransferAuthentication::_internal_mutable_nonce() {
  return &nonce_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
TransferAuthentication::mutable_nonce() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.TransferAuthentication.nonce)
  return _internal_mutable_nonce();
}

// -------------------------------------------------------------------

// InputTransfers

// uint64 index = 1;
inline void InputTransfers::clear_index() {
  index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InputTransfers::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InputTransfers::index() const {
  // @@protoc_insertion_point(field_get:zera_txn.InputTransfers.index)
  return _internal_index();
}
inline void InputTransfers::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  index_ = value;
}
inline void InputTransfers::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:zera_txn.InputTransfers.index)
}

// string amount = 2;
inline void InputTransfers::clear_amount() {
  amount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InputTransfers::amount() const {
  // @@protoc_insertion_point(field_get:zera_txn.InputTransfers.amount)
  return _internal_amount();
}
inline void InputTransfers::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:zera_txn.InputTransfers.amount)
}
inline std::string* InputTransfers::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:zera_txn.InputTransfers.amount)
  return _internal_mutable_amount();
}
inline const std::string& InputTransfers::_internal_amount() const {
  return amount_.Get();
}
inline void InputTransfers::_internal_set_amount(const std::string& value) {
  
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InputTransfers::set_amount(std::string&& value) {
  
  amount_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.InputTransfers.amount)
}
inline void InputTransfers::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.InputTransfers.amount)
}
inline void InputTransfers::set_amount(const char* value,
    size_t size) {
  
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.InputTransfers.amount)
}
inline std::string* InputTransfers::_internal_mutable_amount() {
  
  return amount_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InputTransfers::release_amount() {
  // @@protoc_insertion_point(field_release:zera_txn.InputTransfers.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InputTransfers::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.InputTransfers.amount)
}
inline std::string* InputTransfers::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.InputTransfers.amount)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return amount_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InputTransfers::unsafe_arena_set_allocated_amount(
    std::string* amount) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      amount, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.InputTransfers.amount)
}

// uint32 fee_percent = 3;
inline void InputTransfers::clear_fee_percent() {
  fee_percent_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputTransfers::_internal_fee_percent() const {
  return fee_percent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputTransfers::fee_percent() const {
  // @@protoc_insertion_point(field_get:zera_txn.InputTransfers.fee_percent)
  return _internal_fee_percent();
}
inline void InputTransfers::_internal_set_fee_percent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fee_percent_ = value;
}
inline void InputTransfers::set_fee_percent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fee_percent(value);
  // @@protoc_insertion_point(field_set:zera_txn.InputTransfers.fee_percent)
}

// uint32 contract_fee_percent = 4;
inline bool InputTransfers::_internal_has_contract_fee_percent() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InputTransfers::has_contract_fee_percent() const {
  return _internal_has_contract_fee_percent();
}
inline void InputTransfers::clear_contract_fee_percent() {
  contract_fee_percent_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputTransfers::_internal_contract_fee_percent() const {
  return contract_fee_percent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputTransfers::contract_fee_percent() const {
  // @@protoc_insertion_point(field_get:zera_txn.InputTransfers.contract_fee_percent)
  return _internal_contract_fee_percent();
}
inline void InputTransfers::_internal_set_contract_fee_percent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  contract_fee_percent_ = value;
}
inline void InputTransfers::set_contract_fee_percent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_contract_fee_percent(value);
  // @@protoc_insertion_point(field_set:zera_txn.InputTransfers.contract_fee_percent)
}

// -------------------------------------------------------------------

// OutputTransfers

// bytes wallet_address = 1;
inline void OutputTransfers::clear_wallet_address() {
  wallet_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OutputTransfers::wallet_address() const {
  // @@protoc_insertion_point(field_get:zera_txn.OutputTransfers.wallet_address)
  return _internal_wallet_address();
}
inline void OutputTransfers::set_wallet_address(const std::string& value) {
  _internal_set_wallet_address(value);
  // @@protoc_insertion_point(field_set:zera_txn.OutputTransfers.wallet_address)
}
inline std::string* OutputTransfers::mutable_wallet_address() {
  // @@protoc_insertion_point(field_mutable:zera_txn.OutputTransfers.wallet_address)
  return _internal_mutable_wallet_address();
}
inline const std::string& OutputTransfers::_internal_wallet_address() const {
  return wallet_address_.Get();
}
inline void OutputTransfers::_internal_set_wallet_address(const std::string& value) {
  
  wallet_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OutputTransfers::set_wallet_address(std::string&& value) {
  
  wallet_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.OutputTransfers.wallet_address)
}
inline void OutputTransfers::set_wallet_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  wallet_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.OutputTransfers.wallet_address)
}
inline void OutputTransfers::set_wallet_address(const void* value,
    size_t size) {
  
  wallet_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.OutputTransfers.wallet_address)
}
inline std::string* OutputTransfers::_internal_mutable_wallet_address() {
  
  return wallet_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OutputTransfers::release_wallet_address() {
  // @@protoc_insertion_point(field_release:zera_txn.OutputTransfers.wallet_address)
  return wallet_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OutputTransfers::set_allocated_wallet_address(std::string* wallet_address) {
  if (wallet_address != nullptr) {
    
  } else {
    
  }
  wallet_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wallet_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.OutputTransfers.wallet_address)
}
inline std::string* OutputTransfers::unsafe_arena_release_wallet_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.OutputTransfers.wallet_address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return wallet_address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OutputTransfers::unsafe_arena_set_allocated_wallet_address(
    std::string* wallet_address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (wallet_address != nullptr) {
    
  } else {
    
  }
  wallet_address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      wallet_address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.OutputTransfers.wallet_address)
}

// string amount = 2;
inline void OutputTransfers::clear_amount() {
  amount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OutputTransfers::amount() const {
  // @@protoc_insertion_point(field_get:zera_txn.OutputTransfers.amount)
  return _internal_amount();
}
inline void OutputTransfers::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:zera_txn.OutputTransfers.amount)
}
inline std::string* OutputTransfers::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:zera_txn.OutputTransfers.amount)
  return _internal_mutable_amount();
}
inline const std::string& OutputTransfers::_internal_amount() const {
  return amount_.Get();
}
inline void OutputTransfers::_internal_set_amount(const std::string& value) {
  
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OutputTransfers::set_amount(std::string&& value) {
  
  amount_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.OutputTransfers.amount)
}
inline void OutputTransfers::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.OutputTransfers.amount)
}
inline void OutputTransfers::set_amount(const char* value,
    size_t size) {
  
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.OutputTransfers.amount)
}
inline std::string* OutputTransfers::_internal_mutable_amount() {
  
  return amount_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OutputTransfers::release_amount() {
  // @@protoc_insertion_point(field_release:zera_txn.OutputTransfers.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OutputTransfers::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.OutputTransfers.amount)
}
inline std::string* OutputTransfers::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.OutputTransfers.amount)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return amount_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OutputTransfers::unsafe_arena_set_allocated_amount(
    std::string* amount) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      amount, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.OutputTransfers.amount)
}

// string memo = 3;
inline bool OutputTransfers::_internal_has_memo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OutputTransfers::has_memo() const {
  return _internal_has_memo();
}
inline void OutputTransfers::clear_memo() {
  memo_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OutputTransfers::memo() const {
  // @@protoc_insertion_point(field_get:zera_txn.OutputTransfers.memo)
  return _internal_memo();
}
inline void OutputTransfers::set_memo(const std::string& value) {
  _internal_set_memo(value);
  // @@protoc_insertion_point(field_set:zera_txn.OutputTransfers.memo)
}
inline std::string* OutputTransfers::mutable_memo() {
  // @@protoc_insertion_point(field_mutable:zera_txn.OutputTransfers.memo)
  return _internal_mutable_memo();
}
inline const std::string& OutputTransfers::_internal_memo() const {
  return memo_.Get();
}
inline void OutputTransfers::_internal_set_memo(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OutputTransfers::set_memo(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  memo_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.OutputTransfers.memo)
}
inline void OutputTransfers::set_memo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.OutputTransfers.memo)
}
inline void OutputTransfers::set_memo(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.OutputTransfers.memo)
}
inline std::string* OutputTransfers::_internal_mutable_memo() {
  _has_bits_[0] |= 0x00000001u;
  return memo_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OutputTransfers::release_memo() {
  // @@protoc_insertion_point(field_release:zera_txn.OutputTransfers.memo)
  if (!_internal_has_memo()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return memo_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OutputTransfers::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  memo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.OutputTransfers.memo)
}
inline std::string* OutputTransfers::unsafe_arena_release_memo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.OutputTransfers.memo)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return memo_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OutputTransfers::unsafe_arena_set_allocated_memo(
    std::string* memo) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (memo != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  memo_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      memo, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.OutputTransfers.memo)
}

// -------------------------------------------------------------------

// MintTXN

// .zera_txn.BaseTXN base = 1;
inline bool MintTXN::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool MintTXN::has_base() const {
  return _internal_has_base();
}
inline void MintTXN::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::zera_txn::BaseTXN& MintTXN::_internal_base() const {
  const ::zera_txn::BaseTXN* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::BaseTXN*>(
      &::zera_txn::_BaseTXN_default_instance_);
}
inline const ::zera_txn::BaseTXN& MintTXN::base() const {
  // @@protoc_insertion_point(field_get:zera_txn.MintTXN.base)
  return _internal_base();
}
inline void MintTXN::unsafe_arena_set_allocated_base(
    ::zera_txn::BaseTXN* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.MintTXN.base)
}
inline ::zera_txn::BaseTXN* MintTXN::release_base() {
  auto temp = unsafe_arena_release_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::BaseTXN* MintTXN::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:zera_txn.MintTXN.base)
  
  ::zera_txn::BaseTXN* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::zera_txn::BaseTXN* MintTXN::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::BaseTXN>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::zera_txn::BaseTXN* MintTXN::mutable_base() {
  // @@protoc_insertion_point(field_mutable:zera_txn.MintTXN.base)
  return _internal_mutable_base();
}
inline void MintTXN::set_allocated_base(::zera_txn::BaseTXN* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.MintTXN.base)
}

// string contract_id = 2;
inline void MintTXN::clear_contract_id() {
  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MintTXN::contract_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.MintTXN.contract_id)
  return _internal_contract_id();
}
inline void MintTXN::set_contract_id(const std::string& value) {
  _internal_set_contract_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.MintTXN.contract_id)
}
inline std::string* MintTXN::mutable_contract_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.MintTXN.contract_id)
  return _internal_mutable_contract_id();
}
inline const std::string& MintTXN::_internal_contract_id() const {
  return contract_id_.Get();
}
inline void MintTXN::_internal_set_contract_id(const std::string& value) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MintTXN::set_contract_id(std::string&& value) {
  
  contract_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.MintTXN.contract_id)
}
inline void MintTXN::set_contract_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.MintTXN.contract_id)
}
inline void MintTXN::set_contract_id(const char* value,
    size_t size) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.MintTXN.contract_id)
}
inline std::string* MintTXN::_internal_mutable_contract_id() {
  
  return contract_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MintTXN::release_contract_id() {
  // @@protoc_insertion_point(field_release:zera_txn.MintTXN.contract_id)
  return contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MintTXN::set_allocated_contract_id(std::string* contract_id) {
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.MintTXN.contract_id)
}
inline std::string* MintTXN::unsafe_arena_release_contract_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.MintTXN.contract_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contract_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MintTXN::unsafe_arena_set_allocated_contract_id(
    std::string* contract_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contract_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.MintTXN.contract_id)
}

// string amount = 3;
inline void MintTXN::clear_amount() {
  amount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MintTXN::amount() const {
  // @@protoc_insertion_point(field_get:zera_txn.MintTXN.amount)
  return _internal_amount();
}
inline void MintTXN::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:zera_txn.MintTXN.amount)
}
inline std::string* MintTXN::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:zera_txn.MintTXN.amount)
  return _internal_mutable_amount();
}
inline const std::string& MintTXN::_internal_amount() const {
  return amount_.Get();
}
inline void MintTXN::_internal_set_amount(const std::string& value) {
  
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MintTXN::set_amount(std::string&& value) {
  
  amount_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.MintTXN.amount)
}
inline void MintTXN::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.MintTXN.amount)
}
inline void MintTXN::set_amount(const char* value,
    size_t size) {
  
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.MintTXN.amount)
}
inline std::string* MintTXN::_internal_mutable_amount() {
  
  return amount_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MintTXN::release_amount() {
  // @@protoc_insertion_point(field_release:zera_txn.MintTXN.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MintTXN::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.MintTXN.amount)
}
inline std::string* MintTXN::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.MintTXN.amount)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return amount_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MintTXN::unsafe_arena_set_allocated_amount(
    std::string* amount) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      amount, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.MintTXN.amount)
}

// bytes recipient_address = 4;
inline void MintTXN::clear_recipient_address() {
  recipient_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MintTXN::recipient_address() const {
  // @@protoc_insertion_point(field_get:zera_txn.MintTXN.recipient_address)
  return _internal_recipient_address();
}
inline void MintTXN::set_recipient_address(const std::string& value) {
  _internal_set_recipient_address(value);
  // @@protoc_insertion_point(field_set:zera_txn.MintTXN.recipient_address)
}
inline std::string* MintTXN::mutable_recipient_address() {
  // @@protoc_insertion_point(field_mutable:zera_txn.MintTXN.recipient_address)
  return _internal_mutable_recipient_address();
}
inline const std::string& MintTXN::_internal_recipient_address() const {
  return recipient_address_.Get();
}
inline void MintTXN::_internal_set_recipient_address(const std::string& value) {
  
  recipient_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MintTXN::set_recipient_address(std::string&& value) {
  
  recipient_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.MintTXN.recipient_address)
}
inline void MintTXN::set_recipient_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recipient_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.MintTXN.recipient_address)
}
inline void MintTXN::set_recipient_address(const void* value,
    size_t size) {
  
  recipient_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.MintTXN.recipient_address)
}
inline std::string* MintTXN::_internal_mutable_recipient_address() {
  
  return recipient_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MintTXN::release_recipient_address() {
  // @@protoc_insertion_point(field_release:zera_txn.MintTXN.recipient_address)
  return recipient_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MintTXN::set_allocated_recipient_address(std::string* recipient_address) {
  if (recipient_address != nullptr) {
    
  } else {
    
  }
  recipient_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recipient_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.MintTXN.recipient_address)
}
inline std::string* MintTXN::unsafe_arena_release_recipient_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.MintTXN.recipient_address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return recipient_address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MintTXN::unsafe_arena_set_allocated_recipient_address(
    std::string* recipient_address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (recipient_address != nullptr) {
    
  } else {
    
  }
  recipient_address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      recipient_address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.MintTXN.recipient_address)
}

// -------------------------------------------------------------------

// NFTTXN

// .zera_txn.BaseTXN base = 1;
inline bool NFTTXN::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool NFTTXN::has_base() const {
  return _internal_has_base();
}
inline void NFTTXN::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::zera_txn::BaseTXN& NFTTXN::_internal_base() const {
  const ::zera_txn::BaseTXN* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::BaseTXN*>(
      &::zera_txn::_BaseTXN_default_instance_);
}
inline const ::zera_txn::BaseTXN& NFTTXN::base() const {
  // @@protoc_insertion_point(field_get:zera_txn.NFTTXN.base)
  return _internal_base();
}
inline void NFTTXN::unsafe_arena_set_allocated_base(
    ::zera_txn::BaseTXN* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.NFTTXN.base)
}
inline ::zera_txn::BaseTXN* NFTTXN::release_base() {
  auto temp = unsafe_arena_release_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::BaseTXN* NFTTXN::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:zera_txn.NFTTXN.base)
  
  ::zera_txn::BaseTXN* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::zera_txn::BaseTXN* NFTTXN::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::BaseTXN>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::zera_txn::BaseTXN* NFTTXN::mutable_base() {
  // @@protoc_insertion_point(field_mutable:zera_txn.NFTTXN.base)
  return _internal_mutable_base();
}
inline void NFTTXN::set_allocated_base(::zera_txn::BaseTXN* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.NFTTXN.base)
}

// string contract_id = 2;
inline void NFTTXN::clear_contract_id() {
  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NFTTXN::contract_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.NFTTXN.contract_id)
  return _internal_contract_id();
}
inline void NFTTXN::set_contract_id(const std::string& value) {
  _internal_set_contract_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.NFTTXN.contract_id)
}
inline std::string* NFTTXN::mutable_contract_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.NFTTXN.contract_id)
  return _internal_mutable_contract_id();
}
inline const std::string& NFTTXN::_internal_contract_id() const {
  return contract_id_.Get();
}
inline void NFTTXN::_internal_set_contract_id(const std::string& value) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NFTTXN::set_contract_id(std::string&& value) {
  
  contract_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.NFTTXN.contract_id)
}
inline void NFTTXN::set_contract_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.NFTTXN.contract_id)
}
inline void NFTTXN::set_contract_id(const char* value,
    size_t size) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.NFTTXN.contract_id)
}
inline std::string* NFTTXN::_internal_mutable_contract_id() {
  
  return contract_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NFTTXN::release_contract_id() {
  // @@protoc_insertion_point(field_release:zera_txn.NFTTXN.contract_id)
  return contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NFTTXN::set_allocated_contract_id(std::string* contract_id) {
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.NFTTXN.contract_id)
}
inline std::string* NFTTXN::unsafe_arena_release_contract_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.NFTTXN.contract_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contract_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NFTTXN::unsafe_arena_set_allocated_contract_id(
    std::string* contract_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contract_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.NFTTXN.contract_id)
}

// string item_id = 3;
inline void NFTTXN::clear_item_id() {
  item_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NFTTXN::item_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.NFTTXN.item_id)
  return _internal_item_id();
}
inline void NFTTXN::set_item_id(const std::string& value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.NFTTXN.item_id)
}
inline std::string* NFTTXN::mutable_item_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.NFTTXN.item_id)
  return _internal_mutable_item_id();
}
inline const std::string& NFTTXN::_internal_item_id() const {
  return item_id_.Get();
}
inline void NFTTXN::_internal_set_item_id(const std::string& value) {
  
  item_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NFTTXN::set_item_id(std::string&& value) {
  
  item_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.NFTTXN.item_id)
}
inline void NFTTXN::set_item_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  item_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.NFTTXN.item_id)
}
inline void NFTTXN::set_item_id(const char* value,
    size_t size) {
  
  item_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.NFTTXN.item_id)
}
inline std::string* NFTTXN::_internal_mutable_item_id() {
  
  return item_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NFTTXN::release_item_id() {
  // @@protoc_insertion_point(field_release:zera_txn.NFTTXN.item_id)
  return item_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NFTTXN::set_allocated_item_id(std::string* item_id) {
  if (item_id != nullptr) {
    
  } else {
    
  }
  item_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), item_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.NFTTXN.item_id)
}
inline std::string* NFTTXN::unsafe_arena_release_item_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.NFTTXN.item_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return item_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NFTTXN::unsafe_arena_set_allocated_item_id(
    std::string* item_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (item_id != nullptr) {
    
  } else {
    
  }
  item_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      item_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.NFTTXN.item_id)
}

// bytes recipient_address = 4;
inline void NFTTXN::clear_recipient_address() {
  recipient_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NFTTXN::recipient_address() const {
  // @@protoc_insertion_point(field_get:zera_txn.NFTTXN.recipient_address)
  return _internal_recipient_address();
}
inline void NFTTXN::set_recipient_address(const std::string& value) {
  _internal_set_recipient_address(value);
  // @@protoc_insertion_point(field_set:zera_txn.NFTTXN.recipient_address)
}
inline std::string* NFTTXN::mutable_recipient_address() {
  // @@protoc_insertion_point(field_mutable:zera_txn.NFTTXN.recipient_address)
  return _internal_mutable_recipient_address();
}
inline const std::string& NFTTXN::_internal_recipient_address() const {
  return recipient_address_.Get();
}
inline void NFTTXN::_internal_set_recipient_address(const std::string& value) {
  
  recipient_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NFTTXN::set_recipient_address(std::string&& value) {
  
  recipient_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.NFTTXN.recipient_address)
}
inline void NFTTXN::set_recipient_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recipient_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.NFTTXN.recipient_address)
}
inline void NFTTXN::set_recipient_address(const void* value,
    size_t size) {
  
  recipient_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.NFTTXN.recipient_address)
}
inline std::string* NFTTXN::_internal_mutable_recipient_address() {
  
  return recipient_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NFTTXN::release_recipient_address() {
  // @@protoc_insertion_point(field_release:zera_txn.NFTTXN.recipient_address)
  return recipient_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NFTTXN::set_allocated_recipient_address(std::string* recipient_address) {
  if (recipient_address != nullptr) {
    
  } else {
    
  }
  recipient_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recipient_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.NFTTXN.recipient_address)
}
inline std::string* NFTTXN::unsafe_arena_release_recipient_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.NFTTXN.recipient_address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return recipient_address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NFTTXN::unsafe_arena_set_allocated_recipient_address(
    std::string* recipient_address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (recipient_address != nullptr) {
    
  } else {
    
  }
  recipient_address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      recipient_address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.NFTTXN.recipient_address)
}

// string contract_fee_amount = 5;
inline bool NFTTXN::_internal_has_contract_fee_amount() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NFTTXN::has_contract_fee_amount() const {
  return _internal_has_contract_fee_amount();
}
inline void NFTTXN::clear_contract_fee_amount() {
  contract_fee_amount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NFTTXN::contract_fee_amount() const {
  // @@protoc_insertion_point(field_get:zera_txn.NFTTXN.contract_fee_amount)
  return _internal_contract_fee_amount();
}
inline void NFTTXN::set_contract_fee_amount(const std::string& value) {
  _internal_set_contract_fee_amount(value);
  // @@protoc_insertion_point(field_set:zera_txn.NFTTXN.contract_fee_amount)
}
inline std::string* NFTTXN::mutable_contract_fee_amount() {
  // @@protoc_insertion_point(field_mutable:zera_txn.NFTTXN.contract_fee_amount)
  return _internal_mutable_contract_fee_amount();
}
inline const std::string& NFTTXN::_internal_contract_fee_amount() const {
  return contract_fee_amount_.Get();
}
inline void NFTTXN::_internal_set_contract_fee_amount(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  contract_fee_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NFTTXN::set_contract_fee_amount(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  contract_fee_amount_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.NFTTXN.contract_fee_amount)
}
inline void NFTTXN::set_contract_fee_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  contract_fee_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.NFTTXN.contract_fee_amount)
}
inline void NFTTXN::set_contract_fee_amount(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  contract_fee_amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.NFTTXN.contract_fee_amount)
}
inline std::string* NFTTXN::_internal_mutable_contract_fee_amount() {
  _has_bits_[0] |= 0x00000001u;
  return contract_fee_amount_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NFTTXN::release_contract_fee_amount() {
  // @@protoc_insertion_point(field_release:zera_txn.NFTTXN.contract_fee_amount)
  if (!_internal_has_contract_fee_amount()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return contract_fee_amount_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NFTTXN::set_allocated_contract_fee_amount(std::string* contract_fee_amount) {
  if (contract_fee_amount != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  contract_fee_amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_fee_amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.NFTTXN.contract_fee_amount)
}
inline std::string* NFTTXN::unsafe_arena_release_contract_fee_amount() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.NFTTXN.contract_fee_amount)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return contract_fee_amount_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NFTTXN::unsafe_arena_set_allocated_contract_fee_amount(
    std::string* contract_fee_amount) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contract_fee_amount != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  contract_fee_amount_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contract_fee_amount, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.NFTTXN.contract_fee_amount)
}

// string contract_fee_id = 6;
inline bool NFTTXN::_internal_has_contract_fee_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NFTTXN::has_contract_fee_id() const {
  return _internal_has_contract_fee_id();
}
inline void NFTTXN::clear_contract_fee_id() {
  contract_fee_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NFTTXN::contract_fee_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.NFTTXN.contract_fee_id)
  return _internal_contract_fee_id();
}
inline void NFTTXN::set_contract_fee_id(const std::string& value) {
  _internal_set_contract_fee_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.NFTTXN.contract_fee_id)
}
inline std::string* NFTTXN::mutable_contract_fee_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.NFTTXN.contract_fee_id)
  return _internal_mutable_contract_fee_id();
}
inline const std::string& NFTTXN::_internal_contract_fee_id() const {
  return contract_fee_id_.Get();
}
inline void NFTTXN::_internal_set_contract_fee_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  contract_fee_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NFTTXN::set_contract_fee_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  contract_fee_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.NFTTXN.contract_fee_id)
}
inline void NFTTXN::set_contract_fee_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  contract_fee_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.NFTTXN.contract_fee_id)
}
inline void NFTTXN::set_contract_fee_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  contract_fee_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.NFTTXN.contract_fee_id)
}
inline std::string* NFTTXN::_internal_mutable_contract_fee_id() {
  _has_bits_[0] |= 0x00000002u;
  return contract_fee_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NFTTXN::release_contract_fee_id() {
  // @@protoc_insertion_point(field_release:zera_txn.NFTTXN.contract_fee_id)
  if (!_internal_has_contract_fee_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return contract_fee_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NFTTXN::set_allocated_contract_fee_id(std::string* contract_fee_id) {
  if (contract_fee_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  contract_fee_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_fee_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.NFTTXN.contract_fee_id)
}
inline std::string* NFTTXN::unsafe_arena_release_contract_fee_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.NFTTXN.contract_fee_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return contract_fee_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NFTTXN::unsafe_arena_set_allocated_contract_fee_id(
    std::string* contract_fee_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contract_fee_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  contract_fee_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contract_fee_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.NFTTXN.contract_fee_id)
}

// -------------------------------------------------------------------

// ItemizedMintTXN

// .zera_txn.BaseTXN base = 1;
inline bool ItemizedMintTXN::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool ItemizedMintTXN::has_base() const {
  return _internal_has_base();
}
inline void ItemizedMintTXN::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::zera_txn::BaseTXN& ItemizedMintTXN::_internal_base() const {
  const ::zera_txn::BaseTXN* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::BaseTXN*>(
      &::zera_txn::_BaseTXN_default_instance_);
}
inline const ::zera_txn::BaseTXN& ItemizedMintTXN::base() const {
  // @@protoc_insertion_point(field_get:zera_txn.ItemizedMintTXN.base)
  return _internal_base();
}
inline void ItemizedMintTXN::unsafe_arena_set_allocated_base(
    ::zera_txn::BaseTXN* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ItemizedMintTXN.base)
}
inline ::zera_txn::BaseTXN* ItemizedMintTXN::release_base() {
  auto temp = unsafe_arena_release_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::BaseTXN* ItemizedMintTXN::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:zera_txn.ItemizedMintTXN.base)
  
  ::zera_txn::BaseTXN* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::zera_txn::BaseTXN* ItemizedMintTXN::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::BaseTXN>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::zera_txn::BaseTXN* ItemizedMintTXN::mutable_base() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ItemizedMintTXN.base)
  return _internal_mutable_base();
}
inline void ItemizedMintTXN::set_allocated_base(::zera_txn::BaseTXN* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ItemizedMintTXN.base)
}

// string contract_id = 2;
inline void ItemizedMintTXN::clear_contract_id() {
  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ItemizedMintTXN::contract_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.ItemizedMintTXN.contract_id)
  return _internal_contract_id();
}
inline void ItemizedMintTXN::set_contract_id(const std::string& value) {
  _internal_set_contract_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.ItemizedMintTXN.contract_id)
}
inline std::string* ItemizedMintTXN::mutable_contract_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ItemizedMintTXN.contract_id)
  return _internal_mutable_contract_id();
}
inline const std::string& ItemizedMintTXN::_internal_contract_id() const {
  return contract_id_.Get();
}
inline void ItemizedMintTXN::_internal_set_contract_id(const std::string& value) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ItemizedMintTXN::set_contract_id(std::string&& value) {
  
  contract_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.ItemizedMintTXN.contract_id)
}
inline void ItemizedMintTXN::set_contract_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.ItemizedMintTXN.contract_id)
}
inline void ItemizedMintTXN::set_contract_id(const char* value,
    size_t size) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.ItemizedMintTXN.contract_id)
}
inline std::string* ItemizedMintTXN::_internal_mutable_contract_id() {
  
  return contract_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ItemizedMintTXN::release_contract_id() {
  // @@protoc_insertion_point(field_release:zera_txn.ItemizedMintTXN.contract_id)
  return contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ItemizedMintTXN::set_allocated_contract_id(std::string* contract_id) {
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ItemizedMintTXN.contract_id)
}
inline std::string* ItemizedMintTXN::unsafe_arena_release_contract_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.ItemizedMintTXN.contract_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contract_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ItemizedMintTXN::unsafe_arena_set_allocated_contract_id(
    std::string* contract_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contract_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ItemizedMintTXN.contract_id)
}

// string item_id = 3;
inline void ItemizedMintTXN::clear_item_id() {
  item_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ItemizedMintTXN::item_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.ItemizedMintTXN.item_id)
  return _internal_item_id();
}
inline void ItemizedMintTXN::set_item_id(const std::string& value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.ItemizedMintTXN.item_id)
}
inline std::string* ItemizedMintTXN::mutable_item_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ItemizedMintTXN.item_id)
  return _internal_mutable_item_id();
}
inline const std::string& ItemizedMintTXN::_internal_item_id() const {
  return item_id_.Get();
}
inline void ItemizedMintTXN::_internal_set_item_id(const std::string& value) {
  
  item_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ItemizedMintTXN::set_item_id(std::string&& value) {
  
  item_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.ItemizedMintTXN.item_id)
}
inline void ItemizedMintTXN::set_item_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  item_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.ItemizedMintTXN.item_id)
}
inline void ItemizedMintTXN::set_item_id(const char* value,
    size_t size) {
  
  item_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.ItemizedMintTXN.item_id)
}
inline std::string* ItemizedMintTXN::_internal_mutable_item_id() {
  
  return item_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ItemizedMintTXN::release_item_id() {
  // @@protoc_insertion_point(field_release:zera_txn.ItemizedMintTXN.item_id)
  return item_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ItemizedMintTXN::set_allocated_item_id(std::string* item_id) {
  if (item_id != nullptr) {
    
  } else {
    
  }
  item_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), item_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ItemizedMintTXN.item_id)
}
inline std::string* ItemizedMintTXN::unsafe_arena_release_item_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.ItemizedMintTXN.item_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return item_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ItemizedMintTXN::unsafe_arena_set_allocated_item_id(
    std::string* item_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (item_id != nullptr) {
    
  } else {
    
  }
  item_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      item_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ItemizedMintTXN.item_id)
}

// bytes recipient_address = 4;
inline void ItemizedMintTXN::clear_recipient_address() {
  recipient_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ItemizedMintTXN::recipient_address() const {
  // @@protoc_insertion_point(field_get:zera_txn.ItemizedMintTXN.recipient_address)
  return _internal_recipient_address();
}
inline void ItemizedMintTXN::set_recipient_address(const std::string& value) {
  _internal_set_recipient_address(value);
  // @@protoc_insertion_point(field_set:zera_txn.ItemizedMintTXN.recipient_address)
}
inline std::string* ItemizedMintTXN::mutable_recipient_address() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ItemizedMintTXN.recipient_address)
  return _internal_mutable_recipient_address();
}
inline const std::string& ItemizedMintTXN::_internal_recipient_address() const {
  return recipient_address_.Get();
}
inline void ItemizedMintTXN::_internal_set_recipient_address(const std::string& value) {
  
  recipient_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ItemizedMintTXN::set_recipient_address(std::string&& value) {
  
  recipient_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.ItemizedMintTXN.recipient_address)
}
inline void ItemizedMintTXN::set_recipient_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recipient_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.ItemizedMintTXN.recipient_address)
}
inline void ItemizedMintTXN::set_recipient_address(const void* value,
    size_t size) {
  
  recipient_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.ItemizedMintTXN.recipient_address)
}
inline std::string* ItemizedMintTXN::_internal_mutable_recipient_address() {
  
  return recipient_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ItemizedMintTXN::release_recipient_address() {
  // @@protoc_insertion_point(field_release:zera_txn.ItemizedMintTXN.recipient_address)
  return recipient_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ItemizedMintTXN::set_allocated_recipient_address(std::string* recipient_address) {
  if (recipient_address != nullptr) {
    
  } else {
    
  }
  recipient_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recipient_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ItemizedMintTXN.recipient_address)
}
inline std::string* ItemizedMintTXN::unsafe_arena_release_recipient_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.ItemizedMintTXN.recipient_address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return recipient_address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ItemizedMintTXN::unsafe_arena_set_allocated_recipient_address(
    std::string* recipient_address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (recipient_address != nullptr) {
    
  } else {
    
  }
  recipient_address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      recipient_address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ItemizedMintTXN.recipient_address)
}

// string voting_weight = 5;
inline bool ItemizedMintTXN::_internal_has_voting_weight() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ItemizedMintTXN::has_voting_weight() const {
  return _internal_has_voting_weight();
}
inline void ItemizedMintTXN::clear_voting_weight() {
  voting_weight_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ItemizedMintTXN::voting_weight() const {
  // @@protoc_insertion_point(field_get:zera_txn.ItemizedMintTXN.voting_weight)
  return _internal_voting_weight();
}
inline void ItemizedMintTXN::set_voting_weight(const std::string& value) {
  _internal_set_voting_weight(value);
  // @@protoc_insertion_point(field_set:zera_txn.ItemizedMintTXN.voting_weight)
}
inline std::string* ItemizedMintTXN::mutable_voting_weight() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ItemizedMintTXN.voting_weight)
  return _internal_mutable_voting_weight();
}
inline const std::string& ItemizedMintTXN::_internal_voting_weight() const {
  return voting_weight_.Get();
}
inline void ItemizedMintTXN::_internal_set_voting_weight(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  voting_weight_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ItemizedMintTXN::set_voting_weight(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  voting_weight_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.ItemizedMintTXN.voting_weight)
}
inline void ItemizedMintTXN::set_voting_weight(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  voting_weight_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.ItemizedMintTXN.voting_weight)
}
inline void ItemizedMintTXN::set_voting_weight(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  voting_weight_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.ItemizedMintTXN.voting_weight)
}
inline std::string* ItemizedMintTXN::_internal_mutable_voting_weight() {
  _has_bits_[0] |= 0x00000001u;
  return voting_weight_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ItemizedMintTXN::release_voting_weight() {
  // @@protoc_insertion_point(field_release:zera_txn.ItemizedMintTXN.voting_weight)
  if (!_internal_has_voting_weight()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return voting_weight_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ItemizedMintTXN::set_allocated_voting_weight(std::string* voting_weight) {
  if (voting_weight != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  voting_weight_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), voting_weight,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ItemizedMintTXN.voting_weight)
}
inline std::string* ItemizedMintTXN::unsafe_arena_release_voting_weight() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.ItemizedMintTXN.voting_weight)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return voting_weight_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ItemizedMintTXN::unsafe_arena_set_allocated_voting_weight(
    std::string* voting_weight) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (voting_weight != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  voting_weight_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      voting_weight, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ItemizedMintTXN.voting_weight)
}

// repeated .zera_txn.KeyValuePair parameters = 6;
inline int ItemizedMintTXN::_internal_parameters_size() const {
  return parameters_.size();
}
inline int ItemizedMintTXN::parameters_size() const {
  return _internal_parameters_size();
}
inline void ItemizedMintTXN::clear_parameters() {
  parameters_.Clear();
}
inline ::zera_txn::KeyValuePair* ItemizedMintTXN::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.ItemizedMintTXN.parameters)
  return parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::KeyValuePair >*
ItemizedMintTXN::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.ItemizedMintTXN.parameters)
  return &parameters_;
}
inline const ::zera_txn::KeyValuePair& ItemizedMintTXN::_internal_parameters(int index) const {
  return parameters_.Get(index);
}
inline const ::zera_txn::KeyValuePair& ItemizedMintTXN::parameters(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.ItemizedMintTXN.parameters)
  return _internal_parameters(index);
}
inline ::zera_txn::KeyValuePair* ItemizedMintTXN::_internal_add_parameters() {
  return parameters_.Add();
}
inline ::zera_txn::KeyValuePair* ItemizedMintTXN::add_parameters() {
  // @@protoc_insertion_point(field_add:zera_txn.ItemizedMintTXN.parameters)
  return _internal_add_parameters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::KeyValuePair >&
ItemizedMintTXN::parameters() const {
  // @@protoc_insertion_point(field_list:zera_txn.ItemizedMintTXN.parameters)
  return parameters_;
}

// uint64 expiry = 7;
inline bool ItemizedMintTXN::_internal_has_expiry() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ItemizedMintTXN::has_expiry() const {
  return _internal_has_expiry();
}
inline void ItemizedMintTXN::clear_expiry() {
  expiry_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ItemizedMintTXN::_internal_expiry() const {
  return expiry_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ItemizedMintTXN::expiry() const {
  // @@protoc_insertion_point(field_get:zera_txn.ItemizedMintTXN.expiry)
  return _internal_expiry();
}
inline void ItemizedMintTXN::_internal_set_expiry(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  expiry_ = value;
}
inline void ItemizedMintTXN::set_expiry(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_expiry(value);
  // @@protoc_insertion_point(field_set:zera_txn.ItemizedMintTXN.expiry)
}

// .zera_txn.ItemContractFees contract_fees = 8;
inline bool ItemizedMintTXN::_internal_has_contract_fees() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || contract_fees_ != nullptr);
  return value;
}
inline bool ItemizedMintTXN::has_contract_fees() const {
  return _internal_has_contract_fees();
}
inline void ItemizedMintTXN::clear_contract_fees() {
  if (GetArena() == nullptr && contract_fees_ != nullptr) {
    delete contract_fees_;
  }
  contract_fees_ = nullptr;
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zera_txn::ItemContractFees& ItemizedMintTXN::_internal_contract_fees() const {
  const ::zera_txn::ItemContractFees* p = contract_fees_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::ItemContractFees*>(
      &::zera_txn::_ItemContractFees_default_instance_);
}
inline const ::zera_txn::ItemContractFees& ItemizedMintTXN::contract_fees() const {
  // @@protoc_insertion_point(field_get:zera_txn.ItemizedMintTXN.contract_fees)
  return _internal_contract_fees();
}
inline void ItemizedMintTXN::unsafe_arena_set_allocated_contract_fees(
    ::zera_txn::ItemContractFees* contract_fees) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract_fees_);
  }
  contract_fees_ = contract_fees;
  if (contract_fees) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ItemizedMintTXN.contract_fees)
}
inline ::zera_txn::ItemContractFees* ItemizedMintTXN::release_contract_fees() {
  auto temp = unsafe_arena_release_contract_fees();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::ItemContractFees* ItemizedMintTXN::unsafe_arena_release_contract_fees() {
  // @@protoc_insertion_point(field_release:zera_txn.ItemizedMintTXN.contract_fees)
  _has_bits_[0] &= ~0x00000002u;
  ::zera_txn::ItemContractFees* temp = contract_fees_;
  contract_fees_ = nullptr;
  return temp;
}
inline ::zera_txn::ItemContractFees* ItemizedMintTXN::_internal_mutable_contract_fees() {
  _has_bits_[0] |= 0x00000002u;
  if (contract_fees_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::ItemContractFees>(GetArena());
    contract_fees_ = p;
  }
  return contract_fees_;
}
inline ::zera_txn::ItemContractFees* ItemizedMintTXN::mutable_contract_fees() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ItemizedMintTXN.contract_fees)
  return _internal_mutable_contract_fees();
}
inline void ItemizedMintTXN::set_allocated_contract_fees(::zera_txn::ItemContractFees* contract_fees) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete contract_fees_;
  }
  if (contract_fees) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(contract_fees);
    if (message_arena != submessage_arena) {
      contract_fees = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contract_fees, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  contract_fees_ = contract_fees;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ItemizedMintTXN.contract_fees)
}

// uint64 valid_from = 9;
inline bool ItemizedMintTXN::_internal_has_valid_from() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ItemizedMintTXN::has_valid_from() const {
  return _internal_has_valid_from();
}
inline void ItemizedMintTXN::clear_valid_from() {
  valid_from_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ItemizedMintTXN::_internal_valid_from() const {
  return valid_from_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ItemizedMintTXN::valid_from() const {
  // @@protoc_insertion_point(field_get:zera_txn.ItemizedMintTXN.valid_from)
  return _internal_valid_from();
}
inline void ItemizedMintTXN::_internal_set_valid_from(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  valid_from_ = value;
}
inline void ItemizedMintTXN::set_valid_from(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_valid_from(value);
  // @@protoc_insertion_point(field_set:zera_txn.ItemizedMintTXN.valid_from)
}

// -------------------------------------------------------------------

// ContractUpdateTXN

// .zera_txn.BaseTXN base = 1;
inline bool ContractUpdateTXN::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool ContractUpdateTXN::has_base() const {
  return _internal_has_base();
}
inline void ContractUpdateTXN::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::zera_txn::BaseTXN& ContractUpdateTXN::_internal_base() const {
  const ::zera_txn::BaseTXN* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::BaseTXN*>(
      &::zera_txn::_BaseTXN_default_instance_);
}
inline const ::zera_txn::BaseTXN& ContractUpdateTXN::base() const {
  // @@protoc_insertion_point(field_get:zera_txn.ContractUpdateTXN.base)
  return _internal_base();
}
inline void ContractUpdateTXN::unsafe_arena_set_allocated_base(
    ::zera_txn::BaseTXN* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ContractUpdateTXN.base)
}
inline ::zera_txn::BaseTXN* ContractUpdateTXN::release_base() {
  auto temp = unsafe_arena_release_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::BaseTXN* ContractUpdateTXN::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:zera_txn.ContractUpdateTXN.base)
  
  ::zera_txn::BaseTXN* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::zera_txn::BaseTXN* ContractUpdateTXN::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::BaseTXN>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::zera_txn::BaseTXN* ContractUpdateTXN::mutable_base() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ContractUpdateTXN.base)
  return _internal_mutable_base();
}
inline void ContractUpdateTXN::set_allocated_base(::zera_txn::BaseTXN* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ContractUpdateTXN.base)
}

// string contract_id = 2;
inline void ContractUpdateTXN::clear_contract_id() {
  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContractUpdateTXN::contract_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.ContractUpdateTXN.contract_id)
  return _internal_contract_id();
}
inline void ContractUpdateTXN::set_contract_id(const std::string& value) {
  _internal_set_contract_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.ContractUpdateTXN.contract_id)
}
inline std::string* ContractUpdateTXN::mutable_contract_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ContractUpdateTXN.contract_id)
  return _internal_mutable_contract_id();
}
inline const std::string& ContractUpdateTXN::_internal_contract_id() const {
  return contract_id_.Get();
}
inline void ContractUpdateTXN::_internal_set_contract_id(const std::string& value) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractUpdateTXN::set_contract_id(std::string&& value) {
  
  contract_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.ContractUpdateTXN.contract_id)
}
inline void ContractUpdateTXN::set_contract_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.ContractUpdateTXN.contract_id)
}
inline void ContractUpdateTXN::set_contract_id(const char* value,
    size_t size) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.ContractUpdateTXN.contract_id)
}
inline std::string* ContractUpdateTXN::_internal_mutable_contract_id() {
  
  return contract_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractUpdateTXN::release_contract_id() {
  // @@protoc_insertion_point(field_release:zera_txn.ContractUpdateTXN.contract_id)
  return contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractUpdateTXN::set_allocated_contract_id(std::string* contract_id) {
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ContractUpdateTXN.contract_id)
}
inline std::string* ContractUpdateTXN::unsafe_arena_release_contract_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.ContractUpdateTXN.contract_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contract_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractUpdateTXN::unsafe_arena_set_allocated_contract_id(
    std::string* contract_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contract_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ContractUpdateTXN.contract_id)
}

// uint64 contract_version = 3;
inline void ContractUpdateTXN::clear_contract_version() {
  contract_version_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ContractUpdateTXN::_internal_contract_version() const {
  return contract_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ContractUpdateTXN::contract_version() const {
  // @@protoc_insertion_point(field_get:zera_txn.ContractUpdateTXN.contract_version)
  return _internal_contract_version();
}
inline void ContractUpdateTXN::_internal_set_contract_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  contract_version_ = value;
}
inline void ContractUpdateTXN::set_contract_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_contract_version(value);
  // @@protoc_insertion_point(field_set:zera_txn.ContractUpdateTXN.contract_version)
}

// string name = 4;
inline bool ContractUpdateTXN::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContractUpdateTXN::has_name() const {
  return _internal_has_name();
}
inline void ContractUpdateTXN::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContractUpdateTXN::name() const {
  // @@protoc_insertion_point(field_get:zera_txn.ContractUpdateTXN.name)
  return _internal_name();
}
inline void ContractUpdateTXN::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:zera_txn.ContractUpdateTXN.name)
}
inline std::string* ContractUpdateTXN::mutable_name() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ContractUpdateTXN.name)
  return _internal_mutable_name();
}
inline const std::string& ContractUpdateTXN::_internal_name() const {
  return name_.Get();
}
inline void ContractUpdateTXN::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractUpdateTXN::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.ContractUpdateTXN.name)
}
inline void ContractUpdateTXN::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.ContractUpdateTXN.name)
}
inline void ContractUpdateTXN::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.ContractUpdateTXN.name)
}
inline std::string* ContractUpdateTXN::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractUpdateTXN::release_name() {
  // @@protoc_insertion_point(field_release:zera_txn.ContractUpdateTXN.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractUpdateTXN::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ContractUpdateTXN.name)
}
inline std::string* ContractUpdateTXN::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.ContractUpdateTXN.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractUpdateTXN::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ContractUpdateTXN.name)
}

// .zera_txn.Governance governance = 5;
inline bool ContractUpdateTXN::_internal_has_governance() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || governance_ != nullptr);
  return value;
}
inline bool ContractUpdateTXN::has_governance() const {
  return _internal_has_governance();
}
inline void ContractUpdateTXN::clear_governance() {
  if (GetArena() == nullptr && governance_ != nullptr) {
    delete governance_;
  }
  governance_ = nullptr;
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::zera_txn::Governance& ContractUpdateTXN::_internal_governance() const {
  const ::zera_txn::Governance* p = governance_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::Governance*>(
      &::zera_txn::_Governance_default_instance_);
}
inline const ::zera_txn::Governance& ContractUpdateTXN::governance() const {
  // @@protoc_insertion_point(field_get:zera_txn.ContractUpdateTXN.governance)
  return _internal_governance();
}
inline void ContractUpdateTXN::unsafe_arena_set_allocated_governance(
    ::zera_txn::Governance* governance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(governance_);
  }
  governance_ = governance;
  if (governance) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ContractUpdateTXN.governance)
}
inline ::zera_txn::Governance* ContractUpdateTXN::release_governance() {
  auto temp = unsafe_arena_release_governance();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::Governance* ContractUpdateTXN::unsafe_arena_release_governance() {
  // @@protoc_insertion_point(field_release:zera_txn.ContractUpdateTXN.governance)
  _has_bits_[0] &= ~0x00000002u;
  ::zera_txn::Governance* temp = governance_;
  governance_ = nullptr;
  return temp;
}
inline ::zera_txn::Governance* ContractUpdateTXN::_internal_mutable_governance() {
  _has_bits_[0] |= 0x00000002u;
  if (governance_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::Governance>(GetArena());
    governance_ = p;
  }
  return governance_;
}
inline ::zera_txn::Governance* ContractUpdateTXN::mutable_governance() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ContractUpdateTXN.governance)
  return _internal_mutable_governance();
}
inline void ContractUpdateTXN::set_allocated_governance(::zera_txn::Governance* governance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete governance_;
  }
  if (governance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(governance);
    if (message_arena != submessage_arena) {
      governance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, governance, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  governance_ = governance;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ContractUpdateTXN.governance)
}

// repeated .zera_txn.RestrictedKey restricted_keys = 6;
inline int ContractUpdateTXN::_internal_restricted_keys_size() const {
  return restricted_keys_.size();
}
inline int ContractUpdateTXN::restricted_keys_size() const {
  return _internal_restricted_keys_size();
}
inline void ContractUpdateTXN::clear_restricted_keys() {
  restricted_keys_.Clear();
}
inline ::zera_txn::RestrictedKey* ContractUpdateTXN::mutable_restricted_keys(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.ContractUpdateTXN.restricted_keys)
  return restricted_keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::RestrictedKey >*
ContractUpdateTXN::mutable_restricted_keys() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.ContractUpdateTXN.restricted_keys)
  return &restricted_keys_;
}
inline const ::zera_txn::RestrictedKey& ContractUpdateTXN::_internal_restricted_keys(int index) const {
  return restricted_keys_.Get(index);
}
inline const ::zera_txn::RestrictedKey& ContractUpdateTXN::restricted_keys(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.ContractUpdateTXN.restricted_keys)
  return _internal_restricted_keys(index);
}
inline ::zera_txn::RestrictedKey* ContractUpdateTXN::_internal_add_restricted_keys() {
  return restricted_keys_.Add();
}
inline ::zera_txn::RestrictedKey* ContractUpdateTXN::add_restricted_keys() {
  // @@protoc_insertion_point(field_add:zera_txn.ContractUpdateTXN.restricted_keys)
  return _internal_add_restricted_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::RestrictedKey >&
ContractUpdateTXN::restricted_keys() const {
  // @@protoc_insertion_point(field_list:zera_txn.ContractUpdateTXN.restricted_keys)
  return restricted_keys_;
}

// .zera_txn.ContractFees contract_fees = 7;
inline bool ContractUpdateTXN::_internal_has_contract_fees() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || contract_fees_ != nullptr);
  return value;
}
inline bool ContractUpdateTXN::has_contract_fees() const {
  return _internal_has_contract_fees();
}
inline void ContractUpdateTXN::clear_contract_fees() {
  if (GetArena() == nullptr && contract_fees_ != nullptr) {
    delete contract_fees_;
  }
  contract_fees_ = nullptr;
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::zera_txn::ContractFees& ContractUpdateTXN::_internal_contract_fees() const {
  const ::zera_txn::ContractFees* p = contract_fees_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::ContractFees*>(
      &::zera_txn::_ContractFees_default_instance_);
}
inline const ::zera_txn::ContractFees& ContractUpdateTXN::contract_fees() const {
  // @@protoc_insertion_point(field_get:zera_txn.ContractUpdateTXN.contract_fees)
  return _internal_contract_fees();
}
inline void ContractUpdateTXN::unsafe_arena_set_allocated_contract_fees(
    ::zera_txn::ContractFees* contract_fees) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract_fees_);
  }
  contract_fees_ = contract_fees;
  if (contract_fees) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ContractUpdateTXN.contract_fees)
}
inline ::zera_txn::ContractFees* ContractUpdateTXN::release_contract_fees() {
  auto temp = unsafe_arena_release_contract_fees();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::ContractFees* ContractUpdateTXN::unsafe_arena_release_contract_fees() {
  // @@protoc_insertion_point(field_release:zera_txn.ContractUpdateTXN.contract_fees)
  _has_bits_[0] &= ~0x00000004u;
  ::zera_txn::ContractFees* temp = contract_fees_;
  contract_fees_ = nullptr;
  return temp;
}
inline ::zera_txn::ContractFees* ContractUpdateTXN::_internal_mutable_contract_fees() {
  _has_bits_[0] |= 0x00000004u;
  if (contract_fees_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::ContractFees>(GetArena());
    contract_fees_ = p;
  }
  return contract_fees_;
}
inline ::zera_txn::ContractFees* ContractUpdateTXN::mutable_contract_fees() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ContractUpdateTXN.contract_fees)
  return _internal_mutable_contract_fees();
}
inline void ContractUpdateTXN::set_allocated_contract_fees(::zera_txn::ContractFees* contract_fees) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete contract_fees_;
  }
  if (contract_fees) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(contract_fees);
    if (message_arena != submessage_arena) {
      contract_fees = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contract_fees, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  contract_fees_ = contract_fees;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ContractUpdateTXN.contract_fees)
}

// repeated .zera_txn.KeyValuePair custom_parameters = 8;
inline int ContractUpdateTXN::_internal_custom_parameters_size() const {
  return custom_parameters_.size();
}
inline int ContractUpdateTXN::custom_parameters_size() const {
  return _internal_custom_parameters_size();
}
inline void ContractUpdateTXN::clear_custom_parameters() {
  custom_parameters_.Clear();
}
inline ::zera_txn::KeyValuePair* ContractUpdateTXN::mutable_custom_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.ContractUpdateTXN.custom_parameters)
  return custom_parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::KeyValuePair >*
ContractUpdateTXN::mutable_custom_parameters() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.ContractUpdateTXN.custom_parameters)
  return &custom_parameters_;
}
inline const ::zera_txn::KeyValuePair& ContractUpdateTXN::_internal_custom_parameters(int index) const {
  return custom_parameters_.Get(index);
}
inline const ::zera_txn::KeyValuePair& ContractUpdateTXN::custom_parameters(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.ContractUpdateTXN.custom_parameters)
  return _internal_custom_parameters(index);
}
inline ::zera_txn::KeyValuePair* ContractUpdateTXN::_internal_add_custom_parameters() {
  return custom_parameters_.Add();
}
inline ::zera_txn::KeyValuePair* ContractUpdateTXN::add_custom_parameters() {
  // @@protoc_insertion_point(field_add:zera_txn.ContractUpdateTXN.custom_parameters)
  return _internal_add_custom_parameters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::KeyValuePair >&
ContractUpdateTXN::custom_parameters() const {
  // @@protoc_insertion_point(field_list:zera_txn.ContractUpdateTXN.custom_parameters)
  return custom_parameters_;
}

// repeated .zera_txn.ExpenseRatio expense_ratio = 9;
inline int ContractUpdateTXN::_internal_expense_ratio_size() const {
  return expense_ratio_.size();
}
inline int ContractUpdateTXN::expense_ratio_size() const {
  return _internal_expense_ratio_size();
}
inline void ContractUpdateTXN::clear_expense_ratio() {
  expense_ratio_.Clear();
}
inline ::zera_txn::ExpenseRatio* ContractUpdateTXN::mutable_expense_ratio(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.ContractUpdateTXN.expense_ratio)
  return expense_ratio_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ExpenseRatio >*
ContractUpdateTXN::mutable_expense_ratio() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.ContractUpdateTXN.expense_ratio)
  return &expense_ratio_;
}
inline const ::zera_txn::ExpenseRatio& ContractUpdateTXN::_internal_expense_ratio(int index) const {
  return expense_ratio_.Get(index);
}
inline const ::zera_txn::ExpenseRatio& ContractUpdateTXN::expense_ratio(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.ContractUpdateTXN.expense_ratio)
  return _internal_expense_ratio(index);
}
inline ::zera_txn::ExpenseRatio* ContractUpdateTXN::_internal_add_expense_ratio() {
  return expense_ratio_.Add();
}
inline ::zera_txn::ExpenseRatio* ContractUpdateTXN::add_expense_ratio() {
  // @@protoc_insertion_point(field_add:zera_txn.ContractUpdateTXN.expense_ratio)
  return _internal_add_expense_ratio();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ExpenseRatio >&
ContractUpdateTXN::expense_ratio() const {
  // @@protoc_insertion_point(field_list:zera_txn.ContractUpdateTXN.expense_ratio)
  return expense_ratio_;
}

// -------------------------------------------------------------------

// InstrumentContract

// .zera_txn.BaseTXN base = 1;
inline bool InstrumentContract::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool InstrumentContract::has_base() const {
  return _internal_has_base();
}
inline void InstrumentContract::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::zera_txn::BaseTXN& InstrumentContract::_internal_base() const {
  const ::zera_txn::BaseTXN* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::BaseTXN*>(
      &::zera_txn::_BaseTXN_default_instance_);
}
inline const ::zera_txn::BaseTXN& InstrumentContract::base() const {
  // @@protoc_insertion_point(field_get:zera_txn.InstrumentContract.base)
  return _internal_base();
}
inline void InstrumentContract::unsafe_arena_set_allocated_base(
    ::zera_txn::BaseTXN* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.InstrumentContract.base)
}
inline ::zera_txn::BaseTXN* InstrumentContract::release_base() {
  auto temp = unsafe_arena_release_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::BaseTXN* InstrumentContract::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:zera_txn.InstrumentContract.base)
  
  ::zera_txn::BaseTXN* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::zera_txn::BaseTXN* InstrumentContract::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::BaseTXN>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::zera_txn::BaseTXN* InstrumentContract::mutable_base() {
  // @@protoc_insertion_point(field_mutable:zera_txn.InstrumentContract.base)
  return _internal_mutable_base();
}
inline void InstrumentContract::set_allocated_base(::zera_txn::BaseTXN* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.InstrumentContract.base)
}

// uint64 contract_version = 2;
inline void InstrumentContract::clear_contract_version() {
  contract_version_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstrumentContract::_internal_contract_version() const {
  return contract_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstrumentContract::contract_version() const {
  // @@protoc_insertion_point(field_get:zera_txn.InstrumentContract.contract_version)
  return _internal_contract_version();
}
inline void InstrumentContract::_internal_set_contract_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  contract_version_ = value;
}
inline void InstrumentContract::set_contract_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_contract_version(value);
  // @@protoc_insertion_point(field_set:zera_txn.InstrumentContract.contract_version)
}

// string symbol = 3;
inline void InstrumentContract::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentContract::symbol() const {
  // @@protoc_insertion_point(field_get:zera_txn.InstrumentContract.symbol)
  return _internal_symbol();
}
inline void InstrumentContract::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:zera_txn.InstrumentContract.symbol)
}
inline std::string* InstrumentContract::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:zera_txn.InstrumentContract.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& InstrumentContract::_internal_symbol() const {
  return symbol_.Get();
}
inline void InstrumentContract::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentContract::set_symbol(std::string&& value) {
  
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.InstrumentContract.symbol)
}
inline void InstrumentContract::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.InstrumentContract.symbol)
}
inline void InstrumentContract::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.InstrumentContract.symbol)
}
inline std::string* InstrumentContract::_internal_mutable_symbol() {
  
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentContract::release_symbol() {
  // @@protoc_insertion_point(field_release:zera_txn.InstrumentContract.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentContract::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.InstrumentContract.symbol)
}
inline std::string* InstrumentContract::unsafe_arena_release_symbol() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.InstrumentContract.symbol)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return symbol_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentContract::unsafe_arena_set_allocated_symbol(
    std::string* symbol) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      symbol, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.InstrumentContract.symbol)
}

// string name = 4;
inline void InstrumentContract::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentContract::name() const {
  // @@protoc_insertion_point(field_get:zera_txn.InstrumentContract.name)
  return _internal_name();
}
inline void InstrumentContract::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:zera_txn.InstrumentContract.name)
}
inline std::string* InstrumentContract::mutable_name() {
  // @@protoc_insertion_point(field_mutable:zera_txn.InstrumentContract.name)
  return _internal_mutable_name();
}
inline const std::string& InstrumentContract::_internal_name() const {
  return name_.Get();
}
inline void InstrumentContract::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentContract::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.InstrumentContract.name)
}
inline void InstrumentContract::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.InstrumentContract.name)
}
inline void InstrumentContract::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.InstrumentContract.name)
}
inline std::string* InstrumentContract::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentContract::release_name() {
  // @@protoc_insertion_point(field_release:zera_txn.InstrumentContract.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentContract::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.InstrumentContract.name)
}
inline std::string* InstrumentContract::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.InstrumentContract.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentContract::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.InstrumentContract.name)
}

// .zera_txn.Governance governance = 5;
inline bool InstrumentContract::_internal_has_governance() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || governance_ != nullptr);
  return value;
}
inline bool InstrumentContract::has_governance() const {
  return _internal_has_governance();
}
inline void InstrumentContract::clear_governance() {
  if (GetArena() == nullptr && governance_ != nullptr) {
    delete governance_;
  }
  governance_ = nullptr;
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::zera_txn::Governance& InstrumentContract::_internal_governance() const {
  const ::zera_txn::Governance* p = governance_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::Governance*>(
      &::zera_txn::_Governance_default_instance_);
}
inline const ::zera_txn::Governance& InstrumentContract::governance() const {
  // @@protoc_insertion_point(field_get:zera_txn.InstrumentContract.governance)
  return _internal_governance();
}
inline void InstrumentContract::unsafe_arena_set_allocated_governance(
    ::zera_txn::Governance* governance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(governance_);
  }
  governance_ = governance;
  if (governance) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.InstrumentContract.governance)
}
inline ::zera_txn::Governance* InstrumentContract::release_governance() {
  auto temp = unsafe_arena_release_governance();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::Governance* InstrumentContract::unsafe_arena_release_governance() {
  // @@protoc_insertion_point(field_release:zera_txn.InstrumentContract.governance)
  _has_bits_[0] &= ~0x00000004u;
  ::zera_txn::Governance* temp = governance_;
  governance_ = nullptr;
  return temp;
}
inline ::zera_txn::Governance* InstrumentContract::_internal_mutable_governance() {
  _has_bits_[0] |= 0x00000004u;
  if (governance_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::Governance>(GetArena());
    governance_ = p;
  }
  return governance_;
}
inline ::zera_txn::Governance* InstrumentContract::mutable_governance() {
  // @@protoc_insertion_point(field_mutable:zera_txn.InstrumentContract.governance)
  return _internal_mutable_governance();
}
inline void InstrumentContract::set_allocated_governance(::zera_txn::Governance* governance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete governance_;
  }
  if (governance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(governance);
    if (message_arena != submessage_arena) {
      governance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, governance, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  governance_ = governance;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.InstrumentContract.governance)
}

// repeated .zera_txn.RestrictedKey restricted_keys = 6;
inline int InstrumentContract::_internal_restricted_keys_size() const {
  return restricted_keys_.size();
}
inline int InstrumentContract::restricted_keys_size() const {
  return _internal_restricted_keys_size();
}
inline void InstrumentContract::clear_restricted_keys() {
  restricted_keys_.Clear();
}
inline ::zera_txn::RestrictedKey* InstrumentContract::mutable_restricted_keys(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.InstrumentContract.restricted_keys)
  return restricted_keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::RestrictedKey >*
InstrumentContract::mutable_restricted_keys() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.InstrumentContract.restricted_keys)
  return &restricted_keys_;
}
inline const ::zera_txn::RestrictedKey& InstrumentContract::_internal_restricted_keys(int index) const {
  return restricted_keys_.Get(index);
}
inline const ::zera_txn::RestrictedKey& InstrumentContract::restricted_keys(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.InstrumentContract.restricted_keys)
  return _internal_restricted_keys(index);
}
inline ::zera_txn::RestrictedKey* InstrumentContract::_internal_add_restricted_keys() {
  return restricted_keys_.Add();
}
inline ::zera_txn::RestrictedKey* InstrumentContract::add_restricted_keys() {
  // @@protoc_insertion_point(field_add:zera_txn.InstrumentContract.restricted_keys)
  return _internal_add_restricted_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::RestrictedKey >&
InstrumentContract::restricted_keys() const {
  // @@protoc_insertion_point(field_list:zera_txn.InstrumentContract.restricted_keys)
  return restricted_keys_;
}

// string max_supply = 7;
inline bool InstrumentContract::_internal_has_max_supply() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InstrumentContract::has_max_supply() const {
  return _internal_has_max_supply();
}
inline void InstrumentContract::clear_max_supply() {
  max_supply_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InstrumentContract::max_supply() const {
  // @@protoc_insertion_point(field_get:zera_txn.InstrumentContract.max_supply)
  return _internal_max_supply();
}
inline void InstrumentContract::set_max_supply(const std::string& value) {
  _internal_set_max_supply(value);
  // @@protoc_insertion_point(field_set:zera_txn.InstrumentContract.max_supply)
}
inline std::string* InstrumentContract::mutable_max_supply() {
  // @@protoc_insertion_point(field_mutable:zera_txn.InstrumentContract.max_supply)
  return _internal_mutable_max_supply();
}
inline const std::string& InstrumentContract::_internal_max_supply() const {
  return max_supply_.Get();
}
inline void InstrumentContract::_internal_set_max_supply(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  max_supply_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentContract::set_max_supply(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  max_supply_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.InstrumentContract.max_supply)
}
inline void InstrumentContract::set_max_supply(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  max_supply_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.InstrumentContract.max_supply)
}
inline void InstrumentContract::set_max_supply(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  max_supply_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.InstrumentContract.max_supply)
}
inline std::string* InstrumentContract::_internal_mutable_max_supply() {
  _has_bits_[0] |= 0x00000001u;
  return max_supply_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentContract::release_max_supply() {
  // @@protoc_insertion_point(field_release:zera_txn.InstrumentContract.max_supply)
  if (!_internal_has_max_supply()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return max_supply_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentContract::set_allocated_max_supply(std::string* max_supply) {
  if (max_supply != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  max_supply_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), max_supply,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.InstrumentContract.max_supply)
}
inline std::string* InstrumentContract::unsafe_arena_release_max_supply() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.InstrumentContract.max_supply)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return max_supply_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentContract::unsafe_arena_set_allocated_max_supply(
    std::string* max_supply) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (max_supply != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  max_supply_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      max_supply, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.InstrumentContract.max_supply)
}

// .zera_txn.ContractFees contract_fees = 8;
inline bool InstrumentContract::_internal_has_contract_fees() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || contract_fees_ != nullptr);
  return value;
}
inline bool InstrumentContract::has_contract_fees() const {
  return _internal_has_contract_fees();
}
inline void InstrumentContract::clear_contract_fees() {
  if (GetArena() == nullptr && contract_fees_ != nullptr) {
    delete contract_fees_;
  }
  contract_fees_ = nullptr;
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::zera_txn::ContractFees& InstrumentContract::_internal_contract_fees() const {
  const ::zera_txn::ContractFees* p = contract_fees_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::ContractFees*>(
      &::zera_txn::_ContractFees_default_instance_);
}
inline const ::zera_txn::ContractFees& InstrumentContract::contract_fees() const {
  // @@protoc_insertion_point(field_get:zera_txn.InstrumentContract.contract_fees)
  return _internal_contract_fees();
}
inline void InstrumentContract::unsafe_arena_set_allocated_contract_fees(
    ::zera_txn::ContractFees* contract_fees) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract_fees_);
  }
  contract_fees_ = contract_fees;
  if (contract_fees) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.InstrumentContract.contract_fees)
}
inline ::zera_txn::ContractFees* InstrumentContract::release_contract_fees() {
  auto temp = unsafe_arena_release_contract_fees();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::ContractFees* InstrumentContract::unsafe_arena_release_contract_fees() {
  // @@protoc_insertion_point(field_release:zera_txn.InstrumentContract.contract_fees)
  _has_bits_[0] &= ~0x00000008u;
  ::zera_txn::ContractFees* temp = contract_fees_;
  contract_fees_ = nullptr;
  return temp;
}
inline ::zera_txn::ContractFees* InstrumentContract::_internal_mutable_contract_fees() {
  _has_bits_[0] |= 0x00000008u;
  if (contract_fees_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::ContractFees>(GetArena());
    contract_fees_ = p;
  }
  return contract_fees_;
}
inline ::zera_txn::ContractFees* InstrumentContract::mutable_contract_fees() {
  // @@protoc_insertion_point(field_mutable:zera_txn.InstrumentContract.contract_fees)
  return _internal_mutable_contract_fees();
}
inline void InstrumentContract::set_allocated_contract_fees(::zera_txn::ContractFees* contract_fees) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete contract_fees_;
  }
  if (contract_fees) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(contract_fees);
    if (message_arena != submessage_arena) {
      contract_fees = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contract_fees, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  contract_fees_ = contract_fees;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.InstrumentContract.contract_fees)
}

// repeated .zera_txn.PreMintWallet premint_wallets = 9;
inline int InstrumentContract::_internal_premint_wallets_size() const {
  return premint_wallets_.size();
}
inline int InstrumentContract::premint_wallets_size() const {
  return _internal_premint_wallets_size();
}
inline void InstrumentContract::clear_premint_wallets() {
  premint_wallets_.Clear();
}
inline ::zera_txn::PreMintWallet* InstrumentContract::mutable_premint_wallets(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.InstrumentContract.premint_wallets)
  return premint_wallets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::PreMintWallet >*
InstrumentContract::mutable_premint_wallets() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.InstrumentContract.premint_wallets)
  return &premint_wallets_;
}
inline const ::zera_txn::PreMintWallet& InstrumentContract::_internal_premint_wallets(int index) const {
  return premint_wallets_.Get(index);
}
inline const ::zera_txn::PreMintWallet& InstrumentContract::premint_wallets(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.InstrumentContract.premint_wallets)
  return _internal_premint_wallets(index);
}
inline ::zera_txn::PreMintWallet* InstrumentContract::_internal_add_premint_wallets() {
  return premint_wallets_.Add();
}
inline ::zera_txn::PreMintWallet* InstrumentContract::add_premint_wallets() {
  // @@protoc_insertion_point(field_add:zera_txn.InstrumentContract.premint_wallets)
  return _internal_add_premint_wallets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::PreMintWallet >&
InstrumentContract::premint_wallets() const {
  // @@protoc_insertion_point(field_list:zera_txn.InstrumentContract.premint_wallets)
  return premint_wallets_;
}

// .zera_txn.CoinDenomination coin_denomination = 10;
inline bool InstrumentContract::_internal_has_coin_denomination() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || coin_denomination_ != nullptr);
  return value;
}
inline bool InstrumentContract::has_coin_denomination() const {
  return _internal_has_coin_denomination();
}
inline void InstrumentContract::clear_coin_denomination() {
  if (GetArena() == nullptr && coin_denomination_ != nullptr) {
    delete coin_denomination_;
  }
  coin_denomination_ = nullptr;
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::zera_txn::CoinDenomination& InstrumentContract::_internal_coin_denomination() const {
  const ::zera_txn::CoinDenomination* p = coin_denomination_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::CoinDenomination*>(
      &::zera_txn::_CoinDenomination_default_instance_);
}
inline const ::zera_txn::CoinDenomination& InstrumentContract::coin_denomination() const {
  // @@protoc_insertion_point(field_get:zera_txn.InstrumentContract.coin_denomination)
  return _internal_coin_denomination();
}
inline void InstrumentContract::unsafe_arena_set_allocated_coin_denomination(
    ::zera_txn::CoinDenomination* coin_denomination) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coin_denomination_);
  }
  coin_denomination_ = coin_denomination;
  if (coin_denomination) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.InstrumentContract.coin_denomination)
}
inline ::zera_txn::CoinDenomination* InstrumentContract::release_coin_denomination() {
  auto temp = unsafe_arena_release_coin_denomination();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::CoinDenomination* InstrumentContract::unsafe_arena_release_coin_denomination() {
  // @@protoc_insertion_point(field_release:zera_txn.InstrumentContract.coin_denomination)
  _has_bits_[0] &= ~0x00000010u;
  ::zera_txn::CoinDenomination* temp = coin_denomination_;
  coin_denomination_ = nullptr;
  return temp;
}
inline ::zera_txn::CoinDenomination* InstrumentContract::_internal_mutable_coin_denomination() {
  _has_bits_[0] |= 0x00000010u;
  if (coin_denomination_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::CoinDenomination>(GetArena());
    coin_denomination_ = p;
  }
  return coin_denomination_;
}
inline ::zera_txn::CoinDenomination* InstrumentContract::mutable_coin_denomination() {
  // @@protoc_insertion_point(field_mutable:zera_txn.InstrumentContract.coin_denomination)
  return _internal_mutable_coin_denomination();
}
inline void InstrumentContract::set_allocated_coin_denomination(::zera_txn::CoinDenomination* coin_denomination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete coin_denomination_;
  }
  if (coin_denomination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(coin_denomination);
    if (message_arena != submessage_arena) {
      coin_denomination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coin_denomination, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  coin_denomination_ = coin_denomination;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.InstrumentContract.coin_denomination)
}

// repeated .zera_txn.KeyValuePair custom_parameters = 11;
inline int InstrumentContract::_internal_custom_parameters_size() const {
  return custom_parameters_.size();
}
inline int InstrumentContract::custom_parameters_size() const {
  return _internal_custom_parameters_size();
}
inline void InstrumentContract::clear_custom_parameters() {
  custom_parameters_.Clear();
}
inline ::zera_txn::KeyValuePair* InstrumentContract::mutable_custom_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.InstrumentContract.custom_parameters)
  return custom_parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::KeyValuePair >*
InstrumentContract::mutable_custom_parameters() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.InstrumentContract.custom_parameters)
  return &custom_parameters_;
}
inline const ::zera_txn::KeyValuePair& InstrumentContract::_internal_custom_parameters(int index) const {
  return custom_parameters_.Get(index);
}
inline const ::zera_txn::KeyValuePair& InstrumentContract::custom_parameters(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.InstrumentContract.custom_parameters)
  return _internal_custom_parameters(index);
}
inline ::zera_txn::KeyValuePair* InstrumentContract::_internal_add_custom_parameters() {
  return custom_parameters_.Add();
}
inline ::zera_txn::KeyValuePair* InstrumentContract::add_custom_parameters() {
  // @@protoc_insertion_point(field_add:zera_txn.InstrumentContract.custom_parameters)
  return _internal_add_custom_parameters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::KeyValuePair >&
InstrumentContract::custom_parameters() const {
  // @@protoc_insertion_point(field_list:zera_txn.InstrumentContract.custom_parameters)
  return custom_parameters_;
}

// string contract_id = 12;
inline void InstrumentContract::clear_contract_id() {
  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentContract::contract_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.InstrumentContract.contract_id)
  return _internal_contract_id();
}
inline void InstrumentContract::set_contract_id(const std::string& value) {
  _internal_set_contract_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.InstrumentContract.contract_id)
}
inline std::string* InstrumentContract::mutable_contract_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.InstrumentContract.contract_id)
  return _internal_mutable_contract_id();
}
inline const std::string& InstrumentContract::_internal_contract_id() const {
  return contract_id_.Get();
}
inline void InstrumentContract::_internal_set_contract_id(const std::string& value) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentContract::set_contract_id(std::string&& value) {
  
  contract_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.InstrumentContract.contract_id)
}
inline void InstrumentContract::set_contract_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.InstrumentContract.contract_id)
}
inline void InstrumentContract::set_contract_id(const char* value,
    size_t size) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.InstrumentContract.contract_id)
}
inline std::string* InstrumentContract::_internal_mutable_contract_id() {
  
  return contract_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentContract::release_contract_id() {
  // @@protoc_insertion_point(field_release:zera_txn.InstrumentContract.contract_id)
  return contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentContract::set_allocated_contract_id(std::string* contract_id) {
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.InstrumentContract.contract_id)
}
inline std::string* InstrumentContract::unsafe_arena_release_contract_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.InstrumentContract.contract_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contract_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentContract::unsafe_arena_set_allocated_contract_id(
    std::string* contract_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contract_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.InstrumentContract.contract_id)
}

// repeated .zera_txn.ExpenseRatio expense_ratio = 13;
inline int InstrumentContract::_internal_expense_ratio_size() const {
  return expense_ratio_.size();
}
inline int InstrumentContract::expense_ratio_size() const {
  return _internal_expense_ratio_size();
}
inline void InstrumentContract::clear_expense_ratio() {
  expense_ratio_.Clear();
}
inline ::zera_txn::ExpenseRatio* InstrumentContract::mutable_expense_ratio(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.InstrumentContract.expense_ratio)
  return expense_ratio_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ExpenseRatio >*
InstrumentContract::mutable_expense_ratio() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.InstrumentContract.expense_ratio)
  return &expense_ratio_;
}
inline const ::zera_txn::ExpenseRatio& InstrumentContract::_internal_expense_ratio(int index) const {
  return expense_ratio_.Get(index);
}
inline const ::zera_txn::ExpenseRatio& InstrumentContract::expense_ratio(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.InstrumentContract.expense_ratio)
  return _internal_expense_ratio(index);
}
inline ::zera_txn::ExpenseRatio* InstrumentContract::_internal_add_expense_ratio() {
  return expense_ratio_.Add();
}
inline ::zera_txn::ExpenseRatio* InstrumentContract::add_expense_ratio() {
  // @@protoc_insertion_point(field_add:zera_txn.InstrumentContract.expense_ratio)
  return _internal_add_expense_ratio();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ExpenseRatio >&
InstrumentContract::expense_ratio() const {
  // @@protoc_insertion_point(field_list:zera_txn.InstrumentContract.expense_ratio)
  return expense_ratio_;
}

// .zera_txn.CONTRACT_TYPE type = 14;
inline void InstrumentContract::clear_type() {
  type_ = 0;
}
inline ::zera_txn::CONTRACT_TYPE InstrumentContract::_internal_type() const {
  return static_cast< ::zera_txn::CONTRACT_TYPE >(type_);
}
inline ::zera_txn::CONTRACT_TYPE InstrumentContract::type() const {
  // @@protoc_insertion_point(field_get:zera_txn.InstrumentContract.type)
  return _internal_type();
}
inline void InstrumentContract::_internal_set_type(::zera_txn::CONTRACT_TYPE value) {
  
  type_ = value;
}
inline void InstrumentContract::set_type(::zera_txn::CONTRACT_TYPE value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:zera_txn.InstrumentContract.type)
}

// bool update_contract_fees = 15;
inline void InstrumentContract::clear_update_contract_fees() {
  update_contract_fees_ = false;
}
inline bool InstrumentContract::_internal_update_contract_fees() const {
  return update_contract_fees_;
}
inline bool InstrumentContract::update_contract_fees() const {
  // @@protoc_insertion_point(field_get:zera_txn.InstrumentContract.update_contract_fees)
  return _internal_update_contract_fees();
}
inline void InstrumentContract::_internal_set_update_contract_fees(bool value) {
  
  update_contract_fees_ = value;
}
inline void InstrumentContract::set_update_contract_fees(bool value) {
  _internal_set_update_contract_fees(value);
  // @@protoc_insertion_point(field_set:zera_txn.InstrumentContract.update_contract_fees)
}

// bool update_expense_ratio = 16;
inline void InstrumentContract::clear_update_expense_ratio() {
  update_expense_ratio_ = false;
}
inline bool InstrumentContract::_internal_update_expense_ratio() const {
  return update_expense_ratio_;
}
inline bool InstrumentContract::update_expense_ratio() const {
  // @@protoc_insertion_point(field_get:zera_txn.InstrumentContract.update_expense_ratio)
  return _internal_update_expense_ratio();
}
inline void InstrumentContract::_internal_set_update_expense_ratio(bool value) {
  
  update_expense_ratio_ = value;
}
inline void InstrumentContract::set_update_expense_ratio(bool value) {
  _internal_set_update_expense_ratio(value);
  // @@protoc_insertion_point(field_set:zera_txn.InstrumentContract.update_expense_ratio)
}

// uint32 quash_threshold = 17;
inline bool InstrumentContract::_internal_has_quash_threshold() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool InstrumentContract::has_quash_threshold() const {
  return _internal_has_quash_threshold();
}
inline void InstrumentContract::clear_quash_threshold() {
  quash_threshold_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstrumentContract::_internal_quash_threshold() const {
  return quash_threshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstrumentContract::quash_threshold() const {
  // @@protoc_insertion_point(field_get:zera_txn.InstrumentContract.quash_threshold)
  return _internal_quash_threshold();
}
inline void InstrumentContract::_internal_set_quash_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  quash_threshold_ = value;
}
inline void InstrumentContract::set_quash_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_quash_threshold(value);
  // @@protoc_insertion_point(field_set:zera_txn.InstrumentContract.quash_threshold)
}

// repeated .zera_txn.TokenCompliance token_compliance = 18;
inline int InstrumentContract::_internal_token_compliance_size() const {
  return token_compliance_.size();
}
inline int InstrumentContract::token_compliance_size() const {
  return _internal_token_compliance_size();
}
inline void InstrumentContract::clear_token_compliance() {
  token_compliance_.Clear();
}
inline ::zera_txn::TokenCompliance* InstrumentContract::mutable_token_compliance(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.InstrumentContract.token_compliance)
  return token_compliance_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::TokenCompliance >*
InstrumentContract::mutable_token_compliance() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.InstrumentContract.token_compliance)
  return &token_compliance_;
}
inline const ::zera_txn::TokenCompliance& InstrumentContract::_internal_token_compliance(int index) const {
  return token_compliance_.Get(index);
}
inline const ::zera_txn::TokenCompliance& InstrumentContract::token_compliance(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.InstrumentContract.token_compliance)
  return _internal_token_compliance(index);
}
inline ::zera_txn::TokenCompliance* InstrumentContract::_internal_add_token_compliance() {
  return token_compliance_.Add();
}
inline ::zera_txn::TokenCompliance* InstrumentContract::add_token_compliance() {
  // @@protoc_insertion_point(field_add:zera_txn.InstrumentContract.token_compliance)
  return _internal_add_token_compliance();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::TokenCompliance >&
InstrumentContract::token_compliance() const {
  // @@protoc_insertion_point(field_list:zera_txn.InstrumentContract.token_compliance)
  return token_compliance_;
}

// bool kyc_status = 19;
inline void InstrumentContract::clear_kyc_status() {
  kyc_status_ = false;
}
inline bool InstrumentContract::_internal_kyc_status() const {
  return kyc_status_;
}
inline bool InstrumentContract::kyc_status() const {
  // @@protoc_insertion_point(field_get:zera_txn.InstrumentContract.kyc_status)
  return _internal_kyc_status();
}
inline void InstrumentContract::_internal_set_kyc_status(bool value) {
  
  kyc_status_ = value;
}
inline void InstrumentContract::set_kyc_status(bool value) {
  _internal_set_kyc_status(value);
  // @@protoc_insertion_point(field_set:zera_txn.InstrumentContract.kyc_status)
}

// bool immutable_kyc_status = 20;
inline void InstrumentContract::clear_immutable_kyc_status() {
  immutable_kyc_status_ = false;
}
inline bool InstrumentContract::_internal_immutable_kyc_status() const {
  return immutable_kyc_status_;
}
inline bool InstrumentContract::immutable_kyc_status() const {
  // @@protoc_insertion_point(field_get:zera_txn.InstrumentContract.immutable_kyc_status)
  return _internal_immutable_kyc_status();
}
inline void InstrumentContract::_internal_set_immutable_kyc_status(bool value) {
  
  immutable_kyc_status_ = value;
}
inline void InstrumentContract::set_immutable_kyc_status(bool value) {
  _internal_set_immutable_kyc_status(value);
  // @@protoc_insertion_point(field_set:zera_txn.InstrumentContract.immutable_kyc_status)
}

// string cur_equiv_start = 21;
inline bool InstrumentContract::_internal_has_cur_equiv_start() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InstrumentContract::has_cur_equiv_start() const {
  return _internal_has_cur_equiv_start();
}
inline void InstrumentContract::clear_cur_equiv_start() {
  cur_equiv_start_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& InstrumentContract::cur_equiv_start() const {
  // @@protoc_insertion_point(field_get:zera_txn.InstrumentContract.cur_equiv_start)
  return _internal_cur_equiv_start();
}
inline void InstrumentContract::set_cur_equiv_start(const std::string& value) {
  _internal_set_cur_equiv_start(value);
  // @@protoc_insertion_point(field_set:zera_txn.InstrumentContract.cur_equiv_start)
}
inline std::string* InstrumentContract::mutable_cur_equiv_start() {
  // @@protoc_insertion_point(field_mutable:zera_txn.InstrumentContract.cur_equiv_start)
  return _internal_mutable_cur_equiv_start();
}
inline const std::string& InstrumentContract::_internal_cur_equiv_start() const {
  return cur_equiv_start_.Get();
}
inline void InstrumentContract::_internal_set_cur_equiv_start(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  cur_equiv_start_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentContract::set_cur_equiv_start(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  cur_equiv_start_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.InstrumentContract.cur_equiv_start)
}
inline void InstrumentContract::set_cur_equiv_start(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  cur_equiv_start_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.InstrumentContract.cur_equiv_start)
}
inline void InstrumentContract::set_cur_equiv_start(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  cur_equiv_start_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.InstrumentContract.cur_equiv_start)
}
inline std::string* InstrumentContract::_internal_mutable_cur_equiv_start() {
  _has_bits_[0] |= 0x00000002u;
  return cur_equiv_start_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentContract::release_cur_equiv_start() {
  // @@protoc_insertion_point(field_release:zera_txn.InstrumentContract.cur_equiv_start)
  if (!_internal_has_cur_equiv_start()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return cur_equiv_start_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentContract::set_allocated_cur_equiv_start(std::string* cur_equiv_start) {
  if (cur_equiv_start != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cur_equiv_start_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cur_equiv_start,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.InstrumentContract.cur_equiv_start)
}
inline std::string* InstrumentContract::unsafe_arena_release_cur_equiv_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.InstrumentContract.cur_equiv_start)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return cur_equiv_start_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentContract::unsafe_arena_set_allocated_cur_equiv_start(
    std::string* cur_equiv_start) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cur_equiv_start != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cur_equiv_start_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cur_equiv_start, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.InstrumentContract.cur_equiv_start)
}

// -------------------------------------------------------------------

// GovernanceVote

// .zera_txn.BaseTXN base = 1;
inline bool GovernanceVote::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool GovernanceVote::has_base() const {
  return _internal_has_base();
}
inline void GovernanceVote::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::zera_txn::BaseTXN& GovernanceVote::_internal_base() const {
  const ::zera_txn::BaseTXN* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::BaseTXN*>(
      &::zera_txn::_BaseTXN_default_instance_);
}
inline const ::zera_txn::BaseTXN& GovernanceVote::base() const {
  // @@protoc_insertion_point(field_get:zera_txn.GovernanceVote.base)
  return _internal_base();
}
inline void GovernanceVote::unsafe_arena_set_allocated_base(
    ::zera_txn::BaseTXN* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.GovernanceVote.base)
}
inline ::zera_txn::BaseTXN* GovernanceVote::release_base() {
  auto temp = unsafe_arena_release_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::BaseTXN* GovernanceVote::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:zera_txn.GovernanceVote.base)
  
  ::zera_txn::BaseTXN* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::zera_txn::BaseTXN* GovernanceVote::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::BaseTXN>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::zera_txn::BaseTXN* GovernanceVote::mutable_base() {
  // @@protoc_insertion_point(field_mutable:zera_txn.GovernanceVote.base)
  return _internal_mutable_base();
}
inline void GovernanceVote::set_allocated_base(::zera_txn::BaseTXN* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.GovernanceVote.base)
}

// string contract_id = 2;
inline void GovernanceVote::clear_contract_id() {
  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GovernanceVote::contract_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.GovernanceVote.contract_id)
  return _internal_contract_id();
}
inline void GovernanceVote::set_contract_id(const std::string& value) {
  _internal_set_contract_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.GovernanceVote.contract_id)
}
inline std::string* GovernanceVote::mutable_contract_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.GovernanceVote.contract_id)
  return _internal_mutable_contract_id();
}
inline const std::string& GovernanceVote::_internal_contract_id() const {
  return contract_id_.Get();
}
inline void GovernanceVote::_internal_set_contract_id(const std::string& value) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GovernanceVote::set_contract_id(std::string&& value) {
  
  contract_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.GovernanceVote.contract_id)
}
inline void GovernanceVote::set_contract_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.GovernanceVote.contract_id)
}
inline void GovernanceVote::set_contract_id(const char* value,
    size_t size) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.GovernanceVote.contract_id)
}
inline std::string* GovernanceVote::_internal_mutable_contract_id() {
  
  return contract_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GovernanceVote::release_contract_id() {
  // @@protoc_insertion_point(field_release:zera_txn.GovernanceVote.contract_id)
  return contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GovernanceVote::set_allocated_contract_id(std::string* contract_id) {
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.GovernanceVote.contract_id)
}
inline std::string* GovernanceVote::unsafe_arena_release_contract_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.GovernanceVote.contract_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contract_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GovernanceVote::unsafe_arena_set_allocated_contract_id(
    std::string* contract_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contract_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.GovernanceVote.contract_id)
}

// bytes proposal_id = 3;
inline void GovernanceVote::clear_proposal_id() {
  proposal_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GovernanceVote::proposal_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.GovernanceVote.proposal_id)
  return _internal_proposal_id();
}
inline void GovernanceVote::set_proposal_id(const std::string& value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.GovernanceVote.proposal_id)
}
inline std::string* GovernanceVote::mutable_proposal_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.GovernanceVote.proposal_id)
  return _internal_mutable_proposal_id();
}
inline const std::string& GovernanceVote::_internal_proposal_id() const {
  return proposal_id_.Get();
}
inline void GovernanceVote::_internal_set_proposal_id(const std::string& value) {
  
  proposal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GovernanceVote::set_proposal_id(std::string&& value) {
  
  proposal_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.GovernanceVote.proposal_id)
}
inline void GovernanceVote::set_proposal_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proposal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.GovernanceVote.proposal_id)
}
inline void GovernanceVote::set_proposal_id(const void* value,
    size_t size) {
  
  proposal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.GovernanceVote.proposal_id)
}
inline std::string* GovernanceVote::_internal_mutable_proposal_id() {
  
  return proposal_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GovernanceVote::release_proposal_id() {
  // @@protoc_insertion_point(field_release:zera_txn.GovernanceVote.proposal_id)
  return proposal_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GovernanceVote::set_allocated_proposal_id(std::string* proposal_id) {
  if (proposal_id != nullptr) {
    
  } else {
    
  }
  proposal_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proposal_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.GovernanceVote.proposal_id)
}
inline std::string* GovernanceVote::unsafe_arena_release_proposal_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.GovernanceVote.proposal_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return proposal_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GovernanceVote::unsafe_arena_set_allocated_proposal_id(
    std::string* proposal_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (proposal_id != nullptr) {
    
  } else {
    
  }
  proposal_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      proposal_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.GovernanceVote.proposal_id)
}

// bool support = 4;
inline bool GovernanceVote::_internal_has_support() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GovernanceVote::has_support() const {
  return _internal_has_support();
}
inline void GovernanceVote::clear_support() {
  support_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool GovernanceVote::_internal_support() const {
  return support_;
}
inline bool GovernanceVote::support() const {
  // @@protoc_insertion_point(field_get:zera_txn.GovernanceVote.support)
  return _internal_support();
}
inline void GovernanceVote::_internal_set_support(bool value) {
  _has_bits_[0] |= 0x00000001u;
  support_ = value;
}
inline void GovernanceVote::set_support(bool value) {
  _internal_set_support(value);
  // @@protoc_insertion_point(field_set:zera_txn.GovernanceVote.support)
}

// uint32 support_option = 5;
inline bool GovernanceVote::_internal_has_support_option() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GovernanceVote::has_support_option() const {
  return _internal_has_support_option();
}
inline void GovernanceVote::clear_support_option() {
  support_option_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GovernanceVote::_internal_support_option() const {
  return support_option_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GovernanceVote::support_option() const {
  // @@protoc_insertion_point(field_get:zera_txn.GovernanceVote.support_option)
  return _internal_support_option();
}
inline void GovernanceVote::_internal_set_support_option(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  support_option_ = value;
}
inline void GovernanceVote::set_support_option(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_support_option(value);
  // @@protoc_insertion_point(field_set:zera_txn.GovernanceVote.support_option)
}

// -------------------------------------------------------------------

// GovernanceProposal

// .zera_txn.BaseTXN base = 1;
inline bool GovernanceProposal::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool GovernanceProposal::has_base() const {
  return _internal_has_base();
}
inline void GovernanceProposal::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::zera_txn::BaseTXN& GovernanceProposal::_internal_base() const {
  const ::zera_txn::BaseTXN* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::BaseTXN*>(
      &::zera_txn::_BaseTXN_default_instance_);
}
inline const ::zera_txn::BaseTXN& GovernanceProposal::base() const {
  // @@protoc_insertion_point(field_get:zera_txn.GovernanceProposal.base)
  return _internal_base();
}
inline void GovernanceProposal::unsafe_arena_set_allocated_base(
    ::zera_txn::BaseTXN* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.GovernanceProposal.base)
}
inline ::zera_txn::BaseTXN* GovernanceProposal::release_base() {
  auto temp = unsafe_arena_release_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::BaseTXN* GovernanceProposal::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:zera_txn.GovernanceProposal.base)
  
  ::zera_txn::BaseTXN* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::zera_txn::BaseTXN* GovernanceProposal::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::BaseTXN>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::zera_txn::BaseTXN* GovernanceProposal::mutable_base() {
  // @@protoc_insertion_point(field_mutable:zera_txn.GovernanceProposal.base)
  return _internal_mutable_base();
}
inline void GovernanceProposal::set_allocated_base(::zera_txn::BaseTXN* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.GovernanceProposal.base)
}

// string contract_id = 2;
inline void GovernanceProposal::clear_contract_id() {
  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GovernanceProposal::contract_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.GovernanceProposal.contract_id)
  return _internal_contract_id();
}
inline void GovernanceProposal::set_contract_id(const std::string& value) {
  _internal_set_contract_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.GovernanceProposal.contract_id)
}
inline std::string* GovernanceProposal::mutable_contract_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.GovernanceProposal.contract_id)
  return _internal_mutable_contract_id();
}
inline const std::string& GovernanceProposal::_internal_contract_id() const {
  return contract_id_.Get();
}
inline void GovernanceProposal::_internal_set_contract_id(const std::string& value) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GovernanceProposal::set_contract_id(std::string&& value) {
  
  contract_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.GovernanceProposal.contract_id)
}
inline void GovernanceProposal::set_contract_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.GovernanceProposal.contract_id)
}
inline void GovernanceProposal::set_contract_id(const char* value,
    size_t size) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.GovernanceProposal.contract_id)
}
inline std::string* GovernanceProposal::_internal_mutable_contract_id() {
  
  return contract_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GovernanceProposal::release_contract_id() {
  // @@protoc_insertion_point(field_release:zera_txn.GovernanceProposal.contract_id)
  return contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GovernanceProposal::set_allocated_contract_id(std::string* contract_id) {
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.GovernanceProposal.contract_id)
}
inline std::string* GovernanceProposal::unsafe_arena_release_contract_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.GovernanceProposal.contract_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contract_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GovernanceProposal::unsafe_arena_set_allocated_contract_id(
    std::string* contract_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contract_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.GovernanceProposal.contract_id)
}

// string title = 3;
inline void GovernanceProposal::clear_title() {
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GovernanceProposal::title() const {
  // @@protoc_insertion_point(field_get:zera_txn.GovernanceProposal.title)
  return _internal_title();
}
inline void GovernanceProposal::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:zera_txn.GovernanceProposal.title)
}
inline std::string* GovernanceProposal::mutable_title() {
  // @@protoc_insertion_point(field_mutable:zera_txn.GovernanceProposal.title)
  return _internal_mutable_title();
}
inline const std::string& GovernanceProposal::_internal_title() const {
  return title_.Get();
}
inline void GovernanceProposal::_internal_set_title(const std::string& value) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GovernanceProposal::set_title(std::string&& value) {
  
  title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.GovernanceProposal.title)
}
inline void GovernanceProposal::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.GovernanceProposal.title)
}
inline void GovernanceProposal::set_title(const char* value,
    size_t size) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.GovernanceProposal.title)
}
inline std::string* GovernanceProposal::_internal_mutable_title() {
  
  return title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GovernanceProposal::release_title() {
  // @@protoc_insertion_point(field_release:zera_txn.GovernanceProposal.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GovernanceProposal::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.GovernanceProposal.title)
}
inline std::string* GovernanceProposal::unsafe_arena_release_title() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.GovernanceProposal.title)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return title_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GovernanceProposal::unsafe_arena_set_allocated_title(
    std::string* title) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (title != nullptr) {
    
  } else {
    
  }
  title_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      title, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.GovernanceProposal.title)
}

// string synopsis = 4;
inline void GovernanceProposal::clear_synopsis() {
  synopsis_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GovernanceProposal::synopsis() const {
  // @@protoc_insertion_point(field_get:zera_txn.GovernanceProposal.synopsis)
  return _internal_synopsis();
}
inline void GovernanceProposal::set_synopsis(const std::string& value) {
  _internal_set_synopsis(value);
  // @@protoc_insertion_point(field_set:zera_txn.GovernanceProposal.synopsis)
}
inline std::string* GovernanceProposal::mutable_synopsis() {
  // @@protoc_insertion_point(field_mutable:zera_txn.GovernanceProposal.synopsis)
  return _internal_mutable_synopsis();
}
inline const std::string& GovernanceProposal::_internal_synopsis() const {
  return synopsis_.Get();
}
inline void GovernanceProposal::_internal_set_synopsis(const std::string& value) {
  
  synopsis_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GovernanceProposal::set_synopsis(std::string&& value) {
  
  synopsis_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.GovernanceProposal.synopsis)
}
inline void GovernanceProposal::set_synopsis(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  synopsis_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.GovernanceProposal.synopsis)
}
inline void GovernanceProposal::set_synopsis(const char* value,
    size_t size) {
  
  synopsis_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.GovernanceProposal.synopsis)
}
inline std::string* GovernanceProposal::_internal_mutable_synopsis() {
  
  return synopsis_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GovernanceProposal::release_synopsis() {
  // @@protoc_insertion_point(field_release:zera_txn.GovernanceProposal.synopsis)
  return synopsis_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GovernanceProposal::set_allocated_synopsis(std::string* synopsis) {
  if (synopsis != nullptr) {
    
  } else {
    
  }
  synopsis_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), synopsis,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.GovernanceProposal.synopsis)
}
inline std::string* GovernanceProposal::unsafe_arena_release_synopsis() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.GovernanceProposal.synopsis)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return synopsis_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GovernanceProposal::unsafe_arena_set_allocated_synopsis(
    std::string* synopsis) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (synopsis != nullptr) {
    
  } else {
    
  }
  synopsis_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      synopsis, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.GovernanceProposal.synopsis)
}

// string body = 5;
inline void GovernanceProposal::clear_body() {
  body_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GovernanceProposal::body() const {
  // @@protoc_insertion_point(field_get:zera_txn.GovernanceProposal.body)
  return _internal_body();
}
inline void GovernanceProposal::set_body(const std::string& value) {
  _internal_set_body(value);
  // @@protoc_insertion_point(field_set:zera_txn.GovernanceProposal.body)
}
inline std::string* GovernanceProposal::mutable_body() {
  // @@protoc_insertion_point(field_mutable:zera_txn.GovernanceProposal.body)
  return _internal_mutable_body();
}
inline const std::string& GovernanceProposal::_internal_body() const {
  return body_.Get();
}
inline void GovernanceProposal::_internal_set_body(const std::string& value) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GovernanceProposal::set_body(std::string&& value) {
  
  body_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.GovernanceProposal.body)
}
inline void GovernanceProposal::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.GovernanceProposal.body)
}
inline void GovernanceProposal::set_body(const char* value,
    size_t size) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.GovernanceProposal.body)
}
inline std::string* GovernanceProposal::_internal_mutable_body() {
  
  return body_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GovernanceProposal::release_body() {
  // @@protoc_insertion_point(field_release:zera_txn.GovernanceProposal.body)
  return body_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GovernanceProposal::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.GovernanceProposal.body)
}
inline std::string* GovernanceProposal::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.GovernanceProposal.body)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return body_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GovernanceProposal::unsafe_arena_set_allocated_body(
    std::string* body) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (body != nullptr) {
    
  } else {
    
  }
  body_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      body, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.GovernanceProposal.body)
}

// repeated string options = 6;
inline int GovernanceProposal::_internal_options_size() const {
  return options_.size();
}
inline int GovernanceProposal::options_size() const {
  return _internal_options_size();
}
inline void GovernanceProposal::clear_options() {
  options_.Clear();
}
inline std::string* GovernanceProposal::add_options() {
  // @@protoc_insertion_point(field_add_mutable:zera_txn.GovernanceProposal.options)
  return _internal_add_options();
}
inline const std::string& GovernanceProposal::_internal_options(int index) const {
  return options_.Get(index);
}
inline const std::string& GovernanceProposal::options(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.GovernanceProposal.options)
  return _internal_options(index);
}
inline std::string* GovernanceProposal::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.GovernanceProposal.options)
  return options_.Mutable(index);
}
inline void GovernanceProposal::set_options(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:zera_txn.GovernanceProposal.options)
  options_.Mutable(index)->assign(value);
}
inline void GovernanceProposal::set_options(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:zera_txn.GovernanceProposal.options)
  options_.Mutable(index)->assign(std::move(value));
}
inline void GovernanceProposal::set_options(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  options_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zera_txn.GovernanceProposal.options)
}
inline void GovernanceProposal::set_options(int index, const char* value, size_t size) {
  options_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zera_txn.GovernanceProposal.options)
}
inline std::string* GovernanceProposal::_internal_add_options() {
  return options_.Add();
}
inline void GovernanceProposal::add_options(const std::string& value) {
  options_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zera_txn.GovernanceProposal.options)
}
inline void GovernanceProposal::add_options(std::string&& value) {
  options_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zera_txn.GovernanceProposal.options)
}
inline void GovernanceProposal::add_options(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  options_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zera_txn.GovernanceProposal.options)
}
inline void GovernanceProposal::add_options(const char* value, size_t size) {
  options_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zera_txn.GovernanceProposal.options)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GovernanceProposal::options() const {
  // @@protoc_insertion_point(field_list:zera_txn.GovernanceProposal.options)
  return options_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GovernanceProposal::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.GovernanceProposal.options)
  return &options_;
}

// .google.protobuf.Timestamp start_timestamp = 7;
inline bool GovernanceProposal::_internal_has_start_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || start_timestamp_ != nullptr);
  return value;
}
inline bool GovernanceProposal::has_start_timestamp() const {
  return _internal_has_start_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GovernanceProposal::_internal_start_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GovernanceProposal::start_timestamp() const {
  // @@protoc_insertion_point(field_get:zera_txn.GovernanceProposal.start_timestamp)
  return _internal_start_timestamp();
}
inline void GovernanceProposal::unsafe_arena_set_allocated_start_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* start_timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_timestamp_);
  }
  start_timestamp_ = start_timestamp;
  if (start_timestamp) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.GovernanceProposal.start_timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GovernanceProposal::release_start_timestamp() {
  auto temp = unsafe_arena_release_start_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GovernanceProposal::unsafe_arena_release_start_timestamp() {
  // @@protoc_insertion_point(field_release:zera_txn.GovernanceProposal.start_timestamp)
  _has_bits_[0] &= ~0x00000001u;
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_timestamp_;
  start_timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GovernanceProposal::_internal_mutable_start_timestamp() {
  _has_bits_[0] |= 0x00000001u;
  if (start_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    start_timestamp_ = p;
  }
  return start_timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GovernanceProposal::mutable_start_timestamp() {
  // @@protoc_insertion_point(field_mutable:zera_txn.GovernanceProposal.start_timestamp)
  return _internal_mutable_start_timestamp();
}
inline void GovernanceProposal::set_allocated_start_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* start_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_timestamp_);
  }
  if (start_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      start_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_timestamp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  start_timestamp_ = start_timestamp;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.GovernanceProposal.start_timestamp)
}

// .google.protobuf.Timestamp end_timestamp = 8;
inline bool GovernanceProposal::_internal_has_end_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || end_timestamp_ != nullptr);
  return value;
}
inline bool GovernanceProposal::has_end_timestamp() const {
  return _internal_has_end_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GovernanceProposal::_internal_end_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GovernanceProposal::end_timestamp() const {
  // @@protoc_insertion_point(field_get:zera_txn.GovernanceProposal.end_timestamp)
  return _internal_end_timestamp();
}
inline void GovernanceProposal::unsafe_arena_set_allocated_end_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* end_timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_timestamp_);
  }
  end_timestamp_ = end_timestamp;
  if (end_timestamp) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.GovernanceProposal.end_timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GovernanceProposal::release_end_timestamp() {
  auto temp = unsafe_arena_release_end_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GovernanceProposal::unsafe_arena_release_end_timestamp() {
  // @@protoc_insertion_point(field_release:zera_txn.GovernanceProposal.end_timestamp)
  _has_bits_[0] &= ~0x00000002u;
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_timestamp_;
  end_timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GovernanceProposal::_internal_mutable_end_timestamp() {
  _has_bits_[0] |= 0x00000002u;
  if (end_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    end_timestamp_ = p;
  }
  return end_timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GovernanceProposal::mutable_end_timestamp() {
  // @@protoc_insertion_point(field_mutable:zera_txn.GovernanceProposal.end_timestamp)
  return _internal_mutable_end_timestamp();
}
inline void GovernanceProposal::set_allocated_end_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* end_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_timestamp_);
  }
  if (end_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      end_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_timestamp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  end_timestamp_ = end_timestamp;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.GovernanceProposal.end_timestamp)
}

// repeated .zera_txn.GovernanceTXN governance_txn = 9;
inline int GovernanceProposal::_internal_governance_txn_size() const {
  return governance_txn_.size();
}
inline int GovernanceProposal::governance_txn_size() const {
  return _internal_governance_txn_size();
}
inline void GovernanceProposal::clear_governance_txn() {
  governance_txn_.Clear();
}
inline ::zera_txn::GovernanceTXN* GovernanceProposal::mutable_governance_txn(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.GovernanceProposal.governance_txn)
  return governance_txn_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::GovernanceTXN >*
GovernanceProposal::mutable_governance_txn() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.GovernanceProposal.governance_txn)
  return &governance_txn_;
}
inline const ::zera_txn::GovernanceTXN& GovernanceProposal::_internal_governance_txn(int index) const {
  return governance_txn_.Get(index);
}
inline const ::zera_txn::GovernanceTXN& GovernanceProposal::governance_txn(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.GovernanceProposal.governance_txn)
  return _internal_governance_txn(index);
}
inline ::zera_txn::GovernanceTXN* GovernanceProposal::_internal_add_governance_txn() {
  return governance_txn_.Add();
}
inline ::zera_txn::GovernanceTXN* GovernanceProposal::add_governance_txn() {
  // @@protoc_insertion_point(field_add:zera_txn.GovernanceProposal.governance_txn)
  return _internal_add_governance_txn();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::GovernanceTXN >&
GovernanceProposal::governance_txn() const {
  // @@protoc_insertion_point(field_list:zera_txn.GovernanceProposal.governance_txn)
  return governance_txn_;
}

// -------------------------------------------------------------------

// GovernanceTXN

// .zera_txn.TRANSACTION_TYPE txn_type = 1;
inline void GovernanceTXN::clear_txn_type() {
  txn_type_ = 0;
}
inline ::zera_txn::TRANSACTION_TYPE GovernanceTXN::_internal_txn_type() const {
  return static_cast< ::zera_txn::TRANSACTION_TYPE >(txn_type_);
}
inline ::zera_txn::TRANSACTION_TYPE GovernanceTXN::txn_type() const {
  // @@protoc_insertion_point(field_get:zera_txn.GovernanceTXN.txn_type)
  return _internal_txn_type();
}
inline void GovernanceTXN::_internal_set_txn_type(::zera_txn::TRANSACTION_TYPE value) {
  
  txn_type_ = value;
}
inline void GovernanceTXN::set_txn_type(::zera_txn::TRANSACTION_TYPE value) {
  _internal_set_txn_type(value);
  // @@protoc_insertion_point(field_set:zera_txn.GovernanceTXN.txn_type)
}

// bytes serialized_txn = 2;
inline void GovernanceTXN::clear_serialized_txn() {
  serialized_txn_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GovernanceTXN::serialized_txn() const {
  // @@protoc_insertion_point(field_get:zera_txn.GovernanceTXN.serialized_txn)
  return _internal_serialized_txn();
}
inline void GovernanceTXN::set_serialized_txn(const std::string& value) {
  _internal_set_serialized_txn(value);
  // @@protoc_insertion_point(field_set:zera_txn.GovernanceTXN.serialized_txn)
}
inline std::string* GovernanceTXN::mutable_serialized_txn() {
  // @@protoc_insertion_point(field_mutable:zera_txn.GovernanceTXN.serialized_txn)
  return _internal_mutable_serialized_txn();
}
inline const std::string& GovernanceTXN::_internal_serialized_txn() const {
  return serialized_txn_.Get();
}
inline void GovernanceTXN::_internal_set_serialized_txn(const std::string& value) {
  
  serialized_txn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GovernanceTXN::set_serialized_txn(std::string&& value) {
  
  serialized_txn_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.GovernanceTXN.serialized_txn)
}
inline void GovernanceTXN::set_serialized_txn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serialized_txn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.GovernanceTXN.serialized_txn)
}
inline void GovernanceTXN::set_serialized_txn(const void* value,
    size_t size) {
  
  serialized_txn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.GovernanceTXN.serialized_txn)
}
inline std::string* GovernanceTXN::_internal_mutable_serialized_txn() {
  
  return serialized_txn_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GovernanceTXN::release_serialized_txn() {
  // @@protoc_insertion_point(field_release:zera_txn.GovernanceTXN.serialized_txn)
  return serialized_txn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GovernanceTXN::set_allocated_serialized_txn(std::string* serialized_txn) {
  if (serialized_txn != nullptr) {
    
  } else {
    
  }
  serialized_txn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serialized_txn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.GovernanceTXN.serialized_txn)
}
inline std::string* GovernanceTXN::unsafe_arena_release_serialized_txn() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.GovernanceTXN.serialized_txn)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return serialized_txn_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GovernanceTXN::unsafe_arena_set_allocated_serialized_txn(
    std::string* serialized_txn) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (serialized_txn != nullptr) {
    
  } else {
    
  }
  serialized_txn_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      serialized_txn, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.GovernanceTXN.serialized_txn)
}

// bytes txn_hash = 3;
inline void GovernanceTXN::clear_txn_hash() {
  txn_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GovernanceTXN::txn_hash() const {
  // @@protoc_insertion_point(field_get:zera_txn.GovernanceTXN.txn_hash)
  return _internal_txn_hash();
}
inline void GovernanceTXN::set_txn_hash(const std::string& value) {
  _internal_set_txn_hash(value);
  // @@protoc_insertion_point(field_set:zera_txn.GovernanceTXN.txn_hash)
}
inline std::string* GovernanceTXN::mutable_txn_hash() {
  // @@protoc_insertion_point(field_mutable:zera_txn.GovernanceTXN.txn_hash)
  return _internal_mutable_txn_hash();
}
inline const std::string& GovernanceTXN::_internal_txn_hash() const {
  return txn_hash_.Get();
}
inline void GovernanceTXN::_internal_set_txn_hash(const std::string& value) {
  
  txn_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GovernanceTXN::set_txn_hash(std::string&& value) {
  
  txn_hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.GovernanceTXN.txn_hash)
}
inline void GovernanceTXN::set_txn_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txn_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.GovernanceTXN.txn_hash)
}
inline void GovernanceTXN::set_txn_hash(const void* value,
    size_t size) {
  
  txn_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.GovernanceTXN.txn_hash)
}
inline std::string* GovernanceTXN::_internal_mutable_txn_hash() {
  
  return txn_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GovernanceTXN::release_txn_hash() {
  // @@protoc_insertion_point(field_release:zera_txn.GovernanceTXN.txn_hash)
  return txn_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GovernanceTXN::set_allocated_txn_hash(std::string* txn_hash) {
  if (txn_hash != nullptr) {
    
  } else {
    
  }
  txn_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txn_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.GovernanceTXN.txn_hash)
}
inline std::string* GovernanceTXN::unsafe_arena_release_txn_hash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.GovernanceTXN.txn_hash)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return txn_hash_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GovernanceTXN::unsafe_arena_set_allocated_txn_hash(
    std::string* txn_hash) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (txn_hash != nullptr) {
    
  } else {
    
  }
  txn_hash_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      txn_hash, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.GovernanceTXN.txn_hash)
}

// -------------------------------------------------------------------

// SmartContractTXN

// .zera_txn.BaseTXN base = 1;
inline bool SmartContractTXN::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool SmartContractTXN::has_base() const {
  return _internal_has_base();
}
inline void SmartContractTXN::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::zera_txn::BaseTXN& SmartContractTXN::_internal_base() const {
  const ::zera_txn::BaseTXN* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::BaseTXN*>(
      &::zera_txn::_BaseTXN_default_instance_);
}
inline const ::zera_txn::BaseTXN& SmartContractTXN::base() const {
  // @@protoc_insertion_point(field_get:zera_txn.SmartContractTXN.base)
  return _internal_base();
}
inline void SmartContractTXN::unsafe_arena_set_allocated_base(
    ::zera_txn::BaseTXN* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.SmartContractTXN.base)
}
inline ::zera_txn::BaseTXN* SmartContractTXN::release_base() {
  auto temp = unsafe_arena_release_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::BaseTXN* SmartContractTXN::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:zera_txn.SmartContractTXN.base)
  
  ::zera_txn::BaseTXN* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::zera_txn::BaseTXN* SmartContractTXN::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::BaseTXN>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::zera_txn::BaseTXN* SmartContractTXN::mutable_base() {
  // @@protoc_insertion_point(field_mutable:zera_txn.SmartContractTXN.base)
  return _internal_mutable_base();
}
inline void SmartContractTXN::set_allocated_base(::zera_txn::BaseTXN* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.SmartContractTXN.base)
}

// string raw_code = 2;
inline void SmartContractTXN::clear_raw_code() {
  raw_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SmartContractTXN::raw_code() const {
  // @@protoc_insertion_point(field_get:zera_txn.SmartContractTXN.raw_code)
  return _internal_raw_code();
}
inline void SmartContractTXN::set_raw_code(const std::string& value) {
  _internal_set_raw_code(value);
  // @@protoc_insertion_point(field_set:zera_txn.SmartContractTXN.raw_code)
}
inline std::string* SmartContractTXN::mutable_raw_code() {
  // @@protoc_insertion_point(field_mutable:zera_txn.SmartContractTXN.raw_code)
  return _internal_mutable_raw_code();
}
inline const std::string& SmartContractTXN::_internal_raw_code() const {
  return raw_code_.Get();
}
inline void SmartContractTXN::_internal_set_raw_code(const std::string& value) {
  
  raw_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SmartContractTXN::set_raw_code(std::string&& value) {
  
  raw_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.SmartContractTXN.raw_code)
}
inline void SmartContractTXN::set_raw_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  raw_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.SmartContractTXN.raw_code)
}
inline void SmartContractTXN::set_raw_code(const char* value,
    size_t size) {
  
  raw_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.SmartContractTXN.raw_code)
}
inline std::string* SmartContractTXN::_internal_mutable_raw_code() {
  
  return raw_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SmartContractTXN::release_raw_code() {
  // @@protoc_insertion_point(field_release:zera_txn.SmartContractTXN.raw_code)
  return raw_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SmartContractTXN::set_allocated_raw_code(std::string* raw_code) {
  if (raw_code != nullptr) {
    
  } else {
    
  }
  raw_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raw_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.SmartContractTXN.raw_code)
}
inline std::string* SmartContractTXN::unsafe_arena_release_raw_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.SmartContractTXN.raw_code)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return raw_code_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SmartContractTXN::unsafe_arena_set_allocated_raw_code(
    std::string* raw_code) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (raw_code != nullptr) {
    
  } else {
    
  }
  raw_code_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      raw_code, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.SmartContractTXN.raw_code)
}

// .zera_txn.LANGUAGE language = 3;
inline void SmartContractTXN::clear_language() {
  language_ = 0;
}
inline ::zera_txn::LANGUAGE SmartContractTXN::_internal_language() const {
  return static_cast< ::zera_txn::LANGUAGE >(language_);
}
inline ::zera_txn::LANGUAGE SmartContractTXN::language() const {
  // @@protoc_insertion_point(field_get:zera_txn.SmartContractTXN.language)
  return _internal_language();
}
inline void SmartContractTXN::_internal_set_language(::zera_txn::LANGUAGE value) {
  
  language_ = value;
}
inline void SmartContractTXN::set_language(::zera_txn::LANGUAGE value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:zera_txn.SmartContractTXN.language)
}

// repeated .zera_txn.SmartContractParameter variable_type = 4;
inline int SmartContractTXN::_internal_variable_type_size() const {
  return variable_type_.size();
}
inline int SmartContractTXN::variable_type_size() const {
  return _internal_variable_type_size();
}
inline void SmartContractTXN::clear_variable_type() {
  variable_type_.Clear();
}
inline ::zera_txn::SmartContractParameter* SmartContractTXN::mutable_variable_type(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.SmartContractTXN.variable_type)
  return variable_type_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::SmartContractParameter >*
SmartContractTXN::mutable_variable_type() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.SmartContractTXN.variable_type)
  return &variable_type_;
}
inline const ::zera_txn::SmartContractParameter& SmartContractTXN::_internal_variable_type(int index) const {
  return variable_type_.Get(index);
}
inline const ::zera_txn::SmartContractParameter& SmartContractTXN::variable_type(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.SmartContractTXN.variable_type)
  return _internal_variable_type(index);
}
inline ::zera_txn::SmartContractParameter* SmartContractTXN::_internal_add_variable_type() {
  return variable_type_.Add();
}
inline ::zera_txn::SmartContractParameter* SmartContractTXN::add_variable_type() {
  // @@protoc_insertion_point(field_add:zera_txn.SmartContractTXN.variable_type)
  return _internal_add_variable_type();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::SmartContractParameter >&
SmartContractTXN::variable_type() const {
  // @@protoc_insertion_point(field_list:zera_txn.SmartContractTXN.variable_type)
  return variable_type_;
}

// -------------------------------------------------------------------

// SmartContractExecuteTXN

// .zera_txn.BaseTXN base = 1;
inline bool SmartContractExecuteTXN::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool SmartContractExecuteTXN::has_base() const {
  return _internal_has_base();
}
inline void SmartContractExecuteTXN::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::zera_txn::BaseTXN& SmartContractExecuteTXN::_internal_base() const {
  const ::zera_txn::BaseTXN* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::BaseTXN*>(
      &::zera_txn::_BaseTXN_default_instance_);
}
inline const ::zera_txn::BaseTXN& SmartContractExecuteTXN::base() const {
  // @@protoc_insertion_point(field_get:zera_txn.SmartContractExecuteTXN.base)
  return _internal_base();
}
inline void SmartContractExecuteTXN::unsafe_arena_set_allocated_base(
    ::zera_txn::BaseTXN* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.SmartContractExecuteTXN.base)
}
inline ::zera_txn::BaseTXN* SmartContractExecuteTXN::release_base() {
  auto temp = unsafe_arena_release_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::BaseTXN* SmartContractExecuteTXN::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:zera_txn.SmartContractExecuteTXN.base)
  
  ::zera_txn::BaseTXN* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::zera_txn::BaseTXN* SmartContractExecuteTXN::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::BaseTXN>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::zera_txn::BaseTXN* SmartContractExecuteTXN::mutable_base() {
  // @@protoc_insertion_point(field_mutable:zera_txn.SmartContractExecuteTXN.base)
  return _internal_mutable_base();
}
inline void SmartContractExecuteTXN::set_allocated_base(::zera_txn::BaseTXN* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.SmartContractExecuteTXN.base)
}

// bytes smart_contract_id = 2;
inline void SmartContractExecuteTXN::clear_smart_contract_id() {
  smart_contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SmartContractExecuteTXN::smart_contract_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.SmartContractExecuteTXN.smart_contract_id)
  return _internal_smart_contract_id();
}
inline void SmartContractExecuteTXN::set_smart_contract_id(const std::string& value) {
  _internal_set_smart_contract_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.SmartContractExecuteTXN.smart_contract_id)
}
inline std::string* SmartContractExecuteTXN::mutable_smart_contract_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.SmartContractExecuteTXN.smart_contract_id)
  return _internal_mutable_smart_contract_id();
}
inline const std::string& SmartContractExecuteTXN::_internal_smart_contract_id() const {
  return smart_contract_id_.Get();
}
inline void SmartContractExecuteTXN::_internal_set_smart_contract_id(const std::string& value) {
  
  smart_contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SmartContractExecuteTXN::set_smart_contract_id(std::string&& value) {
  
  smart_contract_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.SmartContractExecuteTXN.smart_contract_id)
}
inline void SmartContractExecuteTXN::set_smart_contract_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  smart_contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.SmartContractExecuteTXN.smart_contract_id)
}
inline void SmartContractExecuteTXN::set_smart_contract_id(const void* value,
    size_t size) {
  
  smart_contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.SmartContractExecuteTXN.smart_contract_id)
}
inline std::string* SmartContractExecuteTXN::_internal_mutable_smart_contract_id() {
  
  return smart_contract_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SmartContractExecuteTXN::release_smart_contract_id() {
  // @@protoc_insertion_point(field_release:zera_txn.SmartContractExecuteTXN.smart_contract_id)
  return smart_contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SmartContractExecuteTXN::set_allocated_smart_contract_id(std::string* smart_contract_id) {
  if (smart_contract_id != nullptr) {
    
  } else {
    
  }
  smart_contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), smart_contract_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.SmartContractExecuteTXN.smart_contract_id)
}
inline std::string* SmartContractExecuteTXN::unsafe_arena_release_smart_contract_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.SmartContractExecuteTXN.smart_contract_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return smart_contract_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SmartContractExecuteTXN::unsafe_arena_set_allocated_smart_contract_id(
    std::string* smart_contract_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (smart_contract_id != nullptr) {
    
  } else {
    
  }
  smart_contract_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      smart_contract_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.SmartContractExecuteTXN.smart_contract_id)
}

// repeated .zera_txn.SmartContractParameter parameters = 3;
inline int SmartContractExecuteTXN::_internal_parameters_size() const {
  return parameters_.size();
}
inline int SmartContractExecuteTXN::parameters_size() const {
  return _internal_parameters_size();
}
inline void SmartContractExecuteTXN::clear_parameters() {
  parameters_.Clear();
}
inline ::zera_txn::SmartContractParameter* SmartContractExecuteTXN::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.SmartContractExecuteTXN.parameters)
  return parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::SmartContractParameter >*
SmartContractExecuteTXN::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.SmartContractExecuteTXN.parameters)
  return &parameters_;
}
inline const ::zera_txn::SmartContractParameter& SmartContractExecuteTXN::_internal_parameters(int index) const {
  return parameters_.Get(index);
}
inline const ::zera_txn::SmartContractParameter& SmartContractExecuteTXN::parameters(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.SmartContractExecuteTXN.parameters)
  return _internal_parameters(index);
}
inline ::zera_txn::SmartContractParameter* SmartContractExecuteTXN::_internal_add_parameters() {
  return parameters_.Add();
}
inline ::zera_txn::SmartContractParameter* SmartContractExecuteTXN::add_parameters() {
  // @@protoc_insertion_point(field_add:zera_txn.SmartContractExecuteTXN.parameters)
  return _internal_add_parameters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::SmartContractParameter >&
SmartContractExecuteTXN::parameters() const {
  // @@protoc_insertion_point(field_list:zera_txn.SmartContractExecuteTXN.parameters)
  return parameters_;
}

// -------------------------------------------------------------------

// Validator

// .zera_txn.PublicKey public_key = 1;
inline bool Validator::_internal_has_public_key() const {
  return this != internal_default_instance() && public_key_ != nullptr;
}
inline bool Validator::has_public_key() const {
  return _internal_has_public_key();
}
inline void Validator::clear_public_key() {
  if (GetArena() == nullptr && public_key_ != nullptr) {
    delete public_key_;
  }
  public_key_ = nullptr;
}
inline const ::zera_txn::PublicKey& Validator::_internal_public_key() const {
  const ::zera_txn::PublicKey* p = public_key_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::PublicKey*>(
      &::zera_txn::_PublicKey_default_instance_);
}
inline const ::zera_txn::PublicKey& Validator::public_key() const {
  // @@protoc_insertion_point(field_get:zera_txn.Validator.public_key)
  return _internal_public_key();
}
inline void Validator::unsafe_arena_set_allocated_public_key(
    ::zera_txn::PublicKey* public_key) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_key_);
  }
  public_key_ = public_key;
  if (public_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.Validator.public_key)
}
inline ::zera_txn::PublicKey* Validator::release_public_key() {
  auto temp = unsafe_arena_release_public_key();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::PublicKey* Validator::unsafe_arena_release_public_key() {
  // @@protoc_insertion_point(field_release:zera_txn.Validator.public_key)
  
  ::zera_txn::PublicKey* temp = public_key_;
  public_key_ = nullptr;
  return temp;
}
inline ::zera_txn::PublicKey* Validator::_internal_mutable_public_key() {
  
  if (public_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::PublicKey>(GetArena());
    public_key_ = p;
  }
  return public_key_;
}
inline ::zera_txn::PublicKey* Validator::mutable_public_key() {
  // @@protoc_insertion_point(field_mutable:zera_txn.Validator.public_key)
  return _internal_mutable_public_key();
}
inline void Validator::set_allocated_public_key(::zera_txn::PublicKey* public_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete public_key_;
  }
  if (public_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(public_key);
    if (message_arena != submessage_arena) {
      public_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, public_key, submessage_arena);
    }
    
  } else {
    
  }
  public_key_ = public_key;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.Validator.public_key)
}

// string host = 2;
inline void Validator::clear_host() {
  host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Validator::host() const {
  // @@protoc_insertion_point(field_get:zera_txn.Validator.host)
  return _internal_host();
}
inline void Validator::set_host(const std::string& value) {
  _internal_set_host(value);
  // @@protoc_insertion_point(field_set:zera_txn.Validator.host)
}
inline std::string* Validator::mutable_host() {
  // @@protoc_insertion_point(field_mutable:zera_txn.Validator.host)
  return _internal_mutable_host();
}
inline const std::string& Validator::_internal_host() const {
  return host_.Get();
}
inline void Validator::_internal_set_host(const std::string& value) {
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Validator::set_host(std::string&& value) {
  
  host_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.Validator.host)
}
inline void Validator::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.Validator.host)
}
inline void Validator::set_host(const char* value,
    size_t size) {
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.Validator.host)
}
inline std::string* Validator::_internal_mutable_host() {
  
  return host_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Validator::release_host() {
  // @@protoc_insertion_point(field_release:zera_txn.Validator.host)
  return host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Validator::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.Validator.host)
}
inline std::string* Validator::unsafe_arena_release_host() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.Validator.host)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return host_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Validator::unsafe_arena_set_allocated_host(
    std::string* host) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (host != nullptr) {
    
  } else {
    
  }
  host_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      host, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.Validator.host)
}

// string client_port = 3;
inline void Validator::clear_client_port() {
  client_port_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Validator::client_port() const {
  // @@protoc_insertion_point(field_get:zera_txn.Validator.client_port)
  return _internal_client_port();
}
inline void Validator::set_client_port(const std::string& value) {
  _internal_set_client_port(value);
  // @@protoc_insertion_point(field_set:zera_txn.Validator.client_port)
}
inline std::string* Validator::mutable_client_port() {
  // @@protoc_insertion_point(field_mutable:zera_txn.Validator.client_port)
  return _internal_mutable_client_port();
}
inline const std::string& Validator::_internal_client_port() const {
  return client_port_.Get();
}
inline void Validator::_internal_set_client_port(const std::string& value) {
  
  client_port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Validator::set_client_port(std::string&& value) {
  
  client_port_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.Validator.client_port)
}
inline void Validator::set_client_port(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.Validator.client_port)
}
inline void Validator::set_client_port(const char* value,
    size_t size) {
  
  client_port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.Validator.client_port)
}
inline std::string* Validator::_internal_mutable_client_port() {
  
  return client_port_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Validator::release_client_port() {
  // @@protoc_insertion_point(field_release:zera_txn.Validator.client_port)
  return client_port_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Validator::set_allocated_client_port(std::string* client_port) {
  if (client_port != nullptr) {
    
  } else {
    
  }
  client_port_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_port,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.Validator.client_port)
}
inline std::string* Validator::unsafe_arena_release_client_port() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.Validator.client_port)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return client_port_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Validator::unsafe_arena_set_allocated_client_port(
    std::string* client_port) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (client_port != nullptr) {
    
  } else {
    
  }
  client_port_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      client_port, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.Validator.client_port)
}

// string validator_port = 4;
inline void Validator::clear_validator_port() {
  validator_port_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Validator::validator_port() const {
  // @@protoc_insertion_point(field_get:zera_txn.Validator.validator_port)
  return _internal_validator_port();
}
inline void Validator::set_validator_port(const std::string& value) {
  _internal_set_validator_port(value);
  // @@protoc_insertion_point(field_set:zera_txn.Validator.validator_port)
}
inline std::string* Validator::mutable_validator_port() {
  // @@protoc_insertion_point(field_mutable:zera_txn.Validator.validator_port)
  return _internal_mutable_validator_port();
}
inline const std::string& Validator::_internal_validator_port() const {
  return validator_port_.Get();
}
inline void Validator::_internal_set_validator_port(const std::string& value) {
  
  validator_port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Validator::set_validator_port(std::string&& value) {
  
  validator_port_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.Validator.validator_port)
}
inline void Validator::set_validator_port(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  validator_port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.Validator.validator_port)
}
inline void Validator::set_validator_port(const char* value,
    size_t size) {
  
  validator_port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.Validator.validator_port)
}
inline std::string* Validator::_internal_mutable_validator_port() {
  
  return validator_port_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Validator::release_validator_port() {
  // @@protoc_insertion_point(field_release:zera_txn.Validator.validator_port)
  return validator_port_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Validator::set_allocated_validator_port(std::string* validator_port) {
  if (validator_port != nullptr) {
    
  } else {
    
  }
  validator_port_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validator_port,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.Validator.validator_port)
}
inline std::string* Validator::unsafe_arena_release_validator_port() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.Validator.validator_port)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return validator_port_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Validator::unsafe_arena_set_allocated_validator_port(
    std::string* validator_port) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (validator_port != nullptr) {
    
  } else {
    
  }
  validator_port_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      validator_port, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.Validator.validator_port)
}

// repeated string staked_contract_ids = 5;
inline int Validator::_internal_staked_contract_ids_size() const {
  return staked_contract_ids_.size();
}
inline int Validator::staked_contract_ids_size() const {
  return _internal_staked_contract_ids_size();
}
inline void Validator::clear_staked_contract_ids() {
  staked_contract_ids_.Clear();
}
inline std::string* Validator::add_staked_contract_ids() {
  // @@protoc_insertion_point(field_add_mutable:zera_txn.Validator.staked_contract_ids)
  return _internal_add_staked_contract_ids();
}
inline const std::string& Validator::_internal_staked_contract_ids(int index) const {
  return staked_contract_ids_.Get(index);
}
inline const std::string& Validator::staked_contract_ids(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.Validator.staked_contract_ids)
  return _internal_staked_contract_ids(index);
}
inline std::string* Validator::mutable_staked_contract_ids(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.Validator.staked_contract_ids)
  return staked_contract_ids_.Mutable(index);
}
inline void Validator::set_staked_contract_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:zera_txn.Validator.staked_contract_ids)
  staked_contract_ids_.Mutable(index)->assign(value);
}
inline void Validator::set_staked_contract_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:zera_txn.Validator.staked_contract_ids)
  staked_contract_ids_.Mutable(index)->assign(std::move(value));
}
inline void Validator::set_staked_contract_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  staked_contract_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zera_txn.Validator.staked_contract_ids)
}
inline void Validator::set_staked_contract_ids(int index, const char* value, size_t size) {
  staked_contract_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zera_txn.Validator.staked_contract_ids)
}
inline std::string* Validator::_internal_add_staked_contract_ids() {
  return staked_contract_ids_.Add();
}
inline void Validator::add_staked_contract_ids(const std::string& value) {
  staked_contract_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zera_txn.Validator.staked_contract_ids)
}
inline void Validator::add_staked_contract_ids(std::string&& value) {
  staked_contract_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zera_txn.Validator.staked_contract_ids)
}
inline void Validator::add_staked_contract_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  staked_contract_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zera_txn.Validator.staked_contract_ids)
}
inline void Validator::add_staked_contract_ids(const char* value, size_t size) {
  staked_contract_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zera_txn.Validator.staked_contract_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Validator::staked_contract_ids() const {
  // @@protoc_insertion_point(field_list:zera_txn.Validator.staked_contract_ids)
  return staked_contract_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Validator::mutable_staked_contract_ids() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.Validator.staked_contract_ids)
  return &staked_contract_ids_;
}

// uint64 benchmark = 6;
inline void Validator::clear_benchmark() {
  benchmark_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Validator::_internal_benchmark() const {
  return benchmark_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Validator::benchmark() const {
  // @@protoc_insertion_point(field_get:zera_txn.Validator.benchmark)
  return _internal_benchmark();
}
inline void Validator::_internal_set_benchmark(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  benchmark_ = value;
}
inline void Validator::set_benchmark(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_benchmark(value);
  // @@protoc_insertion_point(field_set:zera_txn.Validator.benchmark)
}

// .google.protobuf.Timestamp timestamp = 7;
inline bool Validator::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool Validator::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Validator::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Validator::timestamp() const {
  // @@protoc_insertion_point(field_get:zera_txn.Validator.timestamp)
  return _internal_timestamp();
}
inline void Validator::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.Validator.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Validator::release_timestamp() {
  auto temp = unsafe_arena_release_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Validator::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:zera_txn.Validator.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Validator::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Validator::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:zera_txn.Validator.timestamp)
  return _internal_mutable_timestamp();
}
inline void Validator::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.Validator.timestamp)
}

// bool lite = 8;
inline void Validator::clear_lite() {
  lite_ = false;
}
inline bool Validator::_internal_lite() const {
  return lite_;
}
inline bool Validator::lite() const {
  // @@protoc_insertion_point(field_get:zera_txn.Validator.lite)
  return _internal_lite();
}
inline void Validator::_internal_set_lite(bool value) {
  
  lite_ = value;
}
inline void Validator::set_lite(bool value) {
  _internal_set_lite(value);
  // @@protoc_insertion_point(field_set:zera_txn.Validator.lite)
}

// bool online = 9;
inline void Validator::clear_online() {
  online_ = false;
}
inline bool Validator::_internal_online() const {
  return online_;
}
inline bool Validator::online() const {
  // @@protoc_insertion_point(field_get:zera_txn.Validator.online)
  return _internal_online();
}
inline void Validator::_internal_set_online(bool value) {
  
  online_ = value;
}
inline void Validator::set_online(bool value) {
  _internal_set_online(value);
  // @@protoc_insertion_point(field_set:zera_txn.Validator.online)
}

// -------------------------------------------------------------------

// ValidatorRegistration

// .zera_txn.BaseTXN base = 1;
inline bool ValidatorRegistration::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool ValidatorRegistration::has_base() const {
  return _internal_has_base();
}
inline void ValidatorRegistration::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::zera_txn::BaseTXN& ValidatorRegistration::_internal_base() const {
  const ::zera_txn::BaseTXN* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::BaseTXN*>(
      &::zera_txn::_BaseTXN_default_instance_);
}
inline const ::zera_txn::BaseTXN& ValidatorRegistration::base() const {
  // @@protoc_insertion_point(field_get:zera_txn.ValidatorRegistration.base)
  return _internal_base();
}
inline void ValidatorRegistration::unsafe_arena_set_allocated_base(
    ::zera_txn::BaseTXN* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ValidatorRegistration.base)
}
inline ::zera_txn::BaseTXN* ValidatorRegistration::release_base() {
  auto temp = unsafe_arena_release_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::BaseTXN* ValidatorRegistration::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:zera_txn.ValidatorRegistration.base)
  
  ::zera_txn::BaseTXN* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::zera_txn::BaseTXN* ValidatorRegistration::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::BaseTXN>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::zera_txn::BaseTXN* ValidatorRegistration::mutable_base() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ValidatorRegistration.base)
  return _internal_mutable_base();
}
inline void ValidatorRegistration::set_allocated_base(::zera_txn::BaseTXN* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ValidatorRegistration.base)
}

// .zera_txn.Validator validator = 2;
inline bool ValidatorRegistration::_internal_has_validator() const {
  return this != internal_default_instance() && validator_ != nullptr;
}
inline bool ValidatorRegistration::has_validator() const {
  return _internal_has_validator();
}
inline void ValidatorRegistration::clear_validator() {
  if (GetArena() == nullptr && validator_ != nullptr) {
    delete validator_;
  }
  validator_ = nullptr;
}
inline const ::zera_txn::Validator& ValidatorRegistration::_internal_validator() const {
  const ::zera_txn::Validator* p = validator_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::Validator*>(
      &::zera_txn::_Validator_default_instance_);
}
inline const ::zera_txn::Validator& ValidatorRegistration::validator() const {
  // @@protoc_insertion_point(field_get:zera_txn.ValidatorRegistration.validator)
  return _internal_validator();
}
inline void ValidatorRegistration::unsafe_arena_set_allocated_validator(
    ::zera_txn::Validator* validator) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(validator_);
  }
  validator_ = validator;
  if (validator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ValidatorRegistration.validator)
}
inline ::zera_txn::Validator* ValidatorRegistration::release_validator() {
  auto temp = unsafe_arena_release_validator();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::Validator* ValidatorRegistration::unsafe_arena_release_validator() {
  // @@protoc_insertion_point(field_release:zera_txn.ValidatorRegistration.validator)
  
  ::zera_txn::Validator* temp = validator_;
  validator_ = nullptr;
  return temp;
}
inline ::zera_txn::Validator* ValidatorRegistration::_internal_mutable_validator() {
  
  if (validator_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::Validator>(GetArena());
    validator_ = p;
  }
  return validator_;
}
inline ::zera_txn::Validator* ValidatorRegistration::mutable_validator() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ValidatorRegistration.validator)
  return _internal_mutable_validator();
}
inline void ValidatorRegistration::set_allocated_validator(::zera_txn::Validator* validator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete validator_;
  }
  if (validator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(validator);
    if (message_arena != submessage_arena) {
      validator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, validator, submessage_arena);
    }
    
  } else {
    
  }
  validator_ = validator;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ValidatorRegistration.validator)
}

// bool register = 3;
inline void ValidatorRegistration::clear_register_() {
  register__ = false;
}
inline bool ValidatorRegistration::_internal_register_() const {
  return register__;
}
inline bool ValidatorRegistration::register_() const {
  // @@protoc_insertion_point(field_get:zera_txn.ValidatorRegistration.register)
  return _internal_register_();
}
inline void ValidatorRegistration::_internal_set_register_(bool value) {
  
  register__ = value;
}
inline void ValidatorRegistration::set_register_(bool value) {
  _internal_set_register_(value);
  // @@protoc_insertion_point(field_set:zera_txn.ValidatorRegistration.register)
}

// -------------------------------------------------------------------

// ValidatorHeartbeat

// .zera_txn.BaseTXN base = 1;
inline bool ValidatorHeartbeat::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool ValidatorHeartbeat::has_base() const {
  return _internal_has_base();
}
inline void ValidatorHeartbeat::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::zera_txn::BaseTXN& ValidatorHeartbeat::_internal_base() const {
  const ::zera_txn::BaseTXN* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::BaseTXN*>(
      &::zera_txn::_BaseTXN_default_instance_);
}
inline const ::zera_txn::BaseTXN& ValidatorHeartbeat::base() const {
  // @@protoc_insertion_point(field_get:zera_txn.ValidatorHeartbeat.base)
  return _internal_base();
}
inline void ValidatorHeartbeat::unsafe_arena_set_allocated_base(
    ::zera_txn::BaseTXN* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ValidatorHeartbeat.base)
}
inline ::zera_txn::BaseTXN* ValidatorHeartbeat::release_base() {
  auto temp = unsafe_arena_release_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::BaseTXN* ValidatorHeartbeat::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:zera_txn.ValidatorHeartbeat.base)
  
  ::zera_txn::BaseTXN* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::zera_txn::BaseTXN* ValidatorHeartbeat::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::BaseTXN>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::zera_txn::BaseTXN* ValidatorHeartbeat::mutable_base() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ValidatorHeartbeat.base)
  return _internal_mutable_base();
}
inline void ValidatorHeartbeat::set_allocated_base(::zera_txn::BaseTXN* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ValidatorHeartbeat.base)
}

// bool online = 2;
inline void ValidatorHeartbeat::clear_online() {
  online_ = false;
}
inline bool ValidatorHeartbeat::_internal_online() const {
  return online_;
}
inline bool ValidatorHeartbeat::online() const {
  // @@protoc_insertion_point(field_get:zera_txn.ValidatorHeartbeat.online)
  return _internal_online();
}
inline void ValidatorHeartbeat::_internal_set_online(bool value) {
  
  online_ = value;
}
inline void ValidatorHeartbeat::set_online(bool value) {
  _internal_set_online(value);
  // @@protoc_insertion_point(field_set:zera_txn.ValidatorHeartbeat.online)
}

// -------------------------------------------------------------------

// SmartContractParameter

// uint32 index = 75;
inline void SmartContractParameter::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SmartContractParameter::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SmartContractParameter::index() const {
  // @@protoc_insertion_point(field_get:zera_txn.SmartContractParameter.index)
  return _internal_index();
}
inline void SmartContractParameter::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void SmartContractParameter::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:zera_txn.SmartContractParameter.index)
}

// .zera_txn.VARIABLE_TYPE type = 76;
inline void SmartContractParameter::clear_type() {
  type_ = 0;
}
inline ::zera_txn::VARIABLE_TYPE SmartContractParameter::_internal_type() const {
  return static_cast< ::zera_txn::VARIABLE_TYPE >(type_);
}
inline ::zera_txn::VARIABLE_TYPE SmartContractParameter::type() const {
  // @@protoc_insertion_point(field_get:zera_txn.SmartContractParameter.type)
  return _internal_type();
}
inline void SmartContractParameter::_internal_set_type(::zera_txn::VARIABLE_TYPE value) {
  
  type_ = value;
}
inline void SmartContractParameter::set_type(::zera_txn::VARIABLE_TYPE value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:zera_txn.SmartContractParameter.type)
}

// string value = 77;
inline bool SmartContractParameter::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SmartContractParameter::has_value() const {
  return _internal_has_value();
}
inline void SmartContractParameter::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SmartContractParameter::value() const {
  // @@protoc_insertion_point(field_get:zera_txn.SmartContractParameter.value)
  return _internal_value();
}
inline void SmartContractParameter::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:zera_txn.SmartContractParameter.value)
}
inline std::string* SmartContractParameter::mutable_value() {
  // @@protoc_insertion_point(field_mutable:zera_txn.SmartContractParameter.value)
  return _internal_mutable_value();
}
inline const std::string& SmartContractParameter::_internal_value() const {
  return value_.Get();
}
inline void SmartContractParameter::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SmartContractParameter::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.SmartContractParameter.value)
}
inline void SmartContractParameter::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.SmartContractParameter.value)
}
inline void SmartContractParameter::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.SmartContractParameter.value)
}
inline std::string* SmartContractParameter::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SmartContractParameter::release_value() {
  // @@protoc_insertion_point(field_release:zera_txn.SmartContractParameter.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SmartContractParameter::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.SmartContractParameter.value)
}
inline std::string* SmartContractParameter::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.SmartContractParameter.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SmartContractParameter::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.SmartContractParameter.value)
}

// -------------------------------------------------------------------

// Votes

// repeated .zera_txn.VotePair votes = 1;
inline int Votes::_internal_votes_size() const {
  return votes_.size();
}
inline int Votes::votes_size() const {
  return _internal_votes_size();
}
inline void Votes::clear_votes() {
  votes_.Clear();
}
inline ::zera_txn::VotePair* Votes::mutable_votes(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.Votes.votes)
  return votes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::VotePair >*
Votes::mutable_votes() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.Votes.votes)
  return &votes_;
}
inline const ::zera_txn::VotePair& Votes::_internal_votes(int index) const {
  return votes_.Get(index);
}
inline const ::zera_txn::VotePair& Votes::votes(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.Votes.votes)
  return _internal_votes(index);
}
inline ::zera_txn::VotePair* Votes::_internal_add_votes() {
  return votes_.Add();
}
inline ::zera_txn::VotePair* Votes::add_votes() {
  // @@protoc_insertion_point(field_add:zera_txn.Votes.votes)
  return _internal_add_votes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::VotePair >&
Votes::votes() const {
  // @@protoc_insertion_point(field_list:zera_txn.Votes.votes)
  return votes_;
}

// -------------------------------------------------------------------

// VotePair

// string contract_id = 1;
inline void VotePair::clear_contract_id() {
  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VotePair::contract_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.VotePair.contract_id)
  return _internal_contract_id();
}
inline void VotePair::set_contract_id(const std::string& value) {
  _internal_set_contract_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.VotePair.contract_id)
}
inline std::string* VotePair::mutable_contract_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.VotePair.contract_id)
  return _internal_mutable_contract_id();
}
inline const std::string& VotePair::_internal_contract_id() const {
  return contract_id_.Get();
}
inline void VotePair::_internal_set_contract_id(const std::string& value) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VotePair::set_contract_id(std::string&& value) {
  
  contract_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.VotePair.contract_id)
}
inline void VotePair::set_contract_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.VotePair.contract_id)
}
inline void VotePair::set_contract_id(const char* value,
    size_t size) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.VotePair.contract_id)
}
inline std::string* VotePair::_internal_mutable_contract_id() {
  
  return contract_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VotePair::release_contract_id() {
  // @@protoc_insertion_point(field_release:zera_txn.VotePair.contract_id)
  return contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VotePair::set_allocated_contract_id(std::string* contract_id) {
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.VotePair.contract_id)
}
inline std::string* VotePair::unsafe_arena_release_contract_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.VotePair.contract_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contract_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VotePair::unsafe_arena_set_allocated_contract_id(
    std::string* contract_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contract_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.VotePair.contract_id)
}

// string amount = 2;
inline void VotePair::clear_amount() {
  amount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VotePair::amount() const {
  // @@protoc_insertion_point(field_get:zera_txn.VotePair.amount)
  return _internal_amount();
}
inline void VotePair::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:zera_txn.VotePair.amount)
}
inline std::string* VotePair::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:zera_txn.VotePair.amount)
  return _internal_mutable_amount();
}
inline const std::string& VotePair::_internal_amount() const {
  return amount_.Get();
}
inline void VotePair::_internal_set_amount(const std::string& value) {
  
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VotePair::set_amount(std::string&& value) {
  
  amount_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.VotePair.amount)
}
inline void VotePair::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.VotePair.amount)
}
inline void VotePair::set_amount(const char* value,
    size_t size) {
  
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.VotePair.amount)
}
inline std::string* VotePair::_internal_mutable_amount() {
  
  return amount_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VotePair::release_amount() {
  // @@protoc_insertion_point(field_release:zera_txn.VotePair.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VotePair::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.VotePair.amount)
}
inline std::string* VotePair::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.VotePair.amount)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return amount_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VotePair::unsafe_arena_set_allocated_amount(
    std::string* amount) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      amount, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.VotePair.amount)
}

// -------------------------------------------------------------------

// ProposalResult

// .zera_txn.BaseTXN base = 1;
inline bool ProposalResult::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool ProposalResult::has_base() const {
  return _internal_has_base();
}
inline void ProposalResult::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::zera_txn::BaseTXN& ProposalResult::_internal_base() const {
  const ::zera_txn::BaseTXN* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::BaseTXN*>(
      &::zera_txn::_BaseTXN_default_instance_);
}
inline const ::zera_txn::BaseTXN& ProposalResult::base() const {
  // @@protoc_insertion_point(field_get:zera_txn.ProposalResult.base)
  return _internal_base();
}
inline void ProposalResult::unsafe_arena_set_allocated_base(
    ::zera_txn::BaseTXN* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ProposalResult.base)
}
inline ::zera_txn::BaseTXN* ProposalResult::release_base() {
  auto temp = unsafe_arena_release_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::BaseTXN* ProposalResult::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:zera_txn.ProposalResult.base)
  
  ::zera_txn::BaseTXN* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::zera_txn::BaseTXN* ProposalResult::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::BaseTXN>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::zera_txn::BaseTXN* ProposalResult::mutable_base() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ProposalResult.base)
  return _internal_mutable_base();
}
inline void ProposalResult::set_allocated_base(::zera_txn::BaseTXN* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ProposalResult.base)
}

// string contract_id = 2;
inline void ProposalResult::clear_contract_id() {
  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProposalResult::contract_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.ProposalResult.contract_id)
  return _internal_contract_id();
}
inline void ProposalResult::set_contract_id(const std::string& value) {
  _internal_set_contract_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.ProposalResult.contract_id)
}
inline std::string* ProposalResult::mutable_contract_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ProposalResult.contract_id)
  return _internal_mutable_contract_id();
}
inline const std::string& ProposalResult::_internal_contract_id() const {
  return contract_id_.Get();
}
inline void ProposalResult::_internal_set_contract_id(const std::string& value) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProposalResult::set_contract_id(std::string&& value) {
  
  contract_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.ProposalResult.contract_id)
}
inline void ProposalResult::set_contract_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.ProposalResult.contract_id)
}
inline void ProposalResult::set_contract_id(const char* value,
    size_t size) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.ProposalResult.contract_id)
}
inline std::string* ProposalResult::_internal_mutable_contract_id() {
  
  return contract_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProposalResult::release_contract_id() {
  // @@protoc_insertion_point(field_release:zera_txn.ProposalResult.contract_id)
  return contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProposalResult::set_allocated_contract_id(std::string* contract_id) {
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ProposalResult.contract_id)
}
inline std::string* ProposalResult::unsafe_arena_release_contract_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.ProposalResult.contract_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contract_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProposalResult::unsafe_arena_set_allocated_contract_id(
    std::string* contract_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contract_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ProposalResult.contract_id)
}

// bytes proposal_id = 3;
inline void ProposalResult::clear_proposal_id() {
  proposal_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProposalResult::proposal_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.ProposalResult.proposal_id)
  return _internal_proposal_id();
}
inline void ProposalResult::set_proposal_id(const std::string& value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.ProposalResult.proposal_id)
}
inline std::string* ProposalResult::mutable_proposal_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ProposalResult.proposal_id)
  return _internal_mutable_proposal_id();
}
inline const std::string& ProposalResult::_internal_proposal_id() const {
  return proposal_id_.Get();
}
inline void ProposalResult::_internal_set_proposal_id(const std::string& value) {
  
  proposal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProposalResult::set_proposal_id(std::string&& value) {
  
  proposal_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.ProposalResult.proposal_id)
}
inline void ProposalResult::set_proposal_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proposal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.ProposalResult.proposal_id)
}
inline void ProposalResult::set_proposal_id(const void* value,
    size_t size) {
  
  proposal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.ProposalResult.proposal_id)
}
inline std::string* ProposalResult::_internal_mutable_proposal_id() {
  
  return proposal_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProposalResult::release_proposal_id() {
  // @@protoc_insertion_point(field_release:zera_txn.ProposalResult.proposal_id)
  return proposal_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProposalResult::set_allocated_proposal_id(std::string* proposal_id) {
  if (proposal_id != nullptr) {
    
  } else {
    
  }
  proposal_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proposal_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ProposalResult.proposal_id)
}
inline std::string* ProposalResult::unsafe_arena_release_proposal_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.ProposalResult.proposal_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return proposal_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProposalResult::unsafe_arena_set_allocated_proposal_id(
    std::string* proposal_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (proposal_id != nullptr) {
    
  } else {
    
  }
  proposal_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      proposal_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ProposalResult.proposal_id)
}

// string support_cur_equiv = 4;
inline bool ProposalResult::_internal_has_support_cur_equiv() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProposalResult::has_support_cur_equiv() const {
  return _internal_has_support_cur_equiv();
}
inline void ProposalResult::clear_support_cur_equiv() {
  support_cur_equiv_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProposalResult::support_cur_equiv() const {
  // @@protoc_insertion_point(field_get:zera_txn.ProposalResult.support_cur_equiv)
  return _internal_support_cur_equiv();
}
inline void ProposalResult::set_support_cur_equiv(const std::string& value) {
  _internal_set_support_cur_equiv(value);
  // @@protoc_insertion_point(field_set:zera_txn.ProposalResult.support_cur_equiv)
}
inline std::string* ProposalResult::mutable_support_cur_equiv() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ProposalResult.support_cur_equiv)
  return _internal_mutable_support_cur_equiv();
}
inline const std::string& ProposalResult::_internal_support_cur_equiv() const {
  return support_cur_equiv_.Get();
}
inline void ProposalResult::_internal_set_support_cur_equiv(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  support_cur_equiv_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProposalResult::set_support_cur_equiv(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  support_cur_equiv_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.ProposalResult.support_cur_equiv)
}
inline void ProposalResult::set_support_cur_equiv(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  support_cur_equiv_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.ProposalResult.support_cur_equiv)
}
inline void ProposalResult::set_support_cur_equiv(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  support_cur_equiv_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.ProposalResult.support_cur_equiv)
}
inline std::string* ProposalResult::_internal_mutable_support_cur_equiv() {
  _has_bits_[0] |= 0x00000001u;
  return support_cur_equiv_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProposalResult::release_support_cur_equiv() {
  // @@protoc_insertion_point(field_release:zera_txn.ProposalResult.support_cur_equiv)
  if (!_internal_has_support_cur_equiv()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return support_cur_equiv_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProposalResult::set_allocated_support_cur_equiv(std::string* support_cur_equiv) {
  if (support_cur_equiv != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  support_cur_equiv_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), support_cur_equiv,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ProposalResult.support_cur_equiv)
}
inline std::string* ProposalResult::unsafe_arena_release_support_cur_equiv() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.ProposalResult.support_cur_equiv)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return support_cur_equiv_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProposalResult::unsafe_arena_set_allocated_support_cur_equiv(
    std::string* support_cur_equiv) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (support_cur_equiv != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  support_cur_equiv_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      support_cur_equiv, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ProposalResult.support_cur_equiv)
}

// string against_cur_equiv = 5;
inline bool ProposalResult::_internal_has_against_cur_equiv() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProposalResult::has_against_cur_equiv() const {
  return _internal_has_against_cur_equiv();
}
inline void ProposalResult::clear_against_cur_equiv() {
  against_cur_equiv_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ProposalResult::against_cur_equiv() const {
  // @@protoc_insertion_point(field_get:zera_txn.ProposalResult.against_cur_equiv)
  return _internal_against_cur_equiv();
}
inline void ProposalResult::set_against_cur_equiv(const std::string& value) {
  _internal_set_against_cur_equiv(value);
  // @@protoc_insertion_point(field_set:zera_txn.ProposalResult.against_cur_equiv)
}
inline std::string* ProposalResult::mutable_against_cur_equiv() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ProposalResult.against_cur_equiv)
  return _internal_mutable_against_cur_equiv();
}
inline const std::string& ProposalResult::_internal_against_cur_equiv() const {
  return against_cur_equiv_.Get();
}
inline void ProposalResult::_internal_set_against_cur_equiv(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  against_cur_equiv_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProposalResult::set_against_cur_equiv(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  against_cur_equiv_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.ProposalResult.against_cur_equiv)
}
inline void ProposalResult::set_against_cur_equiv(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  against_cur_equiv_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.ProposalResult.against_cur_equiv)
}
inline void ProposalResult::set_against_cur_equiv(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  against_cur_equiv_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.ProposalResult.against_cur_equiv)
}
inline std::string* ProposalResult::_internal_mutable_against_cur_equiv() {
  _has_bits_[0] |= 0x00000002u;
  return against_cur_equiv_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProposalResult::release_against_cur_equiv() {
  // @@protoc_insertion_point(field_release:zera_txn.ProposalResult.against_cur_equiv)
  if (!_internal_has_against_cur_equiv()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return against_cur_equiv_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProposalResult::set_allocated_against_cur_equiv(std::string* against_cur_equiv) {
  if (against_cur_equiv != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  against_cur_equiv_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), against_cur_equiv,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ProposalResult.against_cur_equiv)
}
inline std::string* ProposalResult::unsafe_arena_release_against_cur_equiv() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.ProposalResult.against_cur_equiv)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return against_cur_equiv_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProposalResult::unsafe_arena_set_allocated_against_cur_equiv(
    std::string* against_cur_equiv) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (against_cur_equiv != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  against_cur_equiv_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      against_cur_equiv, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ProposalResult.against_cur_equiv)
}

// repeated string option_cur_equiv = 6;
inline int ProposalResult::_internal_option_cur_equiv_size() const {
  return option_cur_equiv_.size();
}
inline int ProposalResult::option_cur_equiv_size() const {
  return _internal_option_cur_equiv_size();
}
inline void ProposalResult::clear_option_cur_equiv() {
  option_cur_equiv_.Clear();
}
inline std::string* ProposalResult::add_option_cur_equiv() {
  // @@protoc_insertion_point(field_add_mutable:zera_txn.ProposalResult.option_cur_equiv)
  return _internal_add_option_cur_equiv();
}
inline const std::string& ProposalResult::_internal_option_cur_equiv(int index) const {
  return option_cur_equiv_.Get(index);
}
inline const std::string& ProposalResult::option_cur_equiv(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.ProposalResult.option_cur_equiv)
  return _internal_option_cur_equiv(index);
}
inline std::string* ProposalResult::mutable_option_cur_equiv(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.ProposalResult.option_cur_equiv)
  return option_cur_equiv_.Mutable(index);
}
inline void ProposalResult::set_option_cur_equiv(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:zera_txn.ProposalResult.option_cur_equiv)
  option_cur_equiv_.Mutable(index)->assign(value);
}
inline void ProposalResult::set_option_cur_equiv(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:zera_txn.ProposalResult.option_cur_equiv)
  option_cur_equiv_.Mutable(index)->assign(std::move(value));
}
inline void ProposalResult::set_option_cur_equiv(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  option_cur_equiv_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zera_txn.ProposalResult.option_cur_equiv)
}
inline void ProposalResult::set_option_cur_equiv(int index, const char* value, size_t size) {
  option_cur_equiv_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zera_txn.ProposalResult.option_cur_equiv)
}
inline std::string* ProposalResult::_internal_add_option_cur_equiv() {
  return option_cur_equiv_.Add();
}
inline void ProposalResult::add_option_cur_equiv(const std::string& value) {
  option_cur_equiv_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zera_txn.ProposalResult.option_cur_equiv)
}
inline void ProposalResult::add_option_cur_equiv(std::string&& value) {
  option_cur_equiv_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zera_txn.ProposalResult.option_cur_equiv)
}
inline void ProposalResult::add_option_cur_equiv(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  option_cur_equiv_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zera_txn.ProposalResult.option_cur_equiv)
}
inline void ProposalResult::add_option_cur_equiv(const char* value, size_t size) {
  option_cur_equiv_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zera_txn.ProposalResult.option_cur_equiv)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProposalResult::option_cur_equiv() const {
  // @@protoc_insertion_point(field_list:zera_txn.ProposalResult.option_cur_equiv)
  return option_cur_equiv_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProposalResult::mutable_option_cur_equiv() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.ProposalResult.option_cur_equiv)
  return &option_cur_equiv_;
}

// .zera_txn.Votes support_votes = 7;
inline bool ProposalResult::_internal_has_support_votes() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || support_votes_ != nullptr);
  return value;
}
inline bool ProposalResult::has_support_votes() const {
  return _internal_has_support_votes();
}
inline void ProposalResult::clear_support_votes() {
  if (GetArena() == nullptr && support_votes_ != nullptr) {
    delete support_votes_;
  }
  support_votes_ = nullptr;
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::zera_txn::Votes& ProposalResult::_internal_support_votes() const {
  const ::zera_txn::Votes* p = support_votes_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::Votes*>(
      &::zera_txn::_Votes_default_instance_);
}
inline const ::zera_txn::Votes& ProposalResult::support_votes() const {
  // @@protoc_insertion_point(field_get:zera_txn.ProposalResult.support_votes)
  return _internal_support_votes();
}
inline void ProposalResult::unsafe_arena_set_allocated_support_votes(
    ::zera_txn::Votes* support_votes) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(support_votes_);
  }
  support_votes_ = support_votes;
  if (support_votes) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ProposalResult.support_votes)
}
inline ::zera_txn::Votes* ProposalResult::release_support_votes() {
  auto temp = unsafe_arena_release_support_votes();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::Votes* ProposalResult::unsafe_arena_release_support_votes() {
  // @@protoc_insertion_point(field_release:zera_txn.ProposalResult.support_votes)
  _has_bits_[0] &= ~0x00000004u;
  ::zera_txn::Votes* temp = support_votes_;
  support_votes_ = nullptr;
  return temp;
}
inline ::zera_txn::Votes* ProposalResult::_internal_mutable_support_votes() {
  _has_bits_[0] |= 0x00000004u;
  if (support_votes_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::Votes>(GetArena());
    support_votes_ = p;
  }
  return support_votes_;
}
inline ::zera_txn::Votes* ProposalResult::mutable_support_votes() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ProposalResult.support_votes)
  return _internal_mutable_support_votes();
}
inline void ProposalResult::set_allocated_support_votes(::zera_txn::Votes* support_votes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete support_votes_;
  }
  if (support_votes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(support_votes);
    if (message_arena != submessage_arena) {
      support_votes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, support_votes, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  support_votes_ = support_votes;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ProposalResult.support_votes)
}

// .zera_txn.Votes against_votes = 8;
inline bool ProposalResult::_internal_has_against_votes() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || against_votes_ != nullptr);
  return value;
}
inline bool ProposalResult::has_against_votes() const {
  return _internal_has_against_votes();
}
inline void ProposalResult::clear_against_votes() {
  if (GetArena() == nullptr && against_votes_ != nullptr) {
    delete against_votes_;
  }
  against_votes_ = nullptr;
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::zera_txn::Votes& ProposalResult::_internal_against_votes() const {
  const ::zera_txn::Votes* p = against_votes_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zera_txn::Votes*>(
      &::zera_txn::_Votes_default_instance_);
}
inline const ::zera_txn::Votes& ProposalResult::against_votes() const {
  // @@protoc_insertion_point(field_get:zera_txn.ProposalResult.against_votes)
  return _internal_against_votes();
}
inline void ProposalResult::unsafe_arena_set_allocated_against_votes(
    ::zera_txn::Votes* against_votes) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(against_votes_);
  }
  against_votes_ = against_votes;
  if (against_votes) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.ProposalResult.against_votes)
}
inline ::zera_txn::Votes* ProposalResult::release_against_votes() {
  auto temp = unsafe_arena_release_against_votes();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zera_txn::Votes* ProposalResult::unsafe_arena_release_against_votes() {
  // @@protoc_insertion_point(field_release:zera_txn.ProposalResult.against_votes)
  _has_bits_[0] &= ~0x00000008u;
  ::zera_txn::Votes* temp = against_votes_;
  against_votes_ = nullptr;
  return temp;
}
inline ::zera_txn::Votes* ProposalResult::_internal_mutable_against_votes() {
  _has_bits_[0] |= 0x00000008u;
  if (against_votes_ == nullptr) {
    auto* p = CreateMaybeMessage<::zera_txn::Votes>(GetArena());
    against_votes_ = p;
  }
  return against_votes_;
}
inline ::zera_txn::Votes* ProposalResult::mutable_against_votes() {
  // @@protoc_insertion_point(field_mutable:zera_txn.ProposalResult.against_votes)
  return _internal_mutable_against_votes();
}
inline void ProposalResult::set_allocated_against_votes(::zera_txn::Votes* against_votes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete against_votes_;
  }
  if (against_votes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(against_votes);
    if (message_arena != submessage_arena) {
      against_votes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, against_votes, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  against_votes_ = against_votes;
  // @@protoc_insertion_point(field_set_allocated:zera_txn.ProposalResult.against_votes)
}

// repeated .zera_txn.Votes option_votes = 9;
inline int ProposalResult::_internal_option_votes_size() const {
  return option_votes_.size();
}
inline int ProposalResult::option_votes_size() const {
  return _internal_option_votes_size();
}
inline void ProposalResult::clear_option_votes() {
  option_votes_.Clear();
}
inline ::zera_txn::Votes* ProposalResult::mutable_option_votes(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.ProposalResult.option_votes)
  return option_votes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::Votes >*
ProposalResult::mutable_option_votes() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.ProposalResult.option_votes)
  return &option_votes_;
}
inline const ::zera_txn::Votes& ProposalResult::_internal_option_votes(int index) const {
  return option_votes_.Get(index);
}
inline const ::zera_txn::Votes& ProposalResult::option_votes(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.ProposalResult.option_votes)
  return _internal_option_votes(index);
}
inline ::zera_txn::Votes* ProposalResult::_internal_add_option_votes() {
  return option_votes_.Add();
}
inline ::zera_txn::Votes* ProposalResult::add_option_votes() {
  // @@protoc_insertion_point(field_add:zera_txn.ProposalResult.option_votes)
  return _internal_add_option_votes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::Votes >&
ProposalResult::option_votes() const {
  // @@protoc_insertion_point(field_list:zera_txn.ProposalResult.option_votes)
  return option_votes_;
}

// bool passed = 10;
inline void ProposalResult::clear_passed() {
  passed_ = false;
}
inline bool ProposalResult::_internal_passed() const {
  return passed_;
}
inline bool ProposalResult::passed() const {
  // @@protoc_insertion_point(field_get:zera_txn.ProposalResult.passed)
  return _internal_passed();
}
inline void ProposalResult::_internal_set_passed(bool value) {
  
  passed_ = value;
}
inline void ProposalResult::set_passed(bool value) {
  _internal_set_passed(value);
  // @@protoc_insertion_point(field_set:zera_txn.ProposalResult.passed)
}

// bool final_stage = 11;
inline void ProposalResult::clear_final_stage() {
  final_stage_ = false;
}
inline bool ProposalResult::_internal_final_stage() const {
  return final_stage_;
}
inline bool ProposalResult::final_stage() const {
  // @@protoc_insertion_point(field_get:zera_txn.ProposalResult.final_stage)
  return _internal_final_stage();
}
inline void ProposalResult::_internal_set_final_stage(bool value) {
  
  final_stage_ = value;
}
inline void ProposalResult::set_final_stage(bool value) {
  _internal_set_final_stage(value);
  // @@protoc_insertion_point(field_set:zera_txn.ProposalResult.final_stage)
}

// uint32 stage = 12;
inline void ProposalResult::clear_stage() {
  stage_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProposalResult::_internal_stage() const {
  return stage_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProposalResult::stage() const {
  // @@protoc_insertion_point(field_get:zera_txn.ProposalResult.stage)
  return _internal_stage();
}
inline void ProposalResult::_internal_set_stage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stage_ = value;
}
inline void ProposalResult::set_stage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:zera_txn.ProposalResult.stage)
}

// bool fast_quorum = 13;
inline void ProposalResult::clear_fast_quorum() {
  fast_quorum_ = false;
}
inline bool ProposalResult::_internal_fast_quorum() const {
  return fast_quorum_;
}
inline bool ProposalResult::fast_quorum() const {
  // @@protoc_insertion_point(field_get:zera_txn.ProposalResult.fast_quorum)
  return _internal_fast_quorum();
}
inline void ProposalResult::_internal_set_fast_quorum(bool value) {
  
  fast_quorum_ = value;
}
inline void ProposalResult::set_fast_quorum(bool value) {
  _internal_set_fast_quorum(value);
  // @@protoc_insertion_point(field_set:zera_txn.ProposalResult.fast_quorum)
}

// -------------------------------------------------------------------

// TXNS

// repeated .zera_txn.CoinTXN coin_txns = 1;
inline int TXNS::_internal_coin_txns_size() const {
  return coin_txns_.size();
}
inline int TXNS::coin_txns_size() const {
  return _internal_coin_txns_size();
}
inline void TXNS::clear_coin_txns() {
  coin_txns_.Clear();
}
inline ::zera_txn::CoinTXN* TXNS::mutable_coin_txns(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNS.coin_txns)
  return coin_txns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::CoinTXN >*
TXNS::mutable_coin_txns() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.TXNS.coin_txns)
  return &coin_txns_;
}
inline const ::zera_txn::CoinTXN& TXNS::_internal_coin_txns(int index) const {
  return coin_txns_.Get(index);
}
inline const ::zera_txn::CoinTXN& TXNS::coin_txns(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNS.coin_txns)
  return _internal_coin_txns(index);
}
inline ::zera_txn::CoinTXN* TXNS::_internal_add_coin_txns() {
  return coin_txns_.Add();
}
inline ::zera_txn::CoinTXN* TXNS::add_coin_txns() {
  // @@protoc_insertion_point(field_add:zera_txn.TXNS.coin_txns)
  return _internal_add_coin_txns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::CoinTXN >&
TXNS::coin_txns() const {
  // @@protoc_insertion_point(field_list:zera_txn.TXNS.coin_txns)
  return coin_txns_;
}

// repeated .zera_txn.MintTXN mint_txns = 2;
inline int TXNS::_internal_mint_txns_size() const {
  return mint_txns_.size();
}
inline int TXNS::mint_txns_size() const {
  return _internal_mint_txns_size();
}
inline void TXNS::clear_mint_txns() {
  mint_txns_.Clear();
}
inline ::zera_txn::MintTXN* TXNS::mutable_mint_txns(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNS.mint_txns)
  return mint_txns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::MintTXN >*
TXNS::mutable_mint_txns() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.TXNS.mint_txns)
  return &mint_txns_;
}
inline const ::zera_txn::MintTXN& TXNS::_internal_mint_txns(int index) const {
  return mint_txns_.Get(index);
}
inline const ::zera_txn::MintTXN& TXNS::mint_txns(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNS.mint_txns)
  return _internal_mint_txns(index);
}
inline ::zera_txn::MintTXN* TXNS::_internal_add_mint_txns() {
  return mint_txns_.Add();
}
inline ::zera_txn::MintTXN* TXNS::add_mint_txns() {
  // @@protoc_insertion_point(field_add:zera_txn.TXNS.mint_txns)
  return _internal_add_mint_txns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::MintTXN >&
TXNS::mint_txns() const {
  // @@protoc_insertion_point(field_list:zera_txn.TXNS.mint_txns)
  return mint_txns_;
}

// repeated .zera_txn.ItemizedMintTXN item_mint_txns = 3;
inline int TXNS::_internal_item_mint_txns_size() const {
  return item_mint_txns_.size();
}
inline int TXNS::item_mint_txns_size() const {
  return _internal_item_mint_txns_size();
}
inline void TXNS::clear_item_mint_txns() {
  item_mint_txns_.Clear();
}
inline ::zera_txn::ItemizedMintTXN* TXNS::mutable_item_mint_txns(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNS.item_mint_txns)
  return item_mint_txns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ItemizedMintTXN >*
TXNS::mutable_item_mint_txns() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.TXNS.item_mint_txns)
  return &item_mint_txns_;
}
inline const ::zera_txn::ItemizedMintTXN& TXNS::_internal_item_mint_txns(int index) const {
  return item_mint_txns_.Get(index);
}
inline const ::zera_txn::ItemizedMintTXN& TXNS::item_mint_txns(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNS.item_mint_txns)
  return _internal_item_mint_txns(index);
}
inline ::zera_txn::ItemizedMintTXN* TXNS::_internal_add_item_mint_txns() {
  return item_mint_txns_.Add();
}
inline ::zera_txn::ItemizedMintTXN* TXNS::add_item_mint_txns() {
  // @@protoc_insertion_point(field_add:zera_txn.TXNS.item_mint_txns)
  return _internal_add_item_mint_txns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ItemizedMintTXN >&
TXNS::item_mint_txns() const {
  // @@protoc_insertion_point(field_list:zera_txn.TXNS.item_mint_txns)
  return item_mint_txns_;
}

// repeated .zera_txn.InstrumentContract contract_txns = 4;
inline int TXNS::_internal_contract_txns_size() const {
  return contract_txns_.size();
}
inline int TXNS::contract_txns_size() const {
  return _internal_contract_txns_size();
}
inline void TXNS::clear_contract_txns() {
  contract_txns_.Clear();
}
inline ::zera_txn::InstrumentContract* TXNS::mutable_contract_txns(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNS.contract_txns)
  return contract_txns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::InstrumentContract >*
TXNS::mutable_contract_txns() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.TXNS.contract_txns)
  return &contract_txns_;
}
inline const ::zera_txn::InstrumentContract& TXNS::_internal_contract_txns(int index) const {
  return contract_txns_.Get(index);
}
inline const ::zera_txn::InstrumentContract& TXNS::contract_txns(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNS.contract_txns)
  return _internal_contract_txns(index);
}
inline ::zera_txn::InstrumentContract* TXNS::_internal_add_contract_txns() {
  return contract_txns_.Add();
}
inline ::zera_txn::InstrumentContract* TXNS::add_contract_txns() {
  // @@protoc_insertion_point(field_add:zera_txn.TXNS.contract_txns)
  return _internal_add_contract_txns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::InstrumentContract >&
TXNS::contract_txns() const {
  // @@protoc_insertion_point(field_list:zera_txn.TXNS.contract_txns)
  return contract_txns_;
}

// repeated .zera_txn.GovernanceVote governance_votes = 5;
inline int TXNS::_internal_governance_votes_size() const {
  return governance_votes_.size();
}
inline int TXNS::governance_votes_size() const {
  return _internal_governance_votes_size();
}
inline void TXNS::clear_governance_votes() {
  governance_votes_.Clear();
}
inline ::zera_txn::GovernanceVote* TXNS::mutable_governance_votes(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNS.governance_votes)
  return governance_votes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::GovernanceVote >*
TXNS::mutable_governance_votes() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.TXNS.governance_votes)
  return &governance_votes_;
}
inline const ::zera_txn::GovernanceVote& TXNS::_internal_governance_votes(int index) const {
  return governance_votes_.Get(index);
}
inline const ::zera_txn::GovernanceVote& TXNS::governance_votes(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNS.governance_votes)
  return _internal_governance_votes(index);
}
inline ::zera_txn::GovernanceVote* TXNS::_internal_add_governance_votes() {
  return governance_votes_.Add();
}
inline ::zera_txn::GovernanceVote* TXNS::add_governance_votes() {
  // @@protoc_insertion_point(field_add:zera_txn.TXNS.governance_votes)
  return _internal_add_governance_votes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::GovernanceVote >&
TXNS::governance_votes() const {
  // @@protoc_insertion_point(field_list:zera_txn.TXNS.governance_votes)
  return governance_votes_;
}

// repeated .zera_txn.GovernanceProposal governance_proposals = 6;
inline int TXNS::_internal_governance_proposals_size() const {
  return governance_proposals_.size();
}
inline int TXNS::governance_proposals_size() const {
  return _internal_governance_proposals_size();
}
inline void TXNS::clear_governance_proposals() {
  governance_proposals_.Clear();
}
inline ::zera_txn::GovernanceProposal* TXNS::mutable_governance_proposals(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNS.governance_proposals)
  return governance_proposals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::GovernanceProposal >*
TXNS::mutable_governance_proposals() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.TXNS.governance_proposals)
  return &governance_proposals_;
}
inline const ::zera_txn::GovernanceProposal& TXNS::_internal_governance_proposals(int index) const {
  return governance_proposals_.Get(index);
}
inline const ::zera_txn::GovernanceProposal& TXNS::governance_proposals(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNS.governance_proposals)
  return _internal_governance_proposals(index);
}
inline ::zera_txn::GovernanceProposal* TXNS::_internal_add_governance_proposals() {
  return governance_proposals_.Add();
}
inline ::zera_txn::GovernanceProposal* TXNS::add_governance_proposals() {
  // @@protoc_insertion_point(field_add:zera_txn.TXNS.governance_proposals)
  return _internal_add_governance_proposals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::GovernanceProposal >&
TXNS::governance_proposals() const {
  // @@protoc_insertion_point(field_list:zera_txn.TXNS.governance_proposals)
  return governance_proposals_;
}

// repeated .zera_txn.SmartContractTXN smart_contracts = 7;
inline int TXNS::_internal_smart_contracts_size() const {
  return smart_contracts_.size();
}
inline int TXNS::smart_contracts_size() const {
  return _internal_smart_contracts_size();
}
inline void TXNS::clear_smart_contracts() {
  smart_contracts_.Clear();
}
inline ::zera_txn::SmartContractTXN* TXNS::mutable_smart_contracts(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNS.smart_contracts)
  return smart_contracts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::SmartContractTXN >*
TXNS::mutable_smart_contracts() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.TXNS.smart_contracts)
  return &smart_contracts_;
}
inline const ::zera_txn::SmartContractTXN& TXNS::_internal_smart_contracts(int index) const {
  return smart_contracts_.Get(index);
}
inline const ::zera_txn::SmartContractTXN& TXNS::smart_contracts(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNS.smart_contracts)
  return _internal_smart_contracts(index);
}
inline ::zera_txn::SmartContractTXN* TXNS::_internal_add_smart_contracts() {
  return smart_contracts_.Add();
}
inline ::zera_txn::SmartContractTXN* TXNS::add_smart_contracts() {
  // @@protoc_insertion_point(field_add:zera_txn.TXNS.smart_contracts)
  return _internal_add_smart_contracts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::SmartContractTXN >&
TXNS::smart_contracts() const {
  // @@protoc_insertion_point(field_list:zera_txn.TXNS.smart_contracts)
  return smart_contracts_;
}

// repeated .zera_txn.SmartContractExecuteTXN smart_contract_executes = 8;
inline int TXNS::_internal_smart_contract_executes_size() const {
  return smart_contract_executes_.size();
}
inline int TXNS::smart_contract_executes_size() const {
  return _internal_smart_contract_executes_size();
}
inline void TXNS::clear_smart_contract_executes() {
  smart_contract_executes_.Clear();
}
inline ::zera_txn::SmartContractExecuteTXN* TXNS::mutable_smart_contract_executes(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNS.smart_contract_executes)
  return smart_contract_executes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::SmartContractExecuteTXN >*
TXNS::mutable_smart_contract_executes() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.TXNS.smart_contract_executes)
  return &smart_contract_executes_;
}
inline const ::zera_txn::SmartContractExecuteTXN& TXNS::_internal_smart_contract_executes(int index) const {
  return smart_contract_executes_.Get(index);
}
inline const ::zera_txn::SmartContractExecuteTXN& TXNS::smart_contract_executes(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNS.smart_contract_executes)
  return _internal_smart_contract_executes(index);
}
inline ::zera_txn::SmartContractExecuteTXN* TXNS::_internal_add_smart_contract_executes() {
  return smart_contract_executes_.Add();
}
inline ::zera_txn::SmartContractExecuteTXN* TXNS::add_smart_contract_executes() {
  // @@protoc_insertion_point(field_add:zera_txn.TXNS.smart_contract_executes)
  return _internal_add_smart_contract_executes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::SmartContractExecuteTXN >&
TXNS::smart_contract_executes() const {
  // @@protoc_insertion_point(field_list:zera_txn.TXNS.smart_contract_executes)
  return smart_contract_executes_;
}

// repeated .zera_txn.SelfCurrencyEquiv self_cur_equivs = 9;
inline int TXNS::_internal_self_cur_equivs_size() const {
  return self_cur_equivs_.size();
}
inline int TXNS::self_cur_equivs_size() const {
  return _internal_self_cur_equivs_size();
}
inline void TXNS::clear_self_cur_equivs() {
  self_cur_equivs_.Clear();
}
inline ::zera_txn::SelfCurrencyEquiv* TXNS::mutable_self_cur_equivs(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNS.self_cur_equivs)
  return self_cur_equivs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::SelfCurrencyEquiv >*
TXNS::mutable_self_cur_equivs() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.TXNS.self_cur_equivs)
  return &self_cur_equivs_;
}
inline const ::zera_txn::SelfCurrencyEquiv& TXNS::_internal_self_cur_equivs(int index) const {
  return self_cur_equivs_.Get(index);
}
inline const ::zera_txn::SelfCurrencyEquiv& TXNS::self_cur_equivs(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNS.self_cur_equivs)
  return _internal_self_cur_equivs(index);
}
inline ::zera_txn::SelfCurrencyEquiv* TXNS::_internal_add_self_cur_equivs() {
  return self_cur_equivs_.Add();
}
inline ::zera_txn::SelfCurrencyEquiv* TXNS::add_self_cur_equivs() {
  // @@protoc_insertion_point(field_add:zera_txn.TXNS.self_cur_equivs)
  return _internal_add_self_cur_equivs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::SelfCurrencyEquiv >&
TXNS::self_cur_equivs() const {
  // @@protoc_insertion_point(field_list:zera_txn.TXNS.self_cur_equivs)
  return self_cur_equivs_;
}

// repeated .zera_txn.AuthorizedCurrencyEquiv auth_cur_equivs = 10;
inline int TXNS::_internal_auth_cur_equivs_size() const {
  return auth_cur_equivs_.size();
}
inline int TXNS::auth_cur_equivs_size() const {
  return _internal_auth_cur_equivs_size();
}
inline void TXNS::clear_auth_cur_equivs() {
  auth_cur_equivs_.Clear();
}
inline ::zera_txn::AuthorizedCurrencyEquiv* TXNS::mutable_auth_cur_equivs(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNS.auth_cur_equivs)
  return auth_cur_equivs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::AuthorizedCurrencyEquiv >*
TXNS::mutable_auth_cur_equivs() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.TXNS.auth_cur_equivs)
  return &auth_cur_equivs_;
}
inline const ::zera_txn::AuthorizedCurrencyEquiv& TXNS::_internal_auth_cur_equivs(int index) const {
  return auth_cur_equivs_.Get(index);
}
inline const ::zera_txn::AuthorizedCurrencyEquiv& TXNS::auth_cur_equivs(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNS.auth_cur_equivs)
  return _internal_auth_cur_equivs(index);
}
inline ::zera_txn::AuthorizedCurrencyEquiv* TXNS::_internal_add_auth_cur_equivs() {
  return auth_cur_equivs_.Add();
}
inline ::zera_txn::AuthorizedCurrencyEquiv* TXNS::add_auth_cur_equivs() {
  // @@protoc_insertion_point(field_add:zera_txn.TXNS.auth_cur_equivs)
  return _internal_add_auth_cur_equivs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::AuthorizedCurrencyEquiv >&
TXNS::auth_cur_equivs() const {
  // @@protoc_insertion_point(field_list:zera_txn.TXNS.auth_cur_equivs)
  return auth_cur_equivs_;
}

// repeated .zera_txn.ExpenseRatioTXN expense_ratios = 11;
inline int TXNS::_internal_expense_ratios_size() const {
  return expense_ratios_.size();
}
inline int TXNS::expense_ratios_size() const {
  return _internal_expense_ratios_size();
}
inline void TXNS::clear_expense_ratios() {
  expense_ratios_.Clear();
}
inline ::zera_txn::ExpenseRatioTXN* TXNS::mutable_expense_ratios(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNS.expense_ratios)
  return expense_ratios_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ExpenseRatioTXN >*
TXNS::mutable_expense_ratios() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.TXNS.expense_ratios)
  return &expense_ratios_;
}
inline const ::zera_txn::ExpenseRatioTXN& TXNS::_internal_expense_ratios(int index) const {
  return expense_ratios_.Get(index);
}
inline const ::zera_txn::ExpenseRatioTXN& TXNS::expense_ratios(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNS.expense_ratios)
  return _internal_expense_ratios(index);
}
inline ::zera_txn::ExpenseRatioTXN* TXNS::_internal_add_expense_ratios() {
  return expense_ratios_.Add();
}
inline ::zera_txn::ExpenseRatioTXN* TXNS::add_expense_ratios() {
  // @@protoc_insertion_point(field_add:zera_txn.TXNS.expense_ratios)
  return _internal_add_expense_ratios();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ExpenseRatioTXN >&
TXNS::expense_ratios() const {
  // @@protoc_insertion_point(field_list:zera_txn.TXNS.expense_ratios)
  return expense_ratios_;
}

// repeated .zera_txn.TXNStatusFees txn_fees_and_status = 12;
inline int TXNS::_internal_txn_fees_and_status_size() const {
  return txn_fees_and_status_.size();
}
inline int TXNS::txn_fees_and_status_size() const {
  return _internal_txn_fees_and_status_size();
}
inline void TXNS::clear_txn_fees_and_status() {
  txn_fees_and_status_.Clear();
}
inline ::zera_txn::TXNStatusFees* TXNS::mutable_txn_fees_and_status(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNS.txn_fees_and_status)
  return txn_fees_and_status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::TXNStatusFees >*
TXNS::mutable_txn_fees_and_status() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.TXNS.txn_fees_and_status)
  return &txn_fees_and_status_;
}
inline const ::zera_txn::TXNStatusFees& TXNS::_internal_txn_fees_and_status(int index) const {
  return txn_fees_and_status_.Get(index);
}
inline const ::zera_txn::TXNStatusFees& TXNS::txn_fees_and_status(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNS.txn_fees_and_status)
  return _internal_txn_fees_and_status(index);
}
inline ::zera_txn::TXNStatusFees* TXNS::_internal_add_txn_fees_and_status() {
  return txn_fees_and_status_.Add();
}
inline ::zera_txn::TXNStatusFees* TXNS::add_txn_fees_and_status() {
  // @@protoc_insertion_point(field_add:zera_txn.TXNS.txn_fees_and_status)
  return _internal_add_txn_fees_and_status();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::TXNStatusFees >&
TXNS::txn_fees_and_status() const {
  // @@protoc_insertion_point(field_list:zera_txn.TXNS.txn_fees_and_status)
  return txn_fees_and_status_;
}

// repeated .zera_txn.TokenFees token_fees = 13;
inline int TXNS::_internal_token_fees_size() const {
  return token_fees_.size();
}
inline int TXNS::token_fees_size() const {
  return _internal_token_fees_size();
}
inline void TXNS::clear_token_fees() {
  token_fees_.Clear();
}
inline ::zera_txn::TokenFees* TXNS::mutable_token_fees(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNS.token_fees)
  return token_fees_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::TokenFees >*
TXNS::mutable_token_fees() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.TXNS.token_fees)
  return &token_fees_;
}
inline const ::zera_txn::TokenFees& TXNS::_internal_token_fees(int index) const {
  return token_fees_.Get(index);
}
inline const ::zera_txn::TokenFees& TXNS::token_fees(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNS.token_fees)
  return _internal_token_fees(index);
}
inline ::zera_txn::TokenFees* TXNS::_internal_add_token_fees() {
  return token_fees_.Add();
}
inline ::zera_txn::TokenFees* TXNS::add_token_fees() {
  // @@protoc_insertion_point(field_add:zera_txn.TXNS.token_fees)
  return _internal_add_token_fees();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::TokenFees >&
TXNS::token_fees() const {
  // @@protoc_insertion_point(field_list:zera_txn.TXNS.token_fees)
  return token_fees_;
}

// repeated .zera_txn.NFTTXN nft_txns = 14;
inline int TXNS::_internal_nft_txns_size() const {
  return nft_txns_.size();
}
inline int TXNS::nft_txns_size() const {
  return _internal_nft_txns_size();
}
inline void TXNS::clear_nft_txns() {
  nft_txns_.Clear();
}
inline ::zera_txn::NFTTXN* TXNS::mutable_nft_txns(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNS.nft_txns)
  return nft_txns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::NFTTXN >*
TXNS::mutable_nft_txns() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.TXNS.nft_txns)
  return &nft_txns_;
}
inline const ::zera_txn::NFTTXN& TXNS::_internal_nft_txns(int index) const {
  return nft_txns_.Get(index);
}
inline const ::zera_txn::NFTTXN& TXNS::nft_txns(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNS.nft_txns)
  return _internal_nft_txns(index);
}
inline ::zera_txn::NFTTXN* TXNS::_internal_add_nft_txns() {
  return nft_txns_.Add();
}
inline ::zera_txn::NFTTXN* TXNS::add_nft_txns() {
  // @@protoc_insertion_point(field_add:zera_txn.TXNS.nft_txns)
  return _internal_add_nft_txns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::NFTTXN >&
TXNS::nft_txns() const {
  // @@protoc_insertion_point(field_list:zera_txn.TXNS.nft_txns)
  return nft_txns_;
}

// repeated .zera_txn.ContractUpdateTXN contract_update_txns = 15;
inline int TXNS::_internal_contract_update_txns_size() const {
  return contract_update_txns_.size();
}
inline int TXNS::contract_update_txns_size() const {
  return _internal_contract_update_txns_size();
}
inline void TXNS::clear_contract_update_txns() {
  contract_update_txns_.Clear();
}
inline ::zera_txn::ContractUpdateTXN* TXNS::mutable_contract_update_txns(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNS.contract_update_txns)
  return contract_update_txns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ContractUpdateTXN >*
TXNS::mutable_contract_update_txns() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.TXNS.contract_update_txns)
  return &contract_update_txns_;
}
inline const ::zera_txn::ContractUpdateTXN& TXNS::_internal_contract_update_txns(int index) const {
  return contract_update_txns_.Get(index);
}
inline const ::zera_txn::ContractUpdateTXN& TXNS::contract_update_txns(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNS.contract_update_txns)
  return _internal_contract_update_txns(index);
}
inline ::zera_txn::ContractUpdateTXN* TXNS::_internal_add_contract_update_txns() {
  return contract_update_txns_.Add();
}
inline ::zera_txn::ContractUpdateTXN* TXNS::add_contract_update_txns() {
  // @@protoc_insertion_point(field_add:zera_txn.TXNS.contract_update_txns)
  return _internal_add_contract_update_txns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ContractUpdateTXN >&
TXNS::contract_update_txns() const {
  // @@protoc_insertion_point(field_list:zera_txn.TXNS.contract_update_txns)
  return contract_update_txns_;
}

// repeated .zera_txn.ValidatorRegistration validator_registration_txns = 16;
inline int TXNS::_internal_validator_registration_txns_size() const {
  return validator_registration_txns_.size();
}
inline int TXNS::validator_registration_txns_size() const {
  return _internal_validator_registration_txns_size();
}
inline void TXNS::clear_validator_registration_txns() {
  validator_registration_txns_.Clear();
}
inline ::zera_txn::ValidatorRegistration* TXNS::mutable_validator_registration_txns(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNS.validator_registration_txns)
  return validator_registration_txns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ValidatorRegistration >*
TXNS::mutable_validator_registration_txns() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.TXNS.validator_registration_txns)
  return &validator_registration_txns_;
}
inline const ::zera_txn::ValidatorRegistration& TXNS::_internal_validator_registration_txns(int index) const {
  return validator_registration_txns_.Get(index);
}
inline const ::zera_txn::ValidatorRegistration& TXNS::validator_registration_txns(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNS.validator_registration_txns)
  return _internal_validator_registration_txns(index);
}
inline ::zera_txn::ValidatorRegistration* TXNS::_internal_add_validator_registration_txns() {
  return validator_registration_txns_.Add();
}
inline ::zera_txn::ValidatorRegistration* TXNS::add_validator_registration_txns() {
  // @@protoc_insertion_point(field_add:zera_txn.TXNS.validator_registration_txns)
  return _internal_add_validator_registration_txns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ValidatorRegistration >&
TXNS::validator_registration_txns() const {
  // @@protoc_insertion_point(field_list:zera_txn.TXNS.validator_registration_txns)
  return validator_registration_txns_;
}

// repeated .zera_txn.ValidatorHeartbeat validator_heartbeat_txns = 17;
inline int TXNS::_internal_validator_heartbeat_txns_size() const {
  return validator_heartbeat_txns_.size();
}
inline int TXNS::validator_heartbeat_txns_size() const {
  return _internal_validator_heartbeat_txns_size();
}
inline void TXNS::clear_validator_heartbeat_txns() {
  validator_heartbeat_txns_.Clear();
}
inline ::zera_txn::ValidatorHeartbeat* TXNS::mutable_validator_heartbeat_txns(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNS.validator_heartbeat_txns)
  return validator_heartbeat_txns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ValidatorHeartbeat >*
TXNS::mutable_validator_heartbeat_txns() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.TXNS.validator_heartbeat_txns)
  return &validator_heartbeat_txns_;
}
inline const ::zera_txn::ValidatorHeartbeat& TXNS::_internal_validator_heartbeat_txns(int index) const {
  return validator_heartbeat_txns_.Get(index);
}
inline const ::zera_txn::ValidatorHeartbeat& TXNS::validator_heartbeat_txns(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNS.validator_heartbeat_txns)
  return _internal_validator_heartbeat_txns(index);
}
inline ::zera_txn::ValidatorHeartbeat* TXNS::_internal_add_validator_heartbeat_txns() {
  return validator_heartbeat_txns_.Add();
}
inline ::zera_txn::ValidatorHeartbeat* TXNS::add_validator_heartbeat_txns() {
  // @@protoc_insertion_point(field_add:zera_txn.TXNS.validator_heartbeat_txns)
  return _internal_add_validator_heartbeat_txns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ValidatorHeartbeat >&
TXNS::validator_heartbeat_txns() const {
  // @@protoc_insertion_point(field_list:zera_txn.TXNS.validator_heartbeat_txns)
  return validator_heartbeat_txns_;
}

// repeated .zera_txn.ProposalResult proposal_result_txns = 18;
inline int TXNS::_internal_proposal_result_txns_size() const {
  return proposal_result_txns_.size();
}
inline int TXNS::proposal_result_txns_size() const {
  return _internal_proposal_result_txns_size();
}
inline void TXNS::clear_proposal_result_txns() {
  proposal_result_txns_.Clear();
}
inline ::zera_txn::ProposalResult* TXNS::mutable_proposal_result_txns(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNS.proposal_result_txns)
  return proposal_result_txns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ProposalResult >*
TXNS::mutable_proposal_result_txns() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.TXNS.proposal_result_txns)
  return &proposal_result_txns_;
}
inline const ::zera_txn::ProposalResult& TXNS::_internal_proposal_result_txns(int index) const {
  return proposal_result_txns_.Get(index);
}
inline const ::zera_txn::ProposalResult& TXNS::proposal_result_txns(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNS.proposal_result_txns)
  return _internal_proposal_result_txns(index);
}
inline ::zera_txn::ProposalResult* TXNS::_internal_add_proposal_result_txns() {
  return proposal_result_txns_.Add();
}
inline ::zera_txn::ProposalResult* TXNS::add_proposal_result_txns() {
  // @@protoc_insertion_point(field_add:zera_txn.TXNS.proposal_result_txns)
  return _internal_add_proposal_result_txns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ProposalResult >&
TXNS::proposal_result_txns() const {
  // @@protoc_insertion_point(field_list:zera_txn.TXNS.proposal_result_txns)
  return proposal_result_txns_;
}

// repeated .zera_txn.ExpenseRatioResult expense_ratio_result_txns = 19;
inline int TXNS::_internal_expense_ratio_result_txns_size() const {
  return expense_ratio_result_txns_.size();
}
inline int TXNS::expense_ratio_result_txns_size() const {
  return _internal_expense_ratio_result_txns_size();
}
inline void TXNS::clear_expense_ratio_result_txns() {
  expense_ratio_result_txns_.Clear();
}
inline ::zera_txn::ExpenseRatioResult* TXNS::mutable_expense_ratio_result_txns(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNS.expense_ratio_result_txns)
  return expense_ratio_result_txns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ExpenseRatioResult >*
TXNS::mutable_expense_ratio_result_txns() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.TXNS.expense_ratio_result_txns)
  return &expense_ratio_result_txns_;
}
inline const ::zera_txn::ExpenseRatioResult& TXNS::_internal_expense_ratio_result_txns(int index) const {
  return expense_ratio_result_txns_.Get(index);
}
inline const ::zera_txn::ExpenseRatioResult& TXNS::expense_ratio_result_txns(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNS.expense_ratio_result_txns)
  return _internal_expense_ratio_result_txns(index);
}
inline ::zera_txn::ExpenseRatioResult* TXNS::_internal_add_expense_ratio_result_txns() {
  return expense_ratio_result_txns_.Add();
}
inline ::zera_txn::ExpenseRatioResult* TXNS::add_expense_ratio_result_txns() {
  // @@protoc_insertion_point(field_add:zera_txn.TXNS.expense_ratio_result_txns)
  return _internal_add_expense_ratio_result_txns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ExpenseRatioResult >&
TXNS::expense_ratio_result_txns() const {
  // @@protoc_insertion_point(field_list:zera_txn.TXNS.expense_ratio_result_txns)
  return expense_ratio_result_txns_;
}

// repeated .zera_txn.FoundationTXN foundation_txns = 20;
inline int TXNS::_internal_foundation_txns_size() const {
  return foundation_txns_.size();
}
inline int TXNS::foundation_txns_size() const {
  return _internal_foundation_txns_size();
}
inline void TXNS::clear_foundation_txns() {
  foundation_txns_.Clear();
}
inline ::zera_txn::FoundationTXN* TXNS::mutable_foundation_txns(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNS.foundation_txns)
  return foundation_txns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::FoundationTXN >*
TXNS::mutable_foundation_txns() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.TXNS.foundation_txns)
  return &foundation_txns_;
}
inline const ::zera_txn::FoundationTXN& TXNS::_internal_foundation_txns(int index) const {
  return foundation_txns_.Get(index);
}
inline const ::zera_txn::FoundationTXN& TXNS::foundation_txns(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNS.foundation_txns)
  return _internal_foundation_txns(index);
}
inline ::zera_txn::FoundationTXN* TXNS::_internal_add_foundation_txns() {
  return foundation_txns_.Add();
}
inline ::zera_txn::FoundationTXN* TXNS::add_foundation_txns() {
  // @@protoc_insertion_point(field_add:zera_txn.TXNS.foundation_txns)
  return _internal_add_foundation_txns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::FoundationTXN >&
TXNS::foundation_txns() const {
  // @@protoc_insertion_point(field_list:zera_txn.TXNS.foundation_txns)
  return foundation_txns_;
}

// repeated .zera_txn.DelegatedVotingTXN delegated_voting_txns = 21;
inline int TXNS::_internal_delegated_voting_txns_size() const {
  return delegated_voting_txns_.size();
}
inline int TXNS::delegated_voting_txns_size() const {
  return _internal_delegated_voting_txns_size();
}
inline void TXNS::clear_delegated_voting_txns() {
  delegated_voting_txns_.Clear();
}
inline ::zera_txn::DelegatedVotingTXN* TXNS::mutable_delegated_voting_txns(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNS.delegated_voting_txns)
  return delegated_voting_txns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::DelegatedVotingTXN >*
TXNS::mutable_delegated_voting_txns() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.TXNS.delegated_voting_txns)
  return &delegated_voting_txns_;
}
inline const ::zera_txn::DelegatedVotingTXN& TXNS::_internal_delegated_voting_txns(int index) const {
  return delegated_voting_txns_.Get(index);
}
inline const ::zera_txn::DelegatedVotingTXN& TXNS::delegated_voting_txns(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNS.delegated_voting_txns)
  return _internal_delegated_voting_txns(index);
}
inline ::zera_txn::DelegatedVotingTXN* TXNS::_internal_add_delegated_voting_txns() {
  return delegated_voting_txns_.Add();
}
inline ::zera_txn::DelegatedVotingTXN* TXNS::add_delegated_voting_txns() {
  // @@protoc_insertion_point(field_add:zera_txn.TXNS.delegated_voting_txns)
  return _internal_add_delegated_voting_txns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::DelegatedVotingTXN >&
TXNS::delegated_voting_txns() const {
  // @@protoc_insertion_point(field_list:zera_txn.TXNS.delegated_voting_txns)
  return delegated_voting_txns_;
}

// repeated .zera_txn.QuashTXN quash_txns = 22;
inline int TXNS::_internal_quash_txns_size() const {
  return quash_txns_.size();
}
inline int TXNS::quash_txns_size() const {
  return _internal_quash_txns_size();
}
inline void TXNS::clear_quash_txns() {
  quash_txns_.Clear();
}
inline ::zera_txn::QuashTXN* TXNS::mutable_quash_txns(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNS.quash_txns)
  return quash_txns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::QuashTXN >*
TXNS::mutable_quash_txns() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.TXNS.quash_txns)
  return &quash_txns_;
}
inline const ::zera_txn::QuashTXN& TXNS::_internal_quash_txns(int index) const {
  return quash_txns_.Get(index);
}
inline const ::zera_txn::QuashTXN& TXNS::quash_txns(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNS.quash_txns)
  return _internal_quash_txns(index);
}
inline ::zera_txn::QuashTXN* TXNS::_internal_add_quash_txns() {
  return quash_txns_.Add();
}
inline ::zera_txn::QuashTXN* TXNS::add_quash_txns() {
  // @@protoc_insertion_point(field_add:zera_txn.TXNS.quash_txns)
  return _internal_add_quash_txns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::QuashTXN >&
TXNS::quash_txns() const {
  // @@protoc_insertion_point(field_list:zera_txn.TXNS.quash_txns)
  return quash_txns_;
}

// repeated .zera_txn.FastQuorumTXN fast_quorum_txns = 23;
inline int TXNS::_internal_fast_quorum_txns_size() const {
  return fast_quorum_txns_.size();
}
inline int TXNS::fast_quorum_txns_size() const {
  return _internal_fast_quorum_txns_size();
}
inline void TXNS::clear_fast_quorum_txns() {
  fast_quorum_txns_.Clear();
}
inline ::zera_txn::FastQuorumTXN* TXNS::mutable_fast_quorum_txns(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNS.fast_quorum_txns)
  return fast_quorum_txns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::FastQuorumTXN >*
TXNS::mutable_fast_quorum_txns() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.TXNS.fast_quorum_txns)
  return &fast_quorum_txns_;
}
inline const ::zera_txn::FastQuorumTXN& TXNS::_internal_fast_quorum_txns(int index) const {
  return fast_quorum_txns_.Get(index);
}
inline const ::zera_txn::FastQuorumTXN& TXNS::fast_quorum_txns(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNS.fast_quorum_txns)
  return _internal_fast_quorum_txns(index);
}
inline ::zera_txn::FastQuorumTXN* TXNS::_internal_add_fast_quorum_txns() {
  return fast_quorum_txns_.Add();
}
inline ::zera_txn::FastQuorumTXN* TXNS::add_fast_quorum_txns() {
  // @@protoc_insertion_point(field_add:zera_txn.TXNS.fast_quorum_txns)
  return _internal_add_fast_quorum_txns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::FastQuorumTXN >&
TXNS::fast_quorum_txns() const {
  // @@protoc_insertion_point(field_list:zera_txn.TXNS.fast_quorum_txns)
  return fast_quorum_txns_;
}

// repeated .zera_txn.QuashResult quash_results = 24;
inline int TXNS::_internal_quash_results_size() const {
  return quash_results_.size();
}
inline int TXNS::quash_results_size() const {
  return _internal_quash_results_size();
}
inline void TXNS::clear_quash_results() {
  quash_results_.Clear();
}
inline ::zera_txn::QuashResult* TXNS::mutable_quash_results(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNS.quash_results)
  return quash_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::QuashResult >*
TXNS::mutable_quash_results() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.TXNS.quash_results)
  return &quash_results_;
}
inline const ::zera_txn::QuashResult& TXNS::_internal_quash_results(int index) const {
  return quash_results_.Get(index);
}
inline const ::zera_txn::QuashResult& TXNS::quash_results(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNS.quash_results)
  return _internal_quash_results(index);
}
inline ::zera_txn::QuashResult* TXNS::_internal_add_quash_results() {
  return quash_results_.Add();
}
inline ::zera_txn::QuashResult* TXNS::add_quash_results() {
  // @@protoc_insertion_point(field_add:zera_txn.TXNS.quash_results)
  return _internal_add_quash_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::QuashResult >&
TXNS::quash_results() const {
  // @@protoc_insertion_point(field_list:zera_txn.TXNS.quash_results)
  return quash_results_;
}

// repeated .zera_txn.RevokeTXN revoke_txns = 25;
inline int TXNS::_internal_revoke_txns_size() const {
  return revoke_txns_.size();
}
inline int TXNS::revoke_txns_size() const {
  return _internal_revoke_txns_size();
}
inline void TXNS::clear_revoke_txns() {
  revoke_txns_.Clear();
}
inline ::zera_txn::RevokeTXN* TXNS::mutable_revoke_txns(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNS.revoke_txns)
  return revoke_txns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::RevokeTXN >*
TXNS::mutable_revoke_txns() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.TXNS.revoke_txns)
  return &revoke_txns_;
}
inline const ::zera_txn::RevokeTXN& TXNS::_internal_revoke_txns(int index) const {
  return revoke_txns_.Get(index);
}
inline const ::zera_txn::RevokeTXN& TXNS::revoke_txns(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNS.revoke_txns)
  return _internal_revoke_txns(index);
}
inline ::zera_txn::RevokeTXN* TXNS::_internal_add_revoke_txns() {
  return revoke_txns_.Add();
}
inline ::zera_txn::RevokeTXN* TXNS::add_revoke_txns() {
  // @@protoc_insertion_point(field_add:zera_txn.TXNS.revoke_txns)
  return _internal_add_revoke_txns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::RevokeTXN >&
TXNS::revoke_txns() const {
  // @@protoc_insertion_point(field_list:zera_txn.TXNS.revoke_txns)
  return revoke_txns_;
}

// repeated .zera_txn.ComplianceTXN compliance_txns = 26;
inline int TXNS::_internal_compliance_txns_size() const {
  return compliance_txns_.size();
}
inline int TXNS::compliance_txns_size() const {
  return _internal_compliance_txns_size();
}
inline void TXNS::clear_compliance_txns() {
  compliance_txns_.Clear();
}
inline ::zera_txn::ComplianceTXN* TXNS::mutable_compliance_txns(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNS.compliance_txns)
  return compliance_txns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ComplianceTXN >*
TXNS::mutable_compliance_txns() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.TXNS.compliance_txns)
  return &compliance_txns_;
}
inline const ::zera_txn::ComplianceTXN& TXNS::_internal_compliance_txns(int index) const {
  return compliance_txns_.Get(index);
}
inline const ::zera_txn::ComplianceTXN& TXNS::compliance_txns(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNS.compliance_txns)
  return _internal_compliance_txns(index);
}
inline ::zera_txn::ComplianceTXN* TXNS::_internal_add_compliance_txns() {
  return compliance_txns_.Add();
}
inline ::zera_txn::ComplianceTXN* TXNS::add_compliance_txns() {
  // @@protoc_insertion_point(field_add:zera_txn.TXNS.compliance_txns)
  return _internal_add_compliance_txns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::ComplianceTXN >&
TXNS::compliance_txns() const {
  // @@protoc_insertion_point(field_list:zera_txn.TXNS.compliance_txns)
  return compliance_txns_;
}

// repeated .zera_txn.BurnSBTTXN burn_sbt_txns = 27;
inline int TXNS::_internal_burn_sbt_txns_size() const {
  return burn_sbt_txns_.size();
}
inline int TXNS::burn_sbt_txns_size() const {
  return _internal_burn_sbt_txns_size();
}
inline void TXNS::clear_burn_sbt_txns() {
  burn_sbt_txns_.Clear();
}
inline ::zera_txn::BurnSBTTXN* TXNS::mutable_burn_sbt_txns(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNS.burn_sbt_txns)
  return burn_sbt_txns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::BurnSBTTXN >*
TXNS::mutable_burn_sbt_txns() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.TXNS.burn_sbt_txns)
  return &burn_sbt_txns_;
}
inline const ::zera_txn::BurnSBTTXN& TXNS::_internal_burn_sbt_txns(int index) const {
  return burn_sbt_txns_.Get(index);
}
inline const ::zera_txn::BurnSBTTXN& TXNS::burn_sbt_txns(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNS.burn_sbt_txns)
  return _internal_burn_sbt_txns(index);
}
inline ::zera_txn::BurnSBTTXN* TXNS::_internal_add_burn_sbt_txns() {
  return burn_sbt_txns_.Add();
}
inline ::zera_txn::BurnSBTTXN* TXNS::add_burn_sbt_txns() {
  // @@protoc_insertion_point(field_add:zera_txn.TXNS.burn_sbt_txns)
  return _internal_add_burn_sbt_txns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::BurnSBTTXN >&
TXNS::burn_sbt_txns() const {
  // @@protoc_insertion_point(field_list:zera_txn.TXNS.burn_sbt_txns)
  return burn_sbt_txns_;
}

// repeated .zera_txn.NewCoinTXN new_coin_txns = 28;
inline int TXNS::_internal_new_coin_txns_size() const {
  return new_coin_txns_.size();
}
inline int TXNS::new_coin_txns_size() const {
  return _internal_new_coin_txns_size();
}
inline void TXNS::clear_new_coin_txns() {
  new_coin_txns_.Clear();
}
inline ::zera_txn::NewCoinTXN* TXNS::mutable_new_coin_txns(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNS.new_coin_txns)
  return new_coin_txns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::NewCoinTXN >*
TXNS::mutable_new_coin_txns() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.TXNS.new_coin_txns)
  return &new_coin_txns_;
}
inline const ::zera_txn::NewCoinTXN& TXNS::_internal_new_coin_txns(int index) const {
  return new_coin_txns_.Get(index);
}
inline const ::zera_txn::NewCoinTXN& TXNS::new_coin_txns(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNS.new_coin_txns)
  return _internal_new_coin_txns(index);
}
inline ::zera_txn::NewCoinTXN* TXNS::_internal_add_new_coin_txns() {
  return new_coin_txns_.Add();
}
inline ::zera_txn::NewCoinTXN* TXNS::add_new_coin_txns() {
  // @@protoc_insertion_point(field_add:zera_txn.TXNS.new_coin_txns)
  return _internal_add_new_coin_txns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::NewCoinTXN >&
TXNS::new_coin_txns() const {
  // @@protoc_insertion_point(field_list:zera_txn.TXNS.new_coin_txns)
  return new_coin_txns_;
}

// -------------------------------------------------------------------

// Token

// string contract_id = 1;
inline void Token::clear_contract_id() {
  contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Token::contract_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.Token.contract_id)
  return _internal_contract_id();
}
inline void Token::set_contract_id(const std::string& value) {
  _internal_set_contract_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.Token.contract_id)
}
inline std::string* Token::mutable_contract_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.Token.contract_id)
  return _internal_mutable_contract_id();
}
inline const std::string& Token::_internal_contract_id() const {
  return contract_id_.Get();
}
inline void Token::_internal_set_contract_id(const std::string& value) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Token::set_contract_id(std::string&& value) {
  
  contract_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.Token.contract_id)
}
inline void Token::set_contract_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.Token.contract_id)
}
inline void Token::set_contract_id(const char* value,
    size_t size) {
  
  contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.Token.contract_id)
}
inline std::string* Token::_internal_mutable_contract_id() {
  
  return contract_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Token::release_contract_id() {
  // @@protoc_insertion_point(field_release:zera_txn.Token.contract_id)
  return contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Token::set_allocated_contract_id(std::string* contract_id) {
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.Token.contract_id)
}
inline std::string* Token::unsafe_arena_release_contract_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.Token.contract_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contract_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Token::unsafe_arena_set_allocated_contract_id(
    std::string* contract_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contract_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.Token.contract_id)
}

// string amount = 2;
inline void Token::clear_amount() {
  amount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Token::amount() const {
  // @@protoc_insertion_point(field_get:zera_txn.Token.amount)
  return _internal_amount();
}
inline void Token::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:zera_txn.Token.amount)
}
inline std::string* Token::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:zera_txn.Token.amount)
  return _internal_mutable_amount();
}
inline const std::string& Token::_internal_amount() const {
  return amount_.Get();
}
inline void Token::_internal_set_amount(const std::string& value) {
  
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Token::set_amount(std::string&& value) {
  
  amount_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.Token.amount)
}
inline void Token::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.Token.amount)
}
inline void Token::set_amount(const char* value,
    size_t size) {
  
  amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.Token.amount)
}
inline std::string* Token::_internal_mutable_amount() {
  
  return amount_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Token::release_amount() {
  // @@protoc_insertion_point(field_release:zera_txn.Token.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Token::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.Token.amount)
}
inline std::string* Token::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.Token.amount)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return amount_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Token::unsafe_arena_set_allocated_amount(
    std::string* amount) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      amount, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.Token.amount)
}

// -------------------------------------------------------------------

// TokenFees

// bytes address = 1;
inline void TokenFees::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TokenFees::address() const {
  // @@protoc_insertion_point(field_get:zera_txn.TokenFees.address)
  return _internal_address();
}
inline void TokenFees::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:zera_txn.TokenFees.address)
}
inline std::string* TokenFees::mutable_address() {
  // @@protoc_insertion_point(field_mutable:zera_txn.TokenFees.address)
  return _internal_mutable_address();
}
inline const std::string& TokenFees::_internal_address() const {
  return address_.Get();
}
inline void TokenFees::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TokenFees::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.TokenFees.address)
}
inline void TokenFees::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.TokenFees.address)
}
inline void TokenFees::set_address(const void* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.TokenFees.address)
}
inline std::string* TokenFees::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TokenFees::release_address() {
  // @@protoc_insertion_point(field_release:zera_txn.TokenFees.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TokenFees::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.TokenFees.address)
}
inline std::string* TokenFees::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.TokenFees.address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TokenFees::unsafe_arena_set_allocated_address(
    std::string* address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (address != nullptr) {
    
  } else {
    
  }
  address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.TokenFees.address)
}

// repeated .zera_txn.Token tokens = 2;
inline int TokenFees::_internal_tokens_size() const {
  return tokens_.size();
}
inline int TokenFees::tokens_size() const {
  return _internal_tokens_size();
}
inline void TokenFees::clear_tokens() {
  tokens_.Clear();
}
inline ::zera_txn::Token* TokenFees::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.TokenFees.tokens)
  return tokens_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::Token >*
TokenFees::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.TokenFees.tokens)
  return &tokens_;
}
inline const ::zera_txn::Token& TokenFees::_internal_tokens(int index) const {
  return tokens_.Get(index);
}
inline const ::zera_txn::Token& TokenFees::tokens(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.TokenFees.tokens)
  return _internal_tokens(index);
}
inline ::zera_txn::Token* TokenFees::_internal_add_tokens() {
  return tokens_.Add();
}
inline ::zera_txn::Token* TokenFees::add_tokens() {
  // @@protoc_insertion_point(field_add:zera_txn.TokenFees.tokens)
  return _internal_add_tokens();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zera_txn::Token >&
TokenFees::tokens() const {
  // @@protoc_insertion_point(field_list:zera_txn.TokenFees.tokens)
  return tokens_;
}

// -------------------------------------------------------------------

// TXNStatusFees

// bytes txn_hash = 1;
inline void TXNStatusFees::clear_txn_hash() {
  txn_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TXNStatusFees::txn_hash() const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNStatusFees.txn_hash)
  return _internal_txn_hash();
}
inline void TXNStatusFees::set_txn_hash(const std::string& value) {
  _internal_set_txn_hash(value);
  // @@protoc_insertion_point(field_set:zera_txn.TXNStatusFees.txn_hash)
}
inline std::string* TXNStatusFees::mutable_txn_hash() {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNStatusFees.txn_hash)
  return _internal_mutable_txn_hash();
}
inline const std::string& TXNStatusFees::_internal_txn_hash() const {
  return txn_hash_.Get();
}
inline void TXNStatusFees::_internal_set_txn_hash(const std::string& value) {
  
  txn_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TXNStatusFees::set_txn_hash(std::string&& value) {
  
  txn_hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.TXNStatusFees.txn_hash)
}
inline void TXNStatusFees::set_txn_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txn_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.TXNStatusFees.txn_hash)
}
inline void TXNStatusFees::set_txn_hash(const void* value,
    size_t size) {
  
  txn_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.TXNStatusFees.txn_hash)
}
inline std::string* TXNStatusFees::_internal_mutable_txn_hash() {
  
  return txn_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TXNStatusFees::release_txn_hash() {
  // @@protoc_insertion_point(field_release:zera_txn.TXNStatusFees.txn_hash)
  return txn_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TXNStatusFees::set_allocated_txn_hash(std::string* txn_hash) {
  if (txn_hash != nullptr) {
    
  } else {
    
  }
  txn_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txn_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.TXNStatusFees.txn_hash)
}
inline std::string* TXNStatusFees::unsafe_arena_release_txn_hash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.TXNStatusFees.txn_hash)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return txn_hash_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TXNStatusFees::unsafe_arena_set_allocated_txn_hash(
    std::string* txn_hash) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (txn_hash != nullptr) {
    
  } else {
    
  }
  txn_hash_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      txn_hash, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.TXNStatusFees.txn_hash)
}

// .zera_txn.TXN_STATUS status = 2;
inline void TXNStatusFees::clear_status() {
  status_ = 0;
}
inline ::zera_txn::TXN_STATUS TXNStatusFees::_internal_status() const {
  return static_cast< ::zera_txn::TXN_STATUS >(status_);
}
inline ::zera_txn::TXN_STATUS TXNStatusFees::status() const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNStatusFees.status)
  return _internal_status();
}
inline void TXNStatusFees::_internal_set_status(::zera_txn::TXN_STATUS value) {
  
  status_ = value;
}
inline void TXNStatusFees::set_status(::zera_txn::TXN_STATUS value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:zera_txn.TXNStatusFees.status)
}

// repeated string base_fees = 3;
inline int TXNStatusFees::_internal_base_fees_size() const {
  return base_fees_.size();
}
inline int TXNStatusFees::base_fees_size() const {
  return _internal_base_fees_size();
}
inline void TXNStatusFees::clear_base_fees() {
  base_fees_.Clear();
}
inline std::string* TXNStatusFees::add_base_fees() {
  // @@protoc_insertion_point(field_add_mutable:zera_txn.TXNStatusFees.base_fees)
  return _internal_add_base_fees();
}
inline const std::string& TXNStatusFees::_internal_base_fees(int index) const {
  return base_fees_.Get(index);
}
inline const std::string& TXNStatusFees::base_fees(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNStatusFees.base_fees)
  return _internal_base_fees(index);
}
inline std::string* TXNStatusFees::mutable_base_fees(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNStatusFees.base_fees)
  return base_fees_.Mutable(index);
}
inline void TXNStatusFees::set_base_fees(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:zera_txn.TXNStatusFees.base_fees)
  base_fees_.Mutable(index)->assign(value);
}
inline void TXNStatusFees::set_base_fees(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:zera_txn.TXNStatusFees.base_fees)
  base_fees_.Mutable(index)->assign(std::move(value));
}
inline void TXNStatusFees::set_base_fees(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  base_fees_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zera_txn.TXNStatusFees.base_fees)
}
inline void TXNStatusFees::set_base_fees(int index, const char* value, size_t size) {
  base_fees_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zera_txn.TXNStatusFees.base_fees)
}
inline std::string* TXNStatusFees::_internal_add_base_fees() {
  return base_fees_.Add();
}
inline void TXNStatusFees::add_base_fees(const std::string& value) {
  base_fees_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zera_txn.TXNStatusFees.base_fees)
}
inline void TXNStatusFees::add_base_fees(std::string&& value) {
  base_fees_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zera_txn.TXNStatusFees.base_fees)
}
inline void TXNStatusFees::add_base_fees(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  base_fees_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zera_txn.TXNStatusFees.base_fees)
}
inline void TXNStatusFees::add_base_fees(const char* value, size_t size) {
  base_fees_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zera_txn.TXNStatusFees.base_fees)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TXNStatusFees::base_fees() const {
  // @@protoc_insertion_point(field_list:zera_txn.TXNStatusFees.base_fees)
  return base_fees_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TXNStatusFees::mutable_base_fees() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.TXNStatusFees.base_fees)
  return &base_fees_;
}

// repeated string base_contract_id = 4;
inline int TXNStatusFees::_internal_base_contract_id_size() const {
  return base_contract_id_.size();
}
inline int TXNStatusFees::base_contract_id_size() const {
  return _internal_base_contract_id_size();
}
inline void TXNStatusFees::clear_base_contract_id() {
  base_contract_id_.Clear();
}
inline std::string* TXNStatusFees::add_base_contract_id() {
  // @@protoc_insertion_point(field_add_mutable:zera_txn.TXNStatusFees.base_contract_id)
  return _internal_add_base_contract_id();
}
inline const std::string& TXNStatusFees::_internal_base_contract_id(int index) const {
  return base_contract_id_.Get(index);
}
inline const std::string& TXNStatusFees::base_contract_id(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNStatusFees.base_contract_id)
  return _internal_base_contract_id(index);
}
inline std::string* TXNStatusFees::mutable_base_contract_id(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNStatusFees.base_contract_id)
  return base_contract_id_.Mutable(index);
}
inline void TXNStatusFees::set_base_contract_id(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:zera_txn.TXNStatusFees.base_contract_id)
  base_contract_id_.Mutable(index)->assign(value);
}
inline void TXNStatusFees::set_base_contract_id(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:zera_txn.TXNStatusFees.base_contract_id)
  base_contract_id_.Mutable(index)->assign(std::move(value));
}
inline void TXNStatusFees::set_base_contract_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  base_contract_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zera_txn.TXNStatusFees.base_contract_id)
}
inline void TXNStatusFees::set_base_contract_id(int index, const char* value, size_t size) {
  base_contract_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zera_txn.TXNStatusFees.base_contract_id)
}
inline std::string* TXNStatusFees::_internal_add_base_contract_id() {
  return base_contract_id_.Add();
}
inline void TXNStatusFees::add_base_contract_id(const std::string& value) {
  base_contract_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zera_txn.TXNStatusFees.base_contract_id)
}
inline void TXNStatusFees::add_base_contract_id(std::string&& value) {
  base_contract_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zera_txn.TXNStatusFees.base_contract_id)
}
inline void TXNStatusFees::add_base_contract_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  base_contract_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zera_txn.TXNStatusFees.base_contract_id)
}
inline void TXNStatusFees::add_base_contract_id(const char* value, size_t size) {
  base_contract_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zera_txn.TXNStatusFees.base_contract_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TXNStatusFees::base_contract_id() const {
  // @@protoc_insertion_point(field_list:zera_txn.TXNStatusFees.base_contract_id)
  return base_contract_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TXNStatusFees::mutable_base_contract_id() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.TXNStatusFees.base_contract_id)
  return &base_contract_id_;
}

// string contract_fees = 5;
inline void TXNStatusFees::clear_contract_fees() {
  contract_fees_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TXNStatusFees::contract_fees() const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNStatusFees.contract_fees)
  return _internal_contract_fees();
}
inline void TXNStatusFees::set_contract_fees(const std::string& value) {
  _internal_set_contract_fees(value);
  // @@protoc_insertion_point(field_set:zera_txn.TXNStatusFees.contract_fees)
}
inline std::string* TXNStatusFees::mutable_contract_fees() {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNStatusFees.contract_fees)
  return _internal_mutable_contract_fees();
}
inline const std::string& TXNStatusFees::_internal_contract_fees() const {
  return contract_fees_.Get();
}
inline void TXNStatusFees::_internal_set_contract_fees(const std::string& value) {
  
  contract_fees_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TXNStatusFees::set_contract_fees(std::string&& value) {
  
  contract_fees_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.TXNStatusFees.contract_fees)
}
inline void TXNStatusFees::set_contract_fees(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_fees_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.TXNStatusFees.contract_fees)
}
inline void TXNStatusFees::set_contract_fees(const char* value,
    size_t size) {
  
  contract_fees_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.TXNStatusFees.contract_fees)
}
inline std::string* TXNStatusFees::_internal_mutable_contract_fees() {
  
  return contract_fees_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TXNStatusFees::release_contract_fees() {
  // @@protoc_insertion_point(field_release:zera_txn.TXNStatusFees.contract_fees)
  return contract_fees_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TXNStatusFees::set_allocated_contract_fees(std::string* contract_fees) {
  if (contract_fees != nullptr) {
    
  } else {
    
  }
  contract_fees_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_fees,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.TXNStatusFees.contract_fees)
}
inline std::string* TXNStatusFees::unsafe_arena_release_contract_fees() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.TXNStatusFees.contract_fees)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contract_fees_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TXNStatusFees::unsafe_arena_set_allocated_contract_fees(
    std::string* contract_fees) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contract_fees != nullptr) {
    
  } else {
    
  }
  contract_fees_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contract_fees, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.TXNStatusFees.contract_fees)
}

// string contract_contract_id = 6;
inline void TXNStatusFees::clear_contract_contract_id() {
  contract_contract_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TXNStatusFees::contract_contract_id() const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNStatusFees.contract_contract_id)
  return _internal_contract_contract_id();
}
inline void TXNStatusFees::set_contract_contract_id(const std::string& value) {
  _internal_set_contract_contract_id(value);
  // @@protoc_insertion_point(field_set:zera_txn.TXNStatusFees.contract_contract_id)
}
inline std::string* TXNStatusFees::mutable_contract_contract_id() {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNStatusFees.contract_contract_id)
  return _internal_mutable_contract_contract_id();
}
inline const std::string& TXNStatusFees::_internal_contract_contract_id() const {
  return contract_contract_id_.Get();
}
inline void TXNStatusFees::_internal_set_contract_contract_id(const std::string& value) {
  
  contract_contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TXNStatusFees::set_contract_contract_id(std::string&& value) {
  
  contract_contract_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.TXNStatusFees.contract_contract_id)
}
inline void TXNStatusFees::set_contract_contract_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.TXNStatusFees.contract_contract_id)
}
inline void TXNStatusFees::set_contract_contract_id(const char* value,
    size_t size) {
  
  contract_contract_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.TXNStatusFees.contract_contract_id)
}
inline std::string* TXNStatusFees::_internal_mutable_contract_contract_id() {
  
  return contract_contract_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TXNStatusFees::release_contract_contract_id() {
  // @@protoc_insertion_point(field_release:zera_txn.TXNStatusFees.contract_contract_id)
  return contract_contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TXNStatusFees::set_allocated_contract_contract_id(std::string* contract_contract_id) {
  if (contract_contract_id != nullptr) {
    
  } else {
    
  }
  contract_contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_contract_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.TXNStatusFees.contract_contract_id)
}
inline std::string* TXNStatusFees::unsafe_arena_release_contract_contract_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.TXNStatusFees.contract_contract_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contract_contract_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TXNStatusFees::unsafe_arena_set_allocated_contract_contract_id(
    std::string* contract_contract_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contract_contract_id != nullptr) {
    
  } else {
    
  }
  contract_contract_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contract_contract_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.TXNStatusFees.contract_contract_id)
}

// repeated bytes smar_contract_result = 10;
inline int TXNStatusFees::_internal_smar_contract_result_size() const {
  return smar_contract_result_.size();
}
inline int TXNStatusFees::smar_contract_result_size() const {
  return _internal_smar_contract_result_size();
}
inline void TXNStatusFees::clear_smar_contract_result() {
  smar_contract_result_.Clear();
}
inline std::string* TXNStatusFees::add_smar_contract_result() {
  // @@protoc_insertion_point(field_add_mutable:zera_txn.TXNStatusFees.smar_contract_result)
  return _internal_add_smar_contract_result();
}
inline const std::string& TXNStatusFees::_internal_smar_contract_result(int index) const {
  return smar_contract_result_.Get(index);
}
inline const std::string& TXNStatusFees::smar_contract_result(int index) const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNStatusFees.smar_contract_result)
  return _internal_smar_contract_result(index);
}
inline std::string* TXNStatusFees::mutable_smar_contract_result(int index) {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNStatusFees.smar_contract_result)
  return smar_contract_result_.Mutable(index);
}
inline void TXNStatusFees::set_smar_contract_result(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:zera_txn.TXNStatusFees.smar_contract_result)
  smar_contract_result_.Mutable(index)->assign(value);
}
inline void TXNStatusFees::set_smar_contract_result(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:zera_txn.TXNStatusFees.smar_contract_result)
  smar_contract_result_.Mutable(index)->assign(std::move(value));
}
inline void TXNStatusFees::set_smar_contract_result(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  smar_contract_result_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zera_txn.TXNStatusFees.smar_contract_result)
}
inline void TXNStatusFees::set_smar_contract_result(int index, const void* value, size_t size) {
  smar_contract_result_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zera_txn.TXNStatusFees.smar_contract_result)
}
inline std::string* TXNStatusFees::_internal_add_smar_contract_result() {
  return smar_contract_result_.Add();
}
inline void TXNStatusFees::add_smar_contract_result(const std::string& value) {
  smar_contract_result_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zera_txn.TXNStatusFees.smar_contract_result)
}
inline void TXNStatusFees::add_smar_contract_result(std::string&& value) {
  smar_contract_result_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zera_txn.TXNStatusFees.smar_contract_result)
}
inline void TXNStatusFees::add_smar_contract_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  smar_contract_result_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zera_txn.TXNStatusFees.smar_contract_result)
}
inline void TXNStatusFees::add_smar_contract_result(const void* value, size_t size) {
  smar_contract_result_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zera_txn.TXNStatusFees.smar_contract_result)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TXNStatusFees::smar_contract_result() const {
  // @@protoc_insertion_point(field_list:zera_txn.TXNStatusFees.smar_contract_result)
  return smar_contract_result_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TXNStatusFees::mutable_smar_contract_result() {
  // @@protoc_insertion_point(field_mutable_list:zera_txn.TXNStatusFees.smar_contract_result)
  return &smar_contract_result_;
}

// string approved_votes = 7;
inline bool TXNStatusFees::_internal_has_approved_votes() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TXNStatusFees::has_approved_votes() const {
  return _internal_has_approved_votes();
}
inline void TXNStatusFees::clear_approved_votes() {
  approved_votes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TXNStatusFees::approved_votes() const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNStatusFees.approved_votes)
  return _internal_approved_votes();
}
inline void TXNStatusFees::set_approved_votes(const std::string& value) {
  _internal_set_approved_votes(value);
  // @@protoc_insertion_point(field_set:zera_txn.TXNStatusFees.approved_votes)
}
inline std::string* TXNStatusFees::mutable_approved_votes() {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNStatusFees.approved_votes)
  return _internal_mutable_approved_votes();
}
inline const std::string& TXNStatusFees::_internal_approved_votes() const {
  return approved_votes_.Get();
}
inline void TXNStatusFees::_internal_set_approved_votes(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  approved_votes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TXNStatusFees::set_approved_votes(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  approved_votes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.TXNStatusFees.approved_votes)
}
inline void TXNStatusFees::set_approved_votes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  approved_votes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.TXNStatusFees.approved_votes)
}
inline void TXNStatusFees::set_approved_votes(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  approved_votes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.TXNStatusFees.approved_votes)
}
inline std::string* TXNStatusFees::_internal_mutable_approved_votes() {
  _has_bits_[0] |= 0x00000001u;
  return approved_votes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TXNStatusFees::release_approved_votes() {
  // @@protoc_insertion_point(field_release:zera_txn.TXNStatusFees.approved_votes)
  if (!_internal_has_approved_votes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return approved_votes_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TXNStatusFees::set_allocated_approved_votes(std::string* approved_votes) {
  if (approved_votes != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  approved_votes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), approved_votes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.TXNStatusFees.approved_votes)
}
inline std::string* TXNStatusFees::unsafe_arena_release_approved_votes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.TXNStatusFees.approved_votes)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return approved_votes_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TXNStatusFees::unsafe_arena_set_allocated_approved_votes(
    std::string* approved_votes) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (approved_votes != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  approved_votes_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      approved_votes, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.TXNStatusFees.approved_votes)
}

// string against_votes = 8;
inline bool TXNStatusFees::_internal_has_against_votes() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TXNStatusFees::has_against_votes() const {
  return _internal_has_against_votes();
}
inline void TXNStatusFees::clear_against_votes() {
  against_votes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TXNStatusFees::against_votes() const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNStatusFees.against_votes)
  return _internal_against_votes();
}
inline void TXNStatusFees::set_against_votes(const std::string& value) {
  _internal_set_against_votes(value);
  // @@protoc_insertion_point(field_set:zera_txn.TXNStatusFees.against_votes)
}
inline std::string* TXNStatusFees::mutable_against_votes() {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNStatusFees.against_votes)
  return _internal_mutable_against_votes();
}
inline const std::string& TXNStatusFees::_internal_against_votes() const {
  return against_votes_.Get();
}
inline void TXNStatusFees::_internal_set_against_votes(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  against_votes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TXNStatusFees::set_against_votes(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  against_votes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zera_txn.TXNStatusFees.against_votes)
}
inline void TXNStatusFees::set_against_votes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  against_votes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zera_txn.TXNStatusFees.against_votes)
}
inline void TXNStatusFees::set_against_votes(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  against_votes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zera_txn.TXNStatusFees.against_votes)
}
inline std::string* TXNStatusFees::_internal_mutable_against_votes() {
  _has_bits_[0] |= 0x00000002u;
  return against_votes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TXNStatusFees::release_against_votes() {
  // @@protoc_insertion_point(field_release:zera_txn.TXNStatusFees.against_votes)
  if (!_internal_has_against_votes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return against_votes_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TXNStatusFees::set_allocated_against_votes(std::string* against_votes) {
  if (against_votes != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  against_votes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), against_votes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zera_txn.TXNStatusFees.against_votes)
}
inline std::string* TXNStatusFees::unsafe_arena_release_against_votes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.TXNStatusFees.against_votes)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return against_votes_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TXNStatusFees::unsafe_arena_set_allocated_against_votes(
    std::string* against_votes) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (against_votes != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  against_votes_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      against_votes, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.TXNStatusFees.against_votes)
}

// bool smart_contract = 9;
inline void TXNStatusFees::clear_smart_contract() {
  smart_contract_ = false;
}
inline bool TXNStatusFees::_internal_smart_contract() const {
  return smart_contract_;
}
inline bool TXNStatusFees::smart_contract() const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNStatusFees.smart_contract)
  return _internal_smart_contract();
}
inline void TXNStatusFees::_internal_set_smart_contract(bool value) {
  
  smart_contract_ = value;
}
inline void TXNStatusFees::set_smart_contract(bool value) {
  _internal_set_smart_contract(value);
  // @@protoc_insertion_point(field_set:zera_txn.TXNStatusFees.smart_contract)
}

// -------------------------------------------------------------------

// TXNWrapper

// .zera_txn.CoinTXN coin_txn = 1;
inline bool TXNWrapper::_internal_has_coin_txn() const {
  return payload_case() == kCoinTxn;
}
inline bool TXNWrapper::has_coin_txn() const {
  return _internal_has_coin_txn();
}
inline void TXNWrapper::set_has_coin_txn() {
  _oneof_case_[0] = kCoinTxn;
}
inline void TXNWrapper::clear_coin_txn() {
  if (_internal_has_coin_txn()) {
    if (GetArena() == nullptr) {
      delete payload_.coin_txn_;
    }
    clear_has_payload();
  }
}
inline ::zera_txn::CoinTXN* TXNWrapper::release_coin_txn() {
  // @@protoc_insertion_point(field_release:zera_txn.TXNWrapper.coin_txn)
  if (_internal_has_coin_txn()) {
    clear_has_payload();
      ::zera_txn::CoinTXN* temp = payload_.coin_txn_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.coin_txn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zera_txn::CoinTXN& TXNWrapper::_internal_coin_txn() const {
  return _internal_has_coin_txn()
      ? *payload_.coin_txn_
      : *reinterpret_cast< ::zera_txn::CoinTXN*>(&::zera_txn::_CoinTXN_default_instance_);
}
inline const ::zera_txn::CoinTXN& TXNWrapper::coin_txn() const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNWrapper.coin_txn)
  return _internal_coin_txn();
}
inline ::zera_txn::CoinTXN* TXNWrapper::unsafe_arena_release_coin_txn() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.TXNWrapper.coin_txn)
  if (_internal_has_coin_txn()) {
    clear_has_payload();
    ::zera_txn::CoinTXN* temp = payload_.coin_txn_;
    payload_.coin_txn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TXNWrapper::unsafe_arena_set_allocated_coin_txn(::zera_txn::CoinTXN* coin_txn) {
  clear_payload();
  if (coin_txn) {
    set_has_coin_txn();
    payload_.coin_txn_ = coin_txn;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.TXNWrapper.coin_txn)
}
inline ::zera_txn::CoinTXN* TXNWrapper::_internal_mutable_coin_txn() {
  if (!_internal_has_coin_txn()) {
    clear_payload();
    set_has_coin_txn();
    payload_.coin_txn_ = CreateMaybeMessage< ::zera_txn::CoinTXN >(GetArena());
  }
  return payload_.coin_txn_;
}
inline ::zera_txn::CoinTXN* TXNWrapper::mutable_coin_txn() {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNWrapper.coin_txn)
  return _internal_mutable_coin_txn();
}

// .zera_txn.MintTXN mint_txn = 2;
inline bool TXNWrapper::_internal_has_mint_txn() const {
  return payload_case() == kMintTxn;
}
inline bool TXNWrapper::has_mint_txn() const {
  return _internal_has_mint_txn();
}
inline void TXNWrapper::set_has_mint_txn() {
  _oneof_case_[0] = kMintTxn;
}
inline void TXNWrapper::clear_mint_txn() {
  if (_internal_has_mint_txn()) {
    if (GetArena() == nullptr) {
      delete payload_.mint_txn_;
    }
    clear_has_payload();
  }
}
inline ::zera_txn::MintTXN* TXNWrapper::release_mint_txn() {
  // @@protoc_insertion_point(field_release:zera_txn.TXNWrapper.mint_txn)
  if (_internal_has_mint_txn()) {
    clear_has_payload();
      ::zera_txn::MintTXN* temp = payload_.mint_txn_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.mint_txn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zera_txn::MintTXN& TXNWrapper::_internal_mint_txn() const {
  return _internal_has_mint_txn()
      ? *payload_.mint_txn_
      : *reinterpret_cast< ::zera_txn::MintTXN*>(&::zera_txn::_MintTXN_default_instance_);
}
inline const ::zera_txn::MintTXN& TXNWrapper::mint_txn() const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNWrapper.mint_txn)
  return _internal_mint_txn();
}
inline ::zera_txn::MintTXN* TXNWrapper::unsafe_arena_release_mint_txn() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.TXNWrapper.mint_txn)
  if (_internal_has_mint_txn()) {
    clear_has_payload();
    ::zera_txn::MintTXN* temp = payload_.mint_txn_;
    payload_.mint_txn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TXNWrapper::unsafe_arena_set_allocated_mint_txn(::zera_txn::MintTXN* mint_txn) {
  clear_payload();
  if (mint_txn) {
    set_has_mint_txn();
    payload_.mint_txn_ = mint_txn;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.TXNWrapper.mint_txn)
}
inline ::zera_txn::MintTXN* TXNWrapper::_internal_mutable_mint_txn() {
  if (!_internal_has_mint_txn()) {
    clear_payload();
    set_has_mint_txn();
    payload_.mint_txn_ = CreateMaybeMessage< ::zera_txn::MintTXN >(GetArena());
  }
  return payload_.mint_txn_;
}
inline ::zera_txn::MintTXN* TXNWrapper::mutable_mint_txn() {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNWrapper.mint_txn)
  return _internal_mutable_mint_txn();
}

// .zera_txn.ItemizedMintTXN item_mint_txn = 3;
inline bool TXNWrapper::_internal_has_item_mint_txn() const {
  return payload_case() == kItemMintTxn;
}
inline bool TXNWrapper::has_item_mint_txn() const {
  return _internal_has_item_mint_txn();
}
inline void TXNWrapper::set_has_item_mint_txn() {
  _oneof_case_[0] = kItemMintTxn;
}
inline void TXNWrapper::clear_item_mint_txn() {
  if (_internal_has_item_mint_txn()) {
    if (GetArena() == nullptr) {
      delete payload_.item_mint_txn_;
    }
    clear_has_payload();
  }
}
inline ::zera_txn::ItemizedMintTXN* TXNWrapper::release_item_mint_txn() {
  // @@protoc_insertion_point(field_release:zera_txn.TXNWrapper.item_mint_txn)
  if (_internal_has_item_mint_txn()) {
    clear_has_payload();
      ::zera_txn::ItemizedMintTXN* temp = payload_.item_mint_txn_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.item_mint_txn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zera_txn::ItemizedMintTXN& TXNWrapper::_internal_item_mint_txn() const {
  return _internal_has_item_mint_txn()
      ? *payload_.item_mint_txn_
      : *reinterpret_cast< ::zera_txn::ItemizedMintTXN*>(&::zera_txn::_ItemizedMintTXN_default_instance_);
}
inline const ::zera_txn::ItemizedMintTXN& TXNWrapper::item_mint_txn() const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNWrapper.item_mint_txn)
  return _internal_item_mint_txn();
}
inline ::zera_txn::ItemizedMintTXN* TXNWrapper::unsafe_arena_release_item_mint_txn() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.TXNWrapper.item_mint_txn)
  if (_internal_has_item_mint_txn()) {
    clear_has_payload();
    ::zera_txn::ItemizedMintTXN* temp = payload_.item_mint_txn_;
    payload_.item_mint_txn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TXNWrapper::unsafe_arena_set_allocated_item_mint_txn(::zera_txn::ItemizedMintTXN* item_mint_txn) {
  clear_payload();
  if (item_mint_txn) {
    set_has_item_mint_txn();
    payload_.item_mint_txn_ = item_mint_txn;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.TXNWrapper.item_mint_txn)
}
inline ::zera_txn::ItemizedMintTXN* TXNWrapper::_internal_mutable_item_mint_txn() {
  if (!_internal_has_item_mint_txn()) {
    clear_payload();
    set_has_item_mint_txn();
    payload_.item_mint_txn_ = CreateMaybeMessage< ::zera_txn::ItemizedMintTXN >(GetArena());
  }
  return payload_.item_mint_txn_;
}
inline ::zera_txn::ItemizedMintTXN* TXNWrapper::mutable_item_mint_txn() {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNWrapper.item_mint_txn)
  return _internal_mutable_item_mint_txn();
}

// .zera_txn.InstrumentContract contract_txn = 4;
inline bool TXNWrapper::_internal_has_contract_txn() const {
  return payload_case() == kContractTxn;
}
inline bool TXNWrapper::has_contract_txn() const {
  return _internal_has_contract_txn();
}
inline void TXNWrapper::set_has_contract_txn() {
  _oneof_case_[0] = kContractTxn;
}
inline void TXNWrapper::clear_contract_txn() {
  if (_internal_has_contract_txn()) {
    if (GetArena() == nullptr) {
      delete payload_.contract_txn_;
    }
    clear_has_payload();
  }
}
inline ::zera_txn::InstrumentContract* TXNWrapper::release_contract_txn() {
  // @@protoc_insertion_point(field_release:zera_txn.TXNWrapper.contract_txn)
  if (_internal_has_contract_txn()) {
    clear_has_payload();
      ::zera_txn::InstrumentContract* temp = payload_.contract_txn_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.contract_txn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zera_txn::InstrumentContract& TXNWrapper::_internal_contract_txn() const {
  return _internal_has_contract_txn()
      ? *payload_.contract_txn_
      : *reinterpret_cast< ::zera_txn::InstrumentContract*>(&::zera_txn::_InstrumentContract_default_instance_);
}
inline const ::zera_txn::InstrumentContract& TXNWrapper::contract_txn() const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNWrapper.contract_txn)
  return _internal_contract_txn();
}
inline ::zera_txn::InstrumentContract* TXNWrapper::unsafe_arena_release_contract_txn() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.TXNWrapper.contract_txn)
  if (_internal_has_contract_txn()) {
    clear_has_payload();
    ::zera_txn::InstrumentContract* temp = payload_.contract_txn_;
    payload_.contract_txn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TXNWrapper::unsafe_arena_set_allocated_contract_txn(::zera_txn::InstrumentContract* contract_txn) {
  clear_payload();
  if (contract_txn) {
    set_has_contract_txn();
    payload_.contract_txn_ = contract_txn;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.TXNWrapper.contract_txn)
}
inline ::zera_txn::InstrumentContract* TXNWrapper::_internal_mutable_contract_txn() {
  if (!_internal_has_contract_txn()) {
    clear_payload();
    set_has_contract_txn();
    payload_.contract_txn_ = CreateMaybeMessage< ::zera_txn::InstrumentContract >(GetArena());
  }
  return payload_.contract_txn_;
}
inline ::zera_txn::InstrumentContract* TXNWrapper::mutable_contract_txn() {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNWrapper.contract_txn)
  return _internal_mutable_contract_txn();
}

// .zera_txn.GovernanceVote governance_vote = 5;
inline bool TXNWrapper::_internal_has_governance_vote() const {
  return payload_case() == kGovernanceVote;
}
inline bool TXNWrapper::has_governance_vote() const {
  return _internal_has_governance_vote();
}
inline void TXNWrapper::set_has_governance_vote() {
  _oneof_case_[0] = kGovernanceVote;
}
inline void TXNWrapper::clear_governance_vote() {
  if (_internal_has_governance_vote()) {
    if (GetArena() == nullptr) {
      delete payload_.governance_vote_;
    }
    clear_has_payload();
  }
}
inline ::zera_txn::GovernanceVote* TXNWrapper::release_governance_vote() {
  // @@protoc_insertion_point(field_release:zera_txn.TXNWrapper.governance_vote)
  if (_internal_has_governance_vote()) {
    clear_has_payload();
      ::zera_txn::GovernanceVote* temp = payload_.governance_vote_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.governance_vote_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zera_txn::GovernanceVote& TXNWrapper::_internal_governance_vote() const {
  return _internal_has_governance_vote()
      ? *payload_.governance_vote_
      : *reinterpret_cast< ::zera_txn::GovernanceVote*>(&::zera_txn::_GovernanceVote_default_instance_);
}
inline const ::zera_txn::GovernanceVote& TXNWrapper::governance_vote() const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNWrapper.governance_vote)
  return _internal_governance_vote();
}
inline ::zera_txn::GovernanceVote* TXNWrapper::unsafe_arena_release_governance_vote() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.TXNWrapper.governance_vote)
  if (_internal_has_governance_vote()) {
    clear_has_payload();
    ::zera_txn::GovernanceVote* temp = payload_.governance_vote_;
    payload_.governance_vote_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TXNWrapper::unsafe_arena_set_allocated_governance_vote(::zera_txn::GovernanceVote* governance_vote) {
  clear_payload();
  if (governance_vote) {
    set_has_governance_vote();
    payload_.governance_vote_ = governance_vote;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.TXNWrapper.governance_vote)
}
inline ::zera_txn::GovernanceVote* TXNWrapper::_internal_mutable_governance_vote() {
  if (!_internal_has_governance_vote()) {
    clear_payload();
    set_has_governance_vote();
    payload_.governance_vote_ = CreateMaybeMessage< ::zera_txn::GovernanceVote >(GetArena());
  }
  return payload_.governance_vote_;
}
inline ::zera_txn::GovernanceVote* TXNWrapper::mutable_governance_vote() {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNWrapper.governance_vote)
  return _internal_mutable_governance_vote();
}

// .zera_txn.GovernanceProposal governance_proposal = 6;
inline bool TXNWrapper::_internal_has_governance_proposal() const {
  return payload_case() == kGovernanceProposal;
}
inline bool TXNWrapper::has_governance_proposal() const {
  return _internal_has_governance_proposal();
}
inline void TXNWrapper::set_has_governance_proposal() {
  _oneof_case_[0] = kGovernanceProposal;
}
inline void TXNWrapper::clear_governance_proposal() {
  if (_internal_has_governance_proposal()) {
    if (GetArena() == nullptr) {
      delete payload_.governance_proposal_;
    }
    clear_has_payload();
  }
}
inline ::zera_txn::GovernanceProposal* TXNWrapper::release_governance_proposal() {
  // @@protoc_insertion_point(field_release:zera_txn.TXNWrapper.governance_proposal)
  if (_internal_has_governance_proposal()) {
    clear_has_payload();
      ::zera_txn::GovernanceProposal* temp = payload_.governance_proposal_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.governance_proposal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zera_txn::GovernanceProposal& TXNWrapper::_internal_governance_proposal() const {
  return _internal_has_governance_proposal()
      ? *payload_.governance_proposal_
      : *reinterpret_cast< ::zera_txn::GovernanceProposal*>(&::zera_txn::_GovernanceProposal_default_instance_);
}
inline const ::zera_txn::GovernanceProposal& TXNWrapper::governance_proposal() const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNWrapper.governance_proposal)
  return _internal_governance_proposal();
}
inline ::zera_txn::GovernanceProposal* TXNWrapper::unsafe_arena_release_governance_proposal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.TXNWrapper.governance_proposal)
  if (_internal_has_governance_proposal()) {
    clear_has_payload();
    ::zera_txn::GovernanceProposal* temp = payload_.governance_proposal_;
    payload_.governance_proposal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TXNWrapper::unsafe_arena_set_allocated_governance_proposal(::zera_txn::GovernanceProposal* governance_proposal) {
  clear_payload();
  if (governance_proposal) {
    set_has_governance_proposal();
    payload_.governance_proposal_ = governance_proposal;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.TXNWrapper.governance_proposal)
}
inline ::zera_txn::GovernanceProposal* TXNWrapper::_internal_mutable_governance_proposal() {
  if (!_internal_has_governance_proposal()) {
    clear_payload();
    set_has_governance_proposal();
    payload_.governance_proposal_ = CreateMaybeMessage< ::zera_txn::GovernanceProposal >(GetArena());
  }
  return payload_.governance_proposal_;
}
inline ::zera_txn::GovernanceProposal* TXNWrapper::mutable_governance_proposal() {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNWrapper.governance_proposal)
  return _internal_mutable_governance_proposal();
}

// .zera_txn.SmartContractTXN smart_contract = 7;
inline bool TXNWrapper::_internal_has_smart_contract() const {
  return payload_case() == kSmartContract;
}
inline bool TXNWrapper::has_smart_contract() const {
  return _internal_has_smart_contract();
}
inline void TXNWrapper::set_has_smart_contract() {
  _oneof_case_[0] = kSmartContract;
}
inline void TXNWrapper::clear_smart_contract() {
  if (_internal_has_smart_contract()) {
    if (GetArena() == nullptr) {
      delete payload_.smart_contract_;
    }
    clear_has_payload();
  }
}
inline ::zera_txn::SmartContractTXN* TXNWrapper::release_smart_contract() {
  // @@protoc_insertion_point(field_release:zera_txn.TXNWrapper.smart_contract)
  if (_internal_has_smart_contract()) {
    clear_has_payload();
      ::zera_txn::SmartContractTXN* temp = payload_.smart_contract_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.smart_contract_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zera_txn::SmartContractTXN& TXNWrapper::_internal_smart_contract() const {
  return _internal_has_smart_contract()
      ? *payload_.smart_contract_
      : *reinterpret_cast< ::zera_txn::SmartContractTXN*>(&::zera_txn::_SmartContractTXN_default_instance_);
}
inline const ::zera_txn::SmartContractTXN& TXNWrapper::smart_contract() const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNWrapper.smart_contract)
  return _internal_smart_contract();
}
inline ::zera_txn::SmartContractTXN* TXNWrapper::unsafe_arena_release_smart_contract() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.TXNWrapper.smart_contract)
  if (_internal_has_smart_contract()) {
    clear_has_payload();
    ::zera_txn::SmartContractTXN* temp = payload_.smart_contract_;
    payload_.smart_contract_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TXNWrapper::unsafe_arena_set_allocated_smart_contract(::zera_txn::SmartContractTXN* smart_contract) {
  clear_payload();
  if (smart_contract) {
    set_has_smart_contract();
    payload_.smart_contract_ = smart_contract;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.TXNWrapper.smart_contract)
}
inline ::zera_txn::SmartContractTXN* TXNWrapper::_internal_mutable_smart_contract() {
  if (!_internal_has_smart_contract()) {
    clear_payload();
    set_has_smart_contract();
    payload_.smart_contract_ = CreateMaybeMessage< ::zera_txn::SmartContractTXN >(GetArena());
  }
  return payload_.smart_contract_;
}
inline ::zera_txn::SmartContractTXN* TXNWrapper::mutable_smart_contract() {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNWrapper.smart_contract)
  return _internal_mutable_smart_contract();
}

// .zera_txn.SmartContractExecuteTXN smart_contract_execute = 8;
inline bool TXNWrapper::_internal_has_smart_contract_execute() const {
  return payload_case() == kSmartContractExecute;
}
inline bool TXNWrapper::has_smart_contract_execute() const {
  return _internal_has_smart_contract_execute();
}
inline void TXNWrapper::set_has_smart_contract_execute() {
  _oneof_case_[0] = kSmartContractExecute;
}
inline void TXNWrapper::clear_smart_contract_execute() {
  if (_internal_has_smart_contract_execute()) {
    if (GetArena() == nullptr) {
      delete payload_.smart_contract_execute_;
    }
    clear_has_payload();
  }
}
inline ::zera_txn::SmartContractExecuteTXN* TXNWrapper::release_smart_contract_execute() {
  // @@protoc_insertion_point(field_release:zera_txn.TXNWrapper.smart_contract_execute)
  if (_internal_has_smart_contract_execute()) {
    clear_has_payload();
      ::zera_txn::SmartContractExecuteTXN* temp = payload_.smart_contract_execute_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.smart_contract_execute_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zera_txn::SmartContractExecuteTXN& TXNWrapper::_internal_smart_contract_execute() const {
  return _internal_has_smart_contract_execute()
      ? *payload_.smart_contract_execute_
      : *reinterpret_cast< ::zera_txn::SmartContractExecuteTXN*>(&::zera_txn::_SmartContractExecuteTXN_default_instance_);
}
inline const ::zera_txn::SmartContractExecuteTXN& TXNWrapper::smart_contract_execute() const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNWrapper.smart_contract_execute)
  return _internal_smart_contract_execute();
}
inline ::zera_txn::SmartContractExecuteTXN* TXNWrapper::unsafe_arena_release_smart_contract_execute() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.TXNWrapper.smart_contract_execute)
  if (_internal_has_smart_contract_execute()) {
    clear_has_payload();
    ::zera_txn::SmartContractExecuteTXN* temp = payload_.smart_contract_execute_;
    payload_.smart_contract_execute_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TXNWrapper::unsafe_arena_set_allocated_smart_contract_execute(::zera_txn::SmartContractExecuteTXN* smart_contract_execute) {
  clear_payload();
  if (smart_contract_execute) {
    set_has_smart_contract_execute();
    payload_.smart_contract_execute_ = smart_contract_execute;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.TXNWrapper.smart_contract_execute)
}
inline ::zera_txn::SmartContractExecuteTXN* TXNWrapper::_internal_mutable_smart_contract_execute() {
  if (!_internal_has_smart_contract_execute()) {
    clear_payload();
    set_has_smart_contract_execute();
    payload_.smart_contract_execute_ = CreateMaybeMessage< ::zera_txn::SmartContractExecuteTXN >(GetArena());
  }
  return payload_.smart_contract_execute_;
}
inline ::zera_txn::SmartContractExecuteTXN* TXNWrapper::mutable_smart_contract_execute() {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNWrapper.smart_contract_execute)
  return _internal_mutable_smart_contract_execute();
}

// .zera_txn.SelfCurrencyEquiv self_cur_equivs = 9;
inline bool TXNWrapper::_internal_has_self_cur_equivs() const {
  return payload_case() == kSelfCurEquivs;
}
inline bool TXNWrapper::has_self_cur_equivs() const {
  return _internal_has_self_cur_equivs();
}
inline void TXNWrapper::set_has_self_cur_equivs() {
  _oneof_case_[0] = kSelfCurEquivs;
}
inline void TXNWrapper::clear_self_cur_equivs() {
  if (_internal_has_self_cur_equivs()) {
    if (GetArena() == nullptr) {
      delete payload_.self_cur_equivs_;
    }
    clear_has_payload();
  }
}
inline ::zera_txn::SelfCurrencyEquiv* TXNWrapper::release_self_cur_equivs() {
  // @@protoc_insertion_point(field_release:zera_txn.TXNWrapper.self_cur_equivs)
  if (_internal_has_self_cur_equivs()) {
    clear_has_payload();
      ::zera_txn::SelfCurrencyEquiv* temp = payload_.self_cur_equivs_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.self_cur_equivs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zera_txn::SelfCurrencyEquiv& TXNWrapper::_internal_self_cur_equivs() const {
  return _internal_has_self_cur_equivs()
      ? *payload_.self_cur_equivs_
      : *reinterpret_cast< ::zera_txn::SelfCurrencyEquiv*>(&::zera_txn::_SelfCurrencyEquiv_default_instance_);
}
inline const ::zera_txn::SelfCurrencyEquiv& TXNWrapper::self_cur_equivs() const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNWrapper.self_cur_equivs)
  return _internal_self_cur_equivs();
}
inline ::zera_txn::SelfCurrencyEquiv* TXNWrapper::unsafe_arena_release_self_cur_equivs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.TXNWrapper.self_cur_equivs)
  if (_internal_has_self_cur_equivs()) {
    clear_has_payload();
    ::zera_txn::SelfCurrencyEquiv* temp = payload_.self_cur_equivs_;
    payload_.self_cur_equivs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TXNWrapper::unsafe_arena_set_allocated_self_cur_equivs(::zera_txn::SelfCurrencyEquiv* self_cur_equivs) {
  clear_payload();
  if (self_cur_equivs) {
    set_has_self_cur_equivs();
    payload_.self_cur_equivs_ = self_cur_equivs;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.TXNWrapper.self_cur_equivs)
}
inline ::zera_txn::SelfCurrencyEquiv* TXNWrapper::_internal_mutable_self_cur_equivs() {
  if (!_internal_has_self_cur_equivs()) {
    clear_payload();
    set_has_self_cur_equivs();
    payload_.self_cur_equivs_ = CreateMaybeMessage< ::zera_txn::SelfCurrencyEquiv >(GetArena());
  }
  return payload_.self_cur_equivs_;
}
inline ::zera_txn::SelfCurrencyEquiv* TXNWrapper::mutable_self_cur_equivs() {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNWrapper.self_cur_equivs)
  return _internal_mutable_self_cur_equivs();
}

// .zera_txn.AuthorizedCurrencyEquiv auth_cur_equivs = 10;
inline bool TXNWrapper::_internal_has_auth_cur_equivs() const {
  return payload_case() == kAuthCurEquivs;
}
inline bool TXNWrapper::has_auth_cur_equivs() const {
  return _internal_has_auth_cur_equivs();
}
inline void TXNWrapper::set_has_auth_cur_equivs() {
  _oneof_case_[0] = kAuthCurEquivs;
}
inline void TXNWrapper::clear_auth_cur_equivs() {
  if (_internal_has_auth_cur_equivs()) {
    if (GetArena() == nullptr) {
      delete payload_.auth_cur_equivs_;
    }
    clear_has_payload();
  }
}
inline ::zera_txn::AuthorizedCurrencyEquiv* TXNWrapper::release_auth_cur_equivs() {
  // @@protoc_insertion_point(field_release:zera_txn.TXNWrapper.auth_cur_equivs)
  if (_internal_has_auth_cur_equivs()) {
    clear_has_payload();
      ::zera_txn::AuthorizedCurrencyEquiv* temp = payload_.auth_cur_equivs_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.auth_cur_equivs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zera_txn::AuthorizedCurrencyEquiv& TXNWrapper::_internal_auth_cur_equivs() const {
  return _internal_has_auth_cur_equivs()
      ? *payload_.auth_cur_equivs_
      : *reinterpret_cast< ::zera_txn::AuthorizedCurrencyEquiv*>(&::zera_txn::_AuthorizedCurrencyEquiv_default_instance_);
}
inline const ::zera_txn::AuthorizedCurrencyEquiv& TXNWrapper::auth_cur_equivs() const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNWrapper.auth_cur_equivs)
  return _internal_auth_cur_equivs();
}
inline ::zera_txn::AuthorizedCurrencyEquiv* TXNWrapper::unsafe_arena_release_auth_cur_equivs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.TXNWrapper.auth_cur_equivs)
  if (_internal_has_auth_cur_equivs()) {
    clear_has_payload();
    ::zera_txn::AuthorizedCurrencyEquiv* temp = payload_.auth_cur_equivs_;
    payload_.auth_cur_equivs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TXNWrapper::unsafe_arena_set_allocated_auth_cur_equivs(::zera_txn::AuthorizedCurrencyEquiv* auth_cur_equivs) {
  clear_payload();
  if (auth_cur_equivs) {
    set_has_auth_cur_equivs();
    payload_.auth_cur_equivs_ = auth_cur_equivs;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.TXNWrapper.auth_cur_equivs)
}
inline ::zera_txn::AuthorizedCurrencyEquiv* TXNWrapper::_internal_mutable_auth_cur_equivs() {
  if (!_internal_has_auth_cur_equivs()) {
    clear_payload();
    set_has_auth_cur_equivs();
    payload_.auth_cur_equivs_ = CreateMaybeMessage< ::zera_txn::AuthorizedCurrencyEquiv >(GetArena());
  }
  return payload_.auth_cur_equivs_;
}
inline ::zera_txn::AuthorizedCurrencyEquiv* TXNWrapper::mutable_auth_cur_equivs() {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNWrapper.auth_cur_equivs)
  return _internal_mutable_auth_cur_equivs();
}

// .zera_txn.ExpenseRatioTXN expense_ratios = 11;
inline bool TXNWrapper::_internal_has_expense_ratios() const {
  return payload_case() == kExpenseRatios;
}
inline bool TXNWrapper::has_expense_ratios() const {
  return _internal_has_expense_ratios();
}
inline void TXNWrapper::set_has_expense_ratios() {
  _oneof_case_[0] = kExpenseRatios;
}
inline void TXNWrapper::clear_expense_ratios() {
  if (_internal_has_expense_ratios()) {
    if (GetArena() == nullptr) {
      delete payload_.expense_ratios_;
    }
    clear_has_payload();
  }
}
inline ::zera_txn::ExpenseRatioTXN* TXNWrapper::release_expense_ratios() {
  // @@protoc_insertion_point(field_release:zera_txn.TXNWrapper.expense_ratios)
  if (_internal_has_expense_ratios()) {
    clear_has_payload();
      ::zera_txn::ExpenseRatioTXN* temp = payload_.expense_ratios_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.expense_ratios_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zera_txn::ExpenseRatioTXN& TXNWrapper::_internal_expense_ratios() const {
  return _internal_has_expense_ratios()
      ? *payload_.expense_ratios_
      : *reinterpret_cast< ::zera_txn::ExpenseRatioTXN*>(&::zera_txn::_ExpenseRatioTXN_default_instance_);
}
inline const ::zera_txn::ExpenseRatioTXN& TXNWrapper::expense_ratios() const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNWrapper.expense_ratios)
  return _internal_expense_ratios();
}
inline ::zera_txn::ExpenseRatioTXN* TXNWrapper::unsafe_arena_release_expense_ratios() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.TXNWrapper.expense_ratios)
  if (_internal_has_expense_ratios()) {
    clear_has_payload();
    ::zera_txn::ExpenseRatioTXN* temp = payload_.expense_ratios_;
    payload_.expense_ratios_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TXNWrapper::unsafe_arena_set_allocated_expense_ratios(::zera_txn::ExpenseRatioTXN* expense_ratios) {
  clear_payload();
  if (expense_ratios) {
    set_has_expense_ratios();
    payload_.expense_ratios_ = expense_ratios;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.TXNWrapper.expense_ratios)
}
inline ::zera_txn::ExpenseRatioTXN* TXNWrapper::_internal_mutable_expense_ratios() {
  if (!_internal_has_expense_ratios()) {
    clear_payload();
    set_has_expense_ratios();
    payload_.expense_ratios_ = CreateMaybeMessage< ::zera_txn::ExpenseRatioTXN >(GetArena());
  }
  return payload_.expense_ratios_;
}
inline ::zera_txn::ExpenseRatioTXN* TXNWrapper::mutable_expense_ratios() {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNWrapper.expense_ratios)
  return _internal_mutable_expense_ratios();
}

// .zera_txn.NFTTXN nft_txn = 12;
inline bool TXNWrapper::_internal_has_nft_txn() const {
  return payload_case() == kNftTxn;
}
inline bool TXNWrapper::has_nft_txn() const {
  return _internal_has_nft_txn();
}
inline void TXNWrapper::set_has_nft_txn() {
  _oneof_case_[0] = kNftTxn;
}
inline void TXNWrapper::clear_nft_txn() {
  if (_internal_has_nft_txn()) {
    if (GetArena() == nullptr) {
      delete payload_.nft_txn_;
    }
    clear_has_payload();
  }
}
inline ::zera_txn::NFTTXN* TXNWrapper::release_nft_txn() {
  // @@protoc_insertion_point(field_release:zera_txn.TXNWrapper.nft_txn)
  if (_internal_has_nft_txn()) {
    clear_has_payload();
      ::zera_txn::NFTTXN* temp = payload_.nft_txn_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.nft_txn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zera_txn::NFTTXN& TXNWrapper::_internal_nft_txn() const {
  return _internal_has_nft_txn()
      ? *payload_.nft_txn_
      : *reinterpret_cast< ::zera_txn::NFTTXN*>(&::zera_txn::_NFTTXN_default_instance_);
}
inline const ::zera_txn::NFTTXN& TXNWrapper::nft_txn() const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNWrapper.nft_txn)
  return _internal_nft_txn();
}
inline ::zera_txn::NFTTXN* TXNWrapper::unsafe_arena_release_nft_txn() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.TXNWrapper.nft_txn)
  if (_internal_has_nft_txn()) {
    clear_has_payload();
    ::zera_txn::NFTTXN* temp = payload_.nft_txn_;
    payload_.nft_txn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TXNWrapper::unsafe_arena_set_allocated_nft_txn(::zera_txn::NFTTXN* nft_txn) {
  clear_payload();
  if (nft_txn) {
    set_has_nft_txn();
    payload_.nft_txn_ = nft_txn;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.TXNWrapper.nft_txn)
}
inline ::zera_txn::NFTTXN* TXNWrapper::_internal_mutable_nft_txn() {
  if (!_internal_has_nft_txn()) {
    clear_payload();
    set_has_nft_txn();
    payload_.nft_txn_ = CreateMaybeMessage< ::zera_txn::NFTTXN >(GetArena());
  }
  return payload_.nft_txn_;
}
inline ::zera_txn::NFTTXN* TXNWrapper::mutable_nft_txn() {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNWrapper.nft_txn)
  return _internal_mutable_nft_txn();
}

// .zera_txn.ContractUpdateTXN contract_update_txn = 13;
inline bool TXNWrapper::_internal_has_contract_update_txn() const {
  return payload_case() == kContractUpdateTxn;
}
inline bool TXNWrapper::has_contract_update_txn() const {
  return _internal_has_contract_update_txn();
}
inline void TXNWrapper::set_has_contract_update_txn() {
  _oneof_case_[0] = kContractUpdateTxn;
}
inline void TXNWrapper::clear_contract_update_txn() {
  if (_internal_has_contract_update_txn()) {
    if (GetArena() == nullptr) {
      delete payload_.contract_update_txn_;
    }
    clear_has_payload();
  }
}
inline ::zera_txn::ContractUpdateTXN* TXNWrapper::release_contract_update_txn() {
  // @@protoc_insertion_point(field_release:zera_txn.TXNWrapper.contract_update_txn)
  if (_internal_has_contract_update_txn()) {
    clear_has_payload();
      ::zera_txn::ContractUpdateTXN* temp = payload_.contract_update_txn_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.contract_update_txn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zera_txn::ContractUpdateTXN& TXNWrapper::_internal_contract_update_txn() const {
  return _internal_has_contract_update_txn()
      ? *payload_.contract_update_txn_
      : *reinterpret_cast< ::zera_txn::ContractUpdateTXN*>(&::zera_txn::_ContractUpdateTXN_default_instance_);
}
inline const ::zera_txn::ContractUpdateTXN& TXNWrapper::contract_update_txn() const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNWrapper.contract_update_txn)
  return _internal_contract_update_txn();
}
inline ::zera_txn::ContractUpdateTXN* TXNWrapper::unsafe_arena_release_contract_update_txn() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.TXNWrapper.contract_update_txn)
  if (_internal_has_contract_update_txn()) {
    clear_has_payload();
    ::zera_txn::ContractUpdateTXN* temp = payload_.contract_update_txn_;
    payload_.contract_update_txn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TXNWrapper::unsafe_arena_set_allocated_contract_update_txn(::zera_txn::ContractUpdateTXN* contract_update_txn) {
  clear_payload();
  if (contract_update_txn) {
    set_has_contract_update_txn();
    payload_.contract_update_txn_ = contract_update_txn;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.TXNWrapper.contract_update_txn)
}
inline ::zera_txn::ContractUpdateTXN* TXNWrapper::_internal_mutable_contract_update_txn() {
  if (!_internal_has_contract_update_txn()) {
    clear_payload();
    set_has_contract_update_txn();
    payload_.contract_update_txn_ = CreateMaybeMessage< ::zera_txn::ContractUpdateTXN >(GetArena());
  }
  return payload_.contract_update_txn_;
}
inline ::zera_txn::ContractUpdateTXN* TXNWrapper::mutable_contract_update_txn() {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNWrapper.contract_update_txn)
  return _internal_mutable_contract_update_txn();
}

// .zera_txn.ValidatorRegistration validator_registration_txn = 14;
inline bool TXNWrapper::_internal_has_validator_registration_txn() const {
  return payload_case() == kValidatorRegistrationTxn;
}
inline bool TXNWrapper::has_validator_registration_txn() const {
  return _internal_has_validator_registration_txn();
}
inline void TXNWrapper::set_has_validator_registration_txn() {
  _oneof_case_[0] = kValidatorRegistrationTxn;
}
inline void TXNWrapper::clear_validator_registration_txn() {
  if (_internal_has_validator_registration_txn()) {
    if (GetArena() == nullptr) {
      delete payload_.validator_registration_txn_;
    }
    clear_has_payload();
  }
}
inline ::zera_txn::ValidatorRegistration* TXNWrapper::release_validator_registration_txn() {
  // @@protoc_insertion_point(field_release:zera_txn.TXNWrapper.validator_registration_txn)
  if (_internal_has_validator_registration_txn()) {
    clear_has_payload();
      ::zera_txn::ValidatorRegistration* temp = payload_.validator_registration_txn_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.validator_registration_txn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zera_txn::ValidatorRegistration& TXNWrapper::_internal_validator_registration_txn() const {
  return _internal_has_validator_registration_txn()
      ? *payload_.validator_registration_txn_
      : *reinterpret_cast< ::zera_txn::ValidatorRegistration*>(&::zera_txn::_ValidatorRegistration_default_instance_);
}
inline const ::zera_txn::ValidatorRegistration& TXNWrapper::validator_registration_txn() const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNWrapper.validator_registration_txn)
  return _internal_validator_registration_txn();
}
inline ::zera_txn::ValidatorRegistration* TXNWrapper::unsafe_arena_release_validator_registration_txn() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.TXNWrapper.validator_registration_txn)
  if (_internal_has_validator_registration_txn()) {
    clear_has_payload();
    ::zera_txn::ValidatorRegistration* temp = payload_.validator_registration_txn_;
    payload_.validator_registration_txn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TXNWrapper::unsafe_arena_set_allocated_validator_registration_txn(::zera_txn::ValidatorRegistration* validator_registration_txn) {
  clear_payload();
  if (validator_registration_txn) {
    set_has_validator_registration_txn();
    payload_.validator_registration_txn_ = validator_registration_txn;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.TXNWrapper.validator_registration_txn)
}
inline ::zera_txn::ValidatorRegistration* TXNWrapper::_internal_mutable_validator_registration_txn() {
  if (!_internal_has_validator_registration_txn()) {
    clear_payload();
    set_has_validator_registration_txn();
    payload_.validator_registration_txn_ = CreateMaybeMessage< ::zera_txn::ValidatorRegistration >(GetArena());
  }
  return payload_.validator_registration_txn_;
}
inline ::zera_txn::ValidatorRegistration* TXNWrapper::mutable_validator_registration_txn() {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNWrapper.validator_registration_txn)
  return _internal_mutable_validator_registration_txn();
}

// .zera_txn.ValidatorHeartbeat validator_heartbeat_txn = 15;
inline bool TXNWrapper::_internal_has_validator_heartbeat_txn() const {
  return payload_case() == kValidatorHeartbeatTxn;
}
inline bool TXNWrapper::has_validator_heartbeat_txn() const {
  return _internal_has_validator_heartbeat_txn();
}
inline void TXNWrapper::set_has_validator_heartbeat_txn() {
  _oneof_case_[0] = kValidatorHeartbeatTxn;
}
inline void TXNWrapper::clear_validator_heartbeat_txn() {
  if (_internal_has_validator_heartbeat_txn()) {
    if (GetArena() == nullptr) {
      delete payload_.validator_heartbeat_txn_;
    }
    clear_has_payload();
  }
}
inline ::zera_txn::ValidatorHeartbeat* TXNWrapper::release_validator_heartbeat_txn() {
  // @@protoc_insertion_point(field_release:zera_txn.TXNWrapper.validator_heartbeat_txn)
  if (_internal_has_validator_heartbeat_txn()) {
    clear_has_payload();
      ::zera_txn::ValidatorHeartbeat* temp = payload_.validator_heartbeat_txn_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.validator_heartbeat_txn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zera_txn::ValidatorHeartbeat& TXNWrapper::_internal_validator_heartbeat_txn() const {
  return _internal_has_validator_heartbeat_txn()
      ? *payload_.validator_heartbeat_txn_
      : *reinterpret_cast< ::zera_txn::ValidatorHeartbeat*>(&::zera_txn::_ValidatorHeartbeat_default_instance_);
}
inline const ::zera_txn::ValidatorHeartbeat& TXNWrapper::validator_heartbeat_txn() const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNWrapper.validator_heartbeat_txn)
  return _internal_validator_heartbeat_txn();
}
inline ::zera_txn::ValidatorHeartbeat* TXNWrapper::unsafe_arena_release_validator_heartbeat_txn() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.TXNWrapper.validator_heartbeat_txn)
  if (_internal_has_validator_heartbeat_txn()) {
    clear_has_payload();
    ::zera_txn::ValidatorHeartbeat* temp = payload_.validator_heartbeat_txn_;
    payload_.validator_heartbeat_txn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TXNWrapper::unsafe_arena_set_allocated_validator_heartbeat_txn(::zera_txn::ValidatorHeartbeat* validator_heartbeat_txn) {
  clear_payload();
  if (validator_heartbeat_txn) {
    set_has_validator_heartbeat_txn();
    payload_.validator_heartbeat_txn_ = validator_heartbeat_txn;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.TXNWrapper.validator_heartbeat_txn)
}
inline ::zera_txn::ValidatorHeartbeat* TXNWrapper::_internal_mutable_validator_heartbeat_txn() {
  if (!_internal_has_validator_heartbeat_txn()) {
    clear_payload();
    set_has_validator_heartbeat_txn();
    payload_.validator_heartbeat_txn_ = CreateMaybeMessage< ::zera_txn::ValidatorHeartbeat >(GetArena());
  }
  return payload_.validator_heartbeat_txn_;
}
inline ::zera_txn::ValidatorHeartbeat* TXNWrapper::mutable_validator_heartbeat_txn() {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNWrapper.validator_heartbeat_txn)
  return _internal_mutable_validator_heartbeat_txn();
}

// .zera_txn.FoundationTXN foundation_txn = 16;
inline bool TXNWrapper::_internal_has_foundation_txn() const {
  return payload_case() == kFoundationTxn;
}
inline bool TXNWrapper::has_foundation_txn() const {
  return _internal_has_foundation_txn();
}
inline void TXNWrapper::set_has_foundation_txn() {
  _oneof_case_[0] = kFoundationTxn;
}
inline void TXNWrapper::clear_foundation_txn() {
  if (_internal_has_foundation_txn()) {
    if (GetArena() == nullptr) {
      delete payload_.foundation_txn_;
    }
    clear_has_payload();
  }
}
inline ::zera_txn::FoundationTXN* TXNWrapper::release_foundation_txn() {
  // @@protoc_insertion_point(field_release:zera_txn.TXNWrapper.foundation_txn)
  if (_internal_has_foundation_txn()) {
    clear_has_payload();
      ::zera_txn::FoundationTXN* temp = payload_.foundation_txn_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.foundation_txn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zera_txn::FoundationTXN& TXNWrapper::_internal_foundation_txn() const {
  return _internal_has_foundation_txn()
      ? *payload_.foundation_txn_
      : *reinterpret_cast< ::zera_txn::FoundationTXN*>(&::zera_txn::_FoundationTXN_default_instance_);
}
inline const ::zera_txn::FoundationTXN& TXNWrapper::foundation_txn() const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNWrapper.foundation_txn)
  return _internal_foundation_txn();
}
inline ::zera_txn::FoundationTXN* TXNWrapper::unsafe_arena_release_foundation_txn() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.TXNWrapper.foundation_txn)
  if (_internal_has_foundation_txn()) {
    clear_has_payload();
    ::zera_txn::FoundationTXN* temp = payload_.foundation_txn_;
    payload_.foundation_txn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TXNWrapper::unsafe_arena_set_allocated_foundation_txn(::zera_txn::FoundationTXN* foundation_txn) {
  clear_payload();
  if (foundation_txn) {
    set_has_foundation_txn();
    payload_.foundation_txn_ = foundation_txn;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.TXNWrapper.foundation_txn)
}
inline ::zera_txn::FoundationTXN* TXNWrapper::_internal_mutable_foundation_txn() {
  if (!_internal_has_foundation_txn()) {
    clear_payload();
    set_has_foundation_txn();
    payload_.foundation_txn_ = CreateMaybeMessage< ::zera_txn::FoundationTXN >(GetArena());
  }
  return payload_.foundation_txn_;
}
inline ::zera_txn::FoundationTXN* TXNWrapper::mutable_foundation_txn() {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNWrapper.foundation_txn)
  return _internal_mutable_foundation_txn();
}

// .zera_txn.DelegatedVotingTXN delegated_voting_txn = 17;
inline bool TXNWrapper::_internal_has_delegated_voting_txn() const {
  return payload_case() == kDelegatedVotingTxn;
}
inline bool TXNWrapper::has_delegated_voting_txn() const {
  return _internal_has_delegated_voting_txn();
}
inline void TXNWrapper::set_has_delegated_voting_txn() {
  _oneof_case_[0] = kDelegatedVotingTxn;
}
inline void TXNWrapper::clear_delegated_voting_txn() {
  if (_internal_has_delegated_voting_txn()) {
    if (GetArena() == nullptr) {
      delete payload_.delegated_voting_txn_;
    }
    clear_has_payload();
  }
}
inline ::zera_txn::DelegatedVotingTXN* TXNWrapper::release_delegated_voting_txn() {
  // @@protoc_insertion_point(field_release:zera_txn.TXNWrapper.delegated_voting_txn)
  if (_internal_has_delegated_voting_txn()) {
    clear_has_payload();
      ::zera_txn::DelegatedVotingTXN* temp = payload_.delegated_voting_txn_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.delegated_voting_txn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zera_txn::DelegatedVotingTXN& TXNWrapper::_internal_delegated_voting_txn() const {
  return _internal_has_delegated_voting_txn()
      ? *payload_.delegated_voting_txn_
      : *reinterpret_cast< ::zera_txn::DelegatedVotingTXN*>(&::zera_txn::_DelegatedVotingTXN_default_instance_);
}
inline const ::zera_txn::DelegatedVotingTXN& TXNWrapper::delegated_voting_txn() const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNWrapper.delegated_voting_txn)
  return _internal_delegated_voting_txn();
}
inline ::zera_txn::DelegatedVotingTXN* TXNWrapper::unsafe_arena_release_delegated_voting_txn() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.TXNWrapper.delegated_voting_txn)
  if (_internal_has_delegated_voting_txn()) {
    clear_has_payload();
    ::zera_txn::DelegatedVotingTXN* temp = payload_.delegated_voting_txn_;
    payload_.delegated_voting_txn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TXNWrapper::unsafe_arena_set_allocated_delegated_voting_txn(::zera_txn::DelegatedVotingTXN* delegated_voting_txn) {
  clear_payload();
  if (delegated_voting_txn) {
    set_has_delegated_voting_txn();
    payload_.delegated_voting_txn_ = delegated_voting_txn;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.TXNWrapper.delegated_voting_txn)
}
inline ::zera_txn::DelegatedVotingTXN* TXNWrapper::_internal_mutable_delegated_voting_txn() {
  if (!_internal_has_delegated_voting_txn()) {
    clear_payload();
    set_has_delegated_voting_txn();
    payload_.delegated_voting_txn_ = CreateMaybeMessage< ::zera_txn::DelegatedVotingTXN >(GetArena());
  }
  return payload_.delegated_voting_txn_;
}
inline ::zera_txn::DelegatedVotingTXN* TXNWrapper::mutable_delegated_voting_txn() {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNWrapper.delegated_voting_txn)
  return _internal_mutable_delegated_voting_txn();
}

// .zera_txn.QuashTXN quash_txn = 18;
inline bool TXNWrapper::_internal_has_quash_txn() const {
  return payload_case() == kQuashTxn;
}
inline bool TXNWrapper::has_quash_txn() const {
  return _internal_has_quash_txn();
}
inline void TXNWrapper::set_has_quash_txn() {
  _oneof_case_[0] = kQuashTxn;
}
inline void TXNWrapper::clear_quash_txn() {
  if (_internal_has_quash_txn()) {
    if (GetArena() == nullptr) {
      delete payload_.quash_txn_;
    }
    clear_has_payload();
  }
}
inline ::zera_txn::QuashTXN* TXNWrapper::release_quash_txn() {
  // @@protoc_insertion_point(field_release:zera_txn.TXNWrapper.quash_txn)
  if (_internal_has_quash_txn()) {
    clear_has_payload();
      ::zera_txn::QuashTXN* temp = payload_.quash_txn_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.quash_txn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zera_txn::QuashTXN& TXNWrapper::_internal_quash_txn() const {
  return _internal_has_quash_txn()
      ? *payload_.quash_txn_
      : *reinterpret_cast< ::zera_txn::QuashTXN*>(&::zera_txn::_QuashTXN_default_instance_);
}
inline const ::zera_txn::QuashTXN& TXNWrapper::quash_txn() const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNWrapper.quash_txn)
  return _internal_quash_txn();
}
inline ::zera_txn::QuashTXN* TXNWrapper::unsafe_arena_release_quash_txn() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.TXNWrapper.quash_txn)
  if (_internal_has_quash_txn()) {
    clear_has_payload();
    ::zera_txn::QuashTXN* temp = payload_.quash_txn_;
    payload_.quash_txn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TXNWrapper::unsafe_arena_set_allocated_quash_txn(::zera_txn::QuashTXN* quash_txn) {
  clear_payload();
  if (quash_txn) {
    set_has_quash_txn();
    payload_.quash_txn_ = quash_txn;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.TXNWrapper.quash_txn)
}
inline ::zera_txn::QuashTXN* TXNWrapper::_internal_mutable_quash_txn() {
  if (!_internal_has_quash_txn()) {
    clear_payload();
    set_has_quash_txn();
    payload_.quash_txn_ = CreateMaybeMessage< ::zera_txn::QuashTXN >(GetArena());
  }
  return payload_.quash_txn_;
}
inline ::zera_txn::QuashTXN* TXNWrapper::mutable_quash_txn() {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNWrapper.quash_txn)
  return _internal_mutable_quash_txn();
}

// .zera_txn.FastQuorumTXN fast_quorum_txn = 19;
inline bool TXNWrapper::_internal_has_fast_quorum_txn() const {
  return payload_case() == kFastQuorumTxn;
}
inline bool TXNWrapper::has_fast_quorum_txn() const {
  return _internal_has_fast_quorum_txn();
}
inline void TXNWrapper::set_has_fast_quorum_txn() {
  _oneof_case_[0] = kFastQuorumTxn;
}
inline void TXNWrapper::clear_fast_quorum_txn() {
  if (_internal_has_fast_quorum_txn()) {
    if (GetArena() == nullptr) {
      delete payload_.fast_quorum_txn_;
    }
    clear_has_payload();
  }
}
inline ::zera_txn::FastQuorumTXN* TXNWrapper::release_fast_quorum_txn() {
  // @@protoc_insertion_point(field_release:zera_txn.TXNWrapper.fast_quorum_txn)
  if (_internal_has_fast_quorum_txn()) {
    clear_has_payload();
      ::zera_txn::FastQuorumTXN* temp = payload_.fast_quorum_txn_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.fast_quorum_txn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zera_txn::FastQuorumTXN& TXNWrapper::_internal_fast_quorum_txn() const {
  return _internal_has_fast_quorum_txn()
      ? *payload_.fast_quorum_txn_
      : *reinterpret_cast< ::zera_txn::FastQuorumTXN*>(&::zera_txn::_FastQuorumTXN_default_instance_);
}
inline const ::zera_txn::FastQuorumTXN& TXNWrapper::fast_quorum_txn() const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNWrapper.fast_quorum_txn)
  return _internal_fast_quorum_txn();
}
inline ::zera_txn::FastQuorumTXN* TXNWrapper::unsafe_arena_release_fast_quorum_txn() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.TXNWrapper.fast_quorum_txn)
  if (_internal_has_fast_quorum_txn()) {
    clear_has_payload();
    ::zera_txn::FastQuorumTXN* temp = payload_.fast_quorum_txn_;
    payload_.fast_quorum_txn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TXNWrapper::unsafe_arena_set_allocated_fast_quorum_txn(::zera_txn::FastQuorumTXN* fast_quorum_txn) {
  clear_payload();
  if (fast_quorum_txn) {
    set_has_fast_quorum_txn();
    payload_.fast_quorum_txn_ = fast_quorum_txn;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.TXNWrapper.fast_quorum_txn)
}
inline ::zera_txn::FastQuorumTXN* TXNWrapper::_internal_mutable_fast_quorum_txn() {
  if (!_internal_has_fast_quorum_txn()) {
    clear_payload();
    set_has_fast_quorum_txn();
    payload_.fast_quorum_txn_ = CreateMaybeMessage< ::zera_txn::FastQuorumTXN >(GetArena());
  }
  return payload_.fast_quorum_txn_;
}
inline ::zera_txn::FastQuorumTXN* TXNWrapper::mutable_fast_quorum_txn() {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNWrapper.fast_quorum_txn)
  return _internal_mutable_fast_quorum_txn();
}

// .zera_txn.RevokeTXN revoke_txn = 20;
inline bool TXNWrapper::_internal_has_revoke_txn() const {
  return payload_case() == kRevokeTxn;
}
inline bool TXNWrapper::has_revoke_txn() const {
  return _internal_has_revoke_txn();
}
inline void TXNWrapper::set_has_revoke_txn() {
  _oneof_case_[0] = kRevokeTxn;
}
inline void TXNWrapper::clear_revoke_txn() {
  if (_internal_has_revoke_txn()) {
    if (GetArena() == nullptr) {
      delete payload_.revoke_txn_;
    }
    clear_has_payload();
  }
}
inline ::zera_txn::RevokeTXN* TXNWrapper::release_revoke_txn() {
  // @@protoc_insertion_point(field_release:zera_txn.TXNWrapper.revoke_txn)
  if (_internal_has_revoke_txn()) {
    clear_has_payload();
      ::zera_txn::RevokeTXN* temp = payload_.revoke_txn_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.revoke_txn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zera_txn::RevokeTXN& TXNWrapper::_internal_revoke_txn() const {
  return _internal_has_revoke_txn()
      ? *payload_.revoke_txn_
      : *reinterpret_cast< ::zera_txn::RevokeTXN*>(&::zera_txn::_RevokeTXN_default_instance_);
}
inline const ::zera_txn::RevokeTXN& TXNWrapper::revoke_txn() const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNWrapper.revoke_txn)
  return _internal_revoke_txn();
}
inline ::zera_txn::RevokeTXN* TXNWrapper::unsafe_arena_release_revoke_txn() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.TXNWrapper.revoke_txn)
  if (_internal_has_revoke_txn()) {
    clear_has_payload();
    ::zera_txn::RevokeTXN* temp = payload_.revoke_txn_;
    payload_.revoke_txn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TXNWrapper::unsafe_arena_set_allocated_revoke_txn(::zera_txn::RevokeTXN* revoke_txn) {
  clear_payload();
  if (revoke_txn) {
    set_has_revoke_txn();
    payload_.revoke_txn_ = revoke_txn;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.TXNWrapper.revoke_txn)
}
inline ::zera_txn::RevokeTXN* TXNWrapper::_internal_mutable_revoke_txn() {
  if (!_internal_has_revoke_txn()) {
    clear_payload();
    set_has_revoke_txn();
    payload_.revoke_txn_ = CreateMaybeMessage< ::zera_txn::RevokeTXN >(GetArena());
  }
  return payload_.revoke_txn_;
}
inline ::zera_txn::RevokeTXN* TXNWrapper::mutable_revoke_txn() {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNWrapper.revoke_txn)
  return _internal_mutable_revoke_txn();
}

// .zera_txn.ComplianceTXN compliance_txn = 21;
inline bool TXNWrapper::_internal_has_compliance_txn() const {
  return payload_case() == kComplianceTxn;
}
inline bool TXNWrapper::has_compliance_txn() const {
  return _internal_has_compliance_txn();
}
inline void TXNWrapper::set_has_compliance_txn() {
  _oneof_case_[0] = kComplianceTxn;
}
inline void TXNWrapper::clear_compliance_txn() {
  if (_internal_has_compliance_txn()) {
    if (GetArena() == nullptr) {
      delete payload_.compliance_txn_;
    }
    clear_has_payload();
  }
}
inline ::zera_txn::ComplianceTXN* TXNWrapper::release_compliance_txn() {
  // @@protoc_insertion_point(field_release:zera_txn.TXNWrapper.compliance_txn)
  if (_internal_has_compliance_txn()) {
    clear_has_payload();
      ::zera_txn::ComplianceTXN* temp = payload_.compliance_txn_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.compliance_txn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zera_txn::ComplianceTXN& TXNWrapper::_internal_compliance_txn() const {
  return _internal_has_compliance_txn()
      ? *payload_.compliance_txn_
      : *reinterpret_cast< ::zera_txn::ComplianceTXN*>(&::zera_txn::_ComplianceTXN_default_instance_);
}
inline const ::zera_txn::ComplianceTXN& TXNWrapper::compliance_txn() const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNWrapper.compliance_txn)
  return _internal_compliance_txn();
}
inline ::zera_txn::ComplianceTXN* TXNWrapper::unsafe_arena_release_compliance_txn() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.TXNWrapper.compliance_txn)
  if (_internal_has_compliance_txn()) {
    clear_has_payload();
    ::zera_txn::ComplianceTXN* temp = payload_.compliance_txn_;
    payload_.compliance_txn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TXNWrapper::unsafe_arena_set_allocated_compliance_txn(::zera_txn::ComplianceTXN* compliance_txn) {
  clear_payload();
  if (compliance_txn) {
    set_has_compliance_txn();
    payload_.compliance_txn_ = compliance_txn;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.TXNWrapper.compliance_txn)
}
inline ::zera_txn::ComplianceTXN* TXNWrapper::_internal_mutable_compliance_txn() {
  if (!_internal_has_compliance_txn()) {
    clear_payload();
    set_has_compliance_txn();
    payload_.compliance_txn_ = CreateMaybeMessage< ::zera_txn::ComplianceTXN >(GetArena());
  }
  return payload_.compliance_txn_;
}
inline ::zera_txn::ComplianceTXN* TXNWrapper::mutable_compliance_txn() {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNWrapper.compliance_txn)
  return _internal_mutable_compliance_txn();
}

// bool proposal_result_txn = 22;
inline bool TXNWrapper::_internal_has_proposal_result_txn() const {
  return payload_case() == kProposalResultTxn;
}
inline void TXNWrapper::set_has_proposal_result_txn() {
  _oneof_case_[0] = kProposalResultTxn;
}
inline void TXNWrapper::clear_proposal_result_txn() {
  if (_internal_has_proposal_result_txn()) {
    payload_.proposal_result_txn_ = false;
    clear_has_payload();
  }
}
inline bool TXNWrapper::_internal_proposal_result_txn() const {
  if (_internal_has_proposal_result_txn()) {
    return payload_.proposal_result_txn_;
  }
  return false;
}
inline void TXNWrapper::_internal_set_proposal_result_txn(bool value) {
  if (!_internal_has_proposal_result_txn()) {
    clear_payload();
    set_has_proposal_result_txn();
  }
  payload_.proposal_result_txn_ = value;
}
inline bool TXNWrapper::proposal_result_txn() const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNWrapper.proposal_result_txn)
  return _internal_proposal_result_txn();
}
inline void TXNWrapper::set_proposal_result_txn(bool value) {
  _internal_set_proposal_result_txn(value);
  // @@protoc_insertion_point(field_set:zera_txn.TXNWrapper.proposal_result_txn)
}

// .zera_txn.BurnSBTTXN burn_sbt_txn = 23;
inline bool TXNWrapper::_internal_has_burn_sbt_txn() const {
  return payload_case() == kBurnSbtTxn;
}
inline bool TXNWrapper::has_burn_sbt_txn() const {
  return _internal_has_burn_sbt_txn();
}
inline void TXNWrapper::set_has_burn_sbt_txn() {
  _oneof_case_[0] = kBurnSbtTxn;
}
inline void TXNWrapper::clear_burn_sbt_txn() {
  if (_internal_has_burn_sbt_txn()) {
    if (GetArena() == nullptr) {
      delete payload_.burn_sbt_txn_;
    }
    clear_has_payload();
  }
}
inline ::zera_txn::BurnSBTTXN* TXNWrapper::release_burn_sbt_txn() {
  // @@protoc_insertion_point(field_release:zera_txn.TXNWrapper.burn_sbt_txn)
  if (_internal_has_burn_sbt_txn()) {
    clear_has_payload();
      ::zera_txn::BurnSBTTXN* temp = payload_.burn_sbt_txn_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.burn_sbt_txn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zera_txn::BurnSBTTXN& TXNWrapper::_internal_burn_sbt_txn() const {
  return _internal_has_burn_sbt_txn()
      ? *payload_.burn_sbt_txn_
      : *reinterpret_cast< ::zera_txn::BurnSBTTXN*>(&::zera_txn::_BurnSBTTXN_default_instance_);
}
inline const ::zera_txn::BurnSBTTXN& TXNWrapper::burn_sbt_txn() const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNWrapper.burn_sbt_txn)
  return _internal_burn_sbt_txn();
}
inline ::zera_txn::BurnSBTTXN* TXNWrapper::unsafe_arena_release_burn_sbt_txn() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.TXNWrapper.burn_sbt_txn)
  if (_internal_has_burn_sbt_txn()) {
    clear_has_payload();
    ::zera_txn::BurnSBTTXN* temp = payload_.burn_sbt_txn_;
    payload_.burn_sbt_txn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TXNWrapper::unsafe_arena_set_allocated_burn_sbt_txn(::zera_txn::BurnSBTTXN* burn_sbt_txn) {
  clear_payload();
  if (burn_sbt_txn) {
    set_has_burn_sbt_txn();
    payload_.burn_sbt_txn_ = burn_sbt_txn;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.TXNWrapper.burn_sbt_txn)
}
inline ::zera_txn::BurnSBTTXN* TXNWrapper::_internal_mutable_burn_sbt_txn() {
  if (!_internal_has_burn_sbt_txn()) {
    clear_payload();
    set_has_burn_sbt_txn();
    payload_.burn_sbt_txn_ = CreateMaybeMessage< ::zera_txn::BurnSBTTXN >(GetArena());
  }
  return payload_.burn_sbt_txn_;
}
inline ::zera_txn::BurnSBTTXN* TXNWrapper::mutable_burn_sbt_txn() {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNWrapper.burn_sbt_txn)
  return _internal_mutable_burn_sbt_txn();
}

// .zera_txn.NewCoinTXN new_coin_txn = 24;
inline bool TXNWrapper::_internal_has_new_coin_txn() const {
  return payload_case() == kNewCoinTxn;
}
inline bool TXNWrapper::has_new_coin_txn() const {
  return _internal_has_new_coin_txn();
}
inline void TXNWrapper::set_has_new_coin_txn() {
  _oneof_case_[0] = kNewCoinTxn;
}
inline void TXNWrapper::clear_new_coin_txn() {
  if (_internal_has_new_coin_txn()) {
    if (GetArena() == nullptr) {
      delete payload_.new_coin_txn_;
    }
    clear_has_payload();
  }
}
inline ::zera_txn::NewCoinTXN* TXNWrapper::release_new_coin_txn() {
  // @@protoc_insertion_point(field_release:zera_txn.TXNWrapper.new_coin_txn)
  if (_internal_has_new_coin_txn()) {
    clear_has_payload();
      ::zera_txn::NewCoinTXN* temp = payload_.new_coin_txn_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.new_coin_txn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zera_txn::NewCoinTXN& TXNWrapper::_internal_new_coin_txn() const {
  return _internal_has_new_coin_txn()
      ? *payload_.new_coin_txn_
      : *reinterpret_cast< ::zera_txn::NewCoinTXN*>(&::zera_txn::_NewCoinTXN_default_instance_);
}
inline const ::zera_txn::NewCoinTXN& TXNWrapper::new_coin_txn() const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNWrapper.new_coin_txn)
  return _internal_new_coin_txn();
}
inline ::zera_txn::NewCoinTXN* TXNWrapper::unsafe_arena_release_new_coin_txn() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zera_txn.TXNWrapper.new_coin_txn)
  if (_internal_has_new_coin_txn()) {
    clear_has_payload();
    ::zera_txn::NewCoinTXN* temp = payload_.new_coin_txn_;
    payload_.new_coin_txn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TXNWrapper::unsafe_arena_set_allocated_new_coin_txn(::zera_txn::NewCoinTXN* new_coin_txn) {
  clear_payload();
  if (new_coin_txn) {
    set_has_new_coin_txn();
    payload_.new_coin_txn_ = new_coin_txn;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zera_txn.TXNWrapper.new_coin_txn)
}
inline ::zera_txn::NewCoinTXN* TXNWrapper::_internal_mutable_new_coin_txn() {
  if (!_internal_has_new_coin_txn()) {
    clear_payload();
    set_has_new_coin_txn();
    payload_.new_coin_txn_ = CreateMaybeMessage< ::zera_txn::NewCoinTXN >(GetArena());
  }
  return payload_.new_coin_txn_;
}
inline ::zera_txn::NewCoinTXN* TXNWrapper::mutable_new_coin_txn() {
  // @@protoc_insertion_point(field_mutable:zera_txn.TXNWrapper.new_coin_txn)
  return _internal_mutable_new_coin_txn();
}

// .zera_txn.TRANSACTION_TYPE txn_type = 25;
inline void TXNWrapper::clear_txn_type() {
  txn_type_ = 0;
}
inline ::zera_txn::TRANSACTION_TYPE TXNWrapper::_internal_txn_type() const {
  return static_cast< ::zera_txn::TRANSACTION_TYPE >(txn_type_);
}
inline ::zera_txn::TRANSACTION_TYPE TXNWrapper::txn_type() const {
  // @@protoc_insertion_point(field_get:zera_txn.TXNWrapper.txn_type)
  return _internal_txn_type();
}
inline void TXNWrapper::_internal_set_txn_type(::zera_txn::TRANSACTION_TYPE value) {
  
  txn_type_ = value;
}
inline void TXNWrapper::set_txn_type(::zera_txn::TRANSACTION_TYPE value) {
  _internal_set_txn_type(value);
  // @@protoc_insertion_point(field_set:zera_txn.TXNWrapper.txn_type)
}

inline bool TXNWrapper::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void TXNWrapper::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline TXNWrapper::PayloadCase TXNWrapper::payload_case() const {
  return TXNWrapper::PayloadCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zera_txn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zera_txn::TXN_STATUS> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zera_txn::TXN_STATUS>() {
  return ::zera_txn::TXN_STATUS_descriptor();
}
template <> struct is_proto_enum< ::zera_txn::TRANSACTION_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zera_txn::TRANSACTION_TYPE>() {
  return ::zera_txn::TRANSACTION_TYPE_descriptor();
}
template <> struct is_proto_enum< ::zera_txn::LANGUAGE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zera_txn::LANGUAGE>() {
  return ::zera_txn::LANGUAGE_descriptor();
}
template <> struct is_proto_enum< ::zera_txn::PROPOSAL_PERIOD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zera_txn::PROPOSAL_PERIOD>() {
  return ::zera_txn::PROPOSAL_PERIOD_descriptor();
}
template <> struct is_proto_enum< ::zera_txn::VARIABLE_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zera_txn::VARIABLE_TYPE>() {
  return ::zera_txn::VARIABLE_TYPE_descriptor();
}
template <> struct is_proto_enum< ::zera_txn::CONTRACT_FEE_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zera_txn::CONTRACT_FEE_TYPE>() {
  return ::zera_txn::CONTRACT_FEE_TYPE_descriptor();
}
template <> struct is_proto_enum< ::zera_txn::GOVERNANCE_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zera_txn::GOVERNANCE_TYPE>() {
  return ::zera_txn::GOVERNANCE_TYPE_descriptor();
}
template <> struct is_proto_enum< ::zera_txn::CONTRACT_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zera_txn::CONTRACT_TYPE>() {
  return ::zera_txn::CONTRACT_TYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_txn_2eproto
